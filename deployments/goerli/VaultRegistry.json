{
  "address": "0x43EBC6D7505d0225992445351d2eEAF9B53bC1A2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IProtocolGovernance",
          "name": "protocolGovernance_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IProtocolGovernance",
          "name": "newProtocolGovernance",
          "type": "address"
        }
      ],
      "name": "CommitedProtocolGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IProtocolGovernance",
          "name": "newProtocolGovernance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        }
      ],
      "name": "StagedProtocolGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "TokenLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "VaultRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitStagedProtocolGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractNameBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersionBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "lockNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "nftForVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolGovernance",
      "outputs": [
        {
          "internalType": "contract IProtocolGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "registerVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProtocolGovernance",
          "name": "newProtocolGovernance",
          "type": "address"
        }
      ],
      "name": "stageProtocolGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedProtocolGovernance",
      "outputs": [
        {
          "internalType": "contract IProtocolGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedProtocolGovernanceTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "vaultForNft",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1a18486b54a4540102dde731283b8167a45ba61b68b050a37cf5c5d0a0725f2",
  "receipt": {
    "to": null,
    "from": "0x5f198d6F84C3b8E9CA12530ebbA54C3dB53e847D",
    "contractAddress": "0x43EBC6D7505d0225992445351d2eEAF9B53bC1A2",
    "transactionIndex": 14,
    "gasUsed": "1866563",
    "logsBloom": "0x
    "blockHash": "0xe53b6f03f00e72ac269f4b192fd1c04d99ad779eb429f16fad745e59eb7ce9e4",
    "transactionHash": "0xa1a18486b54a4540102dde731283b8167a45ba61b68b050a37cf5c5d0a0725f2",
    "logs": [],
    "blockNumber": 7850680,
    "cumulativeGasUsed": "3229022",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Mellow Vault Registry",
    "MVR",
    "0xba78C2E8914074A87d32c41c6C49b8a924e60b6D"
  ],
  "solcInputHash": "1984535d51a55304aed3f058b4264cb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IProtocolGovernance\",\"name\":\"newProtocolGovernance\",\"type\":\"address\"}],\"name\":\"CommitedProtocolGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IProtocolGovernance\",\"name\":\"newProtocolGovernance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"StagedProtocolGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"VaultRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitStagedProtocolGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractNameBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersionBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"lockNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"nftForVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolGovernance\",\"outputs\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"registerVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"newProtocolGovernance\",\"type\":\"address\"}],\"name\":\"stageProtocolGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedProtocolGovernance\",\"outputs\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedProtocolGovernanceTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"vaultForNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CommitedProtocolGovernance(address,address,address)\":{\"params\":{\"newProtocolGovernance\":\"Address of the new ProtocolGovernance that has been committed\",\"origin\":\"Origin of the transaction (tx.origin)\",\"sender\":\"Sender of the call (msg.sender)\"}},\"StagedProtocolGovernance(address,address,address,uint256)\":{\"params\":{\"newProtocolGovernance\":\"Address of the new ProtocolGovernance\",\"origin\":\"Origin of the transaction (tx.origin)\",\"sender\":\"Sender of the call (msg.sender)\",\"start\":\"Timestamp of the start of the new ProtocolGovernance\"}},\"TokenLocked(address,address,uint256)\":{\"params\":{\"nft\":\"NFT to be locked\",\"origin\":\"Origin of the transaction (tx.origin)\",\"sender\":\"Sender of the call (msg.sender)\"}},\"VaultRegistered(address,address,uint256,address,address)\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\",\"origin\":\"Origin of the transaction (tx.origin)\",\"owner\":\"Owner of the VaultRegistry NFT\",\"sender\":\"Sender of the call (msg.sender)\",\"vault\":\"Address of the Vault contract\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"name\":\"ERC721 token name\",\"protocolGovernance_\":\"Reference to ProtocolGovernance\",\"symbol\":\"ERC721 token symbol\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isLocked(uint256)\":{\"params\":{\"nft\":\"NFT to check for lock\"},\"returns\":{\"_0\":\"`true` if locked, false otherwise\"}},\"lockNft(uint256)\":{\"details\":\"Use this method when vault structure is set up and should become immutable. Can be called by owner.\",\"params\":{\"nft\":\"- NFT to lock\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nftForVault(address)\":{\"params\":{\"vault\":\"Address of the Vault contract\"},\"returns\":{\"_0\":\"NFT ID\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"registerVault(address,address)\":{\"params\":{\"owner\":\"owner of the NFT\",\"vault\":\"address of the vault\"},\"returns\":{\"nft\":\"Nft minted for the given Vault\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"stageProtocolGovernance(address)\":{\"params\":{\"newProtocolGovernance\":\"new ProtocolGovernance\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"vaultForNft(uint256)\":{\"params\":{\"nftId\":\"NFT ID\"},\"returns\":{\"_0\":\"Address of the Vault contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"TokenLocked(address,address,uint256)\":{\"notice\":\"Emitted when token is locked for transfers\"},\"VaultRegistered(address,address,uint256,address,address)\":{\"notice\":\"Emitted when new Vault is registered in VaultRegistry\"}},\"kind\":\"user\",\"methods\":{\"commitStagedProtocolGovernance()\":{\"notice\":\"Commit new ProtocolGovernance.\"},\"constructor\":{\"notice\":\"Creates a new contract.\"},\"isLocked(uint256)\":{\"notice\":\"Checks if the nft is locked for all transfers\"},\"lockNft(uint256)\":{\"notice\":\"Lock NFT for transfers\"},\"nftForVault(address)\":{\"notice\":\"Get NFT ID for given Vault contract address.\"},\"protocolGovernance()\":{\"notice\":\"Address of the ProtocolGovernance.\"},\"registerVault(address,address)\":{\"notice\":\"Register new Vault and mint NFT.\"},\"stageProtocolGovernance(address)\":{\"notice\":\"Stage new ProtocolGovernance.\"},\"stagedProtocolGovernance()\":{\"notice\":\"Address of the staged ProtocolGovernance.\"},\"stagedProtocolGovernanceTimestamp()\":{\"notice\":\"Minimal timestamp when staged ProtocolGovernance can be applied.\"},\"vaultForNft(uint256)\":{\"notice\":\"Get Vault for the giver NFT ID.\"},\"vaults()\":{\"notice\":\"All Vaults registered.\"},\"vaultsCount()\":{\"notice\":\"Number of Vaults registered.\"}},\"notice\":\"This contract is used to manage ERC721 NFT for all Vaults.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultRegistry.sol\":\"VaultRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c3ef4fb25def71f5f18af554ca938950eb9cf218fda073ed2c69b9203c03455\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1ba5cf152c15dc0c785310feeb61e1f74387fc7bdc2aba5d90733f791606d4bf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x483b106386dd309f168672928252a19f30c30efb4d17d4b8e2b0f587ca784a11\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6052c25b1021f2b0e733fb52ca11948cb2f08cb66076397507243a6e8a8d7776\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/VaultRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./interfaces/IProtocolGovernance.sol\\\";\\r\\nimport \\\"./interfaces/vaults/IVault.sol\\\";\\r\\nimport \\\"./interfaces/IVaultRegistry.sol\\\";\\r\\nimport \\\"./libraries/ExceptionsLibrary.sol\\\";\\r\\nimport \\\"./libraries/PermissionIdsLibrary.sol\\\";\\r\\nimport \\\"./utils/ContractMeta.sol\\\";\\r\\n\\r\\n/// @notice This contract is used to manage ERC721 NFT for all Vaults.\\r\\ncontract VaultRegistry is ContractMeta, IVaultRegistry, ERC721 {\\r\\n    uint256 private _stagedProtocolGovernanceTimestamp;\\r\\n    IProtocolGovernance private _protocolGovernance;\\r\\n    IProtocolGovernance private _stagedProtocolGovernance;\\r\\n\\r\\n    address[] private _vaults;\\r\\n    mapping(address => uint256) private _nftIndex;\\r\\n    mapping(uint256 => address) private _vaultIndex;\\r\\n    mapping(uint256 => bool) private _locks;\\r\\n    uint256 private _topNft = 1;\\r\\n\\r\\n    /// @notice Creates a new contract.\\r\\n    /// @param name ERC721 token name\\r\\n    /// @param symbol ERC721 token symbol\\r\\n    /// @param protocolGovernance_ Reference to ProtocolGovernance\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        IProtocolGovernance protocolGovernance_\\r\\n    ) ERC721(name, symbol) {\\r\\n        _protocolGovernance = protocolGovernance_;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    function vaults() external view returns (address[] memory) {\\r\\n        return _vaults;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function vaultForNft(uint256 nft) external view returns (address) {\\r\\n        return _vaultIndex[nft];\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function nftForVault(address vault) external view returns (uint256) {\\r\\n        return _nftIndex[vault];\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function isLocked(uint256 nft) external view returns (bool) {\\r\\n        return _locks[nft];\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function protocolGovernance() external view returns (IProtocolGovernance) {\\r\\n        return _protocolGovernance;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function stagedProtocolGovernance() external view returns (IProtocolGovernance) {\\r\\n        return _stagedProtocolGovernance;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function stagedProtocolGovernanceTimestamp() external view returns (uint256) {\\r\\n        return _stagedProtocolGovernanceTimestamp;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function vaultsCount() external view returns (uint256) {\\r\\n        return _vaults.length;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId) || type(IVaultRegistry).interfaceId == interfaceId;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function registerVault(address vault, address owner) external returns (uint256 nft) {\\r\\n        require(address(owner) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\r\\n        require(ERC165(vault).supportsInterface(type(IVault).interfaceId), ExceptionsLibrary.INVALID_INTERFACE);\\r\\n        require(\\r\\n            _protocolGovernance.hasPermission(msg.sender, PermissionIdsLibrary.REGISTER_VAULT),\\r\\n            ExceptionsLibrary.FORBIDDEN\\r\\n        );\\r\\n        require(_nftIndex[vault] == 0, ExceptionsLibrary.DUPLICATE);\\r\\n        nft = _topNft;\\r\\n        _vaultIndex[nft] = vault;\\r\\n        _nftIndex[vault] = nft;\\r\\n        _vaults.push(vault);\\r\\n        _topNft += 1;\\r\\n        _safeMint(owner, nft);\\r\\n        emit VaultRegistered(tx.origin, msg.sender, nft, vault, owner);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function stageProtocolGovernance(IProtocolGovernance newProtocolGovernance) external {\\r\\n        require(_isProtocolAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\\r\\n        require(address(newProtocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\r\\n        _stagedProtocolGovernance = newProtocolGovernance;\\r\\n        _stagedProtocolGovernanceTimestamp = (block.timestamp + _protocolGovernance.governanceDelay());\\r\\n        emit StagedProtocolGovernance(tx.origin, msg.sender, newProtocolGovernance, _stagedProtocolGovernanceTimestamp);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultRegistry\\r\\n    function commitStagedProtocolGovernance() external {\\r\\n        require(_isProtocolAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\\r\\n        require(_stagedProtocolGovernanceTimestamp != 0, ExceptionsLibrary.INIT);\\r\\n        require(block.timestamp >= _stagedProtocolGovernanceTimestamp, ExceptionsLibrary.TIMESTAMP);\\r\\n        _protocolGovernance = _stagedProtocolGovernance;\\r\\n        delete _stagedProtocolGovernanceTimestamp;\\r\\n        delete _stagedProtocolGovernance;\\r\\n        emit CommitedProtocolGovernance(tx.origin, msg.sender, _protocolGovernance);\\r\\n    }\\r\\n\\r\\n    function lockNft(uint256 nft) external {\\r\\n        require(ownerOf(nft) == msg.sender, ExceptionsLibrary.FORBIDDEN);\\r\\n        _locks[nft] = true;\\r\\n        emit TokenLocked(tx.origin, msg.sender, nft);\\r\\n    }\\r\\n\\r\\n    // -------------------  INTERNAL, VIEW  -------------------\\r\\n\\r\\n    function _contractName() internal pure override returns (bytes32) {\\r\\n        return bytes32(\\\"VaultRegistry\\\");\\r\\n    }\\r\\n\\r\\n    function _contractVersion() internal pure override returns (bytes32) {\\r\\n        return bytes32(\\\"1.0.0\\\");\\r\\n    }\\r\\n\\r\\n    function _isProtocolAdmin(address sender) internal view returns (bool) {\\r\\n        return _protocolGovernance.isAdmin(sender);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address,\\r\\n        address,\\r\\n        uint256 tokenId\\r\\n    ) internal view override {\\r\\n        require(!_locks[tokenId], ExceptionsLibrary.LOCK);\\r\\n    }\\r\\n\\r\\n    // --------------------------  EVENTS  --------------------------\\r\\n\\r\\n    /// @notice Emitted when token is locked for transfers\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param nft NFT to be locked\\r\\n    event TokenLocked(address indexed origin, address indexed sender, uint256 indexed nft);\\r\\n\\r\\n    /// @notice Emitted when new Vault is registered in VaultRegistry\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param nft VaultRegistry NFT of the vault\\r\\n    /// @param vault Address of the Vault contract\\r\\n    /// @param owner Owner of the VaultRegistry NFT\\r\\n    event VaultRegistered(\\r\\n        address indexed origin,\\r\\n        address indexed sender,\\r\\n        uint256 indexed nft,\\r\\n        address vault,\\r\\n        address owner\\r\\n    );\\r\\n\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param newProtocolGovernance Address of the new ProtocolGovernance\\r\\n    /// @param start Timestamp of the start of the new ProtocolGovernance\\r\\n    event StagedProtocolGovernance(\\r\\n        address indexed origin,\\r\\n        address indexed sender,\\r\\n        IProtocolGovernance newProtocolGovernance,\\r\\n        uint256 start\\r\\n    );\\r\\n\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param newProtocolGovernance Address of the new ProtocolGovernance that has been committed\\r\\n    event CommitedProtocolGovernance(\\r\\n        address indexed origin,\\r\\n        address indexed sender,\\r\\n        IProtocolGovernance newProtocolGovernance\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x8d69404cfe543fb2b3ec30e148dfb56e334e70408464b24a19880713f0ab0729\",\"license\":\"BSL-1.1\"},\"contracts/interfaces/IProtocolGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\r\\nimport \\\"./IUnitPricesGovernance.sol\\\";\\r\\n\\r\\ninterface IProtocolGovernance is IDefaultAccessControl, IUnitPricesGovernance {\\r\\n    /// @notice CommonLibrary protocol params.\\r\\n    /// @param maxTokensPerVault Max different token addresses that could be managed by the vault\\r\\n    /// @param governanceDelay The delay (in secs) that must pass before setting new pending params to commiting them\\r\\n    /// @param protocolTreasury The address that collects protocolFees, if protocolFee is not zero\\r\\n    /// @param forceAllowMask If a permission bit is set in this mask it forces all addresses to have this permission as true\\r\\n    /// @param withdrawLimit Withdraw limit (in unit prices, i.e. usd)\\r\\n    struct Params {\\r\\n        uint256 maxTokensPerVault;\\r\\n        uint256 governanceDelay;\\r\\n        address protocolTreasury;\\r\\n        uint256 forceAllowMask;\\r\\n        uint256 withdrawLimit;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\r\\n    /// @param target The given address\\r\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\r\\n    function stagedPermissionGrantsTimestamps(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Staged granted permission bitmask for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Bitmask\\r\\n    function stagedPermissionGrantsMasks(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Permission bitmask for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Bitmask\\r\\n    function permissionMasks(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp after which staged pending protocol parameters can be committed\\r\\n    /// @return Zero if there are no staged parameters, timestamp otherwise.\\r\\n    function stagedParamsTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Staged pending protocol parameters.\\r\\n    function stagedParams() external view returns (Params memory);\\r\\n\\r\\n    /// @notice Current protocol parameters.\\r\\n    function params() external view returns (Params memory);\\r\\n\\r\\n    /// @notice Addresses for which non-zero permissions are set.\\r\\n    function permissionAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Permission addresses staged for commit.\\r\\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Return all addresses where rawPermissionMask bit for permissionId is set to 1.\\r\\n    /// @param permissionId Id of the permission to check.\\r\\n    /// @return A list of dirty addresses.\\r\\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Checks if address has permission or given permission is force allowed for any address.\\r\\n    /// @param addr Address to check\\r\\n    /// @param permissionId Permission to check\\r\\n    function hasPermission(address addr, uint8 permissionId) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if address has all permissions.\\r\\n    /// @param target Address to check\\r\\n    /// @param permissionIds A list of permissions to check\\r\\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool);\\r\\n\\r\\n    /// @notice Max different ERC20 token addresses that could be managed by the protocol.\\r\\n    function maxTokensPerVault() external view returns (uint256);\\r\\n\\r\\n    /// @notice The delay for committing any governance params.\\r\\n    function governanceDelay() external view returns (uint256);\\r\\n\\r\\n    /// @notice The address of the protocol treasury.\\r\\n    function protocolTreasury() external view returns (address);\\r\\n\\r\\n    /// @notice Permissions mask which defines if ordinary permission should be reverted.\\r\\n    /// This bitmask is xored with ordinary mask.\\r\\n    function forceAllowMask() external view returns (uint256);\\r\\n\\r\\n    /// @notice Withdraw limit per token per block.\\r\\n    /// @param token Address of the token\\r\\n    /// @return Withdraw limit per token per block\\r\\n    function withdrawLimit(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Addresses that has staged validators.\\r\\n    function stagedValidatorsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\r\\n    /// @param target The given address\\r\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\r\\n    function stagedValidatorsTimestamps(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Staged validator for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Validator\\r\\n    function stagedValidators(address target) external view returns (address);\\r\\n\\r\\n    /// @notice Addresses that has validators.\\r\\n    function validatorsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Address that has validators.\\r\\n    /// @param i The number of address\\r\\n    /// @return Validator address\\r\\n    function validatorsAddress(uint256 i) external view returns (address);\\r\\n\\r\\n    /// @notice Validator for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Validator\\r\\n    function validators(address target) external view returns (address);\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, IMMEDIATE  -------------------\\r\\n\\r\\n    /// @notice Rollback all staged validators.\\r\\n    function rollbackStagedValidators() external;\\r\\n\\r\\n    /// @notice Revoke validator instantly from the given address.\\r\\n    /// @param target The given address\\r\\n    function revokeValidator(address target) external;\\r\\n\\r\\n    /// @notice Stages a new validator for the given address\\r\\n    /// @param target The given address\\r\\n    /// @param validator The validator for the given address\\r\\n    function stageValidator(address target, address validator) external;\\r\\n\\r\\n    /// @notice Commits validator for the given address.\\r\\n    /// @dev Reverts if governance delay has not passed yet.\\r\\n    /// @param target The given address.\\r\\n    function commitValidator(address target) external;\\r\\n\\r\\n    /// @notice Commites all staged validators for which governance delay passed\\r\\n    /// @return Addresses for which validators were committed\\r\\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory);\\r\\n\\r\\n    /// @notice Rollback all staged granted permission grant.\\r\\n    function rollbackStagedPermissionGrants() external;\\r\\n\\r\\n    /// @notice Commits permission grants for the given address.\\r\\n    /// @dev Reverts if governance delay has not passed yet.\\r\\n    /// @param target The given address.\\r\\n    function commitPermissionGrants(address target) external;\\r\\n\\r\\n    /// @notice Commites all staged permission grants for which governance delay passed.\\r\\n    /// @return An array of addresses for which permission grants were committed.\\r\\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory);\\r\\n\\r\\n    /// @notice Revoke permission instantly from the given address.\\r\\n    /// @param target The given address.\\r\\n    /// @param permissionIds A list of permission ids to revoke.\\r\\n    function revokePermissions(address target, uint8[] memory permissionIds) external;\\r\\n\\r\\n    /// @notice Commits staged protocol params.\\r\\n    /// Reverts if governance delay has not passed yet.\\r\\n    function commitParams() external;\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, DELAY  -------------------\\r\\n\\r\\n    /// @notice Sets new pending params that could have been committed after governance delay expires.\\r\\n    /// @param newParams New protocol parameters to set.\\r\\n    function stageParams(Params memory newParams) external;\\r\\n\\r\\n    /// @notice Stage granted permissions that could have been committed after governance delay expires.\\r\\n    /// Resets commit delay and permissions if there are already staged permissions for this address.\\r\\n    /// @param target Target address\\r\\n    /// @param permissionIds A list of permission ids to grant\\r\\n    function stagePermissionGrants(address target, uint8[] memory permissionIds) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xda6b37c257d780a870b289b4e44badc6afb7f2301f500a440c4c020abedd98e6\",\"license\":\"MIT\"},\"contracts/interfaces/IUnitPricesGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\r\\n\\r\\ninterface IUnitPricesGovernance is IDefaultAccessControl, IERC165 {\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @notice Estimated amount of token worth 1 USD staged for commit.\\r\\n    /// @param token Address of the token\\r\\n    /// @return The amount of token\\r\\n    function stagedUnitPrices(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp after which staged unit prices for the given token can be committed.\\r\\n    /// @param token Address of the token\\r\\n    /// @return Timestamp\\r\\n    function stagedUnitPricesTimestamps(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Estimated amount of token worth 1 USD.\\r\\n    /// @param token Address of the token\\r\\n    /// @return The amount of token\\r\\n    function unitPrices(address token) external view returns (uint256);\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// @notice Stage estimated amount of token worth 1 USD staged for commit.\\r\\n    /// @param token Address of the token\\r\\n    /// @param value The amount of token\\r\\n    function stageUnitPrice(address token, uint256 value) external;\\r\\n\\r\\n    /// @notice Reset staged value\\r\\n    /// @param token Address of the token\\r\\n    function rollbackUnitPrice(address token) external;\\r\\n\\r\\n    /// @notice Commit staged unit price\\r\\n    /// @param token Address of the token\\r\\n    function commitUnitPrice(address token) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x300050e0de7d02134592f130cdb90752dc8fcea6cab2e58eb9dafd3a7e3f4e5f\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"./IProtocolGovernance.sol\\\";\\r\\n\\r\\ninterface IVaultRegistry is IERC721 {\\r\\n    /// @notice Get Vault for the giver NFT ID.\\r\\n    /// @param nftId NFT ID\\r\\n    /// @return vault Address of the Vault contract\\r\\n    function vaultForNft(uint256 nftId) external view returns (address vault);\\r\\n\\r\\n    /// @notice Get NFT ID for given Vault contract address.\\r\\n    /// @param vault Address of the Vault contract\\r\\n    /// @return nftId NFT ID\\r\\n    function nftForVault(address vault) external view returns (uint256 nftId);\\r\\n\\r\\n    /// @notice Checks if the nft is locked for all transfers\\r\\n    /// @param nft NFT to check for lock\\r\\n    /// @return `true` if locked, false otherwise\\r\\n    function isLocked(uint256 nft) external view returns (bool);\\r\\n\\r\\n    /// @notice Register new Vault and mint NFT.\\r\\n    /// @param vault address of the vault\\r\\n    /// @param owner owner of the NFT\\r\\n    /// @return nft Nft minted for the given Vault\\r\\n    function registerVault(address vault, address owner) external returns (uint256 nft);\\r\\n\\r\\n    /// @notice Number of Vaults registered.\\r\\n    function vaultsCount() external view returns (uint256);\\r\\n\\r\\n    /// @notice All Vaults registered.\\r\\n    function vaults() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Address of the ProtocolGovernance.\\r\\n    function protocolGovernance() external view returns (IProtocolGovernance);\\r\\n\\r\\n    /// @notice Address of the staged ProtocolGovernance.\\r\\n    function stagedProtocolGovernance() external view returns (IProtocolGovernance);\\r\\n\\r\\n    /// @notice Minimal timestamp when staged ProtocolGovernance can be applied.\\r\\n    function stagedProtocolGovernanceTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Stage new ProtocolGovernance.\\r\\n    /// @param newProtocolGovernance new ProtocolGovernance\\r\\n    function stageProtocolGovernance(IProtocolGovernance newProtocolGovernance) external;\\r\\n\\r\\n    /// @notice Commit new ProtocolGovernance.\\r\\n    function commitStagedProtocolGovernance() external;\\r\\n\\r\\n    /// @notice Lock NFT for transfers\\r\\n    /// @dev Use this method when vault structure is set up and should become immutable. Can be called by owner.\\r\\n    /// @param nft - NFT to lock\\r\\n    function lockNft(uint256 nft) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x66ba86bbbe472a039ab45b556eb235c9ed64ea0d43de4f22fdf64b9b41e3f4ca\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IContractMeta.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IContractMeta {\\r\\n    function contractName() external view returns (string memory);\\r\\n    function contractNameBytes() external view returns (bytes32);\\r\\n\\r\\n    function contractVersion() external view returns (string memory);\\r\\n    function contractVersionBytes() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xbd6c446f9fdba85395482085b699f37ed905970019b47233b3ba35b9162f9f79\",\"license\":\"BSL-1.1\"},\"contracts/interfaces/utils/IDefaultAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\r\\n\\r\\ninterface IDefaultAccessControl is IAccessControlEnumerable {\\r\\n    /// @notice Checks that the address is contract admin.\\r\\n    /// @param who Address to check\\r\\n    /// @return `true` if who is admin, `false` otherwise\\r\\n    function isAdmin(address who) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks that the address is contract admin.\\r\\n    /// @param who Address to check\\r\\n    /// @return `true` if who is operator, `false` otherwise\\r\\n    function isOperator(address who) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x847c664c3e293a19109ec872e341f254a86c6f93548cea827f4e8a485cf994cd\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IVaultGovernance.sol\\\";\\r\\n\\r\\ninterface IVault is IERC165 {\\r\\n    /// @notice Checks if the vault is initialized\\r\\n\\r\\n    function initialized() external view returns (bool);\\r\\n\\r\\n    /// @notice VaultRegistry NFT for this vault\\r\\n    function nft() external view returns (uint256);\\r\\n\\r\\n    /// @notice Address of the Vault Governance for this contract.\\r\\n    function vaultGovernance() external view returns (IVaultGovernance);\\r\\n\\r\\n    /// @notice ERC20 tokens under Vault management.\\r\\n    function vaultTokens() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Checks if a token is vault token\\r\\n    /// @param token Address of the token to check\\r\\n    /// @return `true` if this token is managed by Vault\\r\\n    function isVaultToken(address token) external view returns (bool);\\r\\n\\r\\n    /// @notice Total value locked for this contract.\\r\\n    /// @dev Generally it is the underlying token value of this contract in some\\r\\n    /// other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract.\\r\\n    /// The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\\r\\n    /// @return minTokenAmounts Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\\r\\n    /// @return maxTokenAmounts Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\\r\\n    function tvl() external view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\\r\\n\\r\\n    /// @notice Existential amounts for each token\\r\\n    function pullExistentials() external view returns (uint256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x9e74850f8f3ecd6eab0f6b1adaad960c443b14c128007a77260d2bb6bcb686d5\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IVaultGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../IProtocolGovernance.sol\\\";\\r\\nimport \\\"../IVaultRegistry.sol\\\";\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\ninterface IVaultGovernance {\\r\\n    /// @notice Internal references of the contract.\\r\\n    /// @param protocolGovernance Reference to Protocol Governance\\r\\n    /// @param registry Reference to Vault Registry\\r\\n    struct InternalParams {\\r\\n        IProtocolGovernance protocolGovernance;\\r\\n        IVaultRegistry registry;\\r\\n        IVault singleton;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Strategy Params could be committed.\\r\\n    /// @param nft Nft of the vault\\r\\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params could be committed.\\r\\n    function delayedProtocolParamsTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params Per Vault could be committed.\\r\\n    /// @param nft Nft of the vault\\r\\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp in unix time seconds after which staged Internal Params could be committed.\\r\\n    function internalParamsTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Internal Params of the contract.\\r\\n    function internalParams() external view returns (InternalParams memory);\\r\\n\\r\\n    /// @notice Staged new Internal Params.\\r\\n    /// @dev The Internal Params could be committed after internalParamsTimestamp\\r\\n    function stagedInternalParams() external view returns (InternalParams memory);\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// @notice Stage new Internal Params.\\r\\n    /// @param newParams New Internal Params\\r\\n    function stageInternalParams(InternalParams memory newParams) external;\\r\\n\\r\\n    /// @notice Commit staged Internal Params.\\r\\n    function commitInternalParams() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa5b24cd080393cb094d7887bbdc04fb4361fde90280e8bf9856428b6b6ebd90d\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/// @notice Exceptions stores project`s smart-contracts exceptions\\r\\nlibrary ExceptionsLibrary {\\r\\n    string constant ADDRESS_ZERO = \\\"AZ\\\";\\r\\n    string constant VALUE_ZERO = \\\"VZ\\\";\\r\\n    string constant EMPTY_LIST = \\\"EMPL\\\";\\r\\n    string constant NOT_FOUND = \\\"NF\\\";\\r\\n    string constant INIT = \\\"INIT\\\";\\r\\n    string constant DUPLICATE = \\\"DUP\\\";\\r\\n    string constant NULL = \\\"NULL\\\";\\r\\n    string constant TIMESTAMP = \\\"TS\\\";\\r\\n    string constant FORBIDDEN = \\\"FRB\\\";\\r\\n    string constant ALLOWLIST = \\\"ALL\\\";\\r\\n    string constant LIMIT_OVERFLOW = \\\"LIMO\\\";\\r\\n    string constant LIMIT_UNDERFLOW = \\\"LIMU\\\";\\r\\n    string constant INVALID_VALUE = \\\"INV\\\";\\r\\n    string constant INVARIANT = \\\"INVA\\\";\\r\\n    string constant INVALID_TARGET = \\\"INVTR\\\";\\r\\n    string constant INVALID_TOKEN = \\\"INVTO\\\";\\r\\n    string constant INVALID_INTERFACE = \\\"INVI\\\";\\r\\n    string constant INVALID_SELECTOR = \\\"INVS\\\";\\r\\n    string constant INVALID_STATE = \\\"INVST\\\";\\r\\n    string constant INVALID_LENGTH = \\\"INVL\\\";\\r\\n    string constant LOCK = \\\"LCKD\\\";\\r\\n    string constant DISABLED = \\\"DIS\\\";\\r\\n    string constant REBALANCE_NOT_NEEDED = \\\"RNN\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x3aa0aa636063dcdbf6742b1b0b51ae15df3ba0f225c5c4178ee23e91bfc15060\",\"license\":\"MIT\"},\"contracts/libraries/PermissionIdsLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/// @notice Stores permission ids for addresses\\r\\nlibrary PermissionIdsLibrary {\\r\\n    // The msg.sender is allowed to register vault\\r\\n    uint8 constant REGISTER_VAULT = 0;\\r\\n    // The msg.sender is allowed to create vaults\\r\\n    uint8 constant CREATE_VAULT = 1;\\r\\n    // The token is allowed to be transfered by vault\\r\\n    uint8 constant ERC20_TRANSFER = 2;\\r\\n    // The token is allowed to be added to vault\\r\\n    uint8 constant ERC20_VAULT_TOKEN = 3;\\r\\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by any strategy\\r\\n    uint8 constant ERC20_APPROVE = 4;\\r\\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by trusted strategy\\r\\n    uint8 constant ERC20_APPROVE_RESTRICTED = 5;\\r\\n    // Strategy allowed using restricted API\\r\\n    uint8 constant TRUSTED_STRATEGY = 6;\\r\\n}\\r\\n\",\"keccak256\":\"0x8f78667de19682976b7b5f2f13eac15d2344a0387164e819895d363e19c6058c\",\"license\":\"MIT\"},\"contracts/utils/ContractMeta.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/utils/IContractMeta.sol\\\";\\r\\n\\r\\nabstract contract ContractMeta is IContractMeta {\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    function contractName() external pure returns (string memory) {\\r\\n        return _bytes32ToString(_contractName());\\r\\n    }\\r\\n\\r\\n    function contractNameBytes() external pure returns (bytes32) {\\r\\n        return _contractName();\\r\\n    }\\r\\n\\r\\n    function contractVersion() external pure returns (string memory) {\\r\\n        return _bytes32ToString(_contractVersion());\\r\\n    }\\r\\n\\r\\n    function contractVersionBytes() external pure returns (bytes32) {\\r\\n        return _contractVersion();\\r\\n    }\\r\\n\\r\\n    // -------------------  INTERNAL, VIEW  -------------------\\r\\n\\r\\n    function _contractName() internal pure virtual returns (bytes32);\\r\\n\\r\\n    function _contractVersion() internal pure virtual returns (bytes32);\\r\\n\\r\\n    function _bytes32ToString(bytes32 b) internal pure returns (string memory s) {\\r\\n        s = new string(32);\\r\\n        uint256 len = 32;\\r\\n        for (uint256 i = 0; i < 32; ++i) {\\r\\n            if (uint8(b[i]) == 0) {\\r\\n                len = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        assembly {\\r\\n            mstore(s, len)\\r\\n            mstore(add(s, 0x20), b)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x96ae6af81765fd2464bbf1c6afe6dc1149b4736651b3cc60ffb2bc6e58b6b204\",\"license\":\"BSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040526001600d553480156200001657600080fd5b50604051620021d3380380620021d3833981016040819052620000399162000208565b8251839083906200005290600090602085019062000095565b5080516200006890600190602084019062000095565b5050600780546001600160a01b0319166001600160a01b03939093169290921790915550620002d2915050565b828054620000a39062000295565b90600052602060002090601f016020900481019282620000c7576000855562000112565b82601f10620000e257805160ff191683800117855562000112565b8280016001018555821562000112579182015b8281111562000112578251825591602001919060010190620000f5565b506200012092915062000124565b5090565b5b8082111562000120576000815560010162000125565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200016357600080fd5b81516001600160401b03808211156200018057620001806200013b565b604051601f8301601f19908116603f01168101908282118183101715620001ab57620001ab6200013b565b81604052838152602092508683858801011115620001c857600080fd5b600091505b83821015620001ec5785820183015181830184015290820190620001cd565b83821115620001fe5760008385830101525b9695505050505050565b6000806000606084860312156200021e57600080fd5b83516001600160401b03808211156200023657600080fd5b620002448783880162000151565b945060208601519150808211156200025b57600080fd5b506200026a8682870162000151565b604086015190935090506001600160a01b03811681146200028a57600080fd5b809150509250925092565b600181811c90821680620002aa57607f821691505b60208210811415620002cc57634e487b7160e01b600052602260045260246000fd5b50919050565b611ef180620002e26000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a08231116101045780639c94d853116100a2578063c87b56dd11610071578063c87b56dd146103be578063e985e9c5146103d1578063f6aacfb11461040d578063fcdabd271461043057600080fd5b80639c94d85314610367578063a0a8e46014610390578063a22cb46514610398578063b88d4fde146103ab57600080fd5b806382e9f71f116100de57806382e9f71f1461033e578063889777381461034f57806395cdb9a51461035757806395d89b411461035f57600080fd5b806370a082311461030e57806375d0c0dc146103215780638220ef5b1461032957600080fd5b80630e3e80ac1161017157806342842e0e1161014b57806342842e0e146102c45780634dcbc739146102d75780635227ce4c146102ea5780636352211e146102fb57600080fd5b80630e3e80ac1461028857806323b872dd1461029e5780633be0539c146102b157600080fd5b806306a46239116101ad57806306a462391461022757806306fdde0314610235578063081812fc1461024a578063095ea7b31461027557600080fd5b806301ffc9a7146101d45780630407ca13146101fc57806305c4fdf914610206575b600080fd5b6101e76101e2366004611972565b610459565b60405190151581526020015b60405180910390f35b610204610485565b005b6102196102143660046119a4565b6105b6565b6040519081526020016101f3565b640312e302e360dc1b610219565b61023d6108bb565b6040516101f39190611a35565b61025d610258366004611a48565b61094d565b6040516001600160a01b0390911681526020016101f3565b610204610283366004611a61565b6109e2565b6c5661756c74526567697374727960981b610219565b6102046102ac366004611a8d565b610af8565b6102046102bf366004611ace565b610b29565b6102046102d2366004611a8d565b610c9c565b6102046102e5366004611a48565b610cb7565b6007546001600160a01b031661025d565b61025d610309366004611a48565b610d4d565b61021961031c366004611ace565b610dc4565b61023d610e4b565b610331610e66565b6040516101f39190611aeb565b6008546001600160a01b031661025d565b600954610219565b600654610219565b61023d610ec7565b61025d610375366004611a48565b6000908152600b60205260409020546001600160a01b031690565b61023d610ed6565b6102046103a6366004611b46565b610ee9565b6102046103b9366004611b8a565b610ef8565b61023d6103cc366004611a48565b610f30565b6101e76103df3660046119a4565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101e761041b366004611a48565b6000908152600c602052604090205460ff1690565b61021961043e366004611ace565b6001600160a01b03166000908152600a602052604090205490565b600061046482611018565b8061047f575063aeb8111f60e01b6001600160e01b03198316145b92915050565b61048e33611068565b6040518060400160405280600381526020016223292160e91b815250906104d15760405162461bcd60e51b81526004016104c89190611a35565b60405180910390fd5b506006546040805180820190915260048152631253925560e21b60208201529061050e5760405162461bcd60e51b81526004016104c89190611a35565b5060065442101560405180604001604052806002815260200161545360f01b8152509061054e5760405162461bcd60e51b81526004016104c89190611a35565b5060088054600780546001600160a01b0383166001600160a01b031991821681179092556000600655909116909155604051908152339032907f4028a967f323e2e5c0f132491efcd9aab74518c58755d2902f68e15bddf7f0b99060200160405180910390a3565b60408051808201909152600281526120ad60f11b60208201526000906001600160a01b0383166105f95760405162461bcd60e51b81526004016104c89190611a35565b506040516301ffc9a760e01b815263305a640b60e21b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561064057600080fd5b505afa158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190611c6a565b60405180604001604052806004815260200163494e564960e01b815250906106b35760405162461bcd60e51b81526004016104c89190611a35565b506007546040516363e85d2d60e01b8152336004820152600060248201526001600160a01b03909116906363e85d2d9060440160206040518083038186803b1580156106fe57600080fd5b505afa158015610712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107369190611c6a565b6040518060400160405280600381526020016223292160e91b815250906107705760405162461bcd60e51b81526004016104c89190611a35565b506001600160a01b0383166000908152600a6020908152604091829020548251808401909352600383526204455560ec1b91830191909152156107c65760405162461bcd60e51b81526004016104c89190611a35565b5050600d80546000818152600b6020908152604080832080546001600160a01b0389166001600160a01b03199182168117909255818552600a90935290832084905560098054600181810183559185527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018054909316909117909155835492939092909190610857908490611c9d565b90915550610867905082826110e6565b604080516001600160a01b038581168252841660208201528291339132917f2e7d565a40aae7fc212bb3ec8f236059403cc2a1687d17b98dfef745b5ff4eda910160405180910390a492915050565b905090565b6060600080546108ca90611cb5565b80601f01602080910402602001604051908101604052809291908181526020018280546108f690611cb5565b80156109435780601f1061091857610100808354040283529160200191610943565b820191906000526020600020905b81548152906001019060200180831161092657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166109c65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104c8565b506000908152600460205260409020546001600160a01b031690565b60006109ed82610d4d565b9050806001600160a01b0316836001600160a01b03161415610a5b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104c8565b336001600160a01b0382161480610a775750610a7781336103df565b610ae95760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104c8565b610af38383611100565b505050565b610b02338261116e565b610b1e5760405162461bcd60e51b81526004016104c890611cf0565b610af3838383611265565b610b3233611068565b6040518060400160405280600381526020016223292160e91b81525090610b6c5760405162461bcd60e51b81526004016104c89190611a35565b5060408051808201909152600281526120ad60f11b60208201526001600160a01b038216610bad5760405162461bcd60e51b81526004016104c89190611a35565b50600880546001600160a01b0319166001600160a01b03838116919091179091556007546040805163bba3293960e01b81529051919092169163bba32939916004808301926020929190829003018186803b158015610c0b57600080fd5b505afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190611d41565b610c4d9042611c9d565b6006819055604080516001600160a01b03841681526020810192909252339132917f3a13629a2c6c5c36580157266cf38218a43645aaa8e24dde67543ed62063879b910160405180910390a350565b610af383838360405180602001604052806000815250610ef8565b33610cc182610d4d565b6001600160a01b0316146040518060400160405280600381526020016223292160e91b81525090610d055760405162461bcd60e51b81526004016104c89190611a35565b506000818152600c6020526040808220805460ff19166001179055518291339132917f991b8e8a2e2b8ff515f7045174eeb52eb4868e69c5bb4259da6146a93c77574d91a450565b6000818152600260205260408120546001600160a01b03168061047f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104c8565b60006001600160a01b038216610e2f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104c8565b506001600160a01b031660009081526003602052604090205490565b60606108b66c5661756c74526567697374727960981b611410565b6060600980548060200260200160405190810160405280929190818152602001828054801561094357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ea0575050505050905090565b6060600180546108ca90611cb5565b60606108b6640312e302e360dc1b611410565b610ef433838361147c565b5050565b610f02338361116e565b610f1e5760405162461bcd60e51b81526004016104c890611cf0565b610f2a8484848461154b565b50505050565b6000818152600260205260409020546060906001600160a01b0316610faf5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104c8565b6000610fc660408051602081019091526000815290565b90506000815111610fe65760405180602001604052806000815250611011565b80610ff08461157e565b604051602001611001929190611d5a565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b148061104957506001600160e01b03198216635b5e139f60e01b145b8061047f57506301ffc9a760e01b6001600160e01b031983161461047f565b600754604051630935e01b60e21b81526001600160a01b03838116600483015260009216906324d7806c9060240160206040518083038186803b1580156110ae57600080fd5b505afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190611c6a565b610ef482826040518060200160405280600081525061167c565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061113582610d4d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166111e75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104c8565b60006111f283610d4d565b9050806001600160a01b0316846001600160a01b0316148061122d5750836001600160a01b03166112228461094d565b6001600160a01b0316145b8061125d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661127882610d4d565b6001600160a01b0316146112e05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104c8565b6001600160a01b0382166113425760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104c8565b61134d8383836116af565b611358600082611100565b6001600160a01b0383166000908152600360205260408120805460019290611381908490611d89565b90915550506001600160a01b03821660009081526003602052604081208054600192906113af908490611c9d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516020808252818301909252606091602082018180368337019050509050602060005b602081101561146e5783816020811061145157611451611da0565b1a61145e5780915061146e565b61146781611db6565b9050611436565b508152602081019190915290565b816001600160a01b0316836001600160a01b031614156114de5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104c8565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611556848484611265565b611562848484846116fe565b610f2a5760405162461bcd60e51b81526004016104c890611dd1565b6060816115a25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156115cc57806115b681611db6565b91506115c59050600a83611e39565b91506115a6565b60008167ffffffffffffffff8111156115e7576115e7611b74565b6040519080825280601f01601f191660200182016040528015611611576020820181803683370190505b5090505b841561125d57611626600183611d89565b9150611633600a86611e4d565b61163e906030611c9d565b60f81b81838151811061165357611653611da0565b60200101906001600160f81b031916908160001a905350611675600a86611e39565b9450611615565b611686838361180b565b61169360008484846116fe565b610af35760405162461bcd60e51b81526004016104c890611dd1565b6000818152600c602090815260409182902054825180840190935260048352631310d2d160e21b9183019190915260ff1615610f2a5760405162461bcd60e51b81526004016104c89190611a35565b60006001600160a01b0384163b1561180057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611742903390899088908890600401611e61565b602060405180830381600087803b15801561175c57600080fd5b505af192505050801561178c575060408051601f3d908101601f1916820190925261178991810190611e9e565b60015b6117e6573d8080156117ba576040519150601f19603f3d011682016040523d82523d6000602084013e6117bf565b606091505b5080516117de5760405162461bcd60e51b81526004016104c890611dd1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061125d565b506001949350505050565b6001600160a01b0382166118615760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104c8565b6000818152600260205260409020546001600160a01b0316156118c65760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104c8565b6118d2600083836116af565b6001600160a01b03821660009081526003602052604081208054600192906118fb908490611c9d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461196f57600080fd5b50565b60006020828403121561198457600080fd5b813561101181611959565b6001600160a01b038116811461196f57600080fd5b600080604083850312156119b757600080fd5b82356119c28161198f565b915060208301356119d28161198f565b809150509250929050565b60005b838110156119f85781810151838201526020016119e0565b83811115610f2a5750506000910152565b60008151808452611a218160208601602086016119dd565b601f01601f19169290920160200192915050565b6020815260006110116020830184611a09565b600060208284031215611a5a57600080fd5b5035919050565b60008060408385031215611a7457600080fd5b8235611a7f8161198f565b946020939093013593505050565b600080600060608486031215611aa257600080fd5b8335611aad8161198f565b92506020840135611abd8161198f565b929592945050506040919091013590565b600060208284031215611ae057600080fd5b81356110118161198f565b6020808252825182820181905260009190848201906040850190845b81811015611b2c5783516001600160a01b031683529284019291840191600101611b07565b50909695505050505050565b801515811461196f57600080fd5b60008060408385031215611b5957600080fd5b8235611b648161198f565b915060208301356119d281611b38565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611ba057600080fd5b8435611bab8161198f565b93506020850135611bbb8161198f565b925060408501359150606085013567ffffffffffffffff80821115611bdf57600080fd5b818701915087601f830112611bf357600080fd5b813581811115611c0557611c05611b74565b604051601f8201601f19908116603f01168101908382118183101715611c2d57611c2d611b74565b816040528281528a6020848701011115611c4657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600060208284031215611c7c57600080fd5b815161101181611b38565b634e487b7160e01b600052601160045260246000fd5b60008219821115611cb057611cb0611c87565b500190565b600181811c90821680611cc957607f821691505b60208210811415611cea57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600060208284031215611d5357600080fd5b5051919050565b60008351611d6c8184602088016119dd565b835190830190611d808183602088016119dd565b01949350505050565b600082821015611d9b57611d9b611c87565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611dca57611dca611c87565b5060010190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082611e4857611e48611e23565b500490565b600082611e5c57611e5c611e23565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e9490830184611a09565b9695505050505050565b600060208284031215611eb057600080fd5b81516110118161195956fea264697066735822122051c6be0d304be4fb92fbaa3e2f971f20d9dd8c84abc54c3b0cf5fb1437421d9964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a08231116101045780639c94d853116100a2578063c87b56dd11610071578063c87b56dd146103be578063e985e9c5146103d1578063f6aacfb11461040d578063fcdabd271461043057600080fd5b80639c94d85314610367578063a0a8e46014610390578063a22cb46514610398578063b88d4fde146103ab57600080fd5b806382e9f71f116100de57806382e9f71f1461033e578063889777381461034f57806395cdb9a51461035757806395d89b411461035f57600080fd5b806370a082311461030e57806375d0c0dc146103215780638220ef5b1461032957600080fd5b80630e3e80ac1161017157806342842e0e1161014b57806342842e0e146102c45780634dcbc739146102d75780635227ce4c146102ea5780636352211e146102fb57600080fd5b80630e3e80ac1461028857806323b872dd1461029e5780633be0539c146102b157600080fd5b806306a46239116101ad57806306a462391461022757806306fdde0314610235578063081812fc1461024a578063095ea7b31461027557600080fd5b806301ffc9a7146101d45780630407ca13146101fc57806305c4fdf914610206575b600080fd5b6101e76101e2366004611972565b610459565b60405190151581526020015b60405180910390f35b610204610485565b005b6102196102143660046119a4565b6105b6565b6040519081526020016101f3565b640312e302e360dc1b610219565b61023d6108bb565b6040516101f39190611a35565b61025d610258366004611a48565b61094d565b6040516001600160a01b0390911681526020016101f3565b610204610283366004611a61565b6109e2565b6c5661756c74526567697374727960981b610219565b6102046102ac366004611a8d565b610af8565b6102046102bf366004611ace565b610b29565b6102046102d2366004611a8d565b610c9c565b6102046102e5366004611a48565b610cb7565b6007546001600160a01b031661025d565b61025d610309366004611a48565b610d4d565b61021961031c366004611ace565b610dc4565b61023d610e4b565b610331610e66565b6040516101f39190611aeb565b6008546001600160a01b031661025d565b600954610219565b600654610219565b61023d610ec7565b61025d610375366004611a48565b6000908152600b60205260409020546001600160a01b031690565b61023d610ed6565b6102046103a6366004611b46565b610ee9565b6102046103b9366004611b8a565b610ef8565b61023d6103cc366004611a48565b610f30565b6101e76103df3660046119a4565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101e761041b366004611a48565b6000908152600c602052604090205460ff1690565b61021961043e366004611ace565b6001600160a01b03166000908152600a602052604090205490565b600061046482611018565b8061047f575063aeb8111f60e01b6001600160e01b03198316145b92915050565b61048e33611068565b6040518060400160405280600381526020016223292160e91b815250906104d15760405162461bcd60e51b81526004016104c89190611a35565b60405180910390fd5b506006546040805180820190915260048152631253925560e21b60208201529061050e5760405162461bcd60e51b81526004016104c89190611a35565b5060065442101560405180604001604052806002815260200161545360f01b8152509061054e5760405162461bcd60e51b81526004016104c89190611a35565b5060088054600780546001600160a01b0383166001600160a01b031991821681179092556000600655909116909155604051908152339032907f4028a967f323e2e5c0f132491efcd9aab74518c58755d2902f68e15bddf7f0b99060200160405180910390a3565b60408051808201909152600281526120ad60f11b60208201526000906001600160a01b0383166105f95760405162461bcd60e51b81526004016104c89190611a35565b506040516301ffc9a760e01b815263305a640b60e21b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b15801561064057600080fd5b505afa158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190611c6a565b60405180604001604052806004815260200163494e564960e01b815250906106b35760405162461bcd60e51b81526004016104c89190611a35565b506007546040516363e85d2d60e01b8152336004820152600060248201526001600160a01b03909116906363e85d2d9060440160206040518083038186803b1580156106fe57600080fd5b505afa158015610712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107369190611c6a565b6040518060400160405280600381526020016223292160e91b815250906107705760405162461bcd60e51b81526004016104c89190611a35565b506001600160a01b0383166000908152600a6020908152604091829020548251808401909352600383526204455560ec1b91830191909152156107c65760405162461bcd60e51b81526004016104c89190611a35565b5050600d80546000818152600b6020908152604080832080546001600160a01b0389166001600160a01b03199182168117909255818552600a90935290832084905560098054600181810183559185527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018054909316909117909155835492939092909190610857908490611c9d565b90915550610867905082826110e6565b604080516001600160a01b038581168252841660208201528291339132917f2e7d565a40aae7fc212bb3ec8f236059403cc2a1687d17b98dfef745b5ff4eda910160405180910390a492915050565b905090565b6060600080546108ca90611cb5565b80601f01602080910402602001604051908101604052809291908181526020018280546108f690611cb5565b80156109435780601f1061091857610100808354040283529160200191610943565b820191906000526020600020905b81548152906001019060200180831161092657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166109c65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104c8565b506000908152600460205260409020546001600160a01b031690565b60006109ed82610d4d565b9050806001600160a01b0316836001600160a01b03161415610a5b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104c8565b336001600160a01b0382161480610a775750610a7781336103df565b610ae95760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104c8565b610af38383611100565b505050565b610b02338261116e565b610b1e5760405162461bcd60e51b81526004016104c890611cf0565b610af3838383611265565b610b3233611068565b6040518060400160405280600381526020016223292160e91b81525090610b6c5760405162461bcd60e51b81526004016104c89190611a35565b5060408051808201909152600281526120ad60f11b60208201526001600160a01b038216610bad5760405162461bcd60e51b81526004016104c89190611a35565b50600880546001600160a01b0319166001600160a01b03838116919091179091556007546040805163bba3293960e01b81529051919092169163bba32939916004808301926020929190829003018186803b158015610c0b57600080fd5b505afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190611d41565b610c4d9042611c9d565b6006819055604080516001600160a01b03841681526020810192909252339132917f3a13629a2c6c5c36580157266cf38218a43645aaa8e24dde67543ed62063879b910160405180910390a350565b610af383838360405180602001604052806000815250610ef8565b33610cc182610d4d565b6001600160a01b0316146040518060400160405280600381526020016223292160e91b81525090610d055760405162461bcd60e51b81526004016104c89190611a35565b506000818152600c6020526040808220805460ff19166001179055518291339132917f991b8e8a2e2b8ff515f7045174eeb52eb4868e69c5bb4259da6146a93c77574d91a450565b6000818152600260205260408120546001600160a01b03168061047f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104c8565b60006001600160a01b038216610e2f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104c8565b506001600160a01b031660009081526003602052604090205490565b60606108b66c5661756c74526567697374727960981b611410565b6060600980548060200260200160405190810160405280929190818152602001828054801561094357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ea0575050505050905090565b6060600180546108ca90611cb5565b60606108b6640312e302e360dc1b611410565b610ef433838361147c565b5050565b610f02338361116e565b610f1e5760405162461bcd60e51b81526004016104c890611cf0565b610f2a8484848461154b565b50505050565b6000818152600260205260409020546060906001600160a01b0316610faf5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104c8565b6000610fc660408051602081019091526000815290565b90506000815111610fe65760405180602001604052806000815250611011565b80610ff08461157e565b604051602001611001929190611d5a565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b148061104957506001600160e01b03198216635b5e139f60e01b145b8061047f57506301ffc9a760e01b6001600160e01b031983161461047f565b600754604051630935e01b60e21b81526001600160a01b03838116600483015260009216906324d7806c9060240160206040518083038186803b1580156110ae57600080fd5b505afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190611c6a565b610ef482826040518060200160405280600081525061167c565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061113582610d4d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166111e75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104c8565b60006111f283610d4d565b9050806001600160a01b0316846001600160a01b0316148061122d5750836001600160a01b03166112228461094d565b6001600160a01b0316145b8061125d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661127882610d4d565b6001600160a01b0316146112e05760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104c8565b6001600160a01b0382166113425760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104c8565b61134d8383836116af565b611358600082611100565b6001600160a01b0383166000908152600360205260408120805460019290611381908490611d89565b90915550506001600160a01b03821660009081526003602052604081208054600192906113af908490611c9d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516020808252818301909252606091602082018180368337019050509050602060005b602081101561146e5783816020811061145157611451611da0565b1a61145e5780915061146e565b61146781611db6565b9050611436565b508152602081019190915290565b816001600160a01b0316836001600160a01b031614156114de5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104c8565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611556848484611265565b611562848484846116fe565b610f2a5760405162461bcd60e51b81526004016104c890611dd1565b6060816115a25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156115cc57806115b681611db6565b91506115c59050600a83611e39565b91506115a6565b60008167ffffffffffffffff8111156115e7576115e7611b74565b6040519080825280601f01601f191660200182016040528015611611576020820181803683370190505b5090505b841561125d57611626600183611d89565b9150611633600a86611e4d565b61163e906030611c9d565b60f81b81838151811061165357611653611da0565b60200101906001600160f81b031916908160001a905350611675600a86611e39565b9450611615565b611686838361180b565b61169360008484846116fe565b610af35760405162461bcd60e51b81526004016104c890611dd1565b6000818152600c602090815260409182902054825180840190935260048352631310d2d160e21b9183019190915260ff1615610f2a5760405162461bcd60e51b81526004016104c89190611a35565b60006001600160a01b0384163b1561180057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611742903390899088908890600401611e61565b602060405180830381600087803b15801561175c57600080fd5b505af192505050801561178c575060408051601f3d908101601f1916820190925261178991810190611e9e565b60015b6117e6573d8080156117ba576040519150601f19603f3d011682016040523d82523d6000602084013e6117bf565b606091505b5080516117de5760405162461bcd60e51b81526004016104c890611dd1565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061125d565b506001949350505050565b6001600160a01b0382166118615760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104c8565b6000818152600260205260409020546001600160a01b0316156118c65760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104c8565b6118d2600083836116af565b6001600160a01b03821660009081526003602052604081208054600192906118fb908490611c9d565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461196f57600080fd5b50565b60006020828403121561198457600080fd5b813561101181611959565b6001600160a01b038116811461196f57600080fd5b600080604083850312156119b757600080fd5b82356119c28161198f565b915060208301356119d28161198f565b809150509250929050565b60005b838110156119f85781810151838201526020016119e0565b83811115610f2a5750506000910152565b60008151808452611a218160208601602086016119dd565b601f01601f19169290920160200192915050565b6020815260006110116020830184611a09565b600060208284031215611a5a57600080fd5b5035919050565b60008060408385031215611a7457600080fd5b8235611a7f8161198f565b946020939093013593505050565b600080600060608486031215611aa257600080fd5b8335611aad8161198f565b92506020840135611abd8161198f565b929592945050506040919091013590565b600060208284031215611ae057600080fd5b81356110118161198f565b6020808252825182820181905260009190848201906040850190845b81811015611b2c5783516001600160a01b031683529284019291840191600101611b07565b50909695505050505050565b801515811461196f57600080fd5b60008060408385031215611b5957600080fd5b8235611b648161198f565b915060208301356119d281611b38565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611ba057600080fd5b8435611bab8161198f565b93506020850135611bbb8161198f565b925060408501359150606085013567ffffffffffffffff80821115611bdf57600080fd5b818701915087601f830112611bf357600080fd5b813581811115611c0557611c05611b74565b604051601f8201601f19908116603f01168101908382118183101715611c2d57611c2d611b74565b816040528281528a6020848701011115611c4657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600060208284031215611c7c57600080fd5b815161101181611b38565b634e487b7160e01b600052601160045260246000fd5b60008219821115611cb057611cb0611c87565b500190565b600181811c90821680611cc957607f821691505b60208210811415611cea57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600060208284031215611d5357600080fd5b5051919050565b60008351611d6c8184602088016119dd565b835190830190611d808183602088016119dd565b01949350505050565b600082821015611d9b57611d9b611c87565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611dca57611dca611c87565b5060010190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082611e4857611e48611e23565b500490565b600082611e5c57611e5c611e23565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e9490830184611a09565b9695505050505050565b600060208284031215611eb057600080fd5b81516110118161195956fea264697066735822122051c6be0d304be4fb92fbaa3e2f971f20d9dd8c84abc54c3b0cf5fb1437421d9964736f6c63430008090033",
  "devdoc": {
    "events": {
      "CommitedProtocolGovernance(address,address,address)": {
        "params": {
          "newProtocolGovernance": "Address of the new ProtocolGovernance that has been committed",
          "origin": "Origin of the transaction (tx.origin)",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "StagedProtocolGovernance(address,address,address,uint256)": {
        "params": {
          "newProtocolGovernance": "Address of the new ProtocolGovernance",
          "origin": "Origin of the transaction (tx.origin)",
          "sender": "Sender of the call (msg.sender)",
          "start": "Timestamp of the start of the new ProtocolGovernance"
        }
      },
      "TokenLocked(address,address,uint256)": {
        "params": {
          "nft": "NFT to be locked",
          "origin": "Origin of the transaction (tx.origin)",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "VaultRegistered(address,address,uint256,address,address)": {
        "params": {
          "nft": "VaultRegistry NFT of the vault",
          "origin": "Origin of the transaction (tx.origin)",
          "owner": "Owner of the VaultRegistry NFT",
          "sender": "Sender of the call (msg.sender)",
          "vault": "Address of the Vault contract"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "name": "ERC721 token name",
          "protocolGovernance_": "Reference to ProtocolGovernance",
          "symbol": "ERC721 token symbol"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isLocked(uint256)": {
        "params": {
          "nft": "NFT to check for lock"
        },
        "returns": {
          "_0": "`true` if locked, false otherwise"
        }
      },
      "lockNft(uint256)": {
        "details": "Use this method when vault structure is set up and should become immutable. Can be called by owner.",
        "params": {
          "nft": "- NFT to lock"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nftForVault(address)": {
        "params": {
          "vault": "Address of the Vault contract"
        },
        "returns": {
          "_0": "NFT ID"
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "registerVault(address,address)": {
        "params": {
          "owner": "owner of the NFT",
          "vault": "address of the vault"
        },
        "returns": {
          "nft": "Nft minted for the given Vault"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "stageProtocolGovernance(address)": {
        "params": {
          "newProtocolGovernance": "new ProtocolGovernance"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "vaultForNft(uint256)": {
        "params": {
          "nftId": "NFT ID"
        },
        "returns": {
          "_0": "Address of the Vault contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TokenLocked(address,address,uint256)": {
        "notice": "Emitted when token is locked for transfers"
      },
      "VaultRegistered(address,address,uint256,address,address)": {
        "notice": "Emitted when new Vault is registered in VaultRegistry"
      }
    },
    "kind": "user",
    "methods": {
      "commitStagedProtocolGovernance()": {
        "notice": "Commit new ProtocolGovernance."
      },
      "constructor": {
        "notice": "Creates a new contract."
      },
      "isLocked(uint256)": {
        "notice": "Checks if the nft is locked for all transfers"
      },
      "lockNft(uint256)": {
        "notice": "Lock NFT for transfers"
      },
      "nftForVault(address)": {
        "notice": "Get NFT ID for given Vault contract address."
      },
      "protocolGovernance()": {
        "notice": "Address of the ProtocolGovernance."
      },
      "registerVault(address,address)": {
        "notice": "Register new Vault and mint NFT."
      },
      "stageProtocolGovernance(address)": {
        "notice": "Stage new ProtocolGovernance."
      },
      "stagedProtocolGovernance()": {
        "notice": "Address of the staged ProtocolGovernance."
      },
      "stagedProtocolGovernanceTimestamp()": {
        "notice": "Minimal timestamp when staged ProtocolGovernance can be applied."
      },
      "vaultForNft(uint256)": {
        "notice": "Get Vault for the giver NFT ID."
      },
      "vaults()": {
        "notice": "All Vaults registered."
      },
      "vaultsCount()": {
        "notice": "Number of Vaults registered."
      }
    },
    "notice": "This contract is used to manage ERC721 NFT for all Vaults.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1873,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1875,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1879,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1883,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1887,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1893,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10251,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_stagedProtocolGovernanceTimestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10254,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_protocolGovernance",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IProtocolGovernance)11058"
      },
      {
        "astId": 10257,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_stagedProtocolGovernance",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IProtocolGovernance)11058"
      },
      {
        "astId": 10260,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_vaults",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10264,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_nftIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10268,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_vaultIndex",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10272,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_locks",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10275,
        "contract": "contracts/VaultRegistry.sol:VaultRegistry",
        "label": "_topNft",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IProtocolGovernance)11058": {
        "encoding": "inplace",
        "label": "contract IProtocolGovernance",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}