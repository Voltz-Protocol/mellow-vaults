{
  "address": "0x50231ED5091B5E68e3c9eeE93264F3F9A9Cf1BF4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IProtocolGovernance",
          "name": "protocolGovernance_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IBaseValidator.ValidatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "CommittedValidatorParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IBaseValidator.ValidatorParams",
          "name": "newParams",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "StagedValidatorParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "commitValidatorParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractNameBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersionBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            }
          ],
          "internalType": "struct IBaseValidator.ValidatorParams",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "stageValidatorParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedValidatorParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            }
          ],
          "internalType": "struct IBaseValidator.ValidatorParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedValidatorParamsTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "validate",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            }
          ],
          "internalType": "struct IBaseValidator.ValidatorParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x86ea07839c1189935209e7c268246a474539d371bf3a73a8a8cb9fcf0106d774",
  "receipt": {
    "to": null,
    "from": "0x5f198d6F84C3b8E9CA12530ebbA54C3dB53e847D",
    "contractAddress": "0x50231ED5091B5E68e3c9eeE93264F3F9A9Cf1BF4",
    "transactionIndex": 39,
    "gasUsed": "542626",
    "logsBloom": "0x
    "blockHash": "0x1dcdf9aa3c3520ea182042d1dd991397f66fd8b4feaffc76413f86670e60f728",
    "transactionHash": "0x86ea07839c1189935209e7c268246a474539d371bf3a73a8a8cb9fcf0106d774",
    "logs": [],
    "blockNumber": 7850682,
    "cumulativeGasUsed": "4319530",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xba78C2E8914074A87d32c41c6C49b8a924e60b6D"
  ],
  "solcInputHash": "1984535d51a55304aed3f058b4264cb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IBaseValidator.ValidatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"CommittedValidatorParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IBaseValidator.ValidatorParams\",\"name\":\"newParams\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"StagedValidatorParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"commitValidatorParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractNameBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersionBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"}],\"internalType\":\"struct IBaseValidator.ValidatorParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"stageValidatorParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedValidatorParams\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"}],\"internalType\":\"struct IBaseValidator.ValidatorParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedValidatorParamsTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"validate\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorParams\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"}],\"internalType\":\"struct IBaseValidator.ValidatorParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"stageValidatorParams((address))\":{\"params\":{\"newParams\":\"Params to stage\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CommittedValidatorParams(address,address,(address))\":{\"notice\":\"Emitted when new params are staged for commit\"},\"StagedValidatorParams(address,address,(address),uint256)\":{\"notice\":\"Emitted when new params are staged for commit\"}},\"kind\":\"user\",\"methods\":{\"commitValidatorParams()\":{\"notice\":\"Commits staged params\"},\"stageValidatorParams((address))\":{\"notice\":\"Stages params that could have been committed after governance delay expires.\"},\"stagedValidatorParams()\":{\"notice\":\"Validator params staged to commit.\"},\"stagedValidatorParamsTimestamp()\":{\"notice\":\"Timestamp after which validator params can be committed.\"},\"validatorParams()\":{\"notice\":\"Current validator params.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/validators/AllowAllValidator.sol\":\"AllowAllValidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c3ef4fb25def71f5f18af554ca938950eb9cf218fda073ed2c69b9203c03455\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\r\\nimport \\\"./IUnitPricesGovernance.sol\\\";\\r\\n\\r\\ninterface IProtocolGovernance is IDefaultAccessControl, IUnitPricesGovernance {\\r\\n    /// @notice CommonLibrary protocol params.\\r\\n    /// @param maxTokensPerVault Max different token addresses that could be managed by the vault\\r\\n    /// @param governanceDelay The delay (in secs) that must pass before setting new pending params to commiting them\\r\\n    /// @param protocolTreasury The address that collects protocolFees, if protocolFee is not zero\\r\\n    /// @param forceAllowMask If a permission bit is set in this mask it forces all addresses to have this permission as true\\r\\n    /// @param withdrawLimit Withdraw limit (in unit prices, i.e. usd)\\r\\n    struct Params {\\r\\n        uint256 maxTokensPerVault;\\r\\n        uint256 governanceDelay;\\r\\n        address protocolTreasury;\\r\\n        uint256 forceAllowMask;\\r\\n        uint256 withdrawLimit;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\r\\n    /// @param target The given address\\r\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\r\\n    function stagedPermissionGrantsTimestamps(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Staged granted permission bitmask for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Bitmask\\r\\n    function stagedPermissionGrantsMasks(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Permission bitmask for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Bitmask\\r\\n    function permissionMasks(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp after which staged pending protocol parameters can be committed\\r\\n    /// @return Zero if there are no staged parameters, timestamp otherwise.\\r\\n    function stagedParamsTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Staged pending protocol parameters.\\r\\n    function stagedParams() external view returns (Params memory);\\r\\n\\r\\n    /// @notice Current protocol parameters.\\r\\n    function params() external view returns (Params memory);\\r\\n\\r\\n    /// @notice Addresses for which non-zero permissions are set.\\r\\n    function permissionAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Permission addresses staged for commit.\\r\\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Return all addresses where rawPermissionMask bit for permissionId is set to 1.\\r\\n    /// @param permissionId Id of the permission to check.\\r\\n    /// @return A list of dirty addresses.\\r\\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Checks if address has permission or given permission is force allowed for any address.\\r\\n    /// @param addr Address to check\\r\\n    /// @param permissionId Permission to check\\r\\n    function hasPermission(address addr, uint8 permissionId) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if address has all permissions.\\r\\n    /// @param target Address to check\\r\\n    /// @param permissionIds A list of permissions to check\\r\\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool);\\r\\n\\r\\n    /// @notice Max different ERC20 token addresses that could be managed by the protocol.\\r\\n    function maxTokensPerVault() external view returns (uint256);\\r\\n\\r\\n    /// @notice The delay for committing any governance params.\\r\\n    function governanceDelay() external view returns (uint256);\\r\\n\\r\\n    /// @notice The address of the protocol treasury.\\r\\n    function protocolTreasury() external view returns (address);\\r\\n\\r\\n    /// @notice Permissions mask which defines if ordinary permission should be reverted.\\r\\n    /// This bitmask is xored with ordinary mask.\\r\\n    function forceAllowMask() external view returns (uint256);\\r\\n\\r\\n    /// @notice Withdraw limit per token per block.\\r\\n    /// @param token Address of the token\\r\\n    /// @return Withdraw limit per token per block\\r\\n    function withdrawLimit(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Addresses that has staged validators.\\r\\n    function stagedValidatorsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\r\\n    /// @param target The given address\\r\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\r\\n    function stagedValidatorsTimestamps(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Staged validator for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Validator\\r\\n    function stagedValidators(address target) external view returns (address);\\r\\n\\r\\n    /// @notice Addresses that has validators.\\r\\n    function validatorsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Address that has validators.\\r\\n    /// @param i The number of address\\r\\n    /// @return Validator address\\r\\n    function validatorsAddress(uint256 i) external view returns (address);\\r\\n\\r\\n    /// @notice Validator for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Validator\\r\\n    function validators(address target) external view returns (address);\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, IMMEDIATE  -------------------\\r\\n\\r\\n    /// @notice Rollback all staged validators.\\r\\n    function rollbackStagedValidators() external;\\r\\n\\r\\n    /// @notice Revoke validator instantly from the given address.\\r\\n    /// @param target The given address\\r\\n    function revokeValidator(address target) external;\\r\\n\\r\\n    /// @notice Stages a new validator for the given address\\r\\n    /// @param target The given address\\r\\n    /// @param validator The validator for the given address\\r\\n    function stageValidator(address target, address validator) external;\\r\\n\\r\\n    /// @notice Commits validator for the given address.\\r\\n    /// @dev Reverts if governance delay has not passed yet.\\r\\n    /// @param target The given address.\\r\\n    function commitValidator(address target) external;\\r\\n\\r\\n    /// @notice Commites all staged validators for which governance delay passed\\r\\n    /// @return Addresses for which validators were committed\\r\\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory);\\r\\n\\r\\n    /// @notice Rollback all staged granted permission grant.\\r\\n    function rollbackStagedPermissionGrants() external;\\r\\n\\r\\n    /// @notice Commits permission grants for the given address.\\r\\n    /// @dev Reverts if governance delay has not passed yet.\\r\\n    /// @param target The given address.\\r\\n    function commitPermissionGrants(address target) external;\\r\\n\\r\\n    /// @notice Commites all staged permission grants for which governance delay passed.\\r\\n    /// @return An array of addresses for which permission grants were committed.\\r\\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory);\\r\\n\\r\\n    /// @notice Revoke permission instantly from the given address.\\r\\n    /// @param target The given address.\\r\\n    /// @param permissionIds A list of permission ids to revoke.\\r\\n    function revokePermissions(address target, uint8[] memory permissionIds) external;\\r\\n\\r\\n    /// @notice Commits staged protocol params.\\r\\n    /// Reverts if governance delay has not passed yet.\\r\\n    function commitParams() external;\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, DELAY  -------------------\\r\\n\\r\\n    /// @notice Sets new pending params that could have been committed after governance delay expires.\\r\\n    /// @param newParams New protocol parameters to set.\\r\\n    function stageParams(Params memory newParams) external;\\r\\n\\r\\n    /// @notice Stage granted permissions that could have been committed after governance delay expires.\\r\\n    /// Resets commit delay and permissions if there are already staged permissions for this address.\\r\\n    /// @param target Target address\\r\\n    /// @param permissionIds A list of permission ids to grant\\r\\n    function stagePermissionGrants(address target, uint8[] memory permissionIds) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xda6b37c257d780a870b289b4e44badc6afb7f2301f500a440c4c020abedd98e6\",\"license\":\"MIT\"},\"contracts/interfaces/IUnitPricesGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\r\\n\\r\\ninterface IUnitPricesGovernance is IDefaultAccessControl, IERC165 {\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @notice Estimated amount of token worth 1 USD staged for commit.\\r\\n    /// @param token Address of the token\\r\\n    /// @return The amount of token\\r\\n    function stagedUnitPrices(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp after which staged unit prices for the given token can be committed.\\r\\n    /// @param token Address of the token\\r\\n    /// @return Timestamp\\r\\n    function stagedUnitPricesTimestamps(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Estimated amount of token worth 1 USD.\\r\\n    /// @param token Address of the token\\r\\n    /// @return The amount of token\\r\\n    function unitPrices(address token) external view returns (uint256);\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// @notice Stage estimated amount of token worth 1 USD staged for commit.\\r\\n    /// @param token Address of the token\\r\\n    /// @param value The amount of token\\r\\n    function stageUnitPrice(address token, uint256 value) external;\\r\\n\\r\\n    /// @notice Reset staged value\\r\\n    /// @param token Address of the token\\r\\n    function rollbackUnitPrice(address token) external;\\r\\n\\r\\n    /// @notice Commit staged unit price\\r\\n    /// @param token Address of the token\\r\\n    function commitUnitPrice(address token) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x300050e0de7d02134592f130cdb90752dc8fcea6cab2e58eb9dafd3a7e3f4e5f\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IContractMeta.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IContractMeta {\\r\\n    function contractName() external view returns (string memory);\\r\\n    function contractNameBytes() external view returns (bytes32);\\r\\n\\r\\n    function contractVersion() external view returns (string memory);\\r\\n    function contractVersionBytes() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xbd6c446f9fdba85395482085b699f37ed905970019b47233b3ba35b9162f9f79\",\"license\":\"BSL-1.1\"},\"contracts/interfaces/utils/IDefaultAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\r\\n\\r\\ninterface IDefaultAccessControl is IAccessControlEnumerable {\\r\\n    /// @notice Checks that the address is contract admin.\\r\\n    /// @param who Address to check\\r\\n    /// @return `true` if who is admin, `false` otherwise\\r\\n    function isAdmin(address who) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks that the address is contract admin.\\r\\n    /// @param who Address to check\\r\\n    /// @return `true` if who is operator, `false` otherwise\\r\\n    function isOperator(address who) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x847c664c3e293a19109ec872e341f254a86c6f93548cea827f4e8a485cf994cd\",\"license\":\"MIT\"},\"contracts/interfaces/validators/IBaseValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../IProtocolGovernance.sol\\\";\\r\\n\\r\\ninterface IBaseValidator {\\r\\n    /// @notice Validator parameters\\r\\n    /// @param protocolGovernance Reference to Protocol Governance\\r\\n    struct ValidatorParams {\\r\\n        IProtocolGovernance protocolGovernance;\\r\\n    }\\r\\n\\r\\n    /// @notice Validator params staged to commit.\\r\\n    function stagedValidatorParams() external view returns (ValidatorParams memory);\\r\\n\\r\\n    /// @notice Timestamp after which validator params can be committed.\\r\\n    function stagedValidatorParamsTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Current validator params.\\r\\n    function validatorParams() external view returns (ValidatorParams memory);\\r\\n\\r\\n    /// @notice Stage new validator params for commit.\\r\\n    /// @param newParams New params for commit\\r\\n    function stageValidatorParams(ValidatorParams calldata newParams) external;\\r\\n\\r\\n    /// @notice Commit new validator params.\\r\\n    function commitValidatorParams() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3c5c93a6b5e383587fd11a091c5f891ba1eda593b2e35880016dc5f734f0c121\",\"license\":\"MIT\"},\"contracts/interfaces/validators/IValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"./IBaseValidator.sol\\\";\\r\\n\\r\\ninterface IValidator is IBaseValidator, IERC165 {\\r\\n    // @notice Validate if call can be made to external contract.\\r\\n    // @dev Reverts if validation failed. Returns nothing if validation is ok\\r\\n    // @param sender Sender of the externalCall method\\r\\n    // @param addr Address of the called contract\\r\\n    // @param value Ether value for the call\\r\\n    // @param selector Selector of the called method\\r\\n    // @param data Call data after selector\\r\\n    function validate(\\r\\n        address sender,\\r\\n        address addr,\\r\\n        uint256 value,\\r\\n        bytes4 selector,\\r\\n        bytes calldata data\\r\\n    ) external view;\\r\\n}\\r\\n\",\"keccak256\":\"0x2bc705f6fb23806084be636f44bba29376e1c4cf244676c7333a54357d29929e\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/// @notice Exceptions stores project`s smart-contracts exceptions\\r\\nlibrary ExceptionsLibrary {\\r\\n    string constant ADDRESS_ZERO = \\\"AZ\\\";\\r\\n    string constant VALUE_ZERO = \\\"VZ\\\";\\r\\n    string constant EMPTY_LIST = \\\"EMPL\\\";\\r\\n    string constant NOT_FOUND = \\\"NF\\\";\\r\\n    string constant INIT = \\\"INIT\\\";\\r\\n    string constant DUPLICATE = \\\"DUP\\\";\\r\\n    string constant NULL = \\\"NULL\\\";\\r\\n    string constant TIMESTAMP = \\\"TS\\\";\\r\\n    string constant FORBIDDEN = \\\"FRB\\\";\\r\\n    string constant ALLOWLIST = \\\"ALL\\\";\\r\\n    string constant LIMIT_OVERFLOW = \\\"LIMO\\\";\\r\\n    string constant LIMIT_UNDERFLOW = \\\"LIMU\\\";\\r\\n    string constant INVALID_VALUE = \\\"INV\\\";\\r\\n    string constant INVARIANT = \\\"INVA\\\";\\r\\n    string constant INVALID_TARGET = \\\"INVTR\\\";\\r\\n    string constant INVALID_TOKEN = \\\"INVTO\\\";\\r\\n    string constant INVALID_INTERFACE = \\\"INVI\\\";\\r\\n    string constant INVALID_SELECTOR = \\\"INVS\\\";\\r\\n    string constant INVALID_STATE = \\\"INVST\\\";\\r\\n    string constant INVALID_LENGTH = \\\"INVL\\\";\\r\\n    string constant LOCK = \\\"LCKD\\\";\\r\\n    string constant DISABLED = \\\"DIS\\\";\\r\\n    string constant REBALANCE_NOT_NEEDED = \\\"RNN\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x3aa0aa636063dcdbf6742b1b0b51ae15df3ba0f225c5c4178ee23e91bfc15060\",\"license\":\"MIT\"},\"contracts/utils/ContractMeta.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/utils/IContractMeta.sol\\\";\\r\\n\\r\\nabstract contract ContractMeta is IContractMeta {\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    function contractName() external pure returns (string memory) {\\r\\n        return _bytes32ToString(_contractName());\\r\\n    }\\r\\n\\r\\n    function contractNameBytes() external pure returns (bytes32) {\\r\\n        return _contractName();\\r\\n    }\\r\\n\\r\\n    function contractVersion() external pure returns (string memory) {\\r\\n        return _bytes32ToString(_contractVersion());\\r\\n    }\\r\\n\\r\\n    function contractVersionBytes() external pure returns (bytes32) {\\r\\n        return _contractVersion();\\r\\n    }\\r\\n\\r\\n    // -------------------  INTERNAL, VIEW  -------------------\\r\\n\\r\\n    function _contractName() internal pure virtual returns (bytes32);\\r\\n\\r\\n    function _contractVersion() internal pure virtual returns (bytes32);\\r\\n\\r\\n    function _bytes32ToString(bytes32 b) internal pure returns (string memory s) {\\r\\n        s = new string(32);\\r\\n        uint256 len = 32;\\r\\n        for (uint256 i = 0; i < 32; ++i) {\\r\\n            if (uint8(b[i]) == 0) {\\r\\n                len = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        assembly {\\r\\n            mstore(s, len)\\r\\n            mstore(add(s, 0x20), b)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x96ae6af81765fd2464bbf1c6afe6dc1149b4736651b3cc60ffb2bc6e58b6b204\",\"license\":\"BSL-1.1\"},\"contracts/validators/AllowAllValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/IProtocolGovernance.sol\\\";\\r\\nimport \\\"../utils/ContractMeta.sol\\\";\\r\\nimport \\\"./Validator.sol\\\";\\r\\n\\r\\ncontract AllowAllValidator is ContractMeta, Validator {\\r\\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    // @inheritdoc IValidator\\r\\n    function validate(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes4,\\r\\n        bytes calldata\\r\\n    ) external view {}\\r\\n\\r\\n    // -------------------  INTERNAL, VIEW  -------------------\\r\\n\\r\\n    function _contractName() internal pure override returns (bytes32) {\\r\\n        return bytes32(\\\"AllowAllValidator\\\");\\r\\n    }\\r\\n\\r\\n    function _contractVersion() internal pure override returns (bytes32) {\\r\\n        return bytes32(\\\"1.0.0\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb05437d152e2688856f0345f99fde891b5d866550ed76fbcaf929a854273b0df\",\"license\":\"MIT\"},\"contracts/validators/BaseValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../interfaces/validators/IBaseValidator.sol\\\";\\r\\nimport \\\"../interfaces/IProtocolGovernance.sol\\\";\\r\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\r\\n\\r\\ncontract BaseValidator is IBaseValidator {\\r\\n    IBaseValidator.ValidatorParams internal _validatorParams;\\r\\n    IBaseValidator.ValidatorParams internal _stagedValidatorParams;\\r\\n    uint256 internal _stagedValidatorParamsTimestamp;\\r\\n\\r\\n    constructor(IProtocolGovernance protocolGovernance) {\\r\\n        _validatorParams = IBaseValidator.ValidatorParams({protocolGovernance: protocolGovernance});\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @inheritdoc IBaseValidator\\r\\n    function stagedValidatorParams() external view returns (ValidatorParams memory) {\\r\\n        return _stagedValidatorParams;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBaseValidator\\r\\n    function stagedValidatorParamsTimestamp() external view returns (uint256) {\\r\\n        return _stagedValidatorParamsTimestamp;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBaseValidator\\r\\n    function validatorParams() external view returns (ValidatorParams memory) {\\r\\n        return _validatorParams;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// @notice Stages params that could have been committed after governance delay expires.\\r\\n    /// @param newParams Params to stage\\r\\n    function stageValidatorParams(IBaseValidator.ValidatorParams calldata newParams) external {\\r\\n        IProtocolGovernance governance = _validatorParams.protocolGovernance;\\r\\n        require(governance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\\r\\n        _stagedValidatorParams = newParams;\\r\\n        _stagedValidatorParamsTimestamp = block.timestamp + governance.governanceDelay();\\r\\n        emit StagedValidatorParams(tx.origin, msg.sender, newParams, _stagedValidatorParamsTimestamp);\\r\\n    }\\r\\n\\r\\n    /// @notice Commits staged params\\r\\n    function commitValidatorParams() external {\\r\\n        require(_stagedValidatorParamsTimestamp != 0, ExceptionsLibrary.INVALID_STATE);\\r\\n        IProtocolGovernance governance = _validatorParams.protocolGovernance;\\r\\n        require(governance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\\r\\n        require(block.timestamp >= _stagedValidatorParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\r\\n        _validatorParams = _stagedValidatorParams;\\r\\n        delete _stagedValidatorParams;\\r\\n        delete _stagedValidatorParamsTimestamp;\\r\\n        emit CommittedValidatorParams(tx.origin, msg.sender, _validatorParams);\\r\\n    }\\r\\n\\r\\n    /// @notice Emitted when new params are staged for commit\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param newParams New params that were staged for commit\\r\\n    /// @param when When the params could be committed\\r\\n    event StagedValidatorParams(\\r\\n        address indexed origin,\\r\\n        address indexed sender,\\r\\n        IBaseValidator.ValidatorParams newParams,\\r\\n        uint256 when\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when new params are staged for commit\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param params New params that were staged for commit\\r\\n    event CommittedValidatorParams(\\r\\n        address indexed origin,\\r\\n        address indexed sender,\\r\\n        IBaseValidator.ValidatorParams params\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xc18ed2185b517ff7bfdf645fffb79916e73c5e1a13abc892b72764f91d7630c8\",\"license\":\"MIT\"},\"contracts/validators/Validator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"../interfaces/validators/IValidator.sol\\\";\\r\\nimport \\\"./BaseValidator.sol\\\";\\r\\n\\r\\nabstract contract Validator is IValidator, ERC165, BaseValidator {\\r\\n    /// @inheritdoc IERC165\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\r\\n        return (interfaceId == type(IValidator).interfaceId) || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1334139ba1712d06b745a7301e0bca085bb0cb8f63981ccd5ccdd071826fcdf8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161090838038061090883398101604081905261002f91610061565b60408051602081019091526001600160a01b0390911690819052600080546001600160a01b0319169091179055610091565b60006020828403121561007357600080fd5b81516001600160a01b038116811461008a57600080fd5b9392505050565b610868806100a06000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634c39da1b116100715780634c39da1b1461012557806357acc302146101645780635e585c341461018e57806375d0c0dc146101a4578063a0a8e460146101b9578063e6ab042c146101c157600080fd5b806301ffc9a7146100ae57806306a46239146100d65780630768b496146100ee5780630e3e80ac146100f657806347c0a4ed14610110575b600080fd5b6100c16100bc3660046105ef565b6101c9565b60405190151581526020015b60405180910390f35b640312e302e360dc1b5b6040519081526020016100cd565b6002546100e0565b7020b63637bba0b6362b30b634b230ba37b960791b6100e0565b61012361011e366004610611565b610205565b005b6040805160208082018352600090915281519081019091526001546001600160a01b031681525b60405190516001600160a01b031681526020016100cd565b60408051602080820183526000918290528251908101909252546001600160a01b0316815261014c565b61012361019c366004610641565b505050505050565b6101ac610397565b6040516100cd91906106f2565b6101ac6103b6565b6101236103c9565b60006001600160e01b03198216631796170d60e21b14806101fa57506301ffc9a760e01b6001600160e01b03198316145b92915050565b905090565b600054604051630935e01b60e21b81523360048201526001600160a01b039091169081906324d7806c9060240160206040518083038186803b15801561024a57600080fd5b505afa15801561025e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102829190610747565b6040518060400160405280600381526020016223292160e91b815250906102c55760405162461bcd60e51b81526004016102bc91906106f2565b60405180910390fd5b508160016102d38282610769565b905050806001600160a01b031663bba329396040518163ffffffff1660e01b815260040160206040518083038186803b15801561030f57600080fd5b505afa158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103479190610792565b61035190426107c1565b6002819055604051339132917f660ad6a797f71286627569396d4046567822701c6afd27f47d280dee5e2ce1819161038b918791906107d9565b60405180910390a35050565b60606102007020b63637bba0b6362b30b634b230ba37b960791b610566565b6060610200640312e302e360dc1b610566565b60025460408051808201909152600581526412539594d560da1b6020820152906104065760405162461bcd60e51b81526004016102bc91906106f2565b50600054604051630935e01b60e21b81523360048201526001600160a01b039091169081906324d7806c9060240160206040518083038186803b15801561044c57600080fd5b505afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190610747565b6040518060400160405280600381526020016223292160e91b815250906104be5760405162461bcd60e51b81526004016102bc91906106f2565b5060025442101560405180604001604052806002815260200161545360f01b815250906104fe5760405162461bcd60e51b81526004016102bc91906106f2565b5060018054600080546001600160a01b0383166001600160a01b0319918216811783559216909255600291909155604051908152339032907f15f858bb04b5aa79f0fafddd94b014ab8bf8ceae94724b7074c7b4940be688b49060200160405180910390a350565b604080516020808252818301909252606091602082018180368337019050509050602060005b60208110156105c4578381602081106105a7576105a7610801565b1a6105b4578091506105c4565b6105bd81610817565b905061058c565b508152602081019190915290565b80356001600160e01b0319811681146105ea57600080fd5b919050565b60006020828403121561060157600080fd5b61060a826105d2565b9392505050565b60006020828403121561062357600080fd5b50919050565b6001600160a01b038116811461063e57600080fd5b50565b60008060008060008060a0878903121561065a57600080fd5b863561066581610629565b9550602087013561067581610629565b94506040870135935061068a606088016105d2565b9250608087013567ffffffffffffffff808211156106a757600080fd5b818901915089601f8301126106bb57600080fd5b8135818111156106ca57600080fd5b8a60208285010111156106dc57600080fd5b6020830194508093505050509295509295509295565b600060208083528351808285015260005b8181101561071f57858101830151858201604001528201610703565b81811115610731576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561075957600080fd5b8151801515811461060a57600080fd5b813561077481610629565b81546001600160a01b0319166001600160a01b039190911617905550565b6000602082840312156107a457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156107d4576107d46107ab565b500190565b6040810183356107e881610629565b6001600160a01b03168252602090910191909152919050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561082b5761082b6107ab565b506001019056fea26469706673582212209f2fb89b70988732285074c0bb132dd71d32968e906d8cc46bc8ed52718777c864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80634c39da1b116100715780634c39da1b1461012557806357acc302146101645780635e585c341461018e57806375d0c0dc146101a4578063a0a8e460146101b9578063e6ab042c146101c157600080fd5b806301ffc9a7146100ae57806306a46239146100d65780630768b496146100ee5780630e3e80ac146100f657806347c0a4ed14610110575b600080fd5b6100c16100bc3660046105ef565b6101c9565b60405190151581526020015b60405180910390f35b640312e302e360dc1b5b6040519081526020016100cd565b6002546100e0565b7020b63637bba0b6362b30b634b230ba37b960791b6100e0565b61012361011e366004610611565b610205565b005b6040805160208082018352600090915281519081019091526001546001600160a01b031681525b60405190516001600160a01b031681526020016100cd565b60408051602080820183526000918290528251908101909252546001600160a01b0316815261014c565b61012361019c366004610641565b505050505050565b6101ac610397565b6040516100cd91906106f2565b6101ac6103b6565b6101236103c9565b60006001600160e01b03198216631796170d60e21b14806101fa57506301ffc9a760e01b6001600160e01b03198316145b92915050565b905090565b600054604051630935e01b60e21b81523360048201526001600160a01b039091169081906324d7806c9060240160206040518083038186803b15801561024a57600080fd5b505afa15801561025e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102829190610747565b6040518060400160405280600381526020016223292160e91b815250906102c55760405162461bcd60e51b81526004016102bc91906106f2565b60405180910390fd5b508160016102d38282610769565b905050806001600160a01b031663bba329396040518163ffffffff1660e01b815260040160206040518083038186803b15801561030f57600080fd5b505afa158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103479190610792565b61035190426107c1565b6002819055604051339132917f660ad6a797f71286627569396d4046567822701c6afd27f47d280dee5e2ce1819161038b918791906107d9565b60405180910390a35050565b60606102007020b63637bba0b6362b30b634b230ba37b960791b610566565b6060610200640312e302e360dc1b610566565b60025460408051808201909152600581526412539594d560da1b6020820152906104065760405162461bcd60e51b81526004016102bc91906106f2565b50600054604051630935e01b60e21b81523360048201526001600160a01b039091169081906324d7806c9060240160206040518083038186803b15801561044c57600080fd5b505afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190610747565b6040518060400160405280600381526020016223292160e91b815250906104be5760405162461bcd60e51b81526004016102bc91906106f2565b5060025442101560405180604001604052806002815260200161545360f01b815250906104fe5760405162461bcd60e51b81526004016102bc91906106f2565b5060018054600080546001600160a01b0383166001600160a01b0319918216811783559216909255600291909155604051908152339032907f15f858bb04b5aa79f0fafddd94b014ab8bf8ceae94724b7074c7b4940be688b49060200160405180910390a350565b604080516020808252818301909252606091602082018180368337019050509050602060005b60208110156105c4578381602081106105a7576105a7610801565b1a6105b4578091506105c4565b6105bd81610817565b905061058c565b508152602081019190915290565b80356001600160e01b0319811681146105ea57600080fd5b919050565b60006020828403121561060157600080fd5b61060a826105d2565b9392505050565b60006020828403121561062357600080fd5b50919050565b6001600160a01b038116811461063e57600080fd5b50565b60008060008060008060a0878903121561065a57600080fd5b863561066581610629565b9550602087013561067581610629565b94506040870135935061068a606088016105d2565b9250608087013567ffffffffffffffff808211156106a757600080fd5b818901915089601f8301126106bb57600080fd5b8135818111156106ca57600080fd5b8a60208285010111156106dc57600080fd5b6020830194508093505050509295509295509295565b600060208083528351808285015260005b8181101561071f57858101830151858201604001528201610703565b81811115610731576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561075957600080fd5b8151801515811461060a57600080fd5b813561077481610629565b81546001600160a01b0319166001600160a01b039190911617905550565b6000602082840312156107a457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156107d4576107d46107ab565b500190565b6040810183356107e881610629565b6001600160a01b03168252602090910191909152919050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561082b5761082b6107ab565b506001019056fea26469706673582212209f2fb89b70988732285074c0bb132dd71d32968e906d8cc46bc8ed52718777c864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "stageValidatorParams((address))": {
        "params": {
          "newParams": "Params to stage"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CommittedValidatorParams(address,address,(address))": {
        "notice": "Emitted when new params are staged for commit"
      },
      "StagedValidatorParams(address,address,(address),uint256)": {
        "notice": "Emitted when new params are staged for commit"
      }
    },
    "kind": "user",
    "methods": {
      "commitValidatorParams()": {
        "notice": "Commits staged params"
      },
      "stageValidatorParams((address))": {
        "notice": "Stages params that could have been committed after governance delay expires."
      },
      "stagedValidatorParams()": {
        "notice": "Validator params staged to commit."
      },
      "stagedValidatorParamsTimestamp()": {
        "notice": "Timestamp after which validator params can be committed."
      },
      "validatorParams()": {
        "notice": "Current validator params."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31542,
        "contract": "contracts/validators/AllowAllValidator.sol:AllowAllValidator",
        "label": "_validatorParams",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(ValidatorParams)17215_storage"
      },
      {
        "astId": 31545,
        "contract": "contracts/validators/AllowAllValidator.sol:AllowAllValidator",
        "label": "_stagedValidatorParams",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(ValidatorParams)17215_storage"
      },
      {
        "astId": 31547,
        "contract": "contracts/validators/AllowAllValidator.sol:AllowAllValidator",
        "label": "_stagedValidatorParamsTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_contract(IProtocolGovernance)11058": {
        "encoding": "inplace",
        "label": "contract IProtocolGovernance",
        "numberOfBytes": "20"
      },
      "t_struct(ValidatorParams)17215_storage": {
        "encoding": "inplace",
        "label": "struct IBaseValidator.ValidatorParams",
        "members": [
          {
            "astId": 17214,
            "contract": "contracts/validators/AllowAllValidator.sol:AllowAllValidator",
            "label": "protocolGovernance",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IProtocolGovernance)11058"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}