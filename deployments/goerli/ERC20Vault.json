{
  "address": "0x3E1460D03A36D1C88806c3896BC30A16C8646B51",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "vaultTokens_",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nft_",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Pull",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "Push",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "ReclaimTokens",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "externalCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "vaultTokens_",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isVaultToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "pull",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullExistentials",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "push",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "reclaimTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "transferAndPush",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "minTokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxTokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultGovernance",
      "outputs": [
        {
          "internalType": "contract IVaultGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x823a7aa926104f0c8763ddc3969b5ab36add86b3031b10f3dc39eab59d00058f",
  "receipt": {
    "to": null,
    "from": "0x5f198d6F84C3b8E9CA12530ebbA54C3dB53e847D",
    "contractAddress": "0x3E1460D03A36D1C88806c3896BC30A16C8646B51",
    "transactionIndex": 22,
    "gasUsed": "3295190",
    "logsBloom": "0x
    "blockHash": "0xd19d5cbe6df62cbdfb53b98867cac6cb4ef2f91048a35956f893af725f8a7b87",
    "transactionHash": "0x823a7aa926104f0c8763ddc3969b5ab36add86b3031b10f3dc39eab59d00058f",
    "logs": [],
    "blockNumber": 7850688,
    "cumulativeGasUsed": "6304354",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1984535d51a55304aed3f058b4264cb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"vaultTokens_\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nft_\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Pull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"Push\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"ReclaimTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"externalCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"vaultTokens_\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isVaultToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"pull\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullExistentials\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"push\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"reclaimTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"transferAndPush\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"minTokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxTokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultGovernance\",\"outputs\":[{\"internalType\":\"contract IVaultGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"externalCall(address,bytes4,bytes)\":{\"details\":\"Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. Since this method allows sending arbitrary transactions, the destinations of the calls are whitelisted by Protocol Governance.\",\"params\":{\"data\":\"Abi encoded parameters to `to::selector`\",\"selector\":\"Selector of the call\",\"to\":\"Address of the reward pool\"},\"returns\":{\"result\":\"Result of execution of the call\"}},\"initialize(uint256,address[])\":{\"details\":\"Can only be initialized by vault governance\",\"params\":{\"nft_\":\"NFT of the vault in the VaultRegistry\",\"vaultTokens_\":\"ERC20 tokens that will be managed by this Vault\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided hash MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls\",\"params\":{\"_hash\":\"Hash of the data to be signed\",\"_signature\":\"Signature byte array associated with _hash\"},\"returns\":{\"magicValue\":\"0x1626ba7e if valid, 0xffffffff otherwise\"}},\"isVaultToken(address)\":{\"params\":{\"token\":\"Address of the token to check\"},\"returns\":{\"_0\":\"`true` if this token is managed by Vault\"}},\"pull(address,address[],uint256[],bytes)\":{\"details\":\"Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. When called by vault owner this method just pulls the tokens from the protocol to the `to` address When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault) When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left. Thus any vault other than zero vault cannot have any tokens on it Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.\",\"params\":{\"options\":\"Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\",\"to\":\"Address to receive the tokens\",\"tokenAmounts\":\"Amounts of tokens to pull\",\"tokens\":\"Tokens to pull\"},\"returns\":{\"actualTokenAmounts\":\"The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)\"}},\"push(address[],uint256[],bytes)\":{\"details\":\"Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.\",\"params\":{\"options\":\"Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\",\"tokenAmounts\":\"Amounts of tokens to push\",\"tokens\":\"Tokens to push\"},\"returns\":{\"actualTokenAmounts\":\"The amounts actually invested. It could be less than tokenAmounts (but not higher)\"}},\"reclaimTokens(address[])\":{\"details\":\"Cannot be called from zero vault.\",\"params\":{\"tokens\":\"Tokens to claim\"},\"returns\":{\"actualTokenAmounts\":\"Amounts reclaimed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferAndPush(address,address[],uint256[],bytes)\":{\"params\":{\"options\":\"Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\",\"tokenAmounts\":\"Amounts of tokens to push\",\"tokens\":\"Tokens to push\"},\"returns\":{\"actualTokenAmounts\":\"The amounts actually invested. It could be less than tokenAmounts (but not higher)\"}},\"tvl()\":{\"details\":\"Generally it is the underlying token value of this contract in some other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract. The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\",\"returns\":{\"maxTokenAmounts\":\"Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\",\"minTokenAmounts\":\"Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Initialized(address,address,address[],uint256)\":{\"notice\":\"Emitted when Vault is intialized\"},\"Pull(address,uint256[])\":{\"notice\":\"Emitted on successful pull\"},\"Push(uint256[])\":{\"notice\":\"Emitted on successful push\"},\"ReclaimTokens(address,address[],uint256[])\":{\"notice\":\"Emitted when tokens are reclaimed\"}},\"kind\":\"user\",\"methods\":{\"externalCall(address,bytes4,bytes)\":{\"notice\":\"Execute one of whitelisted calls.\"},\"initialize(uint256,address[])\":{\"notice\":\"Initialized a new contract.\"},\"initialized()\":{\"notice\":\"Checks if the vault is initialized\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Verifies offchain signature.\"},\"isVaultToken(address)\":{\"notice\":\"Checks if a token is vault token\"},\"nft()\":{\"notice\":\"VaultRegistry NFT for this vault\"},\"pull(address,address[],uint256[],bytes)\":{\"notice\":\"Pulls tokens from the underlying protocol to the `to` address.\"},\"pullExistentials()\":{\"notice\":\"Existential amounts for each token\"},\"push(address[],uint256[],bytes)\":{\"notice\":\"Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from the contract balance and convert it to yUSDC.\"},\"reclaimTokens(address[])\":{\"notice\":\"Claim ERC20 tokens from vault balance to zero vault.\"},\"transferAndPush(address,address[],uint256[],bytes)\":{\"notice\":\"The same as `push` method above but transfers tokens to vault balance prior to calling push. After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full).\"},\"tvl()\":{\"notice\":\"Total value locked for this contract.\"},\"vaultGovernance()\":{\"notice\":\"Address of the Vault Governance for this contract.\"},\"vaultTokens()\":{\"notice\":\"ERC20 tokens under Vault management.\"}},\"notice\":\"Vault that stores ERC20 tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/ERC20Vault.sol\":\"ERC20Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c3ef4fb25def71f5f18af554ca938950eb9cf218fda073ed2c69b9203c03455\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xb0ff3f5c37c94cfa0da555a4c7d9034c46d70d0479917bed63612a9fc7092672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x842c66d5965ed0bf77f274732c2a93a7e2223d53171ec9cccc473bde75104ead\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\r\\nimport \\\"./IUnitPricesGovernance.sol\\\";\\r\\n\\r\\ninterface IProtocolGovernance is IDefaultAccessControl, IUnitPricesGovernance {\\r\\n    /// @notice CommonLibrary protocol params.\\r\\n    /// @param maxTokensPerVault Max different token addresses that could be managed by the vault\\r\\n    /// @param governanceDelay The delay (in secs) that must pass before setting new pending params to commiting them\\r\\n    /// @param protocolTreasury The address that collects protocolFees, if protocolFee is not zero\\r\\n    /// @param forceAllowMask If a permission bit is set in this mask it forces all addresses to have this permission as true\\r\\n    /// @param withdrawLimit Withdraw limit (in unit prices, i.e. usd)\\r\\n    struct Params {\\r\\n        uint256 maxTokensPerVault;\\r\\n        uint256 governanceDelay;\\r\\n        address protocolTreasury;\\r\\n        uint256 forceAllowMask;\\r\\n        uint256 withdrawLimit;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\r\\n    /// @param target The given address\\r\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\r\\n    function stagedPermissionGrantsTimestamps(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Staged granted permission bitmask for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Bitmask\\r\\n    function stagedPermissionGrantsMasks(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Permission bitmask for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Bitmask\\r\\n    function permissionMasks(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp after which staged pending protocol parameters can be committed\\r\\n    /// @return Zero if there are no staged parameters, timestamp otherwise.\\r\\n    function stagedParamsTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Staged pending protocol parameters.\\r\\n    function stagedParams() external view returns (Params memory);\\r\\n\\r\\n    /// @notice Current protocol parameters.\\r\\n    function params() external view returns (Params memory);\\r\\n\\r\\n    /// @notice Addresses for which non-zero permissions are set.\\r\\n    function permissionAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Permission addresses staged for commit.\\r\\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Return all addresses where rawPermissionMask bit for permissionId is set to 1.\\r\\n    /// @param permissionId Id of the permission to check.\\r\\n    /// @return A list of dirty addresses.\\r\\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Checks if address has permission or given permission is force allowed for any address.\\r\\n    /// @param addr Address to check\\r\\n    /// @param permissionId Permission to check\\r\\n    function hasPermission(address addr, uint8 permissionId) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if address has all permissions.\\r\\n    /// @param target Address to check\\r\\n    /// @param permissionIds A list of permissions to check\\r\\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool);\\r\\n\\r\\n    /// @notice Max different ERC20 token addresses that could be managed by the protocol.\\r\\n    function maxTokensPerVault() external view returns (uint256);\\r\\n\\r\\n    /// @notice The delay for committing any governance params.\\r\\n    function governanceDelay() external view returns (uint256);\\r\\n\\r\\n    /// @notice The address of the protocol treasury.\\r\\n    function protocolTreasury() external view returns (address);\\r\\n\\r\\n    /// @notice Permissions mask which defines if ordinary permission should be reverted.\\r\\n    /// This bitmask is xored with ordinary mask.\\r\\n    function forceAllowMask() external view returns (uint256);\\r\\n\\r\\n    /// @notice Withdraw limit per token per block.\\r\\n    /// @param token Address of the token\\r\\n    /// @return Withdraw limit per token per block\\r\\n    function withdrawLimit(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Addresses that has staged validators.\\r\\n    function stagedValidatorsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\r\\n    /// @param target The given address\\r\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\r\\n    function stagedValidatorsTimestamps(address target) external view returns (uint256);\\r\\n\\r\\n    /// @notice Staged validator for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Validator\\r\\n    function stagedValidators(address target) external view returns (address);\\r\\n\\r\\n    /// @notice Addresses that has validators.\\r\\n    function validatorsAddresses() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Address that has validators.\\r\\n    /// @param i The number of address\\r\\n    /// @return Validator address\\r\\n    function validatorsAddress(uint256 i) external view returns (address);\\r\\n\\r\\n    /// @notice Validator for the given address.\\r\\n    /// @param target The given address\\r\\n    /// @return Validator\\r\\n    function validators(address target) external view returns (address);\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, IMMEDIATE  -------------------\\r\\n\\r\\n    /// @notice Rollback all staged validators.\\r\\n    function rollbackStagedValidators() external;\\r\\n\\r\\n    /// @notice Revoke validator instantly from the given address.\\r\\n    /// @param target The given address\\r\\n    function revokeValidator(address target) external;\\r\\n\\r\\n    /// @notice Stages a new validator for the given address\\r\\n    /// @param target The given address\\r\\n    /// @param validator The validator for the given address\\r\\n    function stageValidator(address target, address validator) external;\\r\\n\\r\\n    /// @notice Commits validator for the given address.\\r\\n    /// @dev Reverts if governance delay has not passed yet.\\r\\n    /// @param target The given address.\\r\\n    function commitValidator(address target) external;\\r\\n\\r\\n    /// @notice Commites all staged validators for which governance delay passed\\r\\n    /// @return Addresses for which validators were committed\\r\\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory);\\r\\n\\r\\n    /// @notice Rollback all staged granted permission grant.\\r\\n    function rollbackStagedPermissionGrants() external;\\r\\n\\r\\n    /// @notice Commits permission grants for the given address.\\r\\n    /// @dev Reverts if governance delay has not passed yet.\\r\\n    /// @param target The given address.\\r\\n    function commitPermissionGrants(address target) external;\\r\\n\\r\\n    /// @notice Commites all staged permission grants for which governance delay passed.\\r\\n    /// @return An array of addresses for which permission grants were committed.\\r\\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory);\\r\\n\\r\\n    /// @notice Revoke permission instantly from the given address.\\r\\n    /// @param target The given address.\\r\\n    /// @param permissionIds A list of permission ids to revoke.\\r\\n    function revokePermissions(address target, uint8[] memory permissionIds) external;\\r\\n\\r\\n    /// @notice Commits staged protocol params.\\r\\n    /// Reverts if governance delay has not passed yet.\\r\\n    function commitParams() external;\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, DELAY  -------------------\\r\\n\\r\\n    /// @notice Sets new pending params that could have been committed after governance delay expires.\\r\\n    /// @param newParams New protocol parameters to set.\\r\\n    function stageParams(Params memory newParams) external;\\r\\n\\r\\n    /// @notice Stage granted permissions that could have been committed after governance delay expires.\\r\\n    /// Resets commit delay and permissions if there are already staged permissions for this address.\\r\\n    /// @param target Target address\\r\\n    /// @param permissionIds A list of permission ids to grant\\r\\n    function stagePermissionGrants(address target, uint8[] memory permissionIds) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xda6b37c257d780a870b289b4e44badc6afb7f2301f500a440c4c020abedd98e6\",\"license\":\"MIT\"},\"contracts/interfaces/IUnitPricesGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\r\\n\\r\\ninterface IUnitPricesGovernance is IDefaultAccessControl, IERC165 {\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @notice Estimated amount of token worth 1 USD staged for commit.\\r\\n    /// @param token Address of the token\\r\\n    /// @return The amount of token\\r\\n    function stagedUnitPrices(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp after which staged unit prices for the given token can be committed.\\r\\n    /// @param token Address of the token\\r\\n    /// @return Timestamp\\r\\n    function stagedUnitPricesTimestamps(address token) external view returns (uint256);\\r\\n\\r\\n    /// @notice Estimated amount of token worth 1 USD.\\r\\n    /// @param token Address of the token\\r\\n    /// @return The amount of token\\r\\n    function unitPrices(address token) external view returns (uint256);\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// @notice Stage estimated amount of token worth 1 USD staged for commit.\\r\\n    /// @param token Address of the token\\r\\n    /// @param value The amount of token\\r\\n    function stageUnitPrice(address token, uint256 value) external;\\r\\n\\r\\n    /// @notice Reset staged value\\r\\n    /// @param token Address of the token\\r\\n    function rollbackUnitPrice(address token) external;\\r\\n\\r\\n    /// @notice Commit staged unit price\\r\\n    /// @param token Address of the token\\r\\n    function commitUnitPrice(address token) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x300050e0de7d02134592f130cdb90752dc8fcea6cab2e58eb9dafd3a7e3f4e5f\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"./IProtocolGovernance.sol\\\";\\r\\n\\r\\ninterface IVaultRegistry is IERC721 {\\r\\n    /// @notice Get Vault for the giver NFT ID.\\r\\n    /// @param nftId NFT ID\\r\\n    /// @return vault Address of the Vault contract\\r\\n    function vaultForNft(uint256 nftId) external view returns (address vault);\\r\\n\\r\\n    /// @notice Get NFT ID for given Vault contract address.\\r\\n    /// @param vault Address of the Vault contract\\r\\n    /// @return nftId NFT ID\\r\\n    function nftForVault(address vault) external view returns (uint256 nftId);\\r\\n\\r\\n    /// @notice Checks if the nft is locked for all transfers\\r\\n    /// @param nft NFT to check for lock\\r\\n    /// @return `true` if locked, false otherwise\\r\\n    function isLocked(uint256 nft) external view returns (bool);\\r\\n\\r\\n    /// @notice Register new Vault and mint NFT.\\r\\n    /// @param vault address of the vault\\r\\n    /// @param owner owner of the NFT\\r\\n    /// @return nft Nft minted for the given Vault\\r\\n    function registerVault(address vault, address owner) external returns (uint256 nft);\\r\\n\\r\\n    /// @notice Number of Vaults registered.\\r\\n    function vaultsCount() external view returns (uint256);\\r\\n\\r\\n    /// @notice All Vaults registered.\\r\\n    function vaults() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Address of the ProtocolGovernance.\\r\\n    function protocolGovernance() external view returns (IProtocolGovernance);\\r\\n\\r\\n    /// @notice Address of the staged ProtocolGovernance.\\r\\n    function stagedProtocolGovernance() external view returns (IProtocolGovernance);\\r\\n\\r\\n    /// @notice Minimal timestamp when staged ProtocolGovernance can be applied.\\r\\n    function stagedProtocolGovernanceTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Stage new ProtocolGovernance.\\r\\n    /// @param newProtocolGovernance new ProtocolGovernance\\r\\n    function stageProtocolGovernance(IProtocolGovernance newProtocolGovernance) external;\\r\\n\\r\\n    /// @notice Commit new ProtocolGovernance.\\r\\n    function commitStagedProtocolGovernance() external;\\r\\n\\r\\n    /// @notice Lock NFT for transfers\\r\\n    /// @dev Use this method when vault structure is set up and should become immutable. Can be called by owner.\\r\\n    /// @param nft - NFT to lock\\r\\n    function lockNft(uint256 nft) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x66ba86bbbe472a039ab45b556eb235c9ed64ea0d43de4f22fdf64b9b41e3f4ca\",\"license\":\"MIT\"},\"contracts/interfaces/external/aave/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\r\\n    struct ReserveData {\\r\\n        //stores the reserve configuration\\r\\n        ReserveConfigurationMap configuration;\\r\\n        //the liquidity index. Expressed in ray\\r\\n        uint128 liquidityIndex;\\r\\n        //variable borrow index. Expressed in ray\\r\\n        uint128 variableBorrowIndex;\\r\\n        //the current supply rate. Expressed in ray\\r\\n        uint128 currentLiquidityRate;\\r\\n        //the current variable borrow rate. Expressed in ray\\r\\n        uint128 currentVariableBorrowRate;\\r\\n        //the current stable borrow rate. Expressed in ray\\r\\n        uint128 currentStableBorrowRate;\\r\\n        uint40 lastUpdateTimestamp;\\r\\n        //tokens addresses\\r\\n        address aTokenAddress;\\r\\n        address stableDebtTokenAddress;\\r\\n        address variableDebtTokenAddress;\\r\\n        //address of the interest rate strategy\\r\\n        address interestRateStrategyAddress;\\r\\n        //the id of the reserve. Represents the position in the list of the active reserves\\r\\n        uint8 id;\\r\\n    }\\r\\n\\r\\n    struct ReserveConfigurationMap {\\r\\n        //bit 0-15: LTV\\r\\n        //bit 16-31: Liq. threshold\\r\\n        //bit 32-47: Liq. bonus\\r\\n        //bit 48-55: Decimals\\r\\n        //bit 56: Reserve is active\\r\\n        //bit 57: reserve is frozen\\r\\n        //bit 58: borrowing is enabled\\r\\n        //bit 59: stable rate borrowing enabled\\r\\n        //bit 60-63: reserved\\r\\n        //bit 64-79: reserve factor\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    struct UserConfigurationMap {\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    enum InterestRateMode {\\r\\n        NONE,\\r\\n        STABLE,\\r\\n        VARIABLE\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5b5461d16db3c51350b69d47835f3850248ff00ecedcf256fa26d74539174cfe\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/external/aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\r\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\r\\n\\r\\ninterface ILendingPool {\\r\\n    /**\\r\\n     * @dev Emitted on deposit()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the deposit\\r\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\r\\n     * @param amount The amount deposited\\r\\n     * @param referral The referral code used\\r\\n     **/\\r\\n    event Deposit(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint16 indexed referral\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on withdraw()\\r\\n     * @param reserve The address of the underlyng asset being withdrawn\\r\\n     * @param user The address initiating the withdrawal, owner of aTokens\\r\\n     * @param to Address that will receive the underlying\\r\\n     * @param amount The amount to be withdrawn\\r\\n     **/\\r\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n     * @param reserve The address of the underlying asset being borrowed\\r\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n     * initiator of the transaction on flashLoan()\\r\\n     * @param onBehalfOf The address that will be getting the debt\\r\\n     * @param amount The amount borrowed out\\r\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n     * @param borrowRate The numeric rate at which the user has borrowed\\r\\n     * @param referral The referral code used\\r\\n     **/\\r\\n    event Borrow(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint256 borrowRateMode,\\r\\n        uint256 borrowRate,\\r\\n        uint16 indexed referral\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on repay()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n     * @param amount The amount repaid\\r\\n     **/\\r\\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on swapBorrowRateMode()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user swapping his rate mode\\r\\n     * @param rateMode The rate mode that the user wants to swap to\\r\\n     **/\\r\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on rebalanceStableBorrowRate()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user for which the rebalance has been executed\\r\\n     **/\\r\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on flashLoan()\\r\\n     * @param target The address of the flash loan receiver contract\\r\\n     * @param initiator The address initiating the flash loan\\r\\n     * @param asset The address of the asset being flash borrowed\\r\\n     * @param amount The amount flash borrowed\\r\\n     * @param premium The fee flash borrowed\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event FlashLoan(\\r\\n        address indexed target,\\r\\n        address indexed initiator,\\r\\n        address indexed asset,\\r\\n        uint256 amount,\\r\\n        uint256 premium,\\r\\n        uint16 referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered.\\r\\n     */\\r\\n    event Paused();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted.\\r\\n     */\\r\\n    event Unpaused();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\r\\n     * LendingPoolCollateral manager using a DELEGATECALL\\r\\n     * This allows to have the events in the generated ABI for LendingPool.\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\r\\n     * @param liquidator The address of the liquidator\\r\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    event LiquidationCall(\\r\\n        address indexed collateralAsset,\\r\\n        address indexed debtAsset,\\r\\n        address indexed user,\\r\\n        uint256 debtToCover,\\r\\n        uint256 liquidatedCollateralAmount,\\r\\n        address liquidator,\\r\\n        bool receiveAToken\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\r\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\r\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\r\\n     * gets added to the LendingPool ABI\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param liquidityRate The new liquidity rate\\r\\n     * @param stableBorrowRate The new stable borrow rate\\r\\n     * @param variableBorrowRate The new variable borrow rate\\r\\n     * @param liquidityIndex The new liquidity index\\r\\n     * @param variableBorrowIndex The new variable borrow index\\r\\n     **/\\r\\n    event ReserveDataUpdated(\\r\\n        address indexed reserve,\\r\\n        uint256 liquidityRate,\\r\\n        uint256 stableBorrowRate,\\r\\n        uint256 variableBorrowRate,\\r\\n        uint256 liquidityIndex,\\r\\n        uint256 variableBorrowIndex\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to deposit\\r\\n     * @param amount The amount to be deposited\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function deposit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to withdraw\\r\\n     * @param amount The underlying amount to be withdrawn\\r\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\r\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n     *   different wallet\\r\\n     * @return The final amount withdrawn\\r\\n     **/\\r\\n    function withdraw(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n     * @param asset The address of the underlying asset to borrow\\r\\n     * @param amount The amount to be borrowed\\r\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n     * if he has been given credit delegation allowance\\r\\n     **/\\r\\n    function borrow(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        uint16 referralCode,\\r\\n        address onBehalfOf\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repay(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 rateMode,\\r\\n        address onBehalfOf\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param rateMode The rate mode that the user wants to swap to\\r\\n     **/\\r\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n     * - Users can be rebalanced if the following conditions are satisfied:\\r\\n     *     1. Usage ratio is above 95%\\r\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\r\\n     *        borrowed at a stable rate and depositors are not earning enough\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param user The address of the user to be rebalanced\\r\\n     **/\\r\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\r\\n     * @param asset The address of the underlying asset deposited\\r\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\r\\n     **/\\r\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    function liquidationCall(\\r\\n        address collateralAsset,\\r\\n        address debtAsset,\\r\\n        address user,\\r\\n        uint256 debtToCover,\\r\\n        bool receiveAToken\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\r\\n     * For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\r\\n     * @param assets The addresses of the assets being flash-borrowed\\r\\n     * @param amounts The amounts amounts being flash-borrowed\\r\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\r\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoan(\\r\\n        address receiverAddress,\\r\\n        address[] calldata assets,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256[] calldata modes,\\r\\n        address onBehalfOf,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the user account data across all the reserves\\r\\n     * @param user The address of the user\\r\\n     * @return totalCollateralETH the total collateral in ETH of the user\\r\\n     * @return totalDebtETH the total debt in ETH of the user\\r\\n     * @return availableBorrowsETH the borrowing power left of the user\\r\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\r\\n     * @return ltv the loan to value of the user\\r\\n     * @return healthFactor the current health factor of the user\\r\\n     **/\\r\\n    function getUserAccountData(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalCollateralETH,\\r\\n            uint256 totalDebtETH,\\r\\n            uint256 availableBorrowsETH,\\r\\n            uint256 currentLiquidationThreshold,\\r\\n            uint256 ltv,\\r\\n            uint256 healthFactor\\r\\n        );\\r\\n\\r\\n    function initReserve(\\r\\n        address reserve,\\r\\n        address aTokenAddress,\\r\\n        address stableDebtAddress,\\r\\n        address variableDebtAddress,\\r\\n        address interestRateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\r\\n\\r\\n    function setConfiguration(address reserve, uint256 configuration) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The configuration of the reserve\\r\\n     **/\\r\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the configuration of the user across all the reserves\\r\\n     * @param user The user address\\r\\n     * @return The configuration of the user\\r\\n     **/\\r\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the normalized income normalized income of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve's normalized income\\r\\n     */\\r\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the normalized variable debt per unit of asset\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve normalized variable debt\\r\\n     */\\r\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the state and configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The state of the reserve\\r\\n     **/\\r\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\r\\n\\r\\n    function finalizeTransfer(\\r\\n        address asset,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 balanceFromAfter,\\r\\n        uint256 balanceToBefore\\r\\n    ) external;\\r\\n\\r\\n    function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\r\\n\\r\\n    function setPause(bool val) external;\\r\\n\\r\\n    function paused() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xe25cdf559191544e5b209565344e68b17b07d56add0d3d639b9ba406bba48146\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/external/aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @title LendingPoolAddressesProvider contract\\r\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\r\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\r\\n * - Owned by the Aave Governance\\r\\n * @author Aave\\r\\n **/\\r\\ninterface ILendingPoolAddressesProvider {\\r\\n    event MarketIdSet(string newMarketId);\\r\\n    event LendingPoolUpdated(address indexed newAddress);\\r\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\r\\n    event EmergencyAdminUpdated(address indexed newAddress);\\r\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\r\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\r\\n    event PriceOracleUpdated(address indexed newAddress);\\r\\n    event LendingRateOracleUpdated(address indexed newAddress);\\r\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\r\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\r\\n\\r\\n    function getMarketId() external view returns (string memory);\\r\\n\\r\\n    function setMarketId(string calldata marketId) external;\\r\\n\\r\\n    function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\r\\n\\r\\n    function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n    function getLendingPool() external view returns (address);\\r\\n\\r\\n    function setLendingPoolImpl(address pool) external;\\r\\n\\r\\n    function getLendingPoolConfigurator() external view returns (address);\\r\\n\\r\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\r\\n\\r\\n    function getLendingPoolCollateralManager() external view returns (address);\\r\\n\\r\\n    function setLendingPoolCollateralManager(address manager) external;\\r\\n\\r\\n    function getPoolAdmin() external view returns (address);\\r\\n\\r\\n    function setPoolAdmin(address admin) external;\\r\\n\\r\\n    function getEmergencyAdmin() external view returns (address);\\r\\n\\r\\n    function setEmergencyAdmin(address admin) external;\\r\\n\\r\\n    function getPriceOracle() external view returns (address);\\r\\n\\r\\n    function setPriceOracle(address priceOracle) external;\\r\\n\\r\\n    function getLendingRateOracle() external view returns (address);\\r\\n\\r\\n    function setLendingRateOracle(address lendingRateOracle) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7804de852a529511f94f5711364b97e489e15a48583bf7d7f2de8050eb786cd6\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/external/erc/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IERC1271 {\\r\\n    /// @notice Verifies offchain signature.\\r\\n    /// @dev Should return whether the signature provided is valid for the provided hash\\r\\n    ///\\r\\n    /// MUST return the bytes4 magic value 0x1626ba7e when function passes.\\r\\n    ///\\r\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\r\\n    ///\\r\\n    /// MUST allow external calls\\r\\n    /// @param _hash Hash of the data to be signed\\r\\n    /// @param _signature Signature byte array associated with _hash\\r\\n    /// @return magicValue 0x1626ba7e if valid, 0xffffffff otherwise\\r\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue);\\r\\n}\\r\\n\",\"keccak256\":\"0x2081de4db31bc623043b8305bf55c676c55250a3b51deb293281d97f1ca7e9c9\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IDefaultAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\r\\n\\r\\ninterface IDefaultAccessControl is IAccessControlEnumerable {\\r\\n    /// @notice Checks that the address is contract admin.\\r\\n    /// @param who Address to check\\r\\n    /// @return `true` if who is admin, `false` otherwise\\r\\n    function isAdmin(address who) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks that the address is contract admin.\\r\\n    /// @param who Address to check\\r\\n    /// @return `true` if who is operator, `false` otherwise\\r\\n    function isOperator(address who) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x847c664c3e293a19109ec872e341f254a86c6f93548cea827f4e8a485cf994cd\",\"license\":\"MIT\"},\"contracts/interfaces/validators/IBaseValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../IProtocolGovernance.sol\\\";\\r\\n\\r\\ninterface IBaseValidator {\\r\\n    /// @notice Validator parameters\\r\\n    /// @param protocolGovernance Reference to Protocol Governance\\r\\n    struct ValidatorParams {\\r\\n        IProtocolGovernance protocolGovernance;\\r\\n    }\\r\\n\\r\\n    /// @notice Validator params staged to commit.\\r\\n    function stagedValidatorParams() external view returns (ValidatorParams memory);\\r\\n\\r\\n    /// @notice Timestamp after which validator params can be committed.\\r\\n    function stagedValidatorParamsTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Current validator params.\\r\\n    function validatorParams() external view returns (ValidatorParams memory);\\r\\n\\r\\n    /// @notice Stage new validator params for commit.\\r\\n    /// @param newParams New params for commit\\r\\n    function stageValidatorParams(ValidatorParams calldata newParams) external;\\r\\n\\r\\n    /// @notice Commit new validator params.\\r\\n    function commitValidatorParams() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3c5c93a6b5e383587fd11a091c5f891ba1eda593b2e35880016dc5f734f0c121\",\"license\":\"MIT\"},\"contracts/interfaces/validators/IValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"./IBaseValidator.sol\\\";\\r\\n\\r\\ninterface IValidator is IBaseValidator, IERC165 {\\r\\n    // @notice Validate if call can be made to external contract.\\r\\n    // @dev Reverts if validation failed. Returns nothing if validation is ok\\r\\n    // @param sender Sender of the externalCall method\\r\\n    // @param addr Address of the called contract\\r\\n    // @param value Ether value for the call\\r\\n    // @param selector Selector of the called method\\r\\n    // @param data Call data after selector\\r\\n    function validate(\\r\\n        address sender,\\r\\n        address addr,\\r\\n        uint256 value,\\r\\n        bytes4 selector,\\r\\n        bytes calldata data\\r\\n    ) external view;\\r\\n}\\r\\n\",\"keccak256\":\"0x2bc705f6fb23806084be636f44bba29376e1c4cf244676c7333a54357d29929e\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IERC20Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../external/aave/ILendingPool.sol\\\";\\r\\nimport \\\"./IIntegrationVault.sol\\\";\\r\\n\\r\\ninterface IERC20Vault is IIntegrationVault {\\r\\n    /// @notice Initialized a new contract.\\r\\n    /// @dev Can only be initialized by vault governance\\r\\n    /// @param nft_ NFT of the vault in the VaultRegistry\\r\\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\\r\\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xcdde1369935dabb4b1ed0b058c281ef30b71e646d95de060107f54a0f70eee9f\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IIntegrationVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../external/erc/IERC1271.sol\\\";\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\ninterface IIntegrationVault is IVault, IERC1271 {\\r\\n    /// @notice Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from\\r\\n    /// the contract balance and convert it to yUSDC.\\r\\n    /// @dev Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\\r\\n    ///\\r\\n    /// Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.\\r\\n    /// @param tokens Tokens to push\\r\\n    /// @param tokenAmounts Amounts of tokens to push\\r\\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\\r\\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\\r\\n    function push(\\r\\n        address[] memory tokens,\\r\\n        uint256[] memory tokenAmounts,\\r\\n        bytes memory options\\r\\n    ) external returns (uint256[] memory actualTokenAmounts);\\r\\n\\r\\n    /// @notice The same as `push` method above but transfers tokens to vault balance prior to calling push.\\r\\n    /// After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full).\\r\\n    /// @param tokens Tokens to push\\r\\n    /// @param tokenAmounts Amounts of tokens to push\\r\\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\\r\\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\\r\\n    function transferAndPush(\\r\\n        address from,\\r\\n        address[] memory tokens,\\r\\n        uint256[] memory tokenAmounts,\\r\\n        bytes memory options\\r\\n    ) external returns (uint256[] memory actualTokenAmounts);\\r\\n\\r\\n    /// @notice Pulls tokens from the underlying protocol to the `to` address.\\r\\n    /// @dev Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\\r\\n    /// Strategy is approved address for the vault NFT.\\r\\n    /// When called by vault owner this method just pulls the tokens from the protocol to the `to` address\\r\\n    /// When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault)\\r\\n    /// When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left.\\r\\n    /// Thus any vault other than zero vault cannot have any tokens on it\\r\\n    ///\\r\\n    /// Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\\r\\n    ///\\r\\n    /// Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.\\r\\n    /// @param to Address to receive the tokens\\r\\n    /// @param tokens Tokens to pull\\r\\n    /// @param tokenAmounts Amounts of tokens to pull\\r\\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\\r\\n    /// @return actualTokenAmounts The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)\\r\\n    function pull(\\r\\n        address to,\\r\\n        address[] memory tokens,\\r\\n        uint256[] memory tokenAmounts,\\r\\n        bytes memory options\\r\\n    ) external returns (uint256[] memory actualTokenAmounts);\\r\\n\\r\\n    /// @notice Claim ERC20 tokens from vault balance to zero vault.\\r\\n    /// @dev Cannot be called from zero vault.\\r\\n    /// @param tokens Tokens to claim\\r\\n    /// @return actualTokenAmounts Amounts reclaimed\\r\\n    function reclaimTokens(address[] memory tokens) external returns (uint256[] memory actualTokenAmounts);\\r\\n\\r\\n    /// @notice Execute one of whitelisted calls.\\r\\n    /// @dev Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\\r\\n    /// Strategy is approved address for the vault NFT.\\r\\n    ///\\r\\n    /// Since this method allows sending arbitrary transactions, the destinations of the calls\\r\\n    /// are whitelisted by Protocol Governance.\\r\\n    /// @param to Address of the reward pool\\r\\n    /// @param selector Selector of the call\\r\\n    /// @param data Abi encoded parameters to `to::selector`\\r\\n    /// @return result Result of execution of the call\\r\\n    function externalCall(\\r\\n        address to,\\r\\n        bytes4 selector,\\r\\n        bytes memory data\\r\\n    ) external payable returns (bytes memory result);\\r\\n}\\r\\n\",\"keccak256\":\"0xad9b4303b547c9304e51078cffc69552de4308a30036b1d07cc02a05ce5476d6\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IVaultGovernance.sol\\\";\\r\\n\\r\\ninterface IVault is IERC165 {\\r\\n    /// @notice Checks if the vault is initialized\\r\\n\\r\\n    function initialized() external view returns (bool);\\r\\n\\r\\n    /// @notice VaultRegistry NFT for this vault\\r\\n    function nft() external view returns (uint256);\\r\\n\\r\\n    /// @notice Address of the Vault Governance for this contract.\\r\\n    function vaultGovernance() external view returns (IVaultGovernance);\\r\\n\\r\\n    /// @notice ERC20 tokens under Vault management.\\r\\n    function vaultTokens() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Checks if a token is vault token\\r\\n    /// @param token Address of the token to check\\r\\n    /// @return `true` if this token is managed by Vault\\r\\n    function isVaultToken(address token) external view returns (bool);\\r\\n\\r\\n    /// @notice Total value locked for this contract.\\r\\n    /// @dev Generally it is the underlying token value of this contract in some\\r\\n    /// other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract.\\r\\n    /// The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\\r\\n    /// @return minTokenAmounts Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\\r\\n    /// @return maxTokenAmounts Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\\r\\n    function tvl() external view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\\r\\n\\r\\n    /// @notice Existential amounts for each token\\r\\n    function pullExistentials() external view returns (uint256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x9e74850f8f3ecd6eab0f6b1adaad960c443b14c128007a77260d2bb6bcb686d5\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IVaultGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"../IProtocolGovernance.sol\\\";\\r\\nimport \\\"../IVaultRegistry.sol\\\";\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\ninterface IVaultGovernance {\\r\\n    /// @notice Internal references of the contract.\\r\\n    /// @param protocolGovernance Reference to Protocol Governance\\r\\n    /// @param registry Reference to Vault Registry\\r\\n    struct InternalParams {\\r\\n        IProtocolGovernance protocolGovernance;\\r\\n        IVaultRegistry registry;\\r\\n        IVault singleton;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Strategy Params could be committed.\\r\\n    /// @param nft Nft of the vault\\r\\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params could be committed.\\r\\n    function delayedProtocolParamsTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params Per Vault could be committed.\\r\\n    /// @param nft Nft of the vault\\r\\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256);\\r\\n\\r\\n    /// @notice Timestamp in unix time seconds after which staged Internal Params could be committed.\\r\\n    function internalParamsTimestamp() external view returns (uint256);\\r\\n\\r\\n    /// @notice Internal Params of the contract.\\r\\n    function internalParams() external view returns (InternalParams memory);\\r\\n\\r\\n    /// @notice Staged new Internal Params.\\r\\n    /// @dev The Internal Params could be committed after internalParamsTimestamp\\r\\n    function stagedInternalParams() external view returns (InternalParams memory);\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// @notice Stage new Internal Params.\\r\\n    /// @param newParams New Internal Params\\r\\n    function stageInternalParams(InternalParams memory newParams) external;\\r\\n\\r\\n    /// @notice Commit staged Internal Params.\\r\\n    function commitInternalParams() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa5b24cd080393cb094d7887bbdc04fb4361fde90280e8bf9856428b6b6ebd90d\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IVaultRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IVaultRoot {\\r\\n    /// @notice Checks if subvault is present\\r\\n    /// @param nft_ index of subvault for check\\r\\n    /// @return `true` if subvault present, `false` otherwise\\r\\n    function hasSubvault(uint256 nft_) external view returns (bool);\\r\\n\\r\\n    /// @notice Get subvault by index\\r\\n    /// @param index Index of subvault\\r\\n    /// @return address Address of the contract\\r\\n    function subvaultAt(uint256 index) external view returns (address);\\r\\n\\r\\n    /// @notice Get index of subvault by nft\\r\\n    /// @param nft_ Nft for getting subvault\\r\\n    /// @return index Index of subvault\\r\\n    function subvaultOneBasedIndex(uint256 nft_) external view returns (uint256);\\r\\n\\r\\n    /// @notice Get all subvalutNfts in the current Vault\\r\\n    /// @return subvaultNfts Subvaults of NTFs\\r\\n    function subvaultNfts() external view returns (uint256[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xe519cf0fe904e58fe52eb040d3d1ff6faf8ccbb143dcab784d0a3a28362e9a4f\",\"license\":\"MIT\"},\"contracts/libraries/CommonLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./external/FullMath.sol\\\";\\r\\nimport \\\"./ExceptionsLibrary.sol\\\";\\r\\n\\r\\n/// @notice CommonLibrary shared utilities\\r\\nlibrary CommonLibrary {\\r\\n    uint256 constant DENOMINATOR = 10**9;\\r\\n    uint256 constant D18 = 10**18;\\r\\n    uint256 constant YEAR = 365 * 24 * 3600;\\r\\n    uint256 constant Q128 = 2**128;\\r\\n    uint256 constant Q96 = 2**96;\\r\\n    uint256 constant Q48 = 2**48;\\r\\n    uint256 constant Q160 = 2**160;\\r\\n    uint256 constant UNI_FEE_DENOMINATOR = 10**6;\\r\\n\\r\\n    /// @notice Sort uint256 using bubble sort. The sorting is done in-place.\\r\\n    /// @param arr Array of uint256\\r\\n    function sortUint(uint256[] memory arr) internal pure {\\r\\n        uint256 l = arr.length;\\r\\n        for (uint256 i = 0; i < l; ++i) {\\r\\n            for (uint256 j = i + 1; j < l; ++j) {\\r\\n                if (arr[i] > arr[j]) {\\r\\n                    uint256 temp = arr[i];\\r\\n                    arr[i] = arr[j];\\r\\n                    arr[j] = temp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if array of addresses is sorted and all adresses are unique\\r\\n    /// @param tokens A set of addresses to check\\r\\n    /// @return `true` if all addresses are sorted and unique, `false` otherwise\\r\\n    function isSortedAndUnique(address[] memory tokens) internal pure returns (bool) {\\r\\n        if (tokens.length < 2) {\\r\\n            return true;\\r\\n        }\\r\\n        for (uint256 i = 0; i < tokens.length - 1; ++i) {\\r\\n            if (tokens[i] >= tokens[i + 1]) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Projects tokenAmounts onto subset or superset of tokens\\r\\n    /// @dev\\r\\n    /// Requires both sets of tokens to be sorted. When tokens are not sorted, it's undefined behavior.\\r\\n    /// If there is a token in tokensToProject that is not part of tokens and corresponding tokenAmountsToProject > 0, reverts.\\r\\n    /// Zero token amount is eqiuvalent to missing token\\r\\n    function projectTokenAmounts(\\r\\n        address[] memory tokens,\\r\\n        address[] memory tokensToProject,\\r\\n        uint256[] memory tokenAmountsToProject\\r\\n    ) internal pure returns (uint256[] memory) {\\r\\n        uint256[] memory res = new uint256[](tokens.length);\\r\\n        uint256 t = 0;\\r\\n        uint256 tp = 0;\\r\\n        while ((t < tokens.length) && (tp < tokensToProject.length)) {\\r\\n            if (tokens[t] < tokensToProject[tp]) {\\r\\n                res[t] = 0;\\r\\n                t++;\\r\\n            } else if (tokens[t] > tokensToProject[tp]) {\\r\\n                if (tokenAmountsToProject[tp] == 0) {\\r\\n                    tp++;\\r\\n                } else {\\r\\n                    revert(\\\"TPS\\\");\\r\\n                }\\r\\n            } else {\\r\\n                res[t] = tokenAmountsToProject[tp];\\r\\n                t++;\\r\\n                tp++;\\r\\n            }\\r\\n        }\\r\\n        while (t < tokens.length) {\\r\\n            res[t] = 0;\\r\\n            t++;\\r\\n        }\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculated sqrt of uint in X96 format\\r\\n    /// @param xX96 input number in X96 format\\r\\n    /// @return sqrt of xX96 in X96 format\\r\\n    function sqrtX96(uint256 xX96) internal pure returns (uint256) {\\r\\n        uint256 sqX96 = sqrt(xX96);\\r\\n        return sqX96 << 48;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculated sqrt of uint\\r\\n    /// @param x input number\\r\\n    /// @return sqrt of x\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) {\\r\\n            xx >>= 128;\\r\\n            r <<= 64;\\r\\n        }\\r\\n        if (xx >= 0x10000000000000000) {\\r\\n            xx >>= 64;\\r\\n            r <<= 32;\\r\\n        }\\r\\n        if (xx >= 0x100000000) {\\r\\n            xx >>= 32;\\r\\n            r <<= 16;\\r\\n        }\\r\\n        if (xx >= 0x10000) {\\r\\n            xx >>= 16;\\r\\n            r <<= 8;\\r\\n        }\\r\\n        if (xx >= 0x100) {\\r\\n            xx >>= 8;\\r\\n            r <<= 4;\\r\\n        }\\r\\n        if (xx >= 0x10) {\\r\\n            xx >>= 4;\\r\\n            r <<= 2;\\r\\n        }\\r\\n        if (xx >= 0x8) {\\r\\n            r <<= 1;\\r\\n        }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        uint256 r1 = x / r;\\r\\n        return (r < r1 ? r : r1);\\r\\n    }\\r\\n\\r\\n    /// @notice Recovers signer address from signed message hash\\r\\n    /// @param _ethSignedMessageHash signed message\\r\\n    /// @param _signature contatenated ECDSA r, s, v (65 bytes)\\r\\n    /// @return Recovered address if the signature is valid, address(0) otherwise\\r\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) internal pure returns (address) {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\r\\n\\r\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /// @notice Get ECDSA r, s, v from signature\\r\\n    /// @param sig signature (65 bytes)\\r\\n    /// @return r ECDSA r\\r\\n    /// @return s ECDSA s\\r\\n    /// @return v ECDSA v\\r\\n    function splitSignature(bytes memory sig)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bytes32 r,\\r\\n            bytes32 s,\\r\\n            uint8 v\\r\\n        )\\r\\n    {\\r\\n        require(sig.length == 65, ExceptionsLibrary.INVALID_LENGTH);\\r\\n\\r\\n        assembly {\\r\\n            r := mload(add(sig, 32))\\r\\n            s := mload(add(sig, 64))\\r\\n            v := byte(0, mload(add(sig, 96)))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7d34a904dda4bf094ea37d2f7aeaac1b2487f450e9df2d39e1027ef97b6b071c\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/// @notice Exceptions stores project`s smart-contracts exceptions\\r\\nlibrary ExceptionsLibrary {\\r\\n    string constant ADDRESS_ZERO = \\\"AZ\\\";\\r\\n    string constant VALUE_ZERO = \\\"VZ\\\";\\r\\n    string constant EMPTY_LIST = \\\"EMPL\\\";\\r\\n    string constant NOT_FOUND = \\\"NF\\\";\\r\\n    string constant INIT = \\\"INIT\\\";\\r\\n    string constant DUPLICATE = \\\"DUP\\\";\\r\\n    string constant NULL = \\\"NULL\\\";\\r\\n    string constant TIMESTAMP = \\\"TS\\\";\\r\\n    string constant FORBIDDEN = \\\"FRB\\\";\\r\\n    string constant ALLOWLIST = \\\"ALL\\\";\\r\\n    string constant LIMIT_OVERFLOW = \\\"LIMO\\\";\\r\\n    string constant LIMIT_UNDERFLOW = \\\"LIMU\\\";\\r\\n    string constant INVALID_VALUE = \\\"INV\\\";\\r\\n    string constant INVARIANT = \\\"INVA\\\";\\r\\n    string constant INVALID_TARGET = \\\"INVTR\\\";\\r\\n    string constant INVALID_TOKEN = \\\"INVTO\\\";\\r\\n    string constant INVALID_INTERFACE = \\\"INVI\\\";\\r\\n    string constant INVALID_SELECTOR = \\\"INVS\\\";\\r\\n    string constant INVALID_STATE = \\\"INVST\\\";\\r\\n    string constant INVALID_LENGTH = \\\"INVL\\\";\\r\\n    string constant LOCK = \\\"LCKD\\\";\\r\\n    string constant DISABLED = \\\"DIS\\\";\\r\\n    string constant REBALANCE_NOT_NEEDED = \\\"RNN\\\";\\r\\n}\\r\\n\",\"keccak256\":\"0x3aa0aa636063dcdbf6742b1b0b51ae15df3ba0f225c5c4178ee23e91bfc15060\",\"license\":\"MIT\"},\"contracts/libraries/PermissionIdsLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/// @notice Stores permission ids for addresses\\r\\nlibrary PermissionIdsLibrary {\\r\\n    // The msg.sender is allowed to register vault\\r\\n    uint8 constant REGISTER_VAULT = 0;\\r\\n    // The msg.sender is allowed to create vaults\\r\\n    uint8 constant CREATE_VAULT = 1;\\r\\n    // The token is allowed to be transfered by vault\\r\\n    uint8 constant ERC20_TRANSFER = 2;\\r\\n    // The token is allowed to be added to vault\\r\\n    uint8 constant ERC20_VAULT_TOKEN = 3;\\r\\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by any strategy\\r\\n    uint8 constant ERC20_APPROVE = 4;\\r\\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by trusted strategy\\r\\n    uint8 constant ERC20_APPROVE_RESTRICTED = 5;\\r\\n    // Strategy allowed using restricted API\\r\\n    uint8 constant TRUSTED_STRATEGY = 6;\\r\\n}\\r\\n\",\"keccak256\":\"0x8f78667de19682976b7b5f2f13eac15d2344a0387164e819895d363e19c6058c\",\"license\":\"MIT\"},\"contracts/libraries/external/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.9;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n    function mulDiv(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        // diff: original lib works under 0.7.6 with overflows enabled\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = a * b\\r\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n            // then use the Chinese Remainder Theorem to reconstruct\\r\\n            // the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2**256 + prod0\\r\\n            uint256 prod0; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(a, b, not(0))\\r\\n                prod0 := mul(a, b)\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division\\r\\n            if (prod1 == 0) {\\r\\n                require(denominator > 0);\\r\\n                assembly {\\r\\n                    result := div(prod0, denominator)\\r\\n                }\\r\\n                return result;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2**256.\\r\\n            // Also prevents denominator == 0\\r\\n            require(denominator > prod1);\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n            // Compute remainder using mulmod\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                remainder := mulmod(a, b, denominator)\\r\\n            }\\r\\n            // Subtract 256 bit number from 512 bit number\\r\\n            assembly {\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator\\r\\n            // Compute largest power of two divisor of denominator.\\r\\n            // Always >= 1.\\r\\n            // diff: original uint256 twos = -denominator & denominator;\\r\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\r\\n            // Divide denominator by power of two\\r\\n            assembly {\\r\\n                denominator := div(denominator, twos)\\r\\n            }\\r\\n\\r\\n            // Divide [prod1 prod0] by the factors of two\\r\\n            assembly {\\r\\n                prod0 := div(prod0, twos)\\r\\n            }\\r\\n            // Shift in bits from prod1 into prod0. For this we need\\r\\n            // to flip `twos` such that it is 2**256 / twos.\\r\\n            // If twos is zero, then it becomes one\\r\\n            assembly {\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2**256\\r\\n            // Now that denominator is an odd number, it has an inverse\\r\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n            // Compute the inverse by starting with a seed that is correct\\r\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n            uint256 inv = (3 * denominator) ^ 2;\\r\\n            // Now use Newton-Raphson iteration to improve the precision.\\r\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n            // arithmetic, doubling the correct bits in each step.\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying\\r\\n            // with the modular inverse of denominator. This will give us the\\r\\n            // correct result modulo 2**256. Since the precoditions guarantee\\r\\n            // that the outcome is less than 2**256, this is the final result.\\r\\n            // We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inv;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    function mulDivRoundingUp(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        // diff: original lib works under 0.7.6 with overflows enabled\\r\\n        unchecked {\\r\\n            result = mulDiv(a, b, denominator);\\r\\n            if (mulmod(a, b, denominator) > 0) {\\r\\n                require(result < type(uint256).max);\\r\\n                result++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mulDivSigned(\\r\\n        int256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (int256 result) {\\r\\n        if (a < 0) return -int256(mulDiv(uint256(-a), b, denominator));\\r\\n        return int256(mulDiv(uint256(a), b, denominator));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57f9ed1224e68ed9e057313f83a5ccbb5ceb309f0a01b8fbc45ebc167f5f5dcb\",\"license\":\"MIT\"},\"contracts/vaults/ERC20Vault.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\r\\npragma solidity =0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IProtocolGovernance.sol\\\";\\r\\nimport \\\"../interfaces/vaults/IERC20Vault.sol\\\";\\r\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\r\\nimport \\\"./IntegrationVault.sol\\\";\\r\\n\\r\\n/// @notice Vault that stores ERC20 tokens.\\r\\ncontract ERC20Vault is IERC20Vault, IntegrationVault {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @inheritdoc IVault\\r\\n    function tvl() public view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\\r\\n        address[] memory tokens = _vaultTokens;\\r\\n        uint256 len = tokens.length;\\r\\n        minTokenAmounts = new uint256[](len);\\r\\n        for (uint256 i = 0; i < len; ++i) {\\r\\n            minTokenAmounts[i] = IERC20(tokens[i]).balanceOf(address(this));\\r\\n        }\\r\\n        maxTokenAmounts = minTokenAmounts;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n    /// @inheritdoc IERC20Vault\\r\\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external {\\r\\n        _initialize(vaultTokens_, nft_);\\r\\n    }\\r\\n\\r\\n    // -------------------  INTERNAL, VIEW  -----------------------\\r\\n    function _isReclaimForbidden(address token) internal view override returns (bool) {\\r\\n        uint256 len = _vaultTokens.length;\\r\\n        for (uint256 i = 0; i < len; ++i) {\\r\\n            if (token == _vaultTokens[i]) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // -------------------  INTERNAL, MUTATING  -------------------\\r\\n\\r\\n    function _push(uint256[] memory tokenAmounts, bytes memory)\\r\\n        internal\\r\\n        pure\\r\\n        override\\r\\n        returns (uint256[] memory actualTokenAmounts)\\r\\n    {\\r\\n        // no-op, tokens are already on balance\\r\\n        return tokenAmounts;\\r\\n    }\\r\\n\\r\\n    function _pull(\\r\\n        address to,\\r\\n        uint256[] memory tokenAmounts,\\r\\n        bytes memory options\\r\\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\\r\\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\\r\\n        uint256[] memory pushTokenAmounts = new uint256[](tokenAmounts.length);\\r\\n        address[] memory tokens = _vaultTokens;\\r\\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\\r\\n        address owner = registry.ownerOf(_nft);\\r\\n\\r\\n        for (uint256 i = 0; i < tokenAmounts.length; ++i) {\\r\\n            IERC20 vaultToken = IERC20(tokens[i]);\\r\\n            uint256 balance = vaultToken.balanceOf(address(this));\\r\\n            uint256 amount = tokenAmounts[i] < balance ? tokenAmounts[i] : balance;\\r\\n            IERC20(tokens[i]).safeTransfer(to, amount);\\r\\n            actualTokenAmounts[i] = amount;\\r\\n            if (owner != to) {\\r\\n                // this will equal to amounts pulled + any accidental prior balances on `to`;\\r\\n                pushTokenAmounts[i] = IERC20(tokens[i]).balanceOf(to);\\r\\n            }\\r\\n        }\\r\\n        if (owner != to) {\\r\\n            // if we pull as a strategy, make sure everything is pushed\\r\\n            IIntegrationVault(to).push(tokens, pushTokenAmounts, options);\\r\\n            // any accidental prior balances + push leftovers\\r\\n            uint256[] memory reclaimed = IIntegrationVault(to).reclaimTokens(tokens);\\r\\n            for (uint256 i = 0; i < tokenAmounts.length; i++) {\\r\\n                // equals to exactly how much is pushed\\r\\n                actualTokenAmounts[i] = actualTokenAmounts[i] >= reclaimed[i]\\r\\n                    ? actualTokenAmounts[i] - reclaimed[i]\\r\\n                    : 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IntegrationVault\\r\\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, IntegrationVault) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IERC20Vault).interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x746b7b529fde7c8d52973829f866f21410cd4cd1f27af6e570553d6250ca0cc7\",\"license\":\"BSL-1.1\"},\"contracts/vaults/IntegrationVault.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../interfaces/external/erc/IERC1271.sol\\\";\\r\\nimport \\\"../interfaces/vaults/IVaultRoot.sol\\\";\\r\\nimport \\\"../interfaces/vaults/IIntegrationVault.sol\\\";\\r\\nimport \\\"../interfaces/validators/IValidator.sol\\\";\\r\\nimport \\\"../libraries/CommonLibrary.sol\\\";\\r\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\r\\nimport \\\"../libraries/PermissionIdsLibrary.sol\\\";\\r\\nimport \\\"./VaultGovernance.sol\\\";\\r\\nimport \\\"./Vault.sol\\\";\\r\\n\\r\\n/// @notice Abstract contract that has logic common for every Vault.\\r\\n/// @dev Notes:\\r\\n/// ### ERC-721\\r\\n///\\r\\n/// Each Vault should be registered in VaultRegistry and get corresponding VaultRegistry NFT.\\r\\n///\\r\\n/// ### Access control\\r\\n///\\r\\n/// `push` and `pull` methods are only allowed for owner / approved person of the NFT. However,\\r\\n/// `pull` for approved person also checks that pull destination is another vault of the Vault System.\\r\\n///\\r\\n/// The semantics is: NFT owner owns all Vault liquidity, Approved person is liquidity manager.\\r\\n/// ApprovedForAll person cannot do anything except ERC-721 token transfers.\\r\\n///\\r\\n/// Both NFT owner and approved person can call externalCall method which claims liquidity mining rewards (if any)\\r\\n///\\r\\n/// `reclaimTokens` for claiming rewards given by an underlying protocol to erc20Vault in order to sell them there\\r\\nabstract contract IntegrationVault is IIntegrationVault, ReentrancyGuard, Vault {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @inheritdoc IERC165\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Vault) returns (bool) {\\r\\n        return\\r\\n            super.supportsInterface(interfaceId) ||\\r\\n            (interfaceId == type(IIntegrationVault).interfaceId) ||\\r\\n            (interfaceId == type(IERC1271).interfaceId);\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// @inheritdoc IIntegrationVault\\r\\n    function push(\\r\\n        address[] memory tokens,\\r\\n        uint256[] memory tokenAmounts,\\r\\n        bytes memory options\\r\\n    ) public nonReentrant returns (uint256[] memory actualTokenAmounts) {\\r\\n        uint256 nft_ = _nft;\\r\\n        require(nft_ != 0, ExceptionsLibrary.INIT);\\r\\n        IVaultRegistry vaultRegistry = _vaultGovernance.internalParams().registry;\\r\\n        IVault ownerVault = IVault(vaultRegistry.ownerOf(nft_)); // Also checks that the token exists\\r\\n        uint256 ownerNft = vaultRegistry.nftForVault(address(ownerVault));\\r\\n        require(ownerNft != 0, ExceptionsLibrary.NOT_FOUND); // require deposits only through Vault\\r\\n        uint256[] memory pTokenAmounts = _validateAndProjectTokens(tokens, tokenAmounts);\\r\\n        uint256[] memory pActualTokenAmounts = _push(pTokenAmounts, options);\\r\\n        actualTokenAmounts = CommonLibrary.projectTokenAmounts(tokens, _vaultTokens, pActualTokenAmounts);\\r\\n        emit Push(pActualTokenAmounts);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IIntegrationVault\\r\\n    function transferAndPush(\\r\\n        address from,\\r\\n        address[] memory tokens,\\r\\n        uint256[] memory tokenAmounts,\\r\\n        bytes memory options\\r\\n    ) external returns (uint256[] memory actualTokenAmounts) {\\r\\n        uint256 len = tokens.length;\\r\\n        for (uint256 i = 0; i < len; ++i)\\r\\n            if (tokenAmounts[i] != 0) {\\r\\n                IERC20(tokens[i]).safeTransferFrom(from, address(this), tokenAmounts[i]);\\r\\n            }\\r\\n\\r\\n        actualTokenAmounts = push(tokens, tokenAmounts, options);\\r\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\r\\n            uint256 leftover = actualTokenAmounts[i] < tokenAmounts[i] ? tokenAmounts[i] - actualTokenAmounts[i] : 0;\\r\\n            if (leftover != 0) IERC20(tokens[i]).safeTransfer(from, leftover);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IIntegrationVault\\r\\n    function pull(\\r\\n        address to,\\r\\n        address[] memory tokens,\\r\\n        uint256[] memory tokenAmounts,\\r\\n        bytes memory options\\r\\n    ) external nonReentrant returns (uint256[] memory actualTokenAmounts) {\\r\\n        uint256 nft_ = _nft;\\r\\n        require(nft_ != 0, ExceptionsLibrary.INIT);\\r\\n        require(_isApprovedOrOwner(msg.sender), ExceptionsLibrary.FORBIDDEN); // Also checks that the token exists\\r\\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\\r\\n        address owner = registry.ownerOf(nft_);\\r\\n        IVaultRoot root = _root(registry, nft_, owner);\\r\\n        if (owner != msg.sender) {\\r\\n            address zeroVault = root.subvaultAt(0);\\r\\n            if (zeroVault == address(this)) {\\r\\n                // If we pull from zero vault\\r\\n                require(\\r\\n                    root.hasSubvault(registry.nftForVault(to)) && to != address(this),\\r\\n                    ExceptionsLibrary.INVALID_TARGET\\r\\n                );\\r\\n            } else {\\r\\n                // If we pull from other vault\\r\\n                require(zeroVault == to, ExceptionsLibrary.INVALID_TARGET);\\r\\n            }\\r\\n        }\\r\\n        uint256[] memory pTokenAmounts = _validateAndProjectTokens(tokens, tokenAmounts);\\r\\n        uint256[] memory pActualTokenAmounts = _pull(to, pTokenAmounts, options);\\r\\n        actualTokenAmounts = CommonLibrary.projectTokenAmounts(tokens, _vaultTokens, pActualTokenAmounts);\\r\\n        emit Pull(to, actualTokenAmounts);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IIntegrationVault\\r\\n    function reclaimTokens(address[] memory tokens)\\r\\n        external\\r\\n        virtual\\r\\n        nonReentrant\\r\\n        returns (uint256[] memory actualTokenAmounts)\\r\\n    {\\r\\n        uint256 nft_ = _nft;\\r\\n        require(nft_ != 0, ExceptionsLibrary.INIT);\\r\\n        IVaultGovernance.InternalParams memory params = _vaultGovernance.internalParams();\\r\\n        IProtocolGovernance governance = params.protocolGovernance;\\r\\n        IVaultRegistry registry = params.registry;\\r\\n        address owner = registry.ownerOf(nft_);\\r\\n        address to = _root(registry, nft_, owner).subvaultAt(0);\\r\\n        actualTokenAmounts = new uint256[](tokens.length);\\r\\n        if (to == address(this)) {\\r\\n            return actualTokenAmounts;\\r\\n        }\\r\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\r\\n            if (\\r\\n                _isReclaimForbidden(tokens[i]) ||\\r\\n                !governance.hasPermission(tokens[i], PermissionIdsLibrary.ERC20_TRANSFER)\\r\\n            ) {\\r\\n                continue;\\r\\n            }\\r\\n            IERC20 token = IERC20(tokens[i]);\\r\\n            actualTokenAmounts[i] = token.balanceOf(address(this));\\r\\n\\r\\n            token.safeTransfer(to, actualTokenAmounts[i]);\\r\\n        }\\r\\n        emit ReclaimTokens(to, tokens, actualTokenAmounts);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IERC1271\\r\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue) {\\r\\n        IVaultGovernance.InternalParams memory params = _vaultGovernance.internalParams();\\r\\n        IVaultRegistry registry = params.registry;\\r\\n        IProtocolGovernance protocolGovernance = params.protocolGovernance;\\r\\n        uint256 nft_ = _nft;\\r\\n        if (nft_ == 0) {\\r\\n            return 0xffffffff;\\r\\n        }\\r\\n        address strategy = registry.getApproved(nft_);\\r\\n        if (!protocolGovernance.hasPermission(strategy, PermissionIdsLibrary.TRUSTED_STRATEGY)) {\\r\\n            return 0xffffffff;\\r\\n        }\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(strategy)\\r\\n        }\\r\\n        if (size > 0) {\\r\\n            if (IERC165(strategy).supportsInterface(type(IERC1271).interfaceId)) {\\r\\n                return IERC1271(strategy).isValidSignature(_hash, _signature);\\r\\n            } else {\\r\\n                return 0xffffffff;\\r\\n            }\\r\\n        }\\r\\n        if (CommonLibrary.recoverSigner(_hash, _signature) == strategy) {\\r\\n            return 0x1626ba7e;\\r\\n        }\\r\\n        return 0xffffffff;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IIntegrationVault\\r\\n    function externalCall(\\r\\n        address to,\\r\\n        bytes4 selector,\\r\\n        bytes calldata data\\r\\n    ) external payable nonReentrant returns (bytes memory result) {\\r\\n        require(_nft != 0, ExceptionsLibrary.INIT);\\r\\n        require(_isApprovedOrOwner(msg.sender), ExceptionsLibrary.FORBIDDEN);\\r\\n        IProtocolGovernance protocolGovernance = _vaultGovernance.internalParams().protocolGovernance;\\r\\n        IValidator validator = IValidator(protocolGovernance.validators(to));\\r\\n        require(address(validator) != address(0), ExceptionsLibrary.FORBIDDEN);\\r\\n        validator.validate(msg.sender, to, msg.value, selector, data);\\r\\n        (bool res, bytes memory returndata) = to.call{value: msg.value}(abi.encodePacked(selector, data));\\r\\n        if (!res) {\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                // Bubble up revert reason\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        }\\r\\n        result = returndata;\\r\\n    }\\r\\n\\r\\n    // -------------------  INTERNAL, VIEW  -------------------\\r\\n\\r\\n    function _validateAndProjectTokens(address[] memory tokens, uint256[] memory tokenAmounts)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[] memory pTokenAmounts)\\r\\n    {\\r\\n        require(CommonLibrary.isSortedAndUnique(tokens), ExceptionsLibrary.INVARIANT);\\r\\n        require(tokens.length == tokenAmounts.length, ExceptionsLibrary.INVALID_VALUE);\\r\\n        pTokenAmounts = CommonLibrary.projectTokenAmounts(_vaultTokens, tokens, tokenAmounts);\\r\\n    }\\r\\n\\r\\n    function _root(\\r\\n        IVaultRegistry registry,\\r\\n        uint256 thisNft,\\r\\n        address thisOwner\\r\\n    ) internal view returns (IVaultRoot) {\\r\\n        uint256 thisOwnerNft = registry.nftForVault(thisOwner);\\r\\n        require((thisNft != 0) && (thisOwnerNft != 0), ExceptionsLibrary.INIT);\\r\\n\\r\\n        return IVaultRoot(thisOwner);\\r\\n    }\\r\\n\\r\\n    function _isApprovedOrOwner(address sender) internal view returns (bool) {\\r\\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\\r\\n        uint256 nft_ = _nft;\\r\\n        if (nft_ == 0) {\\r\\n            return false;\\r\\n        }\\r\\n        return registry.getApproved(nft_) == sender || registry.ownerOf(nft_) == sender;\\r\\n    }\\r\\n\\r\\n    /// @notice check if token is forbidden to transfer under reclaim\\r\\n    /// @dev it is done in order to prevent reclaiming internal protocol tokens\\r\\n    ///      for example to prevent YEarn tokens to reclaimed\\r\\n    ///      if our vault is managing tokens, depositing it in YEarn\\r\\n    /// @param token The address of token to check\\r\\n    /// @return if token is forbidden\\r\\n    function _isReclaimForbidden(address token) internal view virtual returns (bool);\\r\\n\\r\\n    // -------------------  INTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// Guaranteed to have exact signature matchinn vault tokens\\r\\n    function _push(uint256[] memory tokenAmounts, bytes memory options)\\r\\n        internal\\r\\n        virtual\\r\\n        returns (uint256[] memory actualTokenAmounts);\\r\\n\\r\\n    /// Guaranteed to have exact signature matchinn vault tokens\\r\\n    function _pull(\\r\\n        address to,\\r\\n        uint256[] memory tokenAmounts,\\r\\n        bytes memory options\\r\\n    ) internal virtual returns (uint256[] memory actualTokenAmounts);\\r\\n\\r\\n    // --------------------------  EVENTS  --------------------------\\r\\n\\r\\n    /// @notice Emitted on successful push\\r\\n    /// @param tokenAmounts The amounts of tokens to pushed\\r\\n    event Push(uint256[] tokenAmounts);\\r\\n\\r\\n    /// @notice Emitted on successful pull\\r\\n    /// @param to The target address for pulled tokens\\r\\n    /// @param tokenAmounts The amounts of tokens to pull\\r\\n    event Pull(address to, uint256[] tokenAmounts);\\r\\n\\r\\n    /// @notice Emitted when tokens are reclaimed\\r\\n    /// @param to The target address for pulled tokens\\r\\n    /// @param tokens ERC20 tokens to be reclaimed\\r\\n    /// @param tokenAmounts The amounts of reclaims\\r\\n    event ReclaimTokens(address to, address[] tokens, uint256[] tokenAmounts);\\r\\n}\\r\\n\",\"keccak256\":\"0xe7ec2152a7bd9c5c06aebd670f1a6c8f04e42ca648513b64549e1456c1ef7c3d\",\"license\":\"BSL-1.1\"},\"contracts/vaults/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"../libraries/CommonLibrary.sol\\\";\\r\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\r\\nimport \\\"../interfaces/vaults/IVault.sol\\\";\\r\\nimport \\\"./VaultGovernance.sol\\\";\\r\\n\\r\\n/// @notice Abstract contract that has logic common for every Vault.\\r\\n/// @dev Notes:\\r\\n/// ### ERC-721\\r\\n///\\r\\n/// Each Vault should be registered in VaultRegistry and get corresponding VaultRegistry NFT.\\r\\n///\\r\\n/// ### Access control\\r\\n///\\r\\n/// `push` and `pull` methods are only allowed for owner / approved person of the NFT. However,\\r\\n/// `pull` for approved person also checks that pull destination is another vault of the Vault System.\\r\\n///\\r\\n/// The semantics is: NFT owner owns all Vault liquidity, Approved person is liquidity manager.\\r\\n/// ApprovedForAll person cannot do anything except ERC-721 token transfers.\\r\\n///\\r\\n/// Both NFT owner and approved person can call externalCall method which claims liquidity mining rewards (if any)\\r\\n///\\r\\n/// `reclaimTokens` for mistakenly transfered tokens (not included into vaultTokens) additionally can be withdrawn by\\r\\n/// the protocol admin\\r\\nabstract contract Vault is IVault, ERC165 {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IVaultGovernance internal _vaultGovernance;\\r\\n    address[] internal _vaultTokens;\\r\\n    mapping(address => int256) internal _vaultTokensIndex;\\r\\n    uint256 internal _nft;\\r\\n    uint256[] internal _pullExistentials;\\r\\n\\r\\n    constructor() {\\r\\n        // lock initialization and thus all mutations for any deployed Vault\\r\\n        _nft = type(uint256).max;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @inheritdoc IVault\\r\\n    function initialized() external view returns (bool) {\\r\\n        return _nft != 0;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVault\\r\\n    function isVaultToken(address token) public view returns (bool) {\\r\\n        return _vaultTokensIndex[token] != 0;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVault\\r\\n    function vaultGovernance() external view returns (IVaultGovernance) {\\r\\n        return _vaultGovernance;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVault\\r\\n    function vaultTokens() external view returns (address[] memory) {\\r\\n        return _vaultTokens;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVault\\r\\n    function nft() external view returns (uint256) {\\r\\n        return _nft;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVault\\r\\n    function tvl() public view virtual returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\\r\\n\\r\\n    /// @inheritdoc IVault\\r\\n    function pullExistentials() external view returns (uint256[] memory) {\\r\\n        return _pullExistentials;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IERC165\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IVault).interfaceId);\\r\\n    }\\r\\n\\r\\n    // -------------------  INTERNAL, MUTATING  -------------------\\r\\n\\r\\n    function _initialize(address[] memory vaultTokens_, uint256 nft_) internal virtual {\\r\\n        require(_nft == 0, ExceptionsLibrary.INIT);\\r\\n        require(CommonLibrary.isSortedAndUnique(vaultTokens_), ExceptionsLibrary.INVARIANT);\\r\\n        require(nft_ != 0, ExceptionsLibrary.VALUE_ZERO); // guarantees that this method can only be called once\\r\\n        IProtocolGovernance governance = IVaultGovernance(msg.sender).internalParams().protocolGovernance;\\r\\n        require(\\r\\n            vaultTokens_.length > 0 && vaultTokens_.length <= governance.maxTokensPerVault(),\\r\\n            ExceptionsLibrary.INVALID_VALUE\\r\\n        );\\r\\n        for (uint256 i = 0; i < vaultTokens_.length; i++) {\\r\\n            require(\\r\\n                governance.hasPermission(vaultTokens_[i], PermissionIdsLibrary.ERC20_VAULT_TOKEN),\\r\\n                ExceptionsLibrary.FORBIDDEN\\r\\n            );\\r\\n        }\\r\\n        _vaultGovernance = IVaultGovernance(msg.sender);\\r\\n        _vaultTokens = vaultTokens_;\\r\\n        _nft = nft_;\\r\\n        uint256 len = _vaultTokens.length;\\r\\n        for (uint256 i = 0; i < len; ++i) {\\r\\n            _vaultTokensIndex[vaultTokens_[i]] = int256(i + 1);\\r\\n\\r\\n            IERC20Metadata token = IERC20Metadata(vaultTokens_[i]);\\r\\n            _pullExistentials.push(10**(token.decimals() / 2));\\r\\n        }\\r\\n        emit Initialized(tx.origin, msg.sender, vaultTokens_, nft_);\\r\\n    }\\r\\n\\r\\n    // --------------------------  EVENTS  --------------------------\\r\\n\\r\\n    /// @notice Emitted when Vault is intialized\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param vaultTokens_ ERC20 tokens under the vault management\\r\\n    /// @param nft_ VaultRegistry NFT assigned to the vault\\r\\n    event Initialized(address indexed origin, address indexed sender, address[] vaultTokens_, uint256 nft_);\\r\\n}\\r\\n\",\"keccak256\":\"0x4eb0e3cf8c5fb6143156b357d3fc2a6675b06b18b885e3cf42acd5e460ca8d4a\",\"license\":\"BSL-1.1\"},\"contracts/vaults/VaultGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"../interfaces/IProtocolGovernance.sol\\\";\\r\\nimport \\\"../interfaces/vaults/IVaultGovernance.sol\\\";\\r\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\r\\nimport \\\"../libraries/PermissionIdsLibrary.sol\\\";\\r\\n\\r\\n/// @notice Internal contract for managing different params.\\r\\n/// @dev The contract should be overriden by the concrete VaultGovernance,\\r\\n/// define different params structs and use abi.decode / abi.encode to serialize\\r\\n/// to bytes in this contract. It also should emit events on params change.\\r\\nabstract contract VaultGovernance is IVaultGovernance, ERC165 {\\r\\n    InternalParams internal _internalParams;\\r\\n    InternalParams private _stagedInternalParams;\\r\\n    uint256 internal _internalParamsTimestamp;\\r\\n\\r\\n    mapping(uint256 => bytes) internal _delayedStrategyParams;\\r\\n    mapping(uint256 => bytes) internal _stagedDelayedStrategyParams;\\r\\n    mapping(uint256 => uint256) internal _delayedStrategyParamsTimestamp;\\r\\n\\r\\n    mapping(uint256 => bytes) internal _delayedProtocolPerVaultParams;\\r\\n    mapping(uint256 => bytes) internal _stagedDelayedProtocolPerVaultParams;\\r\\n    mapping(uint256 => uint256) internal _delayedProtocolPerVaultParamsTimestamp;\\r\\n\\r\\n    bytes internal _delayedProtocolParams;\\r\\n    bytes internal _stagedDelayedProtocolParams;\\r\\n    uint256 internal _delayedProtocolParamsTimestamp;\\r\\n\\r\\n    mapping(uint256 => bytes) internal _strategyParams;\\r\\n    bytes internal _protocolParams;\\r\\n    bytes internal _operatorParams;\\r\\n\\r\\n    /// @notice Creates a new contract.\\r\\n    /// @param internalParams_ Initial Internal Params\\r\\n    constructor(InternalParams memory internalParams_) {\\r\\n        require(address(internalParams_.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\r\\n        require(address(internalParams_.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\r\\n        require(address(internalParams_.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\r\\n        _internalParams = internalParams_;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, VIEW  -------------------\\r\\n\\r\\n    /// @inheritdoc IVaultGovernance\\r\\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256) {\\r\\n        return _delayedStrategyParamsTimestamp[nft];\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultGovernance\\r\\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256) {\\r\\n        return _delayedProtocolPerVaultParamsTimestamp[nft];\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultGovernance\\r\\n    function delayedProtocolParamsTimestamp() external view returns (uint256) {\\r\\n        return _delayedProtocolParamsTimestamp;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultGovernance\\r\\n    function internalParamsTimestamp() external view returns (uint256) {\\r\\n        return _internalParamsTimestamp;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultGovernance\\r\\n    function internalParams() external view returns (InternalParams memory) {\\r\\n        return _internalParams;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultGovernance\\r\\n    function stagedInternalParams() external view returns (InternalParams memory) {\\r\\n        return _stagedInternalParams;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\r\\n        return super.supportsInterface(interfaceID) || interfaceID == type(IVaultGovernance).interfaceId;\\r\\n    }\\r\\n\\r\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\r\\n\\r\\n    /// @inheritdoc IVaultGovernance\\r\\n    function stageInternalParams(InternalParams memory newParams) external {\\r\\n        _requireProtocolAdmin();\\r\\n        require(address(newParams.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\r\\n        require(address(newParams.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\r\\n        require(address(newParams.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\r\\n        _stagedInternalParams = newParams;\\r\\n        _internalParamsTimestamp = block.timestamp + _internalParams.protocolGovernance.governanceDelay();\\r\\n        emit StagedInternalParams(tx.origin, msg.sender, newParams, _internalParamsTimestamp);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IVaultGovernance\\r\\n    function commitInternalParams() external {\\r\\n        _requireProtocolAdmin();\\r\\n        require(_internalParamsTimestamp != 0, ExceptionsLibrary.NULL);\\r\\n        require(block.timestamp >= _internalParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\r\\n        _internalParams = _stagedInternalParams;\\r\\n        delete _internalParamsTimestamp;\\r\\n        delete _stagedInternalParams;\\r\\n        emit CommitedInternalParams(tx.origin, msg.sender, _internalParams);\\r\\n    }\\r\\n\\r\\n    // -------------------  INTERNAL, VIEW  -------------------\\r\\n\\r\\n    function _requireAtLeastStrategy(uint256 nft) internal view {\\r\\n        require(\\r\\n            (_internalParams.protocolGovernance.isAdmin(msg.sender) ||\\r\\n                _internalParams.registry.getApproved(nft) == msg.sender ||\\r\\n                (_internalParams.registry.ownerOf(nft) == msg.sender)),\\r\\n            ExceptionsLibrary.FORBIDDEN\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _requireProtocolAdmin() internal view {\\r\\n        require(_internalParams.protocolGovernance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\\r\\n    }\\r\\n\\r\\n    function _requireAtLeastOperator() internal view {\\r\\n        IProtocolGovernance governance = _internalParams.protocolGovernance;\\r\\n        require(governance.isAdmin(msg.sender) || governance.isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\\r\\n    }\\r\\n\\r\\n    // -------------------  INTERNAL, MUTATING  -------------------\\r\\n\\r\\n    function _createVault(address owner) internal returns (address vault, uint256 nft) {\\r\\n        IProtocolGovernance protocolGovernance = IProtocolGovernance(_internalParams.protocolGovernance);\\r\\n        require(\\r\\n            protocolGovernance.hasPermission(msg.sender, PermissionIdsLibrary.CREATE_VAULT),\\r\\n            ExceptionsLibrary.FORBIDDEN\\r\\n        );\\r\\n        IVaultRegistry vaultRegistry = _internalParams.registry;\\r\\n        nft = vaultRegistry.vaultsCount() + 1;\\r\\n        vault = Clones.cloneDeterministic(address(_internalParams.singleton), bytes32(nft));\\r\\n        vaultRegistry.registerVault(address(vault), owner);\\r\\n    }\\r\\n\\r\\n    /// @notice Set Delayed Strategy Params\\r\\n    /// @param nft Nft of the vault\\r\\n    /// @param params New params\\r\\n    function _stageDelayedStrategyParams(uint256 nft, bytes memory params) internal {\\r\\n        _requireAtLeastStrategy(nft);\\r\\n        _stagedDelayedStrategyParams[nft] = params;\\r\\n        uint256 delayFactor = _delayedStrategyParams[nft].length == 0 ? 0 : 1;\\r\\n        _delayedStrategyParamsTimestamp[nft] =\\r\\n            block.timestamp +\\r\\n            _internalParams.protocolGovernance.governanceDelay() *\\r\\n            delayFactor;\\r\\n    }\\r\\n\\r\\n    /// @notice Commit Delayed Strategy Params\\r\\n    function _commitDelayedStrategyParams(uint256 nft) internal {\\r\\n        _requireAtLeastStrategy(nft);\\r\\n        uint256 thisDelayedStrategyParamsTimestamp = _delayedStrategyParamsTimestamp[nft];\\r\\n        require(thisDelayedStrategyParamsTimestamp != 0, ExceptionsLibrary.NULL);\\r\\n        require(block.timestamp >= thisDelayedStrategyParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\r\\n        _delayedStrategyParams[nft] = _stagedDelayedStrategyParams[nft];\\r\\n        delete _stagedDelayedStrategyParams[nft];\\r\\n        delete _delayedStrategyParamsTimestamp[nft];\\r\\n    }\\r\\n\\r\\n    /// @notice Set Delayed Protocol Per Vault Params\\r\\n    /// @param nft Nft of the vault\\r\\n    /// @param params New params\\r\\n    function _stageDelayedProtocolPerVaultParams(uint256 nft, bytes memory params) internal {\\r\\n        _requireProtocolAdmin();\\r\\n        _stagedDelayedProtocolPerVaultParams[nft] = params;\\r\\n        uint256 delayFactor = _delayedProtocolPerVaultParams[nft].length == 0 ? 0 : 1;\\r\\n        _delayedProtocolPerVaultParamsTimestamp[nft] =\\r\\n            block.timestamp +\\r\\n            _internalParams.protocolGovernance.governanceDelay() *\\r\\n            delayFactor;\\r\\n    }\\r\\n\\r\\n    /// @notice Commit Delayed Protocol Per Vault Params\\r\\n    function _commitDelayedProtocolPerVaultParams(uint256 nft) internal {\\r\\n        _requireProtocolAdmin();\\r\\n        uint256 thisDelayedProtocolPerVaultParamsTimestamp = _delayedProtocolPerVaultParamsTimestamp[nft];\\r\\n        require(thisDelayedProtocolPerVaultParamsTimestamp != 0, ExceptionsLibrary.NULL);\\r\\n        require(block.timestamp >= thisDelayedProtocolPerVaultParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\r\\n        _delayedProtocolPerVaultParams[nft] = _stagedDelayedProtocolPerVaultParams[nft];\\r\\n        delete _stagedDelayedProtocolPerVaultParams[nft];\\r\\n        delete _delayedProtocolPerVaultParamsTimestamp[nft];\\r\\n    }\\r\\n\\r\\n    /// @notice Set Delayed Protocol Params\\r\\n    /// @param params New params\\r\\n    function _stageDelayedProtocolParams(bytes memory params) internal {\\r\\n        _requireProtocolAdmin();\\r\\n        uint256 delayFactor = _delayedProtocolParams.length == 0 ? 0 : 1;\\r\\n        _stagedDelayedProtocolParams = params;\\r\\n        _delayedProtocolParamsTimestamp =\\r\\n            block.timestamp +\\r\\n            _internalParams.protocolGovernance.governanceDelay() *\\r\\n            delayFactor;\\r\\n    }\\r\\n\\r\\n    /// @notice Commit Delayed Protocol Params\\r\\n    function _commitDelayedProtocolParams() internal {\\r\\n        _requireProtocolAdmin();\\r\\n        require(_delayedProtocolParamsTimestamp != 0, ExceptionsLibrary.NULL);\\r\\n        require(block.timestamp >= _delayedProtocolParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\r\\n        _delayedProtocolParams = _stagedDelayedProtocolParams;\\r\\n        delete _stagedDelayedProtocolParams;\\r\\n        delete _delayedProtocolParamsTimestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Set immediate strategy params\\r\\n    /// @dev Should require nft > 0\\r\\n    /// @param nft Nft of the vault\\r\\n    /// @param params New params\\r\\n    function _setStrategyParams(uint256 nft, bytes memory params) internal {\\r\\n        _requireAtLeastStrategy(nft);\\r\\n        _strategyParams[nft] = params;\\r\\n    }\\r\\n\\r\\n    /// @notice Set immediate operator params\\r\\n    /// @param params New params\\r\\n    function _setOperatorParams(bytes memory params) internal {\\r\\n        _requireAtLeastOperator();\\r\\n        _operatorParams = params;\\r\\n    }\\r\\n\\r\\n    /// @notice Set immediate protocol params\\r\\n    /// @param params New params\\r\\n    function _setProtocolParams(bytes memory params) internal {\\r\\n        _requireProtocolAdmin();\\r\\n        _protocolParams = params;\\r\\n    }\\r\\n\\r\\n    // --------------------------  EVENTS  --------------------------\\r\\n\\r\\n    /// @notice Emitted when InternalParams are staged for commit\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param params New params that were staged for commit\\r\\n    /// @param when When the params could be committed\\r\\n    event StagedInternalParams(address indexed origin, address indexed sender, InternalParams params, uint256 when);\\r\\n\\r\\n    /// @notice Emitted when InternalParams are staged for commit\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param params New params that were staged for commit\\r\\n    event CommitedInternalParams(address indexed origin, address indexed sender, InternalParams params);\\r\\n\\r\\n    /// @notice Emitted when New Vault is deployed\\r\\n    /// @param origin Origin of the transaction (tx.origin)\\r\\n    /// @param sender Sender of the call (msg.sender)\\r\\n    /// @param vaultTokens Vault tokens for this vault\\r\\n    /// @param options Options for deploy. The details of the options structure are specified in subcontracts\\r\\n    /// @param owner Owner of the VaultRegistry NFT for this vault\\r\\n    /// @param vaultAddress Address of the new Vault\\r\\n    /// @param vaultNft VaultRegistry NFT for the new Vault\\r\\n    event DeployedVault(\\r\\n        address indexed origin,\\r\\n        address indexed sender,\\r\\n        address[] vaultTokens,\\r\\n        bytes options,\\r\\n        address owner,\\r\\n        address vaultAddress,\\r\\n        uint256 vaultNft\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x02d137983e08a44fc40011bc5cb7154df30e768079aff6c51f192f90633bf571\",\"license\":\"BSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000556000196004556139d88061002b6000396000f3fe6080604052600436106100e85760003560e01c8063338c4ccb1161008a578063a920b78c11610059578063a920b78c14610297578063d2c219b0146102b9578063e5328e06146102ce578063fe255a5e146102f157600080fd5b8063338c4ccb146101ff57806347ccca0214610237578063566ca6b414610255578063697222331461027557600080fd5b80631626ba7e116100c65780631626ba7e146101665780632062d7541461019f57806327a35e5a146101bf5780632e2f4cc2146101df57600080fd5b806301ffc9a7146100ed57806305e1c94214610122578063158ef93e1461014f575b600080fd5b3480156100f957600080fd5b5061010d610108366004612f36565b610319565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b5061014261013d366004613045565b610345565b60405161011991906130b4565b34801561015b57600080fd5b50600454151561010d565b34801561017257600080fd5b50610186610181366004613136565b6107dd565b6040516001600160e01b03199091168152602001610119565b3480156101ab57600080fd5b506101426101ba3660046131d7565b610b2a565b3480156101cb57600080fd5b506101426101da3660046131d7565b610ff2565b6101f26101ed366004613271565b611179565b604051610119919061335a565b34801561020b57600080fd5b5061010d61021a36600461336d565b6001600160a01b0316600090815260036020526040902054151590565b34801561024357600080fd5b50600454604051908152602001610119565b34801561026157600080fd5b5061014261027036600461338a565b61146e565b34801561028157600080fd5b5061028a611751565b604051610119919061344a565b3480156102a357600080fd5b506102b76102b236600461345d565b6117b3565b005b3480156102c557600080fd5b506101426117c1565b3480156102da57600080fd5b506102e3611818565b604051610119929190613499565b3480156102fd57600080fd5b506001546040516001600160a01b039091168152602001610119565b600061032482611999565b8061033f57506001600160e01b03198216632a482de360e21b145b92915050565b6060600260005414156103735760405162461bcd60e51b815260040161036a906134c7565b60405180910390fd5b60026000556004805460408051808201909152918252631253925560e21b602083015290816103b55760405162461bcd60e51b815260040161036a919061335a565b5060015460408051637ac46fbb60e01b815290516000926001600160a01b031691637ac46fbb916004808301926060929190829003018186803b1580156103fb57600080fd5b505afa15801561040f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043391906134fe565b805160208201516040516331a9108f60e11b81526004810186905292935090916000906001600160a01b03831690636352211e9060240160206040518083038186803b15801561048257600080fd5b505afa158015610496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ba919061356f565b905060006104c98387846119df565b604051639bd0911b60e01b8152600060048201526001600160a01b039190911690639bd0911b9060240160206040518083038186803b15801561050b57600080fd5b505afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610543919061356f565b905087516001600160401b0381111561055e5761055e612f53565b604051908082528060200260200182016040528015610587578160200160208202803683370190505b5096506001600160a01b0381163014156105a6575050505050506107d3565b60005b8851811015610790576105d48982815181106105c7576105c761358c565b6020026020010151611ab5565b806106865750846001600160a01b03166363e85d2d8a83815181106105fb576105fb61358c565b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526002602482015260440160206040518083038186803b15801561064c57600080fd5b505afa158015610660573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068491906135a2565b155b1561069057610780565b60008982815181106106a4576106a461358c565b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b1580156106f157600080fd5b505afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072991906135c4565b89838151811061073b5761073b61358c565b60200260200101818152505061077e838a848151811061075d5761075d61358c565b6020026020010151836001600160a01b0316611b1b9092919063ffffffff16565b505b610789816135f3565b90506105a9565b507f9efcb26e0cf572bd9171640e114f387cef91cd3e38532ed6b3f80c7f2e758f878189896040516107c49392919061360e565b60405180910390a15050505050505b6001600055919050565b600080600160009054906101000a90046001600160a01b03166001600160a01b0316637ac46fbb6040518163ffffffff1660e01b815260040160606040518083038186803b15801561082e57600080fd5b505afa158015610842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086691906134fe565b6020810151815160045492935090918061088f57506001600160e01b0319935061033f92505050565b60405163020604bf60e21b8152600481018290526000906001600160a01b0385169063081812fc9060240160206040518083038186803b1580156108d257600080fd5b505afa1580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a919061356f565b6040516363e85d2d60e01b81526001600160a01b03808316600483015260066024830152919250908416906363e85d2d9060440160206040518083038186803b15801561095657600080fd5b505afa15801561096a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098e91906135a2565b6109a857506001600160e01b0319945061033f9350505050565b803b63ffffffff811615610adb576040516301ffc9a760e01b8152630b135d3f60e11b60048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b1580156109fc57600080fd5b505afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3491906135a2565b15610ac457604051630b135d3f60e11b81526001600160a01b03831690631626ba7e90610a67908c908c9060040161364e565b60206040518083038186803b158015610a7f57600080fd5b505afa158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab79190613667565b965050505050505061033f565b506001600160e01b0319955061033f945050505050565b816001600160a01b0316610aef8a8a611b83565b6001600160a01b03161415610b145750630b135d3f60e11b955061033f945050505050565b506001600160e01b031998975050505050505050565b606060026000541415610b4f5760405162461bcd60e51b815260040161036a906134c7565b60026000556004805460408051808201909152918252631253925560e21b60208301529081610b915760405162461bcd60e51b815260040161036a919061335a565b50610b9b33611c02565b6040518060400160405280600381526020016223292160e91b81525090610bd55760405162461bcd60e51b815260040161036a919061335a565b5060015460408051637ac46fbb60e01b815290516000926001600160a01b031691637ac46fbb916004808301926060929190829003018186803b158015610c1b57600080fd5b505afa158015610c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5391906134fe565b602001516040516331a9108f60e11b8152600481018490529091506000906001600160a01b03831690636352211e9060240160206040518083038186803b158015610c9d57600080fd5b505afa158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd5919061356f565b90506000610ce48385846119df565b90506001600160a01b0382163314610f2157604051639bd0911b60e01b8152600060048201819052906001600160a01b03831690639bd0911b9060240160206040518083038186803b158015610d3957600080fd5b505afa158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d71919061356f565b90506001600160a01b038116301415610ecc5760405163fcdabd2760e01b81526001600160a01b038b8116600483015280841691639d9fd0d99187169063fcdabd279060240160206040518083038186803b158015610dcf57600080fd5b505afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0791906135c4565b6040518263ffffffff1660e01b8152600401610e2591815260200190565b60206040518083038186803b158015610e3d57600080fd5b505afa158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7591906135a2565b8015610e8a57506001600160a01b038a163014155b6040518060400160405280600581526020016424a72b2a2960d91b81525090610ec65760405162461bcd60e51b815260040161036a919061335a565b50610f1f565b896001600160a01b0316816001600160a01b0316146040518060400160405280600581526020016424a72b2a2960d91b81525090610f1d5760405162461bcd60e51b815260040161036a919061335a565b505b505b6000610f2d8989611dc1565b90506000610f3c8b838a611ead565b9050610fa38a6002805480602002602001604051908101604052809291908181526020018280548015610f9857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f7a575b50505050508361249f565b96507f54f9e6ef58e36de62f59f9ee6c4b878af84989c53a3642eba415ac3ac4e11cda8b88604051610fd6929190613684565b60405180910390a1505060016000555092979650505050505050565b825160609060005b81811015611085578481815181106110145761101461358c565b602002602001015160001461107557611075873087848151811061103a5761103a61358c565b60200260200101518985815181106110545761105461358c565b60200260200101516001600160a01b03166126c0909392919063ffffffff16565b61107e816135f3565b9050610ffa565b5061109185858561146e565b915060005b855181101561116f5760008582815181106110b3576110b361358c565b60200260200101518483815181106110cd576110cd61358c565b6020026020010151106110e157600061111f565b8382815181106110f3576110f361358c565b602002602001015186838151811061110d5761110d61358c565b602002602001015161111f91906136a8565b9050801561115e5761115e888289858151811061113e5761113e61358c565b60200260200101516001600160a01b0316611b1b9092919063ffffffff16565b50611168816135f3565b9050611096565b5050949350505050565b60606002600054141561119e5760405162461bcd60e51b815260040161036a906134c7565b60026000556004805460408051808201909152918252631253925560e21b60208301526111de5760405162461bcd60e51b815260040161036a919061335a565b506111e833611c02565b6040518060400160405280600381526020016223292160e91b815250906112225760405162461bcd60e51b815260040161036a919061335a565b5060015460408051637ac46fbb60e01b815290516000926001600160a01b031691637ac46fbb916004808301926060929190829003018186803b15801561126857600080fd5b505afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a091906134fe565b51604051631f4a58fb60e31b81526001600160a01b03888116600483015291925060009183169063fa52c7d89060240160206040518083038186803b1580156112e857600080fd5b505afa1580156112fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611320919061356f565b60408051808201909152600381526223292160e91b60208201529091506001600160a01b0382166113645760405162461bcd60e51b815260040161036a919061335a565b50604051631796170d60e21b81526001600160a01b03821690635e585c349061139b9033908b9034908c908c908c906004016136bf565b60006040518083038186803b1580156113b357600080fd5b505afa1580156113c7573d6000803e3d6000fd5b50505050600080886001600160a01b0316348989896040516020016113ee93929190613724565b60408051601f198184030181529082905261140891613748565b60006040518083038185875af1925050503d8060008114611445576040519150601f19603f3d011682016040523d82523d6000602084013e61144a565b606091505b50915091508161145d5780518082602001fd5b600160005598975050505050505050565b6060600260005414156114935760405162461bcd60e51b815260040161036a906134c7565b60026000556004805460408051808201909152918252631253925560e21b602083015290816114d55760405162461bcd60e51b815260040161036a919061335a565b5060015460408051637ac46fbb60e01b815290516000926001600160a01b031691637ac46fbb916004808301926060929190829003018186803b15801561151b57600080fd5b505afa15801561152f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155391906134fe565b602001516040516331a9108f60e11b8152600481018490529091506000906001600160a01b03831690636352211e9060240160206040518083038186803b15801561159d57600080fd5b505afa1580156115b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d5919061356f565b60405163fcdabd2760e01b81526001600160a01b03808316600483015291925060009184169063fcdabd279060240160206040518083038186803b15801561161c57600080fd5b505afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165491906135c4565b604080518082019091526002815261272360f11b60208201529091508161168e5760405162461bcd60e51b815260040161036a919061335a565b50600061169b8989611dc1565b905060008190506117058a6002805480602002602001604051908101604052809291908181526020018280548015610f98576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610f7a5750505050508361249f565b96507f08e404e978692dd1b8275016b7a7b0b3ae4afd06b0cec7228060bb2da18c84fd8160405161173691906130b4565b60405180910390a15050600160005550929695505050505050565b606060028054806020026020016040519081016040528092919081815260200182805480156117a957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161178b575b5050505050905090565b6117bd81836126fe565b5050565b606060058054806020026020016040519081016040528092919081815260200182805480156117a957602002820191906000526020600020905b8154815260200190600101908083116117fb575050505050905090565b6060806000600280548060200260200160405190810160405280929190818152602001828054801561187357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611855575b5050835193945083925050506001600160401b0381111561189657611896612f53565b6040519080825280602002602001820160405280156118bf578160200160208202803683370190505b50935060005b8181101561198f578281815181106118df576118df61358c565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561192a57600080fd5b505afa15801561193e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196291906135c4565b8582815181106119745761197461358c565b6020908102919091010152611988816135f3565b90506118c5565b5083925050509091565b60006119a482612b89565b806119bf57506001600160e01b03198216633d31d51d60e11b145b8061033f57506001600160e01b03198216630b135d3f60e11b1492915050565b60405163fcdabd2760e01b81526001600160a01b038281166004830152600091829186169063fcdabd279060240160206040518083038186803b158015611a2557600080fd5b505afa158015611a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5d91906135c4565b90508315801590611a6d57508015155b604051806040016040528060048152602001631253925560e21b81525090611aa85760405162461bcd60e51b815260040161036a919061335a565b50829150505b9392505050565b600254600090815b81811015611b115760028181548110611ad857611ad861358c565b6000918252602090912001546001600160a01b0385811691161415611b01575060019392505050565b611b0a816135f3565b9050611abd565b5060009392505050565b6040516001600160a01b038316602482015260448101829052611b7e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bbf565b505050565b600080600080611b9285612c91565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa158015611bed573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600080600160009054906101000a90046001600160a01b03166001600160a01b0316637ac46fbb6040518163ffffffff1660e01b815260040160606040518083038186803b158015611c5357600080fd5b505afa158015611c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8b91906134fe565b6020015160045490915080611ca4575060009392505050565b60405163020604bf60e21b8152600481018290526001600160a01b03808616919084169063081812fc9060240160206040518083038186803b158015611ce957600080fd5b505afa158015611cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d21919061356f565b6001600160a01b03161480611db957506040516331a9108f60e11b8152600481018290526001600160a01b038086169190841690636352211e9060240160206040518083038186803b158015611d7657600080fd5b505afa158015611d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dae919061356f565b6001600160a01b0316145b949350505050565b6060611dcc83612cf5565b60405180604001604052806004815260200163494e564160e01b81525090611e075760405162461bcd60e51b815260040161036a919061335a565b5081518351146040518060400160405280600381526020016224a72b60e91b81525090611e475760405162461bcd60e51b815260040161036a919061335a565b50611aae6002805480602002602001604051908101604052809291908181526020018280548015611ea157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e83575b5050505050848461249f565b606082516001600160401b03811115611ec857611ec8612f53565b604051908082528060200260200182016040528015611ef1578160200160208202803683370190505b509050600083516001600160401b03811115611f0f57611f0f612f53565b604051908082528060200260200182016040528015611f38578160200160208202803683370190505b50905060006002805480602002602001604051908101604052809291908181526020018280548015611f9357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f75575b505050505090506000600160009054906101000a90046001600160a01b03166001600160a01b0316637ac46fbb6040518163ffffffff1660e01b815260040160606040518083038186803b158015611fea57600080fd5b505afa158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202291906134fe565b60200151600480546040516331a9108f60e11b8152918201529091506000906001600160a01b03831690636352211e9060240160206040518083038186803b15801561206d57600080fd5b505afa158015612081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a5919061356f565b905060005b87518110156122af5760008482815181106120c7576120c761358c565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561211757600080fd5b505afa15801561212b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214f91906135c4565b90506000818b85815181106121665761216661358c565b6020026020010151106121795781612194565b8a848151811061218b5761218b61358c565b60200260200101515b90506121ad8c8289878151811061113e5761113e61358c565b808985815181106121c0576121c061358c565b6020026020010181815250508b6001600160a01b0316856001600160a01b03161461229b578684815181106121f7576121f761358c565b60209081029190910101516040516370a0823160e01b81526001600160a01b038e81166004830152909116906370a082319060240160206040518083038186803b15801561224457600080fd5b505afa158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c91906135c4565b88858151811061228e5761228e61358c565b6020026020010181815250505b505050806122a8906135f3565b90506120aa565b50876001600160a01b0316816001600160a01b0316146124945760405163159b29ad60e21b81526001600160a01b0389169063566ca6b4906122f990869088908b90600401613764565b600060405180830381600087803b15801561231357600080fd5b505af1158015612327573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261234f919081019061379d565b506040516302f0e4a160e11b81526000906001600160a01b038a16906305e1c9429061237f90879060040161344a565b600060405180830381600087803b15801561239957600080fd5b505af11580156123ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123d5919081019061379d565b905060005b8851811015612491578181815181106123f5576123f561358c565b602002602001015187828151811061240f5761240f61358c565b60200260200101511015612424576000612462565b8181815181106124365761243661358c565b60200260200101518782815181106124505761245061358c565b602002602001015161246291906136a8565b8782815181106124745761247461358c565b602090810291909101015280612489816135f3565b9150506123da565b50505b505050509392505050565b6060600084516001600160401b038111156124bc576124bc612f53565b6040519080825280602002602001820160405280156124e5578160200160208202803683370190505b5090506000805b8651821080156124fc5750855181105b1561267b578581815181106125135761251361358c565b60200260200101516001600160a01b03168783815181106125365761253661358c565b60200260200101516001600160a01b0316101561257e5760008383815181106125615761256161358c565b602090810291909101015281612576816135f3565b9250506124ec565b8581815181106125905761259061358c565b60200260200101516001600160a01b03168783815181106125b3576125b361358c565b60200260200101516001600160a01b0316111561262c578481815181106125dc576125dc61358c565b6020026020010151600014156125fe57806125f6816135f3565b9150506124ec565b60405162461bcd60e51b815260206004820152600360248201526254505360e81b604482015260640161036a565b84818151811061263e5761263e61358c565b60200260200101518383815181106126585761265861358c565b60209081029190910101528161266d816135f3565b92505080806125f6906135f3565b86518210156126b55760008383815181106126985761269861358c565b6020908102919091010152816126ad816135f3565b92505061267b565b509095945050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526126f89085906323b872dd60e01b90608401611b47565b50505050565b6004805460408051808201909152918252631253925560e21b60208301521561273a5760405162461bcd60e51b815260040161036a919061335a565b5061274482612cf5565b60405180604001604052806004815260200163494e564160e01b8152509061277f5760405162461bcd60e51b815260040161036a919061335a565b506040805180820190915260028152612b2d60f11b6020820152816127b75760405162461bcd60e51b815260040161036a919061335a565b506000336001600160a01b0316637ac46fbb6040518163ffffffff1660e01b815260040160606040518083038186803b1580156127f357600080fd5b505afa158015612807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282b91906134fe565b518351909150158015906128b05750806001600160a01b03166378546fa26040518163ffffffff1660e01b815260040160206040518083038186803b15801561287357600080fd5b505afa158015612887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ab91906135c4565b835111155b6040518060400160405280600381526020016224a72b60e91b815250906128ea5760405162461bcd60e51b815260040161036a919061335a565b5060005b83518110156129ee57816001600160a01b03166363e85d2d8583815181106129185761291861358c565b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526003602482015260440160206040518083038186803b15801561296957600080fd5b505afa15801561297d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a191906135a2565b6040518060400160405280600381526020016223292160e91b815250906129db5760405162461bcd60e51b815260040161036a919061335a565b50806129e6816135f3565b9150506128ee565b50600180546001600160a01b031916331790558251612a14906002906020860190612ea3565b50600482905560025460005b81811015612b4457612a33816001613822565b60036000878481518110612a4957612a4961358c565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055506000858281518110612a8957612a8961358c565b6020026020010151905060056002826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612ad057600080fd5b505afa158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b08919061383a565b612b12919061385d565b612b1d90600a613971565b8154600181018355600092835260209092209091015550612b3d816135f3565b9050612a20565b50604051339032907f0f043e55a1ce0d7ce25125ccbc2800b540d83e21abf7250f0156c2091a28b22190612b7b9088908890613980565b60405180910390a350505050565b60006301ffc9a760e01b6001600160e01b03198316148061033f57506001600160e01b0319821663305a640b60e21b1492915050565b6000612c14826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d989092919063ffffffff16565b805190915015611b7e5780806020019051810190612c3291906135a2565b611b7e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161036a565b60008060008351604114604051806040016040528060048152602001631253959360e21b81525090612cd65760405162461bcd60e51b815260040161036a919061335a565b5050505060208101516040820151606090920151909260009190911a90565b6000600282511015612d0957506001919050565b60005b60018351612d1a91906136a8565b811015612d8f5782612d2d826001613822565b81518110612d3d57612d3d61358c565b60200260200101516001600160a01b0316838281518110612d6057612d6061358c565b60200260200101516001600160a01b031610612d7f5750600092915050565b612d88816135f3565b9050612d0c565b50600192915050565b6060611db9848460008585843b612df15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161036a565b600080866001600160a01b03168587604051612e0d9190613748565b60006040518083038185875af1925050503d8060008114612e4a576040519150601f19603f3d011682016040523d82523d6000602084013e612e4f565b606091505b5091509150612e5f828286612e6a565b979650505050505050565b60608315612e79575081611aae565b825115612e895782518084602001fd5b8160405162461bcd60e51b815260040161036a919061335a565b828054828255906000526020600020908101928215612ef8579160200282015b82811115612ef857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612ec3565b50612f04929150612f08565b5090565b5b80821115612f045760008155600101612f09565b6001600160e01b031981168114612f3357600080fd5b50565b600060208284031215612f4857600080fd5b8135611aae81612f1d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612f9157612f91612f53565b604052919050565b60006001600160401b03821115612fb257612fb2612f53565b5060051b60200190565b6001600160a01b0381168114612f3357600080fd5b600082601f830112612fe257600080fd5b81356020612ff7612ff283612f99565b612f69565b82815260059290921b8401810191818101908684111561301657600080fd5b8286015b8481101561303a57803561302d81612fbc565b835291830191830161301a565b509695505050505050565b60006020828403121561305757600080fd5b81356001600160401b0381111561306d57600080fd5b611db984828501612fd1565b600081518084526020808501945080840160005b838110156130a95781518752958201959082019060010161308d565b509495945050505050565b602081526000611aae6020830184613079565b600082601f8301126130d857600080fd5b81356001600160401b038111156130f1576130f1612f53565b613104601f8201601f1916602001612f69565b81815284602083860101111561311957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561314957600080fd5b8235915060208301356001600160401b0381111561316657600080fd5b613172858286016130c7565b9150509250929050565b600082601f83011261318d57600080fd5b8135602061319d612ff283612f99565b82815260059290921b840181019181810190868411156131bc57600080fd5b8286015b8481101561303a57803583529183019183016131c0565b600080600080608085870312156131ed57600080fd5b84356131f881612fbc565b935060208501356001600160401b038082111561321457600080fd5b61322088838901612fd1565b9450604087013591508082111561323657600080fd5b6132428883890161317c565b9350606087013591508082111561325857600080fd5b50613265878288016130c7565b91505092959194509250565b6000806000806060858703121561328757600080fd5b843561329281612fbc565b935060208501356132a281612f1d565b925060408501356001600160401b03808211156132be57600080fd5b818701915087601f8301126132d257600080fd5b8135818111156132e157600080fd5b8860208285010111156132f357600080fd5b95989497505060200194505050565b60005b8381101561331d578181015183820152602001613305565b838111156126f85750506000910152565b60008151808452613346816020860160208601613302565b601f01601f19169290920160200192915050565b602081526000611aae602083018461332e565b60006020828403121561337f57600080fd5b8135611aae81612fbc565b60008060006060848603121561339f57600080fd5b83356001600160401b03808211156133b657600080fd5b6133c287838801612fd1565b945060208601359150808211156133d857600080fd5b6133e48783880161317c565b935060408601359150808211156133fa57600080fd5b50613407868287016130c7565b9150509250925092565b600081518084526020808501945080840160005b838110156130a95781516001600160a01b031687529582019590820190600101613425565b602081526000611aae6020830184613411565b6000806040838503121561347057600080fd5b8235915060208301356001600160401b0381111561348d57600080fd5b61317285828601612fd1565b6040815260006134ac6040830185613079565b82810360208401526134be8185613079565b95945050505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006060828403121561351057600080fd5b604051606081018181106001600160401b038211171561353257613532612f53565b604052825161354081612fbc565b8152602083015161355081612fbc565b6020820152604083015161356381612fbc565b60408201529392505050565b60006020828403121561358157600080fd5b8151611aae81612fbc565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156135b457600080fd5b81518015158114611aae57600080fd5b6000602082840312156135d657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415613607576136076135dd565b5060010190565b6001600160a01b038416815260606020820181905260009061363290830185613411565b82810360408401526136448185613079565b9695505050505050565b828152604060208201526000611db9604083018461332e565b60006020828403121561367957600080fd5b8151611aae81612f1d565b6001600160a01b0383168152604060208201819052600090611db990830184613079565b6000828210156136ba576136ba6135dd565b500390565b6001600160a01b03878116825286166020820152604081018590526001600160e01b03198416606082015260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b6001600160e01b031984168152818360048301376000910160040190815292915050565b6000825161375a818460208701613302565b9190910192915050565b6060815260006137776060830186613411565b82810360208401526137898186613079565b90508281036040840152613644818561332e565b600060208083850312156137b057600080fd5b82516001600160401b038111156137c657600080fd5b8301601f810185136137d757600080fd5b80516137e5612ff282612f99565b81815260059190911b8201830190838101908783111561380457600080fd5b928401925b82841015612e5f57835182529284019290840190613809565b60008219821115613835576138356135dd565b500190565b60006020828403121561384c57600080fd5b815160ff81168114611aae57600080fd5b600060ff83168061387e57634e487b7160e01b600052601260045260246000fd5b8060ff84160491505092915050565b600181815b808511156138c85781600019048211156138ae576138ae6135dd565b808516156138bb57918102915b93841c9390800290613892565b509250929050565b6000826138df5750600161033f565b816138ec5750600061033f565b8160018114613902576002811461390c57613928565b600191505061033f565b60ff84111561391d5761391d6135dd565b50506001821b61033f565b5060208310610133831016604e8410600b841016171561394b575081810a61033f565b613955838361388d565b8060001904821115613969576139696135dd565b029392505050565b6000611aae60ff8416836138d0565b6040815260006139936040830185613411565b9050826020830152939250505056fea2646970667358221220d7ef6c3de5af64e4a68f8264e52a24380c9a41bd306baa08296b3291b1175e1464736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "externalCall(address,bytes4,bytes)": {
        "details": "Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. Since this method allows sending arbitrary transactions, the destinations of the calls are whitelisted by Protocol Governance.",
        "params": {
          "data": "Abi encoded parameters to `to::selector`",
          "selector": "Selector of the call",
          "to": "Address of the reward pool"
        },
        "returns": {
          "result": "Result of execution of the call"
        }
      },
      "initialize(uint256,address[])": {
        "details": "Can only be initialized by vault governance",
        "params": {
          "nft_": "NFT of the vault in the VaultRegistry",
          "vaultTokens_": "ERC20 tokens that will be managed by this Vault"
        }
      },
      "isValidSignature(bytes32,bytes)": {
        "details": "Should return whether the signature provided is valid for the provided hash MUST return the bytes4 magic value 0x1626ba7e when function passes. MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5) MUST allow external calls",
        "params": {
          "_hash": "Hash of the data to be signed",
          "_signature": "Signature byte array associated with _hash"
        },
        "returns": {
          "magicValue": "0x1626ba7e if valid, 0xffffffff otherwise"
        }
      },
      "isVaultToken(address)": {
        "params": {
          "token": "Address of the token to check"
        },
        "returns": {
          "_0": "`true` if this token is managed by Vault"
        }
      },
      "pull(address,address[],uint256[],bytes)": {
        "details": "Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager. Strategy is approved address for the vault NFT. When called by vault owner this method just pulls the tokens from the protocol to the `to` address When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault) When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left. Thus any vault other than zero vault cannot have any tokens on it Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.",
        "params": {
          "options": "Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions",
          "to": "Address to receive the tokens",
          "tokenAmounts": "Amounts of tokens to pull",
          "tokens": "Tokens to pull"
        },
        "returns": {
          "actualTokenAmounts": "The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)"
        }
      },
      "push(address[],uint256[],bytes)": {
        "details": "Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing. Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.",
        "params": {
          "options": "Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions",
          "tokenAmounts": "Amounts of tokens to push",
          "tokens": "Tokens to push"
        },
        "returns": {
          "actualTokenAmounts": "The amounts actually invested. It could be less than tokenAmounts (but not higher)"
        }
      },
      "reclaimTokens(address[])": {
        "details": "Cannot be called from zero vault.",
        "params": {
          "tokens": "Tokens to claim"
        },
        "returns": {
          "actualTokenAmounts": "Amounts reclaimed"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferAndPush(address,address[],uint256[],bytes)": {
        "params": {
          "options": "Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions",
          "tokenAmounts": "Amounts of tokens to push",
          "tokens": "Tokens to push"
        },
        "returns": {
          "actualTokenAmounts": "The amounts actually invested. It could be less than tokenAmounts (but not higher)"
        }
      },
      "tvl()": {
        "details": "Generally it is the underlying token value of this contract in some other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract. The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not",
        "returns": {
          "maxTokenAmounts": "Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)",
          "minTokenAmounts": "Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Initialized(address,address,address[],uint256)": {
        "notice": "Emitted when Vault is intialized"
      },
      "Pull(address,uint256[])": {
        "notice": "Emitted on successful pull"
      },
      "Push(uint256[])": {
        "notice": "Emitted on successful push"
      },
      "ReclaimTokens(address,address[],uint256[])": {
        "notice": "Emitted when tokens are reclaimed"
      }
    },
    "kind": "user",
    "methods": {
      "externalCall(address,bytes4,bytes)": {
        "notice": "Execute one of whitelisted calls."
      },
      "initialize(uint256,address[])": {
        "notice": "Initialized a new contract."
      },
      "initialized()": {
        "notice": "Checks if the vault is initialized"
      },
      "isValidSignature(bytes32,bytes)": {
        "notice": "Verifies offchain signature."
      },
      "isVaultToken(address)": {
        "notice": "Checks if a token is vault token"
      },
      "nft()": {
        "notice": "VaultRegistry NFT for this vault"
      },
      "pull(address,address[],uint256[],bytes)": {
        "notice": "Pulls tokens from the underlying protocol to the `to` address."
      },
      "pullExistentials()": {
        "notice": "Existential amounts for each token"
      },
      "push(address[],uint256[],bytes)": {
        "notice": "Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from the contract balance and convert it to yUSDC."
      },
      "reclaimTokens(address[])": {
        "notice": "Claim ERC20 tokens from vault balance to zero vault."
      },
      "transferAndPush(address,address[],uint256[],bytes)": {
        "notice": "The same as `push` method above but transfers tokens to vault balance prior to calling push. After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full)."
      },
      "tvl()": {
        "notice": "Total value locked for this contract."
      },
      "vaultGovernance()": {
        "notice": "Address of the Vault Governance for this contract."
      },
      "vaultTokens()": {
        "notice": "ERC20 tokens under Vault management."
      }
    },
    "notice": "Vault that stores ERC20 tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1491,
        "contract": "contracts/vaults/ERC20Vault.sol:ERC20Vault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 40836,
        "contract": "contracts/vaults/ERC20Vault.sol:ERC20Vault",
        "label": "_vaultGovernance",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVaultGovernance)18089"
      },
      {
        "astId": 40839,
        "contract": "contracts/vaults/ERC20Vault.sol:ERC20Vault",
        "label": "_vaultTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 40843,
        "contract": "contracts/vaults/ERC20Vault.sol:ERC20Vault",
        "label": "_vaultTokensIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 40845,
        "contract": "contracts/vaults/ERC20Vault.sol:ERC20Vault",
        "label": "_nft",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 40848,
        "contract": "contracts/vaults/ERC20Vault.sol:ERC20Vault",
        "label": "_pullExistentials",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IVaultGovernance)18089": {
        "encoding": "inplace",
        "label": "contract IVaultGovernance",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}