{
  "language": "Solidity",
  "sources": {
    "contracts/ContractRegistry.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"./interfaces/IProtocolGovernance.sol\";\nimport \"./interfaces/IContractRegistry.sol\";\nimport \"./libraries/ExceptionsLibrary.sol\";\nimport \"./libraries/SemverLibrary.sol\";\nimport \"./utils/ContractMeta.sol\";\n\ncontract ContractRegistry is ContractMeta, IContractRegistry, Multicall {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    IProtocolGovernance public governance;\n\n    mapping(bytes32 => mapping(uint256 => address)) private _nameToVersionToAddress;\n    mapping(bytes32 => uint256[]) private _nameToVersions;\n    EnumerableSet.AddressSet private _addresses;\n    EnumerableSet.Bytes32Set private _names;\n\n    constructor(address _governance) {\n        governance = IProtocolGovernance(_governance);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IContractRegistry\n    function addresses() external view returns (address[] memory) {\n        return _addresses.values();\n    }\n\n    /// @inheritdoc IContractRegistry\n    function names() external view returns (string[] memory result) {\n        uint256 length = _names.length();\n        result = new string[](length);\n        for (uint256 i; i != length; ++i) {\n            result[i] = _bytes32ToString(_names.at(i));\n        }\n    }\n\n    /// @inheritdoc IContractRegistry\n    function versions(string memory name_) external view returns (string[] memory result) {\n        bytes32 name = bytes32(bytes(name_));\n        uint256[] memory versions_ = _nameToVersions[name];\n        result = new string[](versions_.length);\n        for (uint256 i = 0; i < versions_.length; i++) {\n            result[i] = SemverLibrary.stringifySemver(versions_[i]);\n        }\n    }\n\n    /// @inheritdoc IContractRegistry\n    function versionAddress(string memory name_, string memory version) external view returns (address) {\n        bytes32 name = bytes32(bytes(name_));\n        uint256 versionNum = SemverLibrary.numberifySemver(version);\n        return _nameToVersionToAddress[name][versionNum];\n    }\n\n    /// @inheritdoc IContractRegistry\n    function latestVersion(string memory name_) external view returns (string memory, address) {\n        bytes32 name = bytes32(abi.encodePacked(name_));\n        uint256 version = _latestVersion(name);\n        return (string(SemverLibrary.stringifySemver(version)), _nameToVersionToAddress[name][version]);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IContractRegistry\n    function registerContract(address target) external {\n        _requireAtLeastOperator();\n        require(_addresses.add(target), ExceptionsLibrary.DUPLICATE);\n\n        IContractMeta newContract = IContractMeta(target);\n        bytes32 newContractName = newContract.contractNameBytes();\n        require(_validateContractName(newContractName), ExceptionsLibrary.INVALID_VALUE);\n\n        bytes32 newContractVersionRaw = newContract.contractVersionBytes();\n        uint256 newContractVersion = SemverLibrary.numberifySemver(newContract.contractVersion());\n        uint256 latestContractVersion = _latestVersion(newContractName);\n\n        require(newContractVersion > latestContractVersion, ExceptionsLibrary.INVARIANT);\n\n        uint256 newContractVersionMajor = newContractVersion >> 16;\n        uint256 latestContractVersionMajor = latestContractVersion >> 16;\n        require(newContractVersionMajor - latestContractVersionMajor <= 1, ExceptionsLibrary.INVARIANT);\n\n        _nameToVersionToAddress[newContractName][newContractVersion] = target;\n        _nameToVersions[newContractName].push(newContractVersion);\n        _names.add(newContractName);\n\n        emit ContractRegistered(tx.origin, msg.sender, newContractName, newContractVersionRaw, target);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ContractRegistry\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _requireAtLeastOperator() private view {\n        require(\n            governance.isOperator(msg.sender) || governance.isAdmin(msg.sender), \n            ExceptionsLibrary.FORBIDDEN\n        );\n    }\n\n    function _latestVersion(bytes32 name) private view returns (uint256) {\n        uint256 versionsLength = _nameToVersions[name].length;\n        return versionsLength != 0 ? _nameToVersions[name][versionsLength - 1] : 0;\n    }\n\n    function _validateContractName(bytes32 name_) private pure returns (bool) {\n        bytes memory name = bytes(_bytes32ToString(name_));\n        for (uint256 i; i < name.length; ++i) {\n            uint8 ascii = uint8(name[i]);\n            bool isAlphanumeric = ((0x61 <= ascii && ascii <= 0x7a) ||\n                (0x41 <= ascii && ascii <= 0x5a) ||\n                (0x30 <= ascii && ascii <= 0x39));\n            if (!isAlphanumeric) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    event ContractRegistered(\n        address indexed origin,\n        address indexed sender,\n        bytes32 indexed name,\n        bytes32 version,\n        address target\n    );\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "contracts/interfaces/IProtocolGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./utils/IDefaultAccessControl.sol\";\nimport \"./IUnitPricesGovernance.sol\";\n\ninterface IProtocolGovernance is IDefaultAccessControl, IUnitPricesGovernance {\n    /// @notice CommonLibrary protocol params.\n    /// @param maxTokensPerVault Max different token addresses that could be managed by the vault\n    /// @param governanceDelay The delay (in secs) that must pass before setting new pending params to commiting them\n    /// @param protocolTreasury The address that collects protocolFees, if protocolFee is not zero\n    /// @param forceAllowMask If a permission bit is set in this mask it forces all addresses to have this permission as true\n    /// @param withdrawLimit Withdraw limit (in unit prices, i.e. usd)\n    struct Params {\n        uint256 maxTokensPerVault;\n        uint256 governanceDelay;\n        address protocolTreasury;\n        uint256 forceAllowMask;\n        uint256 withdrawLimit;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\n    /// @param target The given address\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\n    function stagedPermissionGrantsTimestamps(address target) external view returns (uint256);\n\n    /// @notice Staged granted permission bitmask for the given address.\n    /// @param target The given address\n    /// @return Bitmask\n    function stagedPermissionGrantsMasks(address target) external view returns (uint256);\n\n    /// @notice Permission bitmask for the given address.\n    /// @param target The given address\n    /// @return Bitmask\n    function permissionMasks(address target) external view returns (uint256);\n\n    /// @notice Timestamp after which staged pending protocol parameters can be committed\n    /// @return Zero if there are no staged parameters, timestamp otherwise.\n    function stagedParamsTimestamp() external view returns (uint256);\n\n    /// @notice Staged pending protocol parameters.\n    function stagedParams() external view returns (Params memory);\n\n    /// @notice Current protocol parameters.\n    function params() external view returns (Params memory);\n\n    /// @notice Addresses for which non-zero permissions are set.\n    function permissionAddresses() external view returns (address[] memory);\n\n    /// @notice Permission addresses staged for commit.\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory);\n\n    /// @notice Return all addresses where rawPermissionMask bit for permissionId is set to 1.\n    /// @param permissionId Id of the permission to check.\n    /// @return A list of dirty addresses.\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory);\n\n    /// @notice Checks if address has permission or given permission is force allowed for any address.\n    /// @param addr Address to check\n    /// @param permissionId Permission to check\n    function hasPermission(address addr, uint8 permissionId) external view returns (bool);\n\n    /// @notice Checks if address has all permissions.\n    /// @param target Address to check\n    /// @param permissionIds A list of permissions to check\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool);\n\n    /// @notice Max different ERC20 token addresses that could be managed by the protocol.\n    function maxTokensPerVault() external view returns (uint256);\n\n    /// @notice The delay for committing any governance params.\n    function governanceDelay() external view returns (uint256);\n\n    /// @notice The address of the protocol treasury.\n    function protocolTreasury() external view returns (address);\n\n    /// @notice Permissions mask which defines if ordinary permission should be reverted.\n    /// This bitmask is xored with ordinary mask.\n    function forceAllowMask() external view returns (uint256);\n\n    /// @notice Withdraw limit per token per block.\n    /// @param token Address of the token\n    /// @return Withdraw limit per token per block\n    function withdrawLimit(address token) external view returns (uint256);\n\n    /// @notice Addresses that has staged validators.\n    function stagedValidatorsAddresses() external view returns (address[] memory);\n\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\n    /// @param target The given address\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\n    function stagedValidatorsTimestamps(address target) external view returns (uint256);\n\n    /// @notice Staged validator for the given address.\n    /// @param target The given address\n    /// @return Validator\n    function stagedValidators(address target) external view returns (address);\n\n    /// @notice Addresses that has validators.\n    function validatorsAddresses() external view returns (address[] memory);\n\n    /// @notice Address that has validators.\n    /// @param i The number of address\n    /// @return Validator address\n    function validatorsAddress(uint256 i) external view returns (address);\n\n    /// @notice Validator for the given address.\n    /// @param target The given address\n    /// @return Validator\n    function validators(address target) external view returns (address);\n\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, IMMEDIATE  -------------------\n\n    /// @notice Rollback all staged validators.\n    function rollbackStagedValidators() external;\n\n    /// @notice Revoke validator instantly from the given address.\n    /// @param target The given address\n    function revokeValidator(address target) external;\n\n    /// @notice Stages a new validator for the given address\n    /// @param target The given address\n    /// @param validator The validator for the given address\n    function stageValidator(address target, address validator) external;\n\n    /// @notice Commits validator for the given address.\n    /// @dev Reverts if governance delay has not passed yet.\n    /// @param target The given address.\n    function commitValidator(address target) external;\n\n    /// @notice Commites all staged validators for which governance delay passed\n    /// @return Addresses for which validators were committed\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory);\n\n    /// @notice Rollback all staged granted permission grant.\n    function rollbackStagedPermissionGrants() external;\n\n    /// @notice Commits permission grants for the given address.\n    /// @dev Reverts if governance delay has not passed yet.\n    /// @param target The given address.\n    function commitPermissionGrants(address target) external;\n\n    /// @notice Commites all staged permission grants for which governance delay passed.\n    /// @return An array of addresses for which permission grants were committed.\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory);\n\n    /// @notice Revoke permission instantly from the given address.\n    /// @param target The given address.\n    /// @param permissionIds A list of permission ids to revoke.\n    function revokePermissions(address target, uint8[] memory permissionIds) external;\n\n    /// @notice Commits staged protocol params.\n    /// Reverts if governance delay has not passed yet.\n    function commitParams() external;\n\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, DELAY  -------------------\n\n    /// @notice Sets new pending params that could have been committed after governance delay expires.\n    /// @param newParams New protocol parameters to set.\n    function stageParams(Params memory newParams) external;\n\n    /// @notice Stage granted permissions that could have been committed after governance delay expires.\n    /// Resets commit delay and permissions if there are already staged permissions for this address.\n    /// @param target Target address\n    /// @param permissionIds A list of permission ids to grant\n    function stagePermissionGrants(address target, uint8[] memory permissionIds) external;\n}\n"
    },
    "contracts/interfaces/IContractRegistry.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\ninterface IContractRegistry {\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Addresses of the registered contracts\n    function addresses() external view returns (address[] memory);\n\n    /// @notice Names of the registered contracts\n    function names() external view returns (string[] memory);\n\n    /// @notice Latest version of the contract\n    /// @param name Name of the contract\n    function latestVersion(string memory name) external view returns (string memory, address);\n\n    /// @notice All versions of the contract\n    /// @param name Name of the contract\n    function versions(string memory name) external view returns (string[] memory result);\n\n    /// @notice Address of the contract at a given version\n    /// @param name Name of the contract\n    /// @param version Version of the contract\n    function versionAddress(string memory name, string memory version) external view returns (address);\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Register a new contract\n    /// @param target Address of the contract to be registered\n    function registerContract(address target) external;\n}\n"
    },
    "contracts/libraries/ExceptionsLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @notice Exceptions stores project`s smart-contracts exceptions\nlibrary ExceptionsLibrary {\n    string constant ADDRESS_ZERO = \"AZ\";\n    string constant VALUE_ZERO = \"VZ\";\n    string constant EMPTY_LIST = \"EMPL\";\n    string constant NOT_FOUND = \"NF\";\n    string constant INIT = \"INIT\";\n    string constant DUPLICATE = \"DUP\";\n    string constant NULL = \"NULL\";\n    string constant TIMESTAMP = \"TS\";\n    string constant FORBIDDEN = \"FRB\";\n    string constant ALLOWLIST = \"ALL\";\n    string constant LIMIT_OVERFLOW = \"LIMO\";\n    string constant LIMIT_UNDERFLOW = \"LIMU\";\n    string constant INVALID_VALUE = \"INV\";\n    string constant INVARIANT = \"INVA\";\n    string constant INVALID_TARGET = \"INVTR\";\n    string constant INVALID_TOKEN = \"INVTO\";\n    string constant INVALID_INTERFACE = \"INVI\";\n    string constant INVALID_SELECTOR = \"INVS\";\n    string constant INVALID_STATE = \"INVST\";\n    string constant INVALID_LENGTH = \"INVL\";\n    string constant LOCK = \"LCKD\";\n    string constant DISABLED = \"DIS\";\n}\n"
    },
    "contracts/libraries/SemverLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary SemverLibrary {\n    uint8 internal constant ASCII_ZERO = 48;\n\n    function numberifySemver(string memory _semver) internal pure returns (uint256) {\n        uint256[3] memory res;\n        uint256 semverIndex;\n        uint256 semverLength;\n        for (uint256 i = 0; (i < bytes(_semver).length) && (semverIndex < 3); i++) {\n            uint8 b = uint8(bytes(_semver)[i]);\n            if (b == uint8(bytes1(\".\"))) {\n                // forbid empty semver part\n                if (semverLength == 0) {\n                    return 0;\n                }\n                semverIndex += 1;\n                semverLength = 0;\n                continue;\n            }\n            if (b < ASCII_ZERO || b > ASCII_ZERO + 9) {\n                return 0;\n            }\n            res[semverIndex] = res[semverIndex] * 10 + b - ASCII_ZERO;\n            semverLength += 1;\n        }\n        if ((semverIndex != 2) || (semverLength == 0)) {\n            return 0;\n        }\n        return (res[0] << 16) + (res[1] << 8) + res[2];\n    }\n\n    function stringifySemver(uint256 num) internal pure returns (string memory) {\n        if (num >= 1 << 24) {\n            return \"0\";\n        }\n        string memory major = Strings.toString(num >> 16);\n        string memory minor = Strings.toString((num >> 8) & 0xff);\n        string memory patch = Strings.toString(num & 0xff);\n        return string(abi.encodePacked(abi.encodePacked(major, \".\", minor, \".\", patch)));\n    }\n}\n"
    },
    "contracts/utils/ContractMeta.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/utils/IContractMeta.sol\";\n\nabstract contract ContractMeta is IContractMeta {\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    function contractName() external pure returns (string memory) {\n        return _bytes32ToString(_contractName());\n    }\n\n    function contractNameBytes() external pure returns (bytes32) {\n        return _contractName();\n    }\n\n    function contractVersion() external pure returns (string memory) {\n        return _bytes32ToString(_contractVersion());\n    }\n\n    function contractVersionBytes() external pure returns (bytes32) {\n        return _contractVersion();\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure virtual returns (bytes32);\n\n    function _contractVersion() internal pure virtual returns (bytes32);\n\n    function _bytes32ToString(bytes32 b) internal pure returns (string memory s) {\n        s = new string(32);\n        uint256 len = 32;\n        for (uint256 i = 0; i < 32; ++i) {\n            if (uint8(b[i]) == 0) {\n                len = i;\n                break;\n            }\n        }\n        assembly {\n            mstore(s, len)\n            mstore(add(s, 0x20), b)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/utils/IDefaultAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\";\n\ninterface IDefaultAccessControl is IAccessControlEnumerable {\n    /// @notice Checks that the address is contract admin.\n    /// @param who Address to check\n    /// @return `true` if who is admin, `false` otherwise\n    function isAdmin(address who) external view returns (bool);\n\n    /// @notice Checks that the address is contract admin.\n    /// @param who Address to check\n    /// @return `true` if who is operator, `false` otherwise\n    function isOperator(address who) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IUnitPricesGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./utils/IDefaultAccessControl.sol\";\n\ninterface IUnitPricesGovernance is IDefaultAccessControl, IERC165 {\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Estimated amount of token worth 1 USD staged for commit.\n    /// @param token Address of the token\n    /// @return The amount of token\n    function stagedUnitPrices(address token) external view returns (uint256);\n\n    /// @notice Timestamp after which staged unit prices for the given token can be committed.\n    /// @param token Address of the token\n    /// @return Timestamp\n    function stagedUnitPricesTimestamps(address token) external view returns (uint256);\n\n    /// @notice Estimated amount of token worth 1 USD.\n    /// @param token Address of the token\n    /// @return The amount of token\n    function unitPrices(address token) external view returns (uint256);\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Stage estimated amount of token worth 1 USD staged for commit.\n    /// @param token Address of the token\n    /// @param value The amount of token\n    function stageUnitPrice(address token, uint256 value) external;\n\n    /// @notice Reset staged value\n    /// @param token Address of the token\n    function rollbackUnitPrice(address token) external;\n\n    /// @notice Commit staged unit price\n    /// @param token Address of the token\n    function commitUnitPrice(address token) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/interfaces/utils/IContractMeta.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\ninterface IContractMeta {\n    function contractName() external view returns (string memory);\n    function contractNameBytes() external view returns (bytes32);\n\n    function contractVersion() external view returns (string memory);\n    function contractVersionBytes() external view returns (bytes32);\n}\n"
    },
    "contracts/vaults/YearnVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IYearnVaultGovernance.sol\";\nimport \"../interfaces/vaults/IYearnVault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Governance that manages all Aave Vaults params and can deploy a new Aave Vault.\ncontract YearnVaultGovernance is ContractMeta, IYearnVaultGovernance, VaultGovernance {\n    mapping(address => address) private _yTokens;\n\n    /// @notice Creates a new contract\n    /// @param internalParams_ Initial Internal Params\n    /// @param delayedProtocolParams_ Initial Protocol Params\n    constructor(InternalParams memory internalParams_, DelayedProtocolParams memory delayedProtocolParams_)\n        VaultGovernance(internalParams_)\n    {\n        require(address(delayedProtocolParams_.yearnVaultRegistry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IYearnVaultGovernance\n    function yTokenForToken(address token) external view returns (address) {\n        address yToken = _yTokens[token];\n        if (yToken != address(0)) {\n            return yToken;\n        }\n        IYearnProtocolVaultRegistry yearnRegistry = delayedProtocolParams().yearnVaultRegistry;\n        try yearnRegistry.latestVault(token) returns (address _vault) {\n            return _vault;\n        } catch (bytes memory) {\n            return address(0);\n        }\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return DelayedProtocolParams({yearnVaultRegistry: IYearnProtocolVaultRegistry(address(0))});\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IYearnVaultGovernance).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IYearnVaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\n        require(address(params.yearnVaultRegistry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function setYTokenForToken(address token, address yToken) external {\n        _requireProtocolAdmin();\n        _yTokens[token] = yToken;\n        emit SetYToken(tx.origin, msg.sender, token, yToken);\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IYearnVault vault, uint256 nft)\n    {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IYearnVault(vaddr);\n        vault.initialize(nft, vaultTokens_);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, \"\", owner_, vaddr, nft);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"YearnVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new yToken is set\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param token ERC-20 token for the yToken\n    /// @param yToken yToken for ERC-20 token\n    event SetYToken(address indexed origin, address indexed sender, address indexed token, address yToken);\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/interfaces/vaults/IYearnVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../external/yearn/IYearnProtocolVaultRegistry.sol\";\nimport \"./IVaultGovernance.sol\";\nimport \"./IYearnVault.sol\";\n\ninterface IYearnVaultGovernance is IVaultGovernance {\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param yearnVaultRegistry Reference to Yearn Vault Registry\n    struct DelayedProtocolParams {\n        IYearnProtocolVaultRegistry yearnVaultRegistry;\n    }\n\n    /// @notice Determines a corresponding Yearn vault for token\n    /// @param token ERC-20 token for the yToken\n    /// @return If there's a yToken returns its address, otherwise returns 0\n    function yTokenForToken(address token) external view returns (address);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolParamsTimestamp.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Sets the manual override for yToken vaults map\n    /// @dev Can only be called by Protocol Admin\n    /// @param token ERC-20 token for yToken\n    /// @param yToken for ERC-20 token\n    function setYTokenForToken(address token, address yToken) external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IYearnVault vault, uint256 nft);\n}\n"
    },
    "contracts/interfaces/vaults/IYearnVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IIntegrationVault.sol\";\n\ninterface IYearnVault is IIntegrationVault {\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external;\n\n    /// @notice Default maximal loss for withdraw\n    function DEFAULT_MAX_LOSS() external view returns (uint256);\n}\n"
    },
    "contracts/vaults/VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../interfaces/vaults/IVaultGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\n\n/// @notice Internal contract for managing different params.\n/// @dev The contract should be overriden by the concrete VaultGovernance,\n/// define different params structs and use abi.decode / abi.encode to serialize\n/// to bytes in this contract. It also should emit events on params change.\nabstract contract VaultGovernance is IVaultGovernance, ERC165 {\n    InternalParams internal _internalParams;\n    InternalParams private _stagedInternalParams;\n    uint256 internal _internalParamsTimestamp;\n\n    mapping(uint256 => bytes) internal _delayedStrategyParams;\n    mapping(uint256 => bytes) internal _stagedDelayedStrategyParams;\n    mapping(uint256 => uint256) internal _delayedStrategyParamsTimestamp;\n\n    mapping(uint256 => bytes) internal _delayedProtocolPerVaultParams;\n    mapping(uint256 => bytes) internal _stagedDelayedProtocolPerVaultParams;\n    mapping(uint256 => uint256) internal _delayedProtocolPerVaultParamsTimestamp;\n\n    bytes internal _delayedProtocolParams;\n    bytes internal _stagedDelayedProtocolParams;\n    uint256 internal _delayedProtocolParamsTimestamp;\n\n    mapping(uint256 => bytes) internal _strategyParams;\n    bytes internal _protocolParams;\n    bytes internal _operatorParams;\n\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    constructor(InternalParams memory internalParams_) {\n        require(address(internalParams_.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(internalParams_.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(internalParams_.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _internalParams = internalParams_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVaultGovernance\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256) {\n        return _delayedStrategyParamsTimestamp[nft];\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256) {\n        return _delayedProtocolPerVaultParamsTimestamp[nft];\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function delayedProtocolParamsTimestamp() external view returns (uint256) {\n        return _delayedProtocolParamsTimestamp;\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function internalParamsTimestamp() external view returns (uint256) {\n        return _internalParamsTimestamp;\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function internalParams() external view returns (InternalParams memory) {\n        return _internalParams;\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function stagedInternalParams() external view returns (InternalParams memory) {\n        return _stagedInternalParams;\n    }\n\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\n        return super.supportsInterface(interfaceID) || interfaceID == type(IVaultGovernance).interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IVaultGovernance\n    function stageInternalParams(InternalParams memory newParams) external {\n        _requireProtocolAdmin();\n        require(address(newParams.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(newParams.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(newParams.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stagedInternalParams = newParams;\n        _internalParamsTimestamp = block.timestamp + _internalParams.protocolGovernance.governanceDelay();\n        emit StagedInternalParams(tx.origin, msg.sender, newParams, _internalParamsTimestamp);\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function commitInternalParams() external {\n        _requireProtocolAdmin();\n        require(_internalParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(block.timestamp >= _internalParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _internalParams = _stagedInternalParams;\n        delete _internalParamsTimestamp;\n        delete _stagedInternalParams;\n        emit CommitedInternalParams(tx.origin, msg.sender, _internalParams);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _requireAtLeastStrategy(uint256 nft) internal view {\n        require(\n            (_internalParams.protocolGovernance.isAdmin(msg.sender) ||\n                _internalParams.registry.getApproved(nft) == msg.sender ||\n                (_internalParams.registry.ownerOf(nft) == msg.sender)),\n            ExceptionsLibrary.FORBIDDEN\n        );\n    }\n\n    function _requireProtocolAdmin() internal view {\n        require(_internalParams.protocolGovernance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n\n    function _requireAtLeastOperator() internal view {\n        IProtocolGovernance governance = _internalParams.protocolGovernance;\n        require(governance.isAdmin(msg.sender) || governance.isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _createVault(address owner) internal returns (address vault, uint256 nft) {\n        IProtocolGovernance protocolGovernance = IProtocolGovernance(_internalParams.protocolGovernance);\n        require(\n            protocolGovernance.hasPermission(msg.sender, PermissionIdsLibrary.CREATE_VAULT),\n            ExceptionsLibrary.FORBIDDEN\n        );\n        IVaultRegistry vaultRegistry = _internalParams.registry;\n        nft = vaultRegistry.vaultsCount() + 1;\n        vault = Clones.cloneDeterministic(address(_internalParams.singleton), bytes32(nft));\n        vaultRegistry.registerVault(address(vault), owner);\n    }\n\n    /// @notice Set Delayed Strategy Params\n    /// @param nft Nft of the vault\n    /// @param params New params\n    function _stageDelayedStrategyParams(uint256 nft, bytes memory params) internal {\n        _requireAtLeastStrategy(nft);\n        _stagedDelayedStrategyParams[nft] = params;\n        uint256 delayFactor = _delayedStrategyParams[nft].length == 0 ? 0 : 1;\n        _delayedStrategyParamsTimestamp[nft] =\n            block.timestamp +\n            _internalParams.protocolGovernance.governanceDelay() *\n            delayFactor;\n    }\n\n    /// @notice Commit Delayed Strategy Params\n    function _commitDelayedStrategyParams(uint256 nft) internal {\n        _requireAtLeastStrategy(nft);\n        uint256 thisDelayedStrategyParamsTimestamp = _delayedStrategyParamsTimestamp[nft];\n        require(thisDelayedStrategyParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(block.timestamp >= thisDelayedStrategyParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _delayedStrategyParams[nft] = _stagedDelayedStrategyParams[nft];\n        delete _stagedDelayedStrategyParams[nft];\n        delete _delayedStrategyParamsTimestamp[nft];\n    }\n\n    /// @notice Set Delayed Protocol Per Vault Params\n    /// @param nft Nft of the vault\n    /// @param params New params\n    function _stageDelayedProtocolPerVaultParams(uint256 nft, bytes memory params) internal {\n        _requireProtocolAdmin();\n        _stagedDelayedProtocolPerVaultParams[nft] = params;\n        uint256 delayFactor = _delayedProtocolPerVaultParams[nft].length == 0 ? 0 : 1;\n        _delayedProtocolPerVaultParamsTimestamp[nft] =\n            block.timestamp +\n            _internalParams.protocolGovernance.governanceDelay() *\n            delayFactor;\n    }\n\n    /// @notice Commit Delayed Protocol Per Vault Params\n    function _commitDelayedProtocolPerVaultParams(uint256 nft) internal {\n        _requireProtocolAdmin();\n        uint256 thisDelayedProtocolPerVaultParamsTimestamp = _delayedProtocolPerVaultParamsTimestamp[nft];\n        require(thisDelayedProtocolPerVaultParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(block.timestamp >= thisDelayedProtocolPerVaultParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _delayedProtocolPerVaultParams[nft] = _stagedDelayedProtocolPerVaultParams[nft];\n        delete _stagedDelayedProtocolPerVaultParams[nft];\n        delete _delayedProtocolPerVaultParamsTimestamp[nft];\n    }\n\n    /// @notice Set Delayed Protocol Params\n    /// @param params New params\n    function _stageDelayedProtocolParams(bytes memory params) internal {\n        _requireProtocolAdmin();\n        uint256 delayFactor = _delayedProtocolParams.length == 0 ? 0 : 1;\n        _stagedDelayedProtocolParams = params;\n        _delayedProtocolParamsTimestamp =\n            block.timestamp +\n            _internalParams.protocolGovernance.governanceDelay() *\n            delayFactor;\n    }\n\n    /// @notice Commit Delayed Protocol Params\n    function _commitDelayedProtocolParams() internal {\n        _requireProtocolAdmin();\n        require(_delayedProtocolParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(block.timestamp >= _delayedProtocolParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _delayedProtocolParams = _stagedDelayedProtocolParams;\n        delete _stagedDelayedProtocolParams;\n        delete _delayedProtocolParamsTimestamp;\n    }\n\n    /// @notice Set immediate strategy params\n    /// @dev Should require nft > 0\n    /// @param nft Nft of the vault\n    /// @param params New params\n    function _setStrategyParams(uint256 nft, bytes memory params) internal {\n        _requireAtLeastStrategy(nft);\n        _strategyParams[nft] = params;\n    }\n\n    /// @notice Set immediate operator params\n    /// @param params New params\n    function _setOperatorParams(bytes memory params) internal {\n        _requireAtLeastOperator();\n        _operatorParams = params;\n    }\n\n    /// @notice Set immediate protocol params\n    /// @param params New params\n    function _setProtocolParams(bytes memory params) internal {\n        _requireProtocolAdmin();\n        _protocolParams = params;\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when InternalParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StagedInternalParams(address indexed origin, address indexed sender, InternalParams params, uint256 when);\n\n    /// @notice Emitted when InternalParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    event CommitedInternalParams(address indexed origin, address indexed sender, InternalParams params);\n\n    /// @notice Emitted when New Vault is deployed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param vaultTokens Vault tokens for this vault\n    /// @param options Options for deploy. The details of the options structure are specified in subcontracts\n    /// @param owner Owner of the VaultRegistry NFT for this vault\n    /// @param vaultAddress Address of the new Vault\n    /// @param vaultNft VaultRegistry NFT for the new Vault\n    event DeployedVault(\n        address indexed origin,\n        address indexed sender,\n        address[] vaultTokens,\n        bytes options,\n        address owner,\n        address vaultAddress,\n        uint256 vaultNft\n    );\n}\n"
    },
    "contracts/interfaces/external/yearn/IYearnProtocolVaultRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\ninterface IYearnProtocolVaultRegistry {\n    function latestVault(address vault) external view returns (address);\n}\n"
    },
    "contracts/interfaces/vaults/IVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../IProtocolGovernance.sol\";\nimport \"../IVaultRegistry.sol\";\nimport \"./IVault.sol\";\n\ninterface IVaultGovernance {\n    /// @notice Internal references of the contract.\n    /// @param protocolGovernance Reference to Protocol Governance\n    /// @param registry Reference to Vault Registry\n    struct InternalParams {\n        IProtocolGovernance protocolGovernance;\n        IVaultRegistry registry;\n        IVault singleton;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Timestamp in unix time seconds after which staged Delayed Strategy Params could be committed.\n    /// @param nft Nft of the vault\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256);\n\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params could be committed.\n    function delayedProtocolParamsTimestamp() external view returns (uint256);\n\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params Per Vault could be committed.\n    /// @param nft Nft of the vault\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256);\n\n    /// @notice Timestamp in unix time seconds after which staged Internal Params could be committed.\n    function internalParamsTimestamp() external view returns (uint256);\n\n    /// @notice Internal Params of the contract.\n    function internalParams() external view returns (InternalParams memory);\n\n    /// @notice Staged new Internal Params.\n    /// @dev The Internal Params could be committed after internalParamsTimestamp\n    function stagedInternalParams() external view returns (InternalParams memory);\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Stage new Internal Params.\n    /// @param newParams New Internal Params\n    function stageInternalParams(InternalParams memory newParams) external;\n\n    /// @notice Commit staged Internal Params.\n    function commitInternalParams() external;\n}\n"
    },
    "contracts/interfaces/IVaultRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./IProtocolGovernance.sol\";\n\ninterface IVaultRegistry is IERC721 {\n    /// @notice Get Vault for the giver NFT ID.\n    /// @param nftId NFT ID\n    /// @return vault Address of the Vault contract\n    function vaultForNft(uint256 nftId) external view returns (address vault);\n\n    /// @notice Get NFT ID for given Vault contract address.\n    /// @param vault Address of the Vault contract\n    /// @return nftId NFT ID\n    function nftForVault(address vault) external view returns (uint256 nftId);\n\n    /// @notice Checks if the nft is locked for all transfers\n    /// @param nft NFT to check for lock\n    /// @return `true` if locked, false otherwise\n    function isLocked(uint256 nft) external view returns (bool);\n\n    /// @notice Register new Vault and mint NFT.\n    /// @param vault address of the vault\n    /// @param owner owner of the NFT\n    /// @return nft Nft minted for the given Vault\n    function registerVault(address vault, address owner) external returns (uint256 nft);\n\n    /// @notice Number of Vaults registered.\n    function vaultsCount() external view returns (uint256);\n\n    /// @notice All Vaults registered.\n    function vaults() external view returns (address[] memory);\n\n    /// @notice Address of the ProtocolGovernance.\n    function protocolGovernance() external view returns (IProtocolGovernance);\n\n    /// @notice Address of the staged ProtocolGovernance.\n    function stagedProtocolGovernance() external view returns (IProtocolGovernance);\n\n    /// @notice Minimal timestamp when staged ProtocolGovernance can be applied.\n    function stagedProtocolGovernanceTimestamp() external view returns (uint256);\n\n    /// @notice Stage new ProtocolGovernance.\n    /// @param newProtocolGovernance new ProtocolGovernance\n    function stageProtocolGovernance(IProtocolGovernance newProtocolGovernance) external;\n\n    /// @notice Commit new ProtocolGovernance.\n    function commitStagedProtocolGovernance() external;\n\n    /// @notice Lock NFT for transfers\n    /// @dev Use this method when vault structure is set up and should become immutable. Can be called by owner.\n    /// @param nft - NFT to lock\n    function lockNft(uint256 nft) external;\n}\n"
    },
    "contracts/interfaces/vaults/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IVaultGovernance.sol\";\n\ninterface IVault is IERC165 {\n    /// @notice Checks if the vault is initialized\n\n    function initialized() external view returns (bool);\n\n    /// @notice VaultRegistry NFT for this vault\n    function nft() external view returns (uint256);\n\n    /// @notice Address of the Vault Governance for this contract.\n    function vaultGovernance() external view returns (IVaultGovernance);\n\n    /// @notice ERC20 tokens under Vault management.\n    function vaultTokens() external view returns (address[] memory);\n\n    /// @notice Checks if a token is vault token\n    /// @param token Address of the token to check\n    /// @return `true` if this token is managed by Vault\n    function isVaultToken(address token) external view returns (bool);\n\n    /// @notice Total value locked for this contract.\n    /// @dev Generally it is the underlying token value of this contract in some\n    /// other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract.\n    /// The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\n    /// @return minTokenAmounts Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\n    /// @return maxTokenAmounts Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\n    function tvl() external view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\n\n    /// @notice Existential amounts for each token\n    function pullExistentials() external view returns (uint256[] memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/vaults/IIntegrationVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../external/erc/IERC1271.sol\";\nimport \"./IVault.sol\";\n\ninterface IIntegrationVault is IVault, IERC1271 {\n    /// @notice Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from\n    /// the contract balance and convert it to yUSDC.\n    /// @dev Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\n    ///\n    /// Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.\n    /// @param tokens Tokens to push\n    /// @param tokenAmounts Amounts of tokens to push\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\n    function push(\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice The same as `push` method above but transfers tokens to vault balance prior to calling push.\n    /// After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full).\n    /// @param tokens Tokens to push\n    /// @param tokenAmounts Amounts of tokens to push\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\n    function transferAndPush(\n        address from,\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice Pulls tokens from the underlying protocol to the `to` address.\n    /// @dev Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\n    /// Strategy is approved address for the vault NFT.\n    /// When called by vault owner this method just pulls the tokens from the protocol to the `to` address\n    /// When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault)\n    /// When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left.\n    /// Thus any vault other than zero vault cannot have any tokens on it\n    ///\n    /// Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\n    ///\n    /// Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.\n    /// @param to Address to receive the tokens\n    /// @param tokens Tokens to pull\n    /// @param tokenAmounts Amounts of tokens to pull\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\n    /// @return actualTokenAmounts The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)\n    function pull(\n        address to,\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice Claim ERC20 tokens from vault balance to zero vault.\n    /// @dev Cannot be called from zero vault.\n    /// @param tokens Tokens to claim\n    /// @return actualTokenAmounts Amounts reclaimed\n    function reclaimTokens(address[] memory tokens) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice Execute one of whitelisted calls.\n    /// @dev Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\n    /// Strategy is approved address for the vault NFT.\n    ///\n    /// Since this method allows sending arbitrary transactions, the destinations of the calls\n    /// are whitelisted by Protocol Governance.\n    /// @param to Address of the reward pool\n    /// @param selector Selector of the call\n    /// @param data Abi encoded parameters to `to::selector`\n    /// @return result Result of execution of the call\n    function externalCall(\n        address to,\n        bytes4 selector,\n        bytes memory data\n    ) external payable returns (bytes memory result);\n}\n"
    },
    "contracts/interfaces/external/erc/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IERC1271 {\n    /// @notice Verifies offchain signature.\n    /// @dev Should return whether the signature provided is valid for the provided hash\n    ///\n    /// MUST return the bytes4 magic value 0x1626ba7e when function passes.\n    ///\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n    ///\n    /// MUST allow external calls\n    /// @param _hash Hash of the data to be signed\n    /// @param _signature Signature byte array associated with _hash\n    /// @return magicValue 0x1626ba7e if valid, 0xffffffff otherwise\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/libraries/PermissionIdsLibrary.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @notice Stores permission ids for addresses\nlibrary PermissionIdsLibrary {\n    // The msg.sender is allowed to register vault\n    uint8 constant REGISTER_VAULT = 0;\n    // The msg.sender is allowed to create vaults\n    uint8 constant CREATE_VAULT = 1;\n    // The token is allowed to be transfered by vault\n    uint8 constant ERC20_TRANSFER = 2;\n    // The token is allowed to be added to vault\n    uint8 constant ERC20_VAULT_TOKEN = 3;\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by any strategy\n    uint8 constant ERC20_APPROVE = 4;\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by trusted strategy\n    uint8 constant ERC20_APPROVE_RESTRICTED = 5;\n    // Strategy allowed using restricted API\n    uint8 constant TRUSTED_STRATEGY = 6;\n}\n"
    },
    "contracts/vaults/UniV3VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IUniV3VaultGovernance.sol\";\nimport \"../interfaces/vaults/IUniV3Vault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Governance that manages all UniV3 Vaults params and can deploy a new UniV3 Vault.\ncontract UniV3VaultGovernance is ContractMeta, IUniV3VaultGovernance, VaultGovernance {\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    /// @param delayedProtocolParams_ Initial Protocol Params\n    constructor(InternalParams memory internalParams_, DelayedProtocolParams memory delayedProtocolParams_)\n        VaultGovernance(internalParams_)\n    {\n        require(address(delayedProtocolParams_.positionManager) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(delayedProtocolParams_.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        // params are initialized in constructor, so cannot be 0\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return\n                DelayedProtocolParams({\n                    positionManager: INonfungiblePositionManager(address(0)),\n                    oracle: IOracle(address(0))\n                });\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IUniV3VaultGovernance).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\n        require(address(params.positionManager) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(params.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        uint24 fee_,\n        address uniV3Helper_\n    ) external returns (IUniV3Vault vault, uint256 nft) {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IUniV3Vault(vaddr);\n        vault.initialize(nft, vaultTokens_, fee_, uniV3Helper_);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, abi.encode(fee_), owner_, vaddr, nft);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV3VaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/interfaces/vaults/IUniV3VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../external/univ3/INonfungiblePositionManager.sol\";\nimport \"../oracles/IOracle.sol\";\nimport \"./IVaultGovernance.sol\";\nimport \"./IUniV3Vault.sol\";\n\ninterface IUniV3VaultGovernance is IVaultGovernance {\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param positionManager Reference to UniV3 INonfungiblePositionManager\n    struct DelayedProtocolParams {\n        INonfungiblePositionManager positionManager;\n        IOracle oracle;\n    }\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    /// @param fee_ Fee of the UniV3 pool\n    /// @param uniV3Helper_ address of helper for UniV3 arithmetic with ticks\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        uint24 fee_,\n        address uniV3Helper_\n    ) external returns (IUniV3Vault vault, uint256 nft);\n}\n"
    },
    "contracts/interfaces/vaults/IUniV3Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./IIntegrationVault.sol\";\nimport \"../external/univ3/INonfungiblePositionManager.sol\";\nimport \"../external/univ3/IUniswapV3Pool.sol\";\n\ninterface IUniV3Vault is IERC721Receiver, IIntegrationVault {\n    struct Options {\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Reference to INonfungiblePositionManager of UniswapV3 protocol.\n    function positionManager() external view returns (INonfungiblePositionManager);\n\n    /// @notice Reference to UniswapV3 pool.\n    function pool() external view returns (IUniswapV3Pool);\n\n    /// @notice NFT of UniV3 position manager\n    function uniV3Nft() external view returns (uint256);\n\n    /// @notice Returns tokenAmounts corresponding to liquidity, based on the current Uniswap position\n    /// @param liquidity Liquidity that will be converted to token amounts\n    /// @return tokenAmounts Token amounts for the specified liquidity\n    function liquidityToTokenAmounts(uint128 liquidity) external view returns (uint256[] memory tokenAmounts);\n\n    /// @notice Returns liquidity corresponding to token amounts, based on the current Uniswap position\n    /// @param tokenAmounts Token amounts that will be converted to liquidity\n    /// @return liquidity Liquidity for the specified token amounts\n    function tokenAmountsToLiquidity(uint256[] memory tokenAmounts) external view returns (uint128 liquidity);\n\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param fee_ Fee of the UniV3 pool\n    /// @param uniV3Helper_ address of helper for UniV3 arithmetic with ticks\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        uint24 fee_,\n        address uniV3Helper_\n    ) external;\n\n    /// @notice Collect UniV3 fees to zero vault.\n    function collectEarnings() external returns (uint256[] memory collectedEarnings);\n}\n"
    },
    "contracts/interfaces/external/univ3/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./IPeripheryImmutableState.sol\";\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is IPeripheryImmutableState, IERC721 {\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/interfaces/oracles/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IOracle {\n    /// @notice Oracle price for tokens as a Q64.96 value.\n    /// @notice Returns pricing information based on the indexes of non-zero bits in safetyIndicesSet.\n    /// @notice It is possible that not all indices will have their respective prices returned.\n    /// @dev The price is token1 / token0 i.e. how many weis of token1 required for 1 wei of token0.\n    /// The safety indexes are:\n    ///\n    /// 1 - unsafe, this is typically a spot price that can be easily manipulated,\n    ///\n    /// 2 - 4 - more or less safe, this is typically a uniV3 oracle, where the safety is defined by the timespan of the average price\n    ///\n    /// 5 - safe - this is typically a chailink oracle\n    /// @param token0 Reference to token0\n    /// @param token1 Reference to token1\n    /// @param safetyIndicesSet Bitmask of safety indices that are allowed for the return prices. For set of safety indexes = { 1 }, safetyIndicesSet = 0x2\n    /// @return pricesX96 Prices that satisfy safetyIndex and tokens\n    /// @return safetyIndices Safety indices for those prices\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices);\n}\n"
    },
    "contracts/interfaces/external/univ3/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/interfaces/external/univ3/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./pool/IUniswapV3PoolActions.sol\";\nimport \"./pool/IUniswapV3PoolImmutables.sol\";\nimport \"./pool/IUniswapV3PoolState.sol\";\nimport \"./pool/IUniswapV3PoolDerivedState.sol\";\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions\n{\n\n}\n"
    },
    "contracts/interfaces/external/univ3/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "contracts/interfaces/external/univ3/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "contracts/interfaces/external/univ3/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolPerformanceFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "contracts/interfaces/external/univ3/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n}\n"
    },
    "contracts/vaults/UniV3Vault.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/vaults/IUniV3VaultGovernance.sol\";\nimport \"../interfaces/vaults/IUniV3Vault.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/LiquidityAmounts.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"./IntegrationVault.sol\";\nimport \"../utils/UniV3Helper.sol\";\n\n/// @notice Vault that interfaces UniswapV3 protocol in the integration layer.\ncontract UniV3Vault is IUniV3Vault, IntegrationVault {\n    using SafeERC20 for IERC20;\n\n    struct Pair {\n        uint256 a0;\n        uint256 a1;\n    }\n\n    /// @inheritdoc IUniV3Vault\n    IUniswapV3Pool public pool;\n    /// @inheritdoc IUniV3Vault\n    uint256 public uniV3Nft;\n    INonfungiblePositionManager private _positionManager;\n    UniV3Helper private _uniV3Helper;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        if (uniV3Nft == 0) {\n            return (new uint256[](2), new uint256[](2));\n        }\n\n        minTokenAmounts = new uint256[](2);\n        maxTokenAmounts = new uint256[](2);\n        int24 tickLower;\n        int24 tickUpper;\n        uint128 liquidity;\n        {\n            IUniV3VaultGovernance.DelayedProtocolParams memory params = IUniV3VaultGovernance(address(_vaultGovernance))\n                .delayedProtocolParams();\n            {\n                uint128 tokensOwed0;\n                uint128 tokensOwed1;\n\n                (tickLower, tickUpper, liquidity, tokensOwed0, tokensOwed1) = _uniV3Helper.calculatePositionInfo(\n                    _positionManager,\n                    pool,\n                    uniV3Nft\n                );\n\n                minTokenAmounts[0] = tokensOwed0;\n                maxTokenAmounts[0] = tokensOwed0;\n                minTokenAmounts[1] = tokensOwed1;\n                maxTokenAmounts[1] = tokensOwed1;\n            }\n            {\n                uint256 amountMin0;\n                uint256 amountMax0;\n                uint256 amountMin1;\n                uint256 amountMax1;\n                uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n                uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n                (uint256 minPriceX96, uint256 maxPriceX96) = _getMinMaxPrice(params.oracle);\n                {\n                    uint256 minSqrtPriceX96 = CommonLibrary.sqrtX96(minPriceX96);\n                    (amountMin0, amountMin1) = LiquidityAmounts.getAmountsForLiquidity(\n                        uint160(minSqrtPriceX96),\n                        sqrtPriceAX96,\n                        sqrtPriceBX96,\n                        liquidity\n                    );\n                }\n                {\n                    uint256 maxSqrtPriceX96 = CommonLibrary.sqrtX96(maxPriceX96);\n                    (amountMax0, amountMax1) = LiquidityAmounts.getAmountsForLiquidity(\n                        uint160(maxSqrtPriceX96),\n                        sqrtPriceAX96,\n                        sqrtPriceBX96,\n                        liquidity\n                    );\n                }\n                minTokenAmounts[0] += amountMin0 < amountMax0 ? amountMin0 : amountMax0;\n                minTokenAmounts[1] += amountMin1 < amountMax1 ? amountMin1 : amountMax1;\n                maxTokenAmounts[0] += amountMin0 < amountMax0 ? amountMax0 : amountMin0;\n                maxTokenAmounts[1] += amountMin1 < amountMax1 ? amountMax1 : amountMin1;\n            }\n        }\n    }\n\n    /// @inheritdoc IntegrationVault\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, IntegrationVault) returns (bool) {\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IUniV3Vault).interfaceId);\n    }\n\n    /// @inheritdoc IUniV3Vault\n    function positionManager() external view returns (INonfungiblePositionManager) {\n        return _positionManager;\n    }\n\n    /// @inheritdoc IUniV3Vault\n    function liquidityToTokenAmounts(uint128 liquidity) external view returns (uint256[] memory tokenAmounts) {\n        tokenAmounts = _uniV3Helper.liquidityToTokenAmounts(liquidity, pool, uniV3Nft, _positionManager);\n    }\n\n    /// @inheritdoc IUniV3Vault\n    function tokenAmountsToLiquidity(uint256[] memory tokenAmounts) public view returns (uint128 liquidity) {\n        liquidity = _uniV3Helper.tokenAmountsToLiquidity(tokenAmounts, pool, uniV3Nft, _positionManager);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n    /// @inheritdoc IUniV3Vault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        uint24 fee_,\n        address uniV3Hepler_\n    ) external {\n        require(vaultTokens_.length == 2, ExceptionsLibrary.INVALID_VALUE);\n        _initialize(vaultTokens_, nft_);\n        _positionManager = IUniV3VaultGovernance(address(_vaultGovernance)).delayedProtocolParams().positionManager;\n        pool = IUniswapV3Pool(\n            IUniswapV3Factory(_positionManager.factory()).getPool(_vaultTokens[0], _vaultTokens[1], fee_)\n        );\n        _uniV3Helper = UniV3Helper(uniV3Hepler_);\n        require(address(pool) != address(0), ExceptionsLibrary.NOT_FOUND);\n    }\n\n    /// @inheritdoc IERC721Receiver\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes memory\n    ) external returns (bytes4) {\n        require(msg.sender == address(_positionManager), ExceptionsLibrary.FORBIDDEN);\n        require(_isStrategy(operator), ExceptionsLibrary.FORBIDDEN);\n        (, , address token0, address token1, uint24 fee, , , , , , , ) = _positionManager.positions(tokenId);\n        // new position should have vault tokens\n        require(\n            token0 == _vaultTokens[0] && token1 == _vaultTokens[1] && fee == pool.fee(),\n            ExceptionsLibrary.INVALID_TOKEN\n        );\n\n        if (uniV3Nft != 0) {\n            (, , , , , , , uint128 liquidity, , , uint128 tokensOwed0, uint128 tokensOwed1) = _positionManager\n                .positions(uniV3Nft);\n            require(liquidity == 0 && tokensOwed0 == 0 && tokensOwed1 == 0, ExceptionsLibrary.INVALID_VALUE);\n            // return previous uni v3 position nft\n            _positionManager.transferFrom(address(this), from, uniV3Nft);\n        }\n\n        uniV3Nft = tokenId;\n        return this.onERC721Received.selector;\n    }\n\n    /// @inheritdoc IUniV3Vault\n    function collectEarnings() external nonReentrant returns (uint256[] memory collectedEarnings) {\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        address owner = registry.ownerOf(_nft);\n        address to = _root(registry, _nft, owner).subvaultAt(0);\n        collectedEarnings = new uint256[](2);\n        (uint256 collectedEarnings0, uint256 collectedEarnings1) = _positionManager.collect(\n            INonfungiblePositionManager.CollectParams({\n                tokenId: uniV3Nft,\n                recipient: to,\n                amount0Max: type(uint128).max,\n                amount1Max: type(uint128).max\n            })\n        );\n        collectedEarnings[0] = collectedEarnings0;\n        collectedEarnings[1] = collectedEarnings1;\n        emit CollectedEarnings(tx.origin, msg.sender, to, collectedEarnings0, collectedEarnings1);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _parseOptions(bytes memory options) internal view returns (Options memory) {\n        if (options.length == 0) return Options({amount0Min: 0, amount1Min: 0, deadline: block.timestamp + 600});\n\n        require(options.length == 32 * 3, ExceptionsLibrary.INVALID_VALUE);\n        return abi.decode(options, (Options));\n    }\n\n    function _isStrategy(address addr) internal view returns (bool) {\n        return _vaultGovernance.internalParams().registry.getApproved(_nft) == addr;\n    }\n\n    function _isReclaimForbidden(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    function _getMinMaxPrice(IOracle oracle) internal view returns (uint256 minPriceX96, uint256 maxPriceX96) {\n        (uint256[] memory prices, ) = oracle.priceX96(_vaultTokens[0], _vaultTokens[1], 0x2A);\n        require(prices.length > 1, ExceptionsLibrary.INVARIANT);\n        minPriceX96 = prices[0];\n        maxPriceX96 = prices[0];\n        for (uint32 i = 1; i < prices.length; ++i) {\n            if (prices[i] < minPriceX96) {\n                minPriceX96 = prices[i];\n            } else if (prices[i] > maxPriceX96) {\n                maxPriceX96 = prices[i];\n            }\n        }\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _push(uint256[] memory tokenAmounts, bytes memory options)\n        internal\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        actualTokenAmounts = new uint256[](2);\n        if (uniV3Nft == 0) return actualTokenAmounts;\n\n        uint128 liquidity = tokenAmountsToLiquidity(tokenAmounts);\n\n        if (liquidity == 0) return actualTokenAmounts;\n        else {\n            address[] memory tokens = _vaultTokens;\n            for (uint256 i = 0; i < tokens.length; ++i) {\n                IERC20(tokens[i]).safeIncreaseAllowance(address(_positionManager), tokenAmounts[i]);\n            }\n\n            Options memory opts = _parseOptions(options);\n            Pair memory amounts = Pair({a0: tokenAmounts[0], a1: tokenAmounts[1]});\n            Pair memory minAmounts = Pair({a0: opts.amount0Min, a1: opts.amount1Min});\n            (, uint256 amount0, uint256 amount1) = _positionManager.increaseLiquidity(\n                INonfungiblePositionManager.IncreaseLiquidityParams({\n                    tokenId: uniV3Nft,\n                    amount0Desired: amounts.a0,\n                    amount1Desired: amounts.a1,\n                    amount0Min: minAmounts.a0,\n                    amount1Min: minAmounts.a1,\n                    deadline: opts.deadline\n                })\n            );\n\n            actualTokenAmounts[0] = amount0;\n            actualTokenAmounts[1] = amount1;\n\n            for (uint256 i = 0; i < tokens.length; ++i) {\n                IERC20(tokens[i]).safeApprove(address(_positionManager), 0);\n            }\n        }\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        // UniV3Vault should have strictly 2 vault tokens\n        actualTokenAmounts = new uint256[](2);\n        if (uniV3Nft == 0) return actualTokenAmounts;\n\n        Options memory opts = _parseOptions(options);\n        Pair memory amounts = _pullUniV3Nft(tokenAmounts, to, opts);\n        actualTokenAmounts[0] = amounts.a0;\n        actualTokenAmounts[1] = amounts.a1;\n    }\n\n    function _getMaximalLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = LiquidityAmounts.getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = LiquidityAmounts.getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 > liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    function _pullUniV3Nft(\n        uint256[] memory tokenAmounts,\n        address to,\n        Options memory opts\n    ) internal returns (Pair memory) {\n        uint128 liquidityToPull;\n        // scope the code below to avoid stack-too-deep exception\n        {\n            (, , , , , int24 tickLower, int24 tickUpper, uint128 liquidity, , , , ) = _positionManager.positions(\n                uniV3Nft\n            );\n            (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n            uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n            uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n            liquidityToPull = _getMaximalLiquidityForAmounts(\n                sqrtPriceX96,\n                sqrtPriceAX96,\n                sqrtPriceBX96,\n                tokenAmounts[0],\n                tokenAmounts[1]\n            );\n            liquidityToPull = liquidity < liquidityToPull ? liquidity : liquidityToPull;\n        }\n        if (liquidityToPull != 0) {\n            Pair memory minAmounts = Pair({a0: opts.amount0Min, a1: opts.amount1Min});\n            _positionManager.decreaseLiquidity(\n                INonfungiblePositionManager.DecreaseLiquidityParams({\n                    tokenId: uniV3Nft,\n                    liquidity: liquidityToPull,\n                    amount0Min: minAmounts.a0,\n                    amount1Min: minAmounts.a1,\n                    deadline: opts.deadline\n                })\n            );\n        }\n        (uint256 amount0Collected, uint256 amount1Collected) = _positionManager.collect(\n            INonfungiblePositionManager.CollectParams({\n                tokenId: uniV3Nft,\n                recipient: to,\n                amount0Max: type(uint128).max,\n                amount1Max: type(uint128).max\n            })\n        );\n        amount0Collected = amount0Collected > tokenAmounts[0] ? tokenAmounts[0] : amount0Collected;\n        amount1Collected = amount1Collected > tokenAmounts[1] ? tokenAmounts[1] : amount1Collected;\n        return Pair({a0: amount0Collected, a1: amount1Collected});\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when earnings are collected\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param to Receiver of the fees\n    /// @param amount0 Amount of token0 collected\n    /// @param amount1 Amount of token1 collected\n    event CollectedEarnings(\n        address indexed origin,\n        address indexed sender,\n        address indexed to,\n        uint256 amount0,\n        uint256 amount1\n    );\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/external/univ3/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/libraries/external/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        // diff: original require(absTick <= uint256(MAX_TICK), \"T\");\n        require(absTick <= uint256(int256(MAX_TICK)), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \"R\");\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "contracts/libraries/external/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\nimport \"./FullMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
    },
    "contracts/vaults/IntegrationVault.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/external/erc/IERC1271.sol\";\nimport \"../interfaces/vaults/IVaultRoot.sol\";\nimport \"../interfaces/vaults/IIntegrationVault.sol\";\nimport \"../interfaces/validators/IValidator.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"./VaultGovernance.sol\";\nimport \"./Vault.sol\";\n\n/// @notice Abstract contract that has logic common for every Vault.\n/// @dev Notes:\n/// ### ERC-721\n///\n/// Each Vault should be registered in VaultRegistry and get corresponding VaultRegistry NFT.\n///\n/// ### Access control\n///\n/// `push` and `pull` methods are only allowed for owner / approved person of the NFT. However,\n/// `pull` for approved person also checks that pull destination is another vault of the Vault System.\n///\n/// The semantics is: NFT owner owns all Vault liquidity, Approved person is liquidity manager.\n/// ApprovedForAll person cannot do anything except ERC-721 token transfers.\n///\n/// Both NFT owner and approved person can call externalCall method which claims liquidity mining rewards (if any)\n///\n/// `reclaimTokens` for claiming rewards given by an underlying protocol to erc20Vault in order to sell them there\nabstract contract IntegrationVault is IIntegrationVault, ReentrancyGuard, Vault {\n    using SafeERC20 for IERC20;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Vault) returns (bool) {\n        return\n            super.supportsInterface(interfaceId) ||\n            (interfaceId == type(IIntegrationVault).interfaceId) ||\n            (interfaceId == type(IERC1271).interfaceId);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IIntegrationVault\n    function push(\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) public nonReentrant returns (uint256[] memory actualTokenAmounts) {\n        uint256 nft_ = _nft;\n        require(nft_ != 0, ExceptionsLibrary.INIT);\n        IVaultRegistry vaultRegistry = _vaultGovernance.internalParams().registry;\n        IVault ownerVault = IVault(vaultRegistry.ownerOf(nft_)); // Also checks that the token exists\n        uint256 ownerNft = vaultRegistry.nftForVault(address(ownerVault));\n        require(ownerNft != 0, ExceptionsLibrary.NOT_FOUND); // require deposits only through Vault\n        uint256[] memory pTokenAmounts = _validateAndProjectTokens(tokens, tokenAmounts);\n        uint256[] memory pActualTokenAmounts = _push(pTokenAmounts, options);\n        actualTokenAmounts = CommonLibrary.projectTokenAmounts(tokens, _vaultTokens, pActualTokenAmounts);\n        emit Push(pActualTokenAmounts);\n    }\n\n    /// @inheritdoc IIntegrationVault\n    function transferAndPush(\n        address from,\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external returns (uint256[] memory actualTokenAmounts) {\n        uint256 len = tokens.length;\n        for (uint256 i = 0; i < len; ++i)\n            if (tokenAmounts[i] != 0) {\n                IERC20(tokens[i]).safeTransferFrom(from, address(this), tokenAmounts[i]);\n            }\n\n        actualTokenAmounts = push(tokens, tokenAmounts, options);\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            uint256 leftover = actualTokenAmounts[i] < tokenAmounts[i] ? tokenAmounts[i] - actualTokenAmounts[i] : 0;\n            if (leftover != 0) IERC20(tokens[i]).safeTransfer(from, leftover);\n        }\n    }\n\n    /// @inheritdoc IIntegrationVault\n    function pull(\n        address to,\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external nonReentrant returns (uint256[] memory actualTokenAmounts) {\n        uint256 nft_ = _nft;\n        require(nft_ != 0, ExceptionsLibrary.INIT);\n        require(_isApprovedOrOwner(msg.sender), ExceptionsLibrary.FORBIDDEN); // Also checks that the token exists\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        address owner = registry.ownerOf(nft_);\n        IVaultRoot root = _root(registry, nft_, owner);\n        if (owner != msg.sender) {\n            address zeroVault = root.subvaultAt(0);\n            if (zeroVault == address(this)) {\n                // If we pull from zero vault\n                require(\n                    root.hasSubvault(registry.nftForVault(to)) && to != address(this),\n                    ExceptionsLibrary.INVALID_TARGET\n                );\n            } else {\n                // If we pull from other vault\n                require(zeroVault == to, ExceptionsLibrary.INVALID_TARGET);\n            }\n        }\n        uint256[] memory pTokenAmounts = _validateAndProjectTokens(tokens, tokenAmounts);\n        uint256[] memory pActualTokenAmounts = _pull(to, pTokenAmounts, options);\n        actualTokenAmounts = CommonLibrary.projectTokenAmounts(tokens, _vaultTokens, pActualTokenAmounts);\n        emit Pull(to, actualTokenAmounts);\n    }\n\n    /// @inheritdoc IIntegrationVault\n    function reclaimTokens(address[] memory tokens)\n        external\n        virtual\n        nonReentrant\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        uint256 nft_ = _nft;\n        require(nft_ != 0, ExceptionsLibrary.INIT);\n        IVaultGovernance.InternalParams memory params = _vaultGovernance.internalParams();\n        IProtocolGovernance governance = params.protocolGovernance;\n        IVaultRegistry registry = params.registry;\n        address owner = registry.ownerOf(nft_);\n        address to = _root(registry, nft_, owner).subvaultAt(0);\n        actualTokenAmounts = new uint256[](tokens.length);\n        if (to == address(this)) {\n            return actualTokenAmounts;\n        }\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            if (\n                _isReclaimForbidden(tokens[i]) ||\n                !governance.hasPermission(tokens[i], PermissionIdsLibrary.ERC20_TRANSFER)\n            ) {\n                continue;\n            }\n            IERC20 token = IERC20(tokens[i]);\n            actualTokenAmounts[i] = token.balanceOf(address(this));\n\n            token.safeTransfer(to, actualTokenAmounts[i]);\n        }\n        emit ReclaimTokens(to, tokens, actualTokenAmounts);\n    }\n\n    /// @inheritdoc IERC1271\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue) {\n        IVaultGovernance.InternalParams memory params = _vaultGovernance.internalParams();\n        IVaultRegistry registry = params.registry;\n        IProtocolGovernance protocolGovernance = params.protocolGovernance;\n        uint256 nft_ = _nft;\n        if (nft_ == 0) {\n            return 0xffffffff;\n        }\n        address strategy = registry.getApproved(nft_);\n        if (!protocolGovernance.hasPermission(strategy, PermissionIdsLibrary.TRUSTED_STRATEGY)) {\n            return 0xffffffff;\n        }\n        uint32 size;\n        assembly {\n            size := extcodesize(strategy)\n        }\n        if (size > 0) {\n            if (IERC165(strategy).supportsInterface(type(IERC1271).interfaceId)) {\n                return IERC1271(strategy).isValidSignature(_hash, _signature);\n            } else {\n                return 0xffffffff;\n            }\n        }\n        if (CommonLibrary.recoverSigner(_hash, _signature) == strategy) {\n            return 0x1626ba7e;\n        }\n        return 0xffffffff;\n    }\n\n    /// @inheritdoc IIntegrationVault\n    function externalCall(\n        address to,\n        bytes4 selector,\n        bytes calldata data\n    ) external payable nonReentrant returns (bytes memory result) {\n        require(_nft != 0, ExceptionsLibrary.INIT);\n        require(_isApprovedOrOwner(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        IProtocolGovernance protocolGovernance = _vaultGovernance.internalParams().protocolGovernance;\n        IValidator validator = IValidator(protocolGovernance.validators(to));\n        require(address(validator) != address(0), ExceptionsLibrary.FORBIDDEN);\n        validator.validate(msg.sender, to, msg.value, selector, data);\n        (bool res, bytes memory returndata) = to.call{value: msg.value}(abi.encodePacked(selector, data));\n        if (!res) {\n            assembly {\n                let returndata_size := mload(returndata)\n                // Bubble up revert reason\n                revert(add(32, returndata), returndata_size)\n            }\n        }\n        result = returndata;\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _validateAndProjectTokens(address[] memory tokens, uint256[] memory tokenAmounts)\n        internal\n        view\n        returns (uint256[] memory pTokenAmounts)\n    {\n        require(CommonLibrary.isSortedAndUnique(tokens), ExceptionsLibrary.INVARIANT);\n        require(tokens.length == tokenAmounts.length, ExceptionsLibrary.INVALID_VALUE);\n        pTokenAmounts = CommonLibrary.projectTokenAmounts(_vaultTokens, tokens, tokenAmounts);\n    }\n\n    function _root(\n        IVaultRegistry registry,\n        uint256 thisNft,\n        address thisOwner\n    ) internal view returns (IVaultRoot) {\n        uint256 thisOwnerNft = registry.nftForVault(thisOwner);\n        require((thisNft != 0) && (thisOwnerNft != 0), ExceptionsLibrary.INIT);\n\n        return IVaultRoot(thisOwner);\n    }\n\n    function _isApprovedOrOwner(address sender) internal view returns (bool) {\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        uint256 nft_ = _nft;\n        if (nft_ == 0) {\n            return false;\n        }\n        return registry.getApproved(nft_) == sender || registry.ownerOf(nft_) == sender;\n    }\n\n    /// @notice check if token is forbidden to transfer under reclaim\n    /// @dev it is done in order to prevent reclaiming internal protocol tokens\n    ///      for example to prevent YEarn tokens to reclaimed\n    ///      if our vault is managing tokens, depositing it in YEarn\n    /// @param token The address of token to check\n    /// @return if token is forbidden\n    function _isReclaimForbidden(address token) internal view virtual returns (bool);\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    /// Guaranteed to have exact signature matchinn vault tokens\n    function _push(uint256[] memory tokenAmounts, bytes memory options)\n        internal\n        virtual\n        returns (uint256[] memory actualTokenAmounts);\n\n    /// Guaranteed to have exact signature matchinn vault tokens\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal virtual returns (uint256[] memory actualTokenAmounts);\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted on successful push\n    /// @param tokenAmounts The amounts of tokens to pushed\n    event Push(uint256[] tokenAmounts);\n\n    /// @notice Emitted on successful pull\n    /// @param to The target address for pulled tokens\n    /// @param tokenAmounts The amounts of tokens to pull\n    event Pull(address to, uint256[] tokenAmounts);\n\n    /// @notice Emitted when tokens are reclaimed\n    /// @param to The target address for pulled tokens\n    /// @param tokens ERC20 tokens to be reclaimed\n    /// @param tokenAmounts The amounts of reclaims\n    event ReclaimTokens(address to, address[] tokens, uint256[] tokenAmounts);\n}\n"
    },
    "contracts/utils/UniV3Helper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/LiquidityAmounts.sol\";\n\ncontract UniV3Helper {\n    function liquidityToTokenAmounts(\n        uint128 liquidity,\n        IUniswapV3Pool pool,\n        uint256 uniV3Nft,\n        INonfungiblePositionManager positionManager\n    ) external view returns (uint256[] memory tokenAmounts) {\n        tokenAmounts = new uint256[](2);\n        (, , , , , int24 tickLower, int24 tickUpper, , , , , ) = positionManager.positions(uniV3Nft);\n\n        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n        uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n        uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n        (tokenAmounts[0], tokenAmounts[1]) = LiquidityAmounts.getAmountsForLiquidity(\n            sqrtPriceX96,\n            sqrtPriceAX96,\n            sqrtPriceBX96,\n            liquidity\n        );\n    }\n\n    function tokenAmountsToLiquidity(\n        uint256[] memory tokenAmounts,\n        IUniswapV3Pool pool,\n        uint256 uniV3Nft,\n        INonfungiblePositionManager positionManager\n    ) external view returns (uint128 liquidity) {\n        (, , , , , int24 tickLower, int24 tickUpper, , , , , ) = positionManager.positions(uniV3Nft);\n        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n        uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n        uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n\n        liquidity = LiquidityAmounts.getLiquidityForAmounts(\n            sqrtPriceX96,\n            sqrtPriceAX96,\n            sqrtPriceBX96,\n            tokenAmounts[0],\n            tokenAmounts[1]\n        );\n    }\n\n    function _getFeeGrowthInside(\n        IUniswapV3Pool pool,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\n        unchecked {\n            (, , uint256 lowerFeeGrowthOutside0X128, uint256 lowerFeeGrowthOutside1X128, , , , ) = pool.ticks(\n                tickLower\n            );\n            (, , uint256 upperFeeGrowthOutside0X128, uint256 upperFeeGrowthOutside1X128, , , , ) = pool.ticks(\n                tickUpper\n            );\n\n            // calculate fee growth below\n            uint256 feeGrowthBelow0X128;\n            uint256 feeGrowthBelow1X128;\n            if (tickCurrent >= tickLower) {\n                feeGrowthBelow0X128 = lowerFeeGrowthOutside0X128;\n                feeGrowthBelow1X128 = lowerFeeGrowthOutside1X128;\n            } else {\n                feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lowerFeeGrowthOutside0X128;\n                feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lowerFeeGrowthOutside1X128;\n            }\n\n            // calculate fee growth above\n            uint256 feeGrowthAbove0X128;\n            uint256 feeGrowthAbove1X128;\n            if (tickCurrent < tickUpper) {\n                feeGrowthAbove0X128 = upperFeeGrowthOutside0X128;\n                feeGrowthAbove1X128 = upperFeeGrowthOutside1X128;\n            } else {\n                feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upperFeeGrowthOutside0X128;\n                feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upperFeeGrowthOutside1X128;\n            }\n\n            feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\n            feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\n        }\n    }\n\n    function calculatePositionInfo(\n        INonfungiblePositionManager positionManager,\n        IUniswapV3Pool pool,\n        uint256 uniV3Nft\n    )\n        external\n        view\n        returns (\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        )\n    {\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n        (\n            ,\n            ,\n            ,\n            ,\n            ,\n            tickLower,\n            tickUpper,\n            liquidity,\n            feeGrowthInside0LastX128,\n            feeGrowthInside1LastX128,\n            tokensOwed0,\n            tokensOwed1\n        ) = positionManager.positions(uniV3Nft);\n\n        if (liquidity == 0) {\n            return (tickLower, tickUpper, liquidity, tokensOwed0, tokensOwed1);\n        }\n\n        uint256 feeGrowthGlobal0X128 = pool.feeGrowthGlobal0X128();\n        uint256 feeGrowthGlobal1X128 = pool.feeGrowthGlobal1X128();\n        (, int24 tick, , , , , ) = pool.slot0();\n\n        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = _getFeeGrowthInside(\n            pool,\n            tickLower,\n            tickUpper,\n            tick,\n            feeGrowthGlobal0X128,\n            feeGrowthGlobal1X128\n        );\n\n        uint256 feeGrowthInside0DeltaX128;\n        uint256 feeGrowthInside1DeltaX128;\n        unchecked {\n            feeGrowthInside0DeltaX128 = feeGrowthInside0X128 - feeGrowthInside0LastX128;\n            feeGrowthInside1DeltaX128 = feeGrowthInside1X128 - feeGrowthInside1LastX128;\n        }\n\n        tokensOwed0 += uint128(FullMath.mulDiv(feeGrowthInside0DeltaX128, liquidity, CommonLibrary.Q128));\n\n        tokensOwed1 += uint128(FullMath.mulDiv(feeGrowthInside1DeltaX128, liquidity, CommonLibrary.Q128));\n    }\n}\n"
    },
    "contracts/libraries/external/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // diff: original lib works under 0.7.6 with overflows enabled\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            // diff: original uint256 twos = -denominator & denominator;\n            uint256 twos = uint256(-int256(denominator)) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // diff: original lib works under 0.7.6 with overflows enabled\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/external/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IVaultRoot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IVaultRoot {\n    /// @notice Checks if subvault is present\n    /// @param nft_ index of subvault for check\n    /// @return `true` if subvault present, `false` otherwise\n    function hasSubvault(uint256 nft_) external view returns (bool);\n\n    /// @notice Get subvault by index\n    /// @param index Index of subvault\n    /// @return address Address of the contract\n    function subvaultAt(uint256 index) external view returns (address);\n\n    /// @notice Get index of subvault by nft\n    /// @param nft_ Nft for getting subvault\n    /// @return index Index of subvault\n    function subvaultOneBasedIndex(uint256 nft_) external view returns (uint256);\n\n    /// @notice Get all subvalutNfts in the current Vault\n    /// @return subvaultNfts Subvaults of NTFs\n    function subvaultNfts() external view returns (uint256[] memory);\n}\n"
    },
    "contracts/interfaces/validators/IValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./IBaseValidator.sol\";\n\ninterface IValidator is IBaseValidator, IERC165 {\n    // @notice Validate if call can be made to external contract.\n    // @dev Reverts if validation failed. Returns nothing if validation is ok\n    // @param sender Sender of the externalCall method\n    // @param addr Address of the called contract\n    // @param value Ether value for the call\n    // @param selector Selector of the called method\n    // @param data Call data after selector\n    function validate(\n        address sender,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view;\n}\n"
    },
    "contracts/libraries/CommonLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./external/FullMath.sol\";\nimport \"./ExceptionsLibrary.sol\";\n\n/// @notice CommonLibrary shared utilities\nlibrary CommonLibrary {\n    uint256 constant DENOMINATOR = 10**9;\n    uint256 constant D18 = 10**18;\n    uint256 constant YEAR = 365 * 24 * 3600;\n    uint256 constant Q128 = 2**128;\n    uint256 constant Q96 = 2**96;\n    uint256 constant Q48 = 2**48;\n    uint256 constant Q160 = 2**160;\n    uint256 constant UNI_FEE_DENOMINATOR = 10**6;\n\n    /// @notice Sort uint256 using bubble sort. The sorting is done in-place.\n    /// @param arr Array of uint256\n    function sortUint(uint256[] memory arr) internal pure {\n        uint256 l = arr.length;\n        for (uint256 i = 0; i < l; ++i) {\n            for (uint256 j = i + 1; j < l; ++j) {\n                if (arr[i] > arr[j]) {\n                    uint256 temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n\n    /// @notice Checks if array of addresses is sorted and all adresses are unique\n    /// @param tokens A set of addresses to check\n    /// @return `true` if all addresses are sorted and unique, `false` otherwise\n    function isSortedAndUnique(address[] memory tokens) internal pure returns (bool) {\n        if (tokens.length < 2) {\n            return true;\n        }\n        for (uint256 i = 0; i < tokens.length - 1; ++i) {\n            if (tokens[i] >= tokens[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /// @notice Projects tokenAmounts onto subset or superset of tokens\n    /// @dev\n    /// Requires both sets of tokens to be sorted. When tokens are not sorted, it's undefined behavior.\n    /// If there is a token in tokensToProject that is not part of tokens and corresponding tokenAmountsToProject > 0, reverts.\n    /// Zero token amount is eqiuvalent to missing token\n    function projectTokenAmounts(\n        address[] memory tokens,\n        address[] memory tokensToProject,\n        uint256[] memory tokenAmountsToProject\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory res = new uint256[](tokens.length);\n        uint256 t = 0;\n        uint256 tp = 0;\n        while ((t < tokens.length) && (tp < tokensToProject.length)) {\n            if (tokens[t] < tokensToProject[tp]) {\n                res[t] = 0;\n                t++;\n            } else if (tokens[t] > tokensToProject[tp]) {\n                if (tokenAmountsToProject[tp] == 0) {\n                    tp++;\n                } else {\n                    revert(\"TPS\");\n                }\n            } else {\n                res[t] = tokenAmountsToProject[tp];\n                t++;\n                tp++;\n            }\n        }\n        while (t < tokens.length) {\n            res[t] = 0;\n            t++;\n        }\n        return res;\n    }\n\n    /// @notice Calculated sqrt of uint in X96 format\n    /// @param xX96 input number in X96 format\n    /// @return sqrt of xX96 in X96 format\n    function sqrtX96(uint256 xX96) internal pure returns (uint256) {\n        uint256 sqX96 = sqrt(xX96);\n        return sqX96 << 48;\n    }\n\n    /// @notice Calculated sqrt of uint\n    /// @param x input number\n    /// @return sqrt of x\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n\n    /// @notice Recovers signer address from signed message hash\n    /// @param _ethSignedMessageHash signed message\n    /// @param _signature contatenated ECDSA r, s, v (65 bytes)\n    /// @return Recovered address if the signature is valid, address(0) otherwise\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) internal pure returns (address) {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    /// @notice Get ECDSA r, s, v from signature\n    /// @param sig signature (65 bytes)\n    /// @return r ECDSA r\n    /// @return s ECDSA s\n    /// @return v ECDSA v\n    function splitSignature(bytes memory sig)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, ExceptionsLibrary.INVALID_LENGTH);\n\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n    }\n}\n"
    },
    "contracts/vaults/Vault.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Abstract contract that has logic common for every Vault.\n/// @dev Notes:\n/// ### ERC-721\n///\n/// Each Vault should be registered in VaultRegistry and get corresponding VaultRegistry NFT.\n///\n/// ### Access control\n///\n/// `push` and `pull` methods are only allowed for owner / approved person of the NFT. However,\n/// `pull` for approved person also checks that pull destination is another vault of the Vault System.\n///\n/// The semantics is: NFT owner owns all Vault liquidity, Approved person is liquidity manager.\n/// ApprovedForAll person cannot do anything except ERC-721 token transfers.\n///\n/// Both NFT owner and approved person can call externalCall method which claims liquidity mining rewards (if any)\n///\n/// `reclaimTokens` for mistakenly transfered tokens (not included into vaultTokens) additionally can be withdrawn by\n/// the protocol admin\nabstract contract Vault is IVault, ERC165 {\n    using SafeERC20 for IERC20;\n\n    IVaultGovernance internal _vaultGovernance;\n    address[] internal _vaultTokens;\n    mapping(address => int256) internal _vaultTokensIndex;\n    uint256 internal _nft;\n    uint256[] internal _pullExistentials;\n\n    constructor() {\n        // lock initialization and thus all mutations for any deployed Vault\n        _nft = type(uint256).max;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function initialized() external view returns (bool) {\n        return _nft != 0;\n    }\n\n    /// @inheritdoc IVault\n    function isVaultToken(address token) public view returns (bool) {\n        return _vaultTokensIndex[token] != 0;\n    }\n\n    /// @inheritdoc IVault\n    function vaultGovernance() external view returns (IVaultGovernance) {\n        return _vaultGovernance;\n    }\n\n    /// @inheritdoc IVault\n    function vaultTokens() external view returns (address[] memory) {\n        return _vaultTokens;\n    }\n\n    /// @inheritdoc IVault\n    function nft() external view returns (uint256) {\n        return _nft;\n    }\n\n    /// @inheritdoc IVault\n    function tvl() public view virtual returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\n\n    /// @inheritdoc IVault\n    function pullExistentials() external view returns (uint256[] memory) {\n        return _pullExistentials;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IVault).interfaceId);\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _initialize(address[] memory vaultTokens_, uint256 nft_) internal virtual {\n        require(_nft == 0, ExceptionsLibrary.INIT);\n        require(CommonLibrary.isSortedAndUnique(vaultTokens_), ExceptionsLibrary.INVARIANT);\n        require(nft_ != 0, ExceptionsLibrary.VALUE_ZERO); // guarantees that this method can only be called once\n        IProtocolGovernance governance = IVaultGovernance(msg.sender).internalParams().protocolGovernance;\n        require(\n            vaultTokens_.length > 0 && vaultTokens_.length <= governance.maxTokensPerVault(),\n            ExceptionsLibrary.INVALID_VALUE\n        );\n        for (uint256 i = 0; i < vaultTokens_.length; i++) {\n            require(\n                governance.hasPermission(vaultTokens_[i], PermissionIdsLibrary.ERC20_VAULT_TOKEN),\n                ExceptionsLibrary.FORBIDDEN\n            );\n        }\n        _vaultGovernance = IVaultGovernance(msg.sender);\n        _vaultTokens = vaultTokens_;\n        _nft = nft_;\n        uint256 len = _vaultTokens.length;\n        for (uint256 i = 0; i < len; ++i) {\n            _vaultTokensIndex[vaultTokens_[i]] = int256(i + 1);\n\n            IERC20Metadata token = IERC20Metadata(vaultTokens_[i]);\n            _pullExistentials.push(10**(token.decimals() / 2));\n        }\n        emit Initialized(tx.origin, msg.sender, vaultTokens_, nft_);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when Vault is intialized\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param vaultTokens_ ERC20 tokens under the vault management\n    /// @param nft_ VaultRegistry NFT assigned to the vault\n    event Initialized(address indexed origin, address indexed sender, address[] vaultTokens_, uint256 nft_);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/validators/IBaseValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../IProtocolGovernance.sol\";\n\ninterface IBaseValidator {\n    /// @notice Validator parameters\n    /// @param protocolGovernance Reference to Protocol Governance\n    struct ValidatorParams {\n        IProtocolGovernance protocolGovernance;\n    }\n\n    /// @notice Validator params staged to commit.\n    function stagedValidatorParams() external view returns (ValidatorParams memory);\n\n    /// @notice Timestamp after which validator params can be committed.\n    function stagedValidatorParamsTimestamp() external view returns (uint256);\n\n    /// @notice Current validator params.\n    function validatorParams() external view returns (ValidatorParams memory);\n\n    /// @notice Stage new validator params for commit.\n    /// @param newParams New params for commit\n    function stageValidatorParams(ValidatorParams calldata newParams) external;\n\n    /// @notice Commit new validator params.\n    function commitValidatorParams() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/vaults/ERC20RootVault.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/vaults/IERC20RootVaultGovernance.sol\";\nimport \"../interfaces/vaults/IERC20RootVault.sol\";\nimport \"../interfaces/utils/ILpCallback.sol\";\nimport \"../utils/ERC20Token.sol\";\nimport \"./AggregateVault.sol\";\nimport \"../interfaces/utils/IERC20RootVaultHelper.sol\";\n\n/// @notice Contract that mints and burns LP tokens in exchange for ERC20 liquidity.\ncontract ERC20RootVault is IERC20RootVault, ERC20Token, ReentrancyGuard, AggregateVault {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @inheritdoc IERC20RootVault\n    uint64 public lastFeeCharge;\n    /// @inheritdoc IERC20RootVault\n    uint64 public totalWithdrawnAmountsTimestamp;\n    /// @inheritdoc IERC20RootVault\n    uint256[] public totalWithdrawnAmounts;\n    /// @inheritdoc IERC20RootVault\n    uint256 public lpPriceHighWaterMarkD18;\n    EnumerableSet.AddressSet private _depositorsAllowlist;\n    IERC20RootVaultHelper public helper;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n    /// @inheritdoc IERC20RootVault\n    function depositorsAllowlist() external view returns (address[] memory) {\n        return _depositorsAllowlist.values();\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, AggregateVault)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId) || type(IERC20RootVault).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n    /// @inheritdoc IERC20RootVault\n    function addDepositorsToAllowlist(address[] calldata depositors) external {\n        _requireAtLeastStrategy();\n        for (uint256 i = 0; i < depositors.length; i++) {\n            _depositorsAllowlist.add(depositors[i]);\n        }\n    }\n\n    /// @inheritdoc IERC20RootVault\n    function removeDepositorsFromAllowlist(address[] calldata depositors) external {\n        _requireAtLeastStrategy();\n        for (uint256 i = 0; i < depositors.length; i++) {\n            _depositorsAllowlist.remove(depositors[i]);\n        }\n    }\n\n    /// @inheritdoc IERC20RootVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        IERC20RootVaultHelper helper_\n    ) external {\n        _initialize(vaultTokens_, nft_, strategy_, subvaultNfts_);\n        _initERC20(_getTokenName(bytes(\"Mellow Lp Token \"), nft_), _getTokenName(bytes(\"MLP\"), nft_));\n        uint256 len = vaultTokens_.length;\n        totalWithdrawnAmounts = new uint256[](len);\n        lastFeeCharge = uint64(block.timestamp);\n        helper = helper_;\n    }\n\n    /// @inheritdoc IERC20RootVault\n    function deposit(\n        uint256[] memory tokenAmounts,\n        uint256 minLpTokens,\n        bytes memory vaultOptions\n    ) external nonReentrant returns (uint256[] memory actualTokenAmounts) {\n        require(\n            !IERC20RootVaultGovernance(address(_vaultGovernance)).operatorParams().disableDeposit,\n            ExceptionsLibrary.FORBIDDEN\n        );\n        address[] memory tokens = _vaultTokens;\n        uint256 supply = totalSupply;\n        if (supply == 0) {\n            for (uint256 i = 0; i < tokens.length; ++i) {\n                require(tokenAmounts[i] >= 10 * _pullExistentials[i], ExceptionsLibrary.LIMIT_UNDERFLOW);\n                require(\n                    tokenAmounts[i] <= _pullExistentials[i] * _pullExistentials[i],\n                    ExceptionsLibrary.LIMIT_OVERFLOW\n                );\n            }\n        }\n        (uint256[] memory minTvl, uint256[] memory maxTvl) = tvl();\n        uint256 thisNft = _nft;\n        _chargeFees(thisNft, minTvl, supply, tokens);\n        supply = totalSupply;\n        IERC20RootVaultGovernance.DelayedStrategyParams memory delayedStrategyParams = IERC20RootVaultGovernance(\n            address(_vaultGovernance)\n        ).delayedStrategyParams(thisNft);\n        require(\n            !delayedStrategyParams.privateVault || _depositorsAllowlist.contains(msg.sender),\n            ExceptionsLibrary.FORBIDDEN\n        );\n        uint256 preLpAmount;\n        uint256[] memory normalizedAmounts = new uint256[](tokenAmounts.length);\n        {\n            bool isSignificantTvl;\n            (preLpAmount, isSignificantTvl) = _getLpAmount(maxTvl, tokenAmounts, supply);\n            for (uint256 i = 0; i < tokens.length; ++i) {\n                normalizedAmounts[i] = _getNormalizedAmount(\n                    maxTvl[i],\n                    tokenAmounts[i],\n                    preLpAmount,\n                    supply,\n                    isSignificantTvl,\n                    _pullExistentials[i]\n                );\n                IERC20(tokens[i]).safeTransferFrom(msg.sender, address(this), normalizedAmounts[i]);\n            }\n        }\n        actualTokenAmounts = _push(normalizedAmounts, vaultOptions);\n        (uint256 lpAmount, ) = _getLpAmount(maxTvl, actualTokenAmounts, supply);\n        require(lpAmount >= minLpTokens, ExceptionsLibrary.LIMIT_UNDERFLOW);\n        require(lpAmount != 0, ExceptionsLibrary.VALUE_ZERO);\n        IERC20RootVaultGovernance.StrategyParams memory params = IERC20RootVaultGovernance(address(_vaultGovernance))\n            .strategyParams(thisNft);\n        require(lpAmount + balanceOf[msg.sender] <= params.tokenLimitPerAddress, ExceptionsLibrary.LIMIT_OVERFLOW);\n        require(lpAmount + supply <= params.tokenLimit, ExceptionsLibrary.LIMIT_OVERFLOW);\n        // lock tokens on first deposit\n        if (supply == 0) {\n            _mint(address(0), lpAmount);\n        } else {\n            _mint(msg.sender, lpAmount);\n        }\n\n        for (uint256 i = 0; i < _vaultTokens.length; ++i) {\n            if (normalizedAmounts[i] > actualTokenAmounts[i]) {\n                IERC20(_vaultTokens[i]).safeTransfer(msg.sender, normalizedAmounts[i] - actualTokenAmounts[i]);\n            }\n        }\n\n        if (delayedStrategyParams.depositCallbackAddress != address(0)) {\n            try ILpCallback(delayedStrategyParams.depositCallbackAddress).depositCallback() {} catch Error(\n                string memory reason\n            ) {\n                emit DepositCallbackLog(reason);\n            } catch {\n                emit DepositCallbackLog(\"callback failed without reason\");\n            }\n        }\n\n        emit Deposit(msg.sender, _vaultTokens, actualTokenAmounts, lpAmount);\n    }\n\n    /// @inheritdoc IERC20RootVault\n    function withdraw(\n        address to,\n        uint256 lpTokenAmount,\n        uint256[] memory minTokenAmounts,\n        bytes[] memory vaultsOptions\n    ) external nonReentrant returns (uint256[] memory actualTokenAmounts) {\n        uint256 supply = totalSupply;\n        require(supply > 0, ExceptionsLibrary.VALUE_ZERO);\n        address[] memory tokens = _vaultTokens;\n        uint256[] memory tokenAmounts = new uint256[](_vaultTokens.length);\n        (uint256[] memory minTvl, ) = tvl();\n        _chargeFees(_nft, minTvl, supply, tokens);\n        supply = totalSupply;\n        uint256 balance = balanceOf[msg.sender];\n        if (lpTokenAmount > balance) {\n            lpTokenAmount = balance;\n        }\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            tokenAmounts[i] = FullMath.mulDiv(lpTokenAmount, minTvl[i], supply);\n        }\n        actualTokenAmounts = _pull(address(this), tokenAmounts, vaultsOptions);\n        // we are draining balance\n        // if no sufficent amounts rest\n        bool sufficientAmountRest = false;\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            require(actualTokenAmounts[i] >= minTokenAmounts[i], ExceptionsLibrary.LIMIT_UNDERFLOW);\n            if (FullMath.mulDiv(balance, minTvl[i], supply) >= _pullExistentials[i] + actualTokenAmounts[i]) {\n                sufficientAmountRest = true;\n            }\n            if (actualTokenAmounts[i] != 0) {\n                IERC20(tokens[i]).safeTransfer(to, actualTokenAmounts[i]);\n            }\n        }\n        _updateWithdrawnAmounts(actualTokenAmounts);\n        if (sufficientAmountRest) {\n            _burn(msg.sender, lpTokenAmount);\n        } else {\n            _burn(msg.sender, balance);\n        }\n\n        uint256 thisNft = _nft;\n        IERC20RootVaultGovernance.DelayedStrategyParams memory delayedStrategyParams = IERC20RootVaultGovernance(\n            address(_vaultGovernance)\n        ).delayedStrategyParams(thisNft);\n\n        if (delayedStrategyParams.withdrawCallbackAddress != address(0)) {\n            try ILpCallback(delayedStrategyParams.withdrawCallbackAddress).withdrawCallback() {} catch Error(\n                string memory reason\n            ) {\n                emit WithdrawCallbackLog(reason);\n            } catch {\n                emit WithdrawCallbackLog(\"callback failed without reason\");\n            }\n        }\n\n        emit Withdraw(msg.sender, _vaultTokens, actualTokenAmounts, lpTokenAmount);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _getLpAmount(\n        uint256[] memory tvl_,\n        uint256[] memory amounts,\n        uint256 supply\n    ) internal view returns (uint256 lpAmount, bool isSignificantTvl) {\n        if (supply == 0) {\n            // On init lpToken = max(tokenAmounts)\n            for (uint256 i = 0; i < tvl_.length; ++i) {\n                if (amounts[i] > lpAmount) {\n                    lpAmount = amounts[i];\n                }\n            }\n            return (lpAmount, false);\n        }\n        uint256 tvlsLength = tvl_.length;\n        bool isLpAmountUpdated = false;\n        uint256[] memory pullExistentials = _pullExistentials;\n        for (uint256 i = 0; i < tvlsLength; ++i) {\n            if (tvl_[i] < pullExistentials[i]) {\n                continue;\n            }\n\n            uint256 tokenLpAmount = FullMath.mulDiv(amounts[i], supply, tvl_[i]);\n            // take min of meaningful tokenLp amounts\n            if ((tokenLpAmount < lpAmount) || (isLpAmountUpdated == false)) {\n                isLpAmountUpdated = true;\n                lpAmount = tokenLpAmount;\n            }\n        }\n        isSignificantTvl = isLpAmountUpdated;\n        // in case of almost zero tvl for all tokens -> do the same with supply == 0\n        if (!isSignificantTvl) {\n            for (uint256 i = 0; i < tvl_.length; ++i) {\n                if (amounts[i] > lpAmount) {\n                    lpAmount = amounts[i];\n                }\n            }\n        }\n    }\n\n    function _getNormalizedAmount(\n        uint256 tvl_,\n        uint256 amount,\n        uint256 lpAmount,\n        uint256 supply,\n        bool isSignificantTvl,\n        uint256 existentialsAmount\n    ) internal pure returns (uint256) {\n        if (supply == 0 || !isSignificantTvl) {\n            // skip normalization on init\n            return amount;\n        }\n\n        if (tvl_ < existentialsAmount) {\n            // use zero-normalization when all tvls are dust-like\n            return 0;\n        }\n\n        // normalize amount\n        uint256 res = FullMath.mulDiv(tvl_, lpAmount, supply);\n        if (res > amount) {\n            res = amount;\n        }\n\n        return res;\n    }\n\n    function _requireAtLeastStrategy() internal view {\n        uint256 nft_ = _nft;\n        IVaultGovernance.InternalParams memory internalParams = _vaultGovernance.internalParams();\n        require(\n            (internalParams.protocolGovernance.isAdmin(msg.sender) ||\n                internalParams.registry.getApproved(nft_) == msg.sender ||\n                (internalParams.registry.ownerOf(nft_) == msg.sender)),\n            ExceptionsLibrary.FORBIDDEN\n        );\n    }\n\n    function _getTokenName(bytes memory prefix, uint256 nft_) internal pure returns (string memory) {\n        bytes memory number = bytes(Strings.toString(nft_));\n        return string(abi.encodePacked(prefix, number));\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    /// @dev we are charging fees on the deposit / withdrawal\n    /// fees are charged before the tokens transfer and change the balance of the lp tokens\n    function _chargeFees(\n        uint256 thisNft,\n        uint256[] memory tvls,\n        uint256 supply,\n        address[] memory tokens\n    ) internal {\n        IERC20RootVaultGovernance vg = IERC20RootVaultGovernance(address(_vaultGovernance));\n        uint256 elapsed = block.timestamp - uint256(lastFeeCharge);\n        IERC20RootVaultGovernance.DelayedProtocolParams memory delayedProtocolParams = vg.delayedProtocolParams();\n        if (elapsed < delayedProtocolParams.managementFeeChargeDelay) {\n            return;\n        }\n        lastFeeCharge = uint64(block.timestamp);\n        // don't charge on initial deposit\n        if (supply == 0) {\n            return;\n        }\n        {\n            bool needSkip = true;\n            uint256[] memory pullExistentials = _pullExistentials;\n            for (uint256 i = 0; i < pullExistentials.length; ++i) {\n                if (tvls[i] >= pullExistentials[i]) {\n                    needSkip = false;\n                    break;\n                }\n            }\n            if (needSkip) {\n                return;\n            }\n        }\n        IERC20RootVaultGovernance.DelayedStrategyParams memory strategyParams = vg.delayedStrategyParams(thisNft);\n        uint256 protocolFee = vg.delayedProtocolPerVaultParams(thisNft).protocolFee;\n        address protocolTreasury = vg.internalParams().protocolGovernance.protocolTreasury();\n        _chargeManagementFees(\n            strategyParams.managementFee,\n            protocolFee,\n            strategyParams.strategyTreasury,\n            protocolTreasury,\n            elapsed,\n            supply\n        );\n\n        _chargePerformanceFees(\n            supply,\n            tvls,\n            strategyParams.performanceFee,\n            strategyParams.strategyPerformanceTreasury,\n            tokens,\n            delayedProtocolParams.oracle\n        );\n    }\n\n    function _chargeManagementFees(\n        uint256 managementFee,\n        uint256 protocolFee,\n        address strategyTreasury,\n        address protocolTreasury,\n        uint256 elapsed,\n        uint256 lpSupply\n    ) internal {\n        if (managementFee > 0) {\n            uint256 toMint = FullMath.mulDiv(\n                managementFee * elapsed,\n                lpSupply,\n                CommonLibrary.YEAR * CommonLibrary.DENOMINATOR\n            );\n            _mint(strategyTreasury, toMint);\n            emit ManagementFeesCharged(strategyTreasury, managementFee, toMint);\n        }\n        if (protocolFee > 0) {\n            uint256 toMint = FullMath.mulDiv(\n                protocolFee * elapsed,\n                lpSupply,\n                CommonLibrary.YEAR * CommonLibrary.DENOMINATOR\n            );\n            _mint(protocolTreasury, toMint);\n            emit ProtocolFeesCharged(protocolTreasury, protocolFee, toMint);\n        }\n    }\n\n    function _chargePerformanceFees(\n        uint256 baseSupply,\n        uint256[] memory baseTvls,\n        uint256 performanceFee,\n        address treasury,\n        address[] memory tokens,\n        IOracle oracle\n    ) internal {\n        if ((performanceFee == 0) || (baseSupply == 0)) {\n            return;\n        }\n        uint256 tvlToken0 = helper.getTvlToken0(baseTvls, tokens, oracle);\n        uint256 lpPriceD18 = FullMath.mulDiv(tvlToken0, CommonLibrary.D18, baseSupply);\n        uint256 hwmsD18 = lpPriceHighWaterMarkD18;\n        if (lpPriceD18 <= hwmsD18) {\n            return;\n        }\n        uint256 toMint;\n        if (hwmsD18 > 0) {\n            toMint = FullMath.mulDiv(baseSupply, lpPriceD18 - hwmsD18, hwmsD18);\n            toMint = FullMath.mulDiv(toMint, performanceFee, CommonLibrary.DENOMINATOR);\n            _mint(treasury, toMint);\n        }\n        lpPriceHighWaterMarkD18 = lpPriceD18;\n        emit PerformanceFeesCharged(treasury, performanceFee, toMint);\n    }\n\n    function _updateWithdrawnAmounts(uint256[] memory tokenAmounts) internal {\n        uint256[] memory withdrawn = new uint256[](tokenAmounts.length);\n        uint64 timestamp = uint64(block.timestamp);\n        IProtocolGovernance protocolGovernance = _vaultGovernance.internalParams().protocolGovernance;\n        if (timestamp != totalWithdrawnAmountsTimestamp) {\n            totalWithdrawnAmountsTimestamp = timestamp;\n        } else {\n            for (uint256 i = 0; i < tokenAmounts.length; i++) {\n                withdrawn[i] = totalWithdrawnAmounts[i];\n            }\n        }\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\n            withdrawn[i] += tokenAmounts[i];\n            require(\n                withdrawn[i] <= protocolGovernance.withdrawLimit(_vaultTokens[i]),\n                ExceptionsLibrary.LIMIT_OVERFLOW\n            );\n            totalWithdrawnAmounts[i] = withdrawn[i];\n        }\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when management fees are charged\n    /// @param treasury Treasury receiver of the fee\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\n    /// @param amount Amount of lp token minted\n    event ManagementFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\n\n    /// @notice Emitted when protocol fees are charged\n    /// @param treasury Treasury receiver of the fee\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\n    /// @param amount Amount of lp token minted\n    event ProtocolFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\n\n    /// @notice Emitted when performance fees are charged\n    /// @param treasury Treasury receiver of the fee\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\n    /// @param amount Amount of lp token minted\n    event PerformanceFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\n\n    /// @notice Emitted when liquidity is deposited\n    /// @param from The source address for the liquidity\n    /// @param tokens ERC20 tokens deposited\n    /// @param actualTokenAmounts Token amounts deposited\n    /// @param lpTokenMinted LP tokens received by the liquidity provider\n    event Deposit(address indexed from, address[] tokens, uint256[] actualTokenAmounts, uint256 lpTokenMinted);\n\n    /// @notice Emitted when liquidity is withdrawn\n    /// @param from The source address for the liquidity\n    /// @param tokens ERC20 tokens withdrawn\n    /// @param actualTokenAmounts Token amounts withdrawn\n    /// @param lpTokenBurned LP tokens burned from the liquidity provider\n    event Withdraw(address indexed from, address[] tokens, uint256[] actualTokenAmounts, uint256 lpTokenBurned);\n\n    /// @notice Emitted when callback in deposit failed\n    /// @param reason Error reason\n    event DepositCallbackLog(string reason);\n\n    /// @notice Emitted when callback in withdraw failed\n    /// @param reason Error reason\n    event WithdrawCallbackLog(string reason);\n}\n"
    },
    "contracts/interfaces/vaults/IERC20RootVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../oracles/IOracle.sol\";\nimport \"./IERC20RootVault.sol\";\nimport \"./IVaultGovernance.sol\";\nimport \"../utils/IERC20RootVaultHelper.sol\";\n\ninterface IERC20RootVaultGovernance is IVaultGovernance {\n    /// @notice Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\n    /// @param strategyTreasury Reference to address that will collect strategy management fees\n    /// @param strategyPerformanceTreasury Reference to address that will collect strategy performance fees\n    /// @param privateVault If true, only whitlisted depositors can deposit into the vault\n    /// @param managementFee Management fee for Strategist denominated in 10 ** 9\n    /// @param performanceFee Performance fee for Strategist denominated in 10 ** 9\n    /// @param depositCallbackAddress Address of callback function after deposit\n    /// @param withdrawCallbackAddress Address of callback function after withdraw\n    struct DelayedStrategyParams {\n        address strategyTreasury;\n        address strategyPerformanceTreasury;\n        bool privateVault;\n        uint256 managementFee;\n        uint256 performanceFee;\n        address depositCallbackAddress;\n        address withdrawCallbackAddress;\n    }\n\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param managementFeeChargeDelay The minimal interval between management fee charges\n    /// @param oracle Oracle for getting token prices\n    struct DelayedProtocolParams {\n        uint256 managementFeeChargeDelay;\n        IOracle oracle;\n    }\n\n    /// @notice Params that could be changed by Strategy or Protocol Governance.\n    /// @param tokenLimitPerAddress Max LP token limit per address\n    /// @param tokenLimit Max LP token for the vault\n    struct StrategyParams {\n        uint256 tokenLimitPerAddress;\n        uint256 tokenLimit;\n    }\n\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param protocolFee Management fee for Protocol denominated in 10 ** 9\n    struct DelayedProtocolPerVaultParams {\n        uint256 protocolFee;\n    }\n\n    /// @notice Params that could be changed by Operator role of Protocol Governance.\n    /// @param disableDeposit Disable deposit for all ERC20 vaults\n    struct OperatorParams {\n        bool disableDeposit;\n    }\n\n    /// @notice Number of maximum protocol fee\n    function MAX_PROTOCOL_FEE() external view returns (uint256);\n\n    /// @notice Number of maximum management fee\n    function MAX_MANAGEMENT_FEE() external view returns (uint256);\n\n    /// @notice Number of maximum performance fee\n    function MAX_PERFORMANCE_FEE() external view returns (uint256);\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param nft VaultRegistry NFT of the vault\n    function delayedProtocolPerVaultParams(uint256 nft) external view returns (DelayedProtocolPerVaultParams memory);\n\n    /// @notice Delayed Protocol Per Vault Params staged for commit after delay.\n    /// @param nft VaultRegistry NFT of the vault\n    function stagedDelayedProtocolPerVaultParams(uint256 nft)\n        external\n        view\n        returns (DelayedProtocolPerVaultParams memory);\n\n    /// @notice Strategy Params.\n    /// @param nft VaultRegistry NFT of the vault\n    function strategyParams(uint256 nft) external view returns (StrategyParams memory);\n\n    /// @notice Operator Params.\n    function operatorParams() external view returns (OperatorParams memory);\n\n    /// @notice Delayed Strategy Params\n    /// @param nft VaultRegistry NFT of the vault\n    function delayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory);\n\n    /// @notice Delayed Strategy Params staged for commit after delay.\n    /// @param nft VaultRegistry NFT of the vault\n    function stagedDelayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory);\n\n    /// @notice Set Strategy params, i.e. Params that could be changed by Strategy or Protocol Governance immediately.\n    /// @param nft Nft of the vault\n    /// @param params New params\n    function setStrategyParams(uint256 nft, StrategyParams calldata params) external;\n\n    /// @notice Set Operator params, i.e. Params that could be changed by Operator or Protocol Governance immediately.\n    /// @param params New params\n    function setOperatorParams(OperatorParams calldata params) external;\n\n    /// @notice Stage Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params\n    function stageDelayedProtocolPerVaultParams(uint256 nft, DelayedProtocolPerVaultParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolPerVaultParamsTimestamp\n    /// @param nft VaultRegistry NFT of the vault\n    function commitDelayedProtocolPerVaultParams(uint256 nft) external;\n\n    /// @notice Stage Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params\n    function stageDelayedStrategyParams(uint256 nft, DelayedStrategyParams calldata params) external;\n\n    /// @notice Commit Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedStrategyParamsTimestamp\n    /// @param nft VaultRegistry NFT of the vault\n    function commitDelayedStrategyParams(uint256 nft) external;\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolParamsTimestamp.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param strategy_ The address that will have approvals for subvaultNfts\n    /// @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault\n    /// @param owner_ Owner of the vault NFT\n    function createVault(\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        address owner_\n    ) external returns (IERC20RootVault vault, uint256 nft);\n}\n"
    },
    "contracts/interfaces/vaults/IERC20RootVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IAggregateVault.sol\";\nimport \"../utils/IERC20RootVaultHelper.sol\";\n\ninterface IERC20RootVault is IAggregateVault, IERC20 {\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param strategy_ The address that will have approvals for subvaultNfts\n    /// @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        IERC20RootVaultHelper helper_\n    ) external;\n\n    /// @notice The timestamp of last charging of fees\n    function lastFeeCharge() external view returns (uint64);\n\n    /// @notice The timestamp of last updating totalWithdrawnAmounts array\n    function totalWithdrawnAmountsTimestamp() external view returns (uint64);\n\n    /// @notice Returns value from totalWithdrawnAmounts array by _index\n    /// @param _index The index at which the value will be returned\n    function totalWithdrawnAmounts(uint256 _index) external view returns (uint256);\n\n    /// @notice LP parameter that controls the charge in performance fees\n    function lpPriceHighWaterMarkD18() external view returns (uint256);\n\n    /// @notice List of addresses of depositors from which interaction with private vaults is allowed\n    function depositorsAllowlist() external view returns (address[] memory);\n\n    /// @notice Add new depositors in the depositorsAllowlist\n    /// @param depositors Array of new depositors\n    /// @dev The action can be done only by user with admins, owners or by approved rights\n    function addDepositorsToAllowlist(address[] calldata depositors) external;\n\n    /// @notice Remove depositors from the depositorsAllowlist\n    /// @param depositors Array of depositors for remove\n    /// @dev The action can be done only by user with admins, owners or by approved rights\n    function removeDepositorsFromAllowlist(address[] calldata depositors) external;\n\n    /// @notice The function of depositing the amount of tokens in exchange\n    /// @param tokenAmounts Array of amounts of tokens for deposit\n    /// @param minLpTokens Minimal value of LP tokens\n    /// @param vaultOptions Options of vaults\n    /// @return actualTokenAmounts Arrays of actual token amounts after deposit\n    function deposit(\n        uint256[] memory tokenAmounts,\n        uint256 minLpTokens,\n        bytes memory vaultOptions\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice The function of withdrawing the amount of tokens in exchange\n    /// @param to Address to which the withdrawal will be sent\n    /// @param lpTokenAmount LP token amount, that requested for withdraw\n    /// @param minTokenAmounts Array of minmal remining wtoken amounts after withdrawal\n    /// @param vaultsOptions Options of vaults\n    /// @return actualTokenAmounts Arrays of actual token amounts after withdrawal\n    function withdraw(\n        address to,\n        uint256 lpTokenAmount,\n        uint256[] memory minTokenAmounts,\n        bytes[] memory vaultsOptions\n    ) external returns (uint256[] memory actualTokenAmounts);\n}\n"
    },
    "contracts/interfaces/utils/ILpCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ILpCallback {\n    /// @notice Function, that ERC20RootVault calling after deposit\n    function depositCallback() external;\n\n    /// @notice Function, that ERC20RootVault calling after withdraw\n    function withdrawCallback() external;\n}\n"
    },
    "contracts/utils/ERC20Token.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\ncontract ERC20Token is IERC20 {\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    uint8 public constant decimals = 18;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n\n    uint256 private immutable _chainId;\n    bytes32 private _cachedDomainSeparator;\n    mapping(address => uint256) public nonces;\n\n    constructor() {\n        _chainId = block.chainid;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == _chainId ? _cachedDomainSeparator : calculateDomainSeparator();\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender];\n\n        if (allowed != type(uint256).max) {\n            allowance[from][msg.sender] = allowed - amount;\n        }\n\n        balanceOf[from] -= amount;\n\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, ExceptionsLibrary.TIMESTAMP);\n\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner], deadline))\n                )\n            );\n            nonces[owner] += 1;\n            address recoveredAddress = ecrecover(digest, v, r, s);\n            require(recoveredAddress != address(0) && recoveredAddress == owner, ExceptionsLibrary.FORBIDDEN);\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function calculateDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _initERC20(string memory _name, string memory _symbol) internal {\n        name = _name;\n        symbol = _symbol;\n        _cachedDomainSeparator = calculateDomainSeparator();\n    }\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "contracts/vaults/AggregateVault.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/vaults/IIntegrationVault.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../interfaces/vaults/IVaultRoot.sol\";\nimport \"../interfaces/vaults/IAggregateVault.sol\";\nimport \"./Vault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\n/// @notice Vault that combines several integration layer Vaults into one Vault.\ncontract AggregateVault is IAggregateVault, Vault {\n    using SafeERC20 for IERC20;\n    uint256[] private _subvaultNfts;\n    mapping(uint256 => uint256) private _subvaultNftsIndex;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVaultRoot\n    function subvaultNfts() external view returns (uint256[] memory) {\n        return _subvaultNfts;\n    }\n\n    /// @inheritdoc IVaultRoot\n    function subvaultOneBasedIndex(uint256 nft_) external view returns (uint256) {\n        return _subvaultNftsIndex[nft_];\n    }\n\n    /// @inheritdoc IVaultRoot\n    function hasSubvault(uint256 nft_) external view returns (bool) {\n        return (_subvaultNftsIndex[nft_] > 0);\n    }\n\n    /// @inheritdoc IVaultRoot\n    function subvaultAt(uint256 index) external view returns (address) {\n        uint256 subvaultNft = _subvaultNfts[index];\n        return _vaultGovernance.internalParams().registry.vaultForNft(subvaultNft);\n    }\n\n    /// @inheritdoc IVault\n    function tvl()\n        public\n        view\n        override(IVault, Vault)\n        returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts)\n    {\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        address[] memory vaultTokens = _vaultTokens;\n        minTokenAmounts = new uint256[](vaultTokens.length);\n        maxTokenAmounts = new uint256[](vaultTokens.length);\n        for (uint256 i = 0; i < _subvaultNfts.length; ++i) {\n            IIntegrationVault vault = IIntegrationVault(registry.vaultForNft(_subvaultNfts[i]));\n            (uint256[] memory sMinTokenAmounts, uint256[] memory sMaxTokenAmounts) = vault.tvl();\n            address[] memory subvaultTokens = vault.vaultTokens();\n            uint256 subvaultTokenId = 0;\n            for (\n                uint256 tokenId = 0;\n                tokenId < vaultTokens.length && subvaultTokenId < subvaultTokens.length;\n                ++tokenId\n            ) {\n                if (subvaultTokens[subvaultTokenId] == vaultTokens[tokenId]) {\n                    minTokenAmounts[tokenId] += sMinTokenAmounts[subvaultTokenId];\n                    maxTokenAmounts[tokenId] += sMaxTokenAmounts[subvaultTokenId];\n                    ++subvaultTokenId;\n                }\n            }\n        }\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Vault) returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IAggregateVault).interfaceId == interfaceId;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _initialize(\n        address[] memory vaultTokens_,\n        uint256 nft_,\n        address strategy_,\n        uint256[] memory subvaultNfts_\n    ) internal virtual {\n        IVaultRegistry vaultRegistry = IVaultGovernance(msg.sender).internalParams().registry;\n        for (uint256 i = 0; i < subvaultNfts_.length; i++) {\n            // Significant amount of checks has been done in ERC20RootVaultGovernance in the createVault function to reduce contract size\n            uint256 subvaultNft = subvaultNfts_[i];\n            require(vaultRegistry.ownerOf(subvaultNft) == address(this), ExceptionsLibrary.FORBIDDEN);\n            require(_subvaultNftsIndex[subvaultNft] == 0, ExceptionsLibrary.DUPLICATE);\n            vaultRegistry.approve(strategy_, subvaultNft);\n            vaultRegistry.lockNft(subvaultNft);\n            _subvaultNftsIndex[subvaultNft] = i + 1;\n        }\n        _subvaultNfts = subvaultNfts_;\n        _initialize(vaultTokens_, nft_);\n    }\n\n    function _push(uint256[] memory tokenAmounts, bytes memory vaultOptions)\n        internal\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        require(_nft != 0, ExceptionsLibrary.INIT);\n        IVaultGovernance.InternalParams memory params = _vaultGovernance.internalParams();\n        uint256 destNft = _subvaultNfts[0];\n        IVaultRegistry registry = params.registry;\n        IIntegrationVault destVault = IIntegrationVault(registry.vaultForNft(destNft));\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\n            if (tokenAmounts[i] > 0) {\n                IERC20(_vaultTokens[i]).safeIncreaseAllowance(address(destVault), tokenAmounts[i]);\n            }\n        }\n\n        actualTokenAmounts = destVault.transferAndPush(address(this), _vaultTokens, tokenAmounts, vaultOptions);\n\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\n            if (tokenAmounts[i] > 0) {\n                IERC20(_vaultTokens[i]).safeApprove(address(destVault), 0);\n            }\n        }\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes[] memory vaultsOptions\n    ) internal returns (uint256[] memory actualTokenAmounts) {\n        require(_nft != 0, ExceptionsLibrary.INIT);\n        require(vaultsOptions.length == _subvaultNfts.length, ExceptionsLibrary.INVALID_LENGTH);\n        IVaultRegistry vaultRegistry = _vaultGovernance.internalParams().registry;\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\n        address[] memory tokens = _vaultTokens;\n        uint256[] memory existentials = _pullExistentials;\n        uint256[] memory leftToPull = new uint256[](tokenAmounts.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            leftToPull[i] = tokenAmounts[i];\n        }\n        for (uint256 i = 0; i < _subvaultNfts.length; i++) {\n            uint256 subvaultNft = _subvaultNfts[i];\n            IIntegrationVault subvault = IIntegrationVault(vaultRegistry.vaultForNft(subvaultNft));\n            uint256[] memory pulledAmounts = subvault.pull(address(this), tokens, leftToPull, vaultsOptions[i]);\n            bool shouldStop = true;\n            for (uint256 j = 0; j < tokens.length; j++) {\n                if (leftToPull[j] > pulledAmounts[j] + existentials[j]) {\n                    shouldStop = false;\n                    leftToPull[j] -= pulledAmounts[j];\n                } else {\n                    leftToPull[j] = 0;\n                }\n            }\n            if (shouldStop) {\n                break;\n            }\n        }\n        address subvault0 = vaultRegistry.vaultForNft(_subvaultNfts[0]);\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 balance = IERC20(tokens[i]).balanceOf(address(this));\n            if (tokenAmounts[i] < balance) {\n                actualTokenAmounts[i] = tokenAmounts[i];\n                IERC20(tokens[i]).safeTransfer(to, tokenAmounts[i]);\n                IERC20(tokens[i]).safeTransfer(subvault0, balance - tokenAmounts[i]);\n            } else {\n                actualTokenAmounts[i] = balance;\n                IERC20(tokens[i]).safeTransfer(to, balance);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/utils/IERC20RootVaultHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../oracles/IOracle.sol\";\n\ninterface IERC20RootVaultHelper {\n    function getTvlToken0(\n        uint256[] calldata tvls,\n        address[] calldata tokens,\n        IOracle oracle\n    ) external view returns (uint256 tvl0);\n}\n"
    },
    "contracts/interfaces/vaults/IAggregateVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IVault.sol\";\nimport \"./IVaultRoot.sol\";\n\ninterface IAggregateVault is IVault, IVaultRoot {}\n"
    },
    "contracts/interfaces/vaults/IERC20Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../external/aave/ILendingPool.sol\";\nimport \"./IIntegrationVault.sol\";\n\ninterface IERC20Vault is IIntegrationVault {\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external;\n}\n"
    },
    "contracts/interfaces/external/aave/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\npragma experimental ABIEncoderV2;\n\nimport {ILendingPoolAddressesProvider} from \"./ILendingPoolAddressesProvider.sol\";\nimport {DataTypes} from \"./DataTypes.sol\";\n\ninterface ILendingPool {\n    /**\n     * @dev Emitted on deposit()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the deposit\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n     * @param amount The amount deposited\n     * @param referral The referral code used\n     **/\n    event Deposit(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlyng asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to Address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed\n     * @param referral The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint256 borrowRateMode,\n        uint256 borrowRate,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     **/\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint256 amount,\n        uint256 premium,\n        uint16 referralCode\n    );\n\n    /**\n     * @dev Emitted when the pause is triggered.\n     */\n    event Paused();\n\n    /**\n     * @dev Emitted when the pause is lifted.\n     */\n    event Unpaused();\n\n    /**\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n     * LendingPoolCollateral manager using a DELEGATECALL\n     * This allows to have the events in the generated ABI for LendingPool.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n     * gets added to the LendingPool ABI\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The new liquidity rate\n     * @param stableBorrowRate The new stable borrow rate\n     * @param variableBorrowRate The new variable borrow rate\n     * @param liquidityIndex The new liquidity index\n     * @param variableBorrowIndex The new variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to deposit\n     * @param amount The amount to be deposited\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to Address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n     * @param asset The address of the underlying asset borrowed\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n    /**\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n     *        borrowed at a stable rate and depositors are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n     * @param asset The address of the underlying asset deposited\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n    /**\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n     * For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts amounts being flash-borrowed\n     * @param modes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralETH the total collateral in ETH of the user\n     * @return totalDebtETH the total debt in ETH of the user\n     * @return availableBorrowsETH the borrowing power left of the user\n     * @return currentLiquidationThreshold the liquidation threshold of the user\n     * @return ltv the loan to value of the user\n     * @return healthFactor the current health factor of the user\n     **/\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    function initReserve(\n        address reserve,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n    function setConfiguration(address reserve, uint256 configuration) external;\n\n    /**\n     * @dev Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @dev Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @dev Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state of the reserve\n     **/\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromAfter,\n        uint256 balanceToBefore\n    ) external;\n\n    function getReservesList() external view returns (address[] memory);\n\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n    function setPause(bool val) external;\n\n    function paused() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/external/aave/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ninterface ILendingPoolAddressesProvider {\n    event MarketIdSet(string newMarketId);\n    event LendingPoolUpdated(address indexed newAddress);\n    event ConfigurationAdminUpdated(address indexed newAddress);\n    event EmergencyAdminUpdated(address indexed newAddress);\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n    event PriceOracleUpdated(address indexed newAddress);\n    event LendingRateOracleUpdated(address indexed newAddress);\n    event ProxyCreated(bytes32 id, address indexed newAddress);\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n    function getMarketId() external view returns (string memory);\n\n    function setMarketId(string calldata marketId) external;\n\n    function setAddress(bytes32 id, address newAddress) external;\n\n    function setAddressAsProxy(bytes32 id, address impl) external;\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getLendingPool() external view returns (address);\n\n    function setLendingPoolImpl(address pool) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n\n    function setLendingPoolConfiguratorImpl(address configurator) external;\n\n    function getLendingPoolCollateralManager() external view returns (address);\n\n    function setLendingPoolCollateralManager(address manager) external;\n\n    function getPoolAdmin() external view returns (address);\n\n    function setPoolAdmin(address admin) external;\n\n    function getEmergencyAdmin() external view returns (address);\n\n    function setEmergencyAdmin(address admin) external;\n\n    function getPriceOracle() external view returns (address);\n\n    function setPriceOracle(address priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n\n    function setLendingRateOracle(address lendingRateOracle) external;\n}\n"
    },
    "contracts/interfaces/external/aave/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\nlibrary DataTypes {\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        uint256 data;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n}\n"
    },
    "contracts/vaults/ERC20RootVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IERC20RootVaultGovernance.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../interfaces/vaults/IIntegrationVault.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\nimport \"../interfaces/utils/IERC20RootVaultHelper.sol\";\n\n/// @notice Governance that manages all Lp Issuers params and can deploy a new LpIssuer Vault.\ncontract ERC20RootVaultGovernance is ContractMeta, IERC20RootVaultGovernance, VaultGovernance {\n    /// @inheritdoc IERC20RootVaultGovernance\n    uint256 public constant MAX_PROTOCOL_FEE = 5 * 10**7; // 5%\n    /// @inheritdoc IERC20RootVaultGovernance\n    uint256 public constant MAX_MANAGEMENT_FEE = 10 * 10**7; // 10%\n    /// @inheritdoc IERC20RootVaultGovernance\n    uint256 public constant MAX_PERFORMANCE_FEE = 50 * 10**7; // 50%\n\n    IERC20RootVaultHelper public immutable helper;\n\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    /// @param delayedProtocolParams_ Initial Protocol Params\n    constructor(\n        InternalParams memory internalParams_,\n        DelayedProtocolParams memory delayedProtocolParams_,\n        IERC20RootVaultHelper helper_\n    ) VaultGovernance(internalParams_) {\n        require(address(delayedProtocolParams_.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(helper_) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        helper = helper_;\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        // params are initialized in constructor, so cannot be 0\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return DelayedProtocolParams({managementFeeChargeDelay: 0, oracle: IOracle(address(0))});\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function delayedProtocolPerVaultParams(uint256 nft) external view returns (DelayedProtocolPerVaultParams memory) {\n        if (_delayedProtocolPerVaultParams[nft].length == 0) {\n            return DelayedProtocolPerVaultParams({protocolFee: 0});\n        }\n        return abi.decode(_delayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stagedDelayedProtocolPerVaultParams(uint256 nft)\n        external\n        view\n        returns (DelayedProtocolPerVaultParams memory)\n    {\n        if (_stagedDelayedProtocolPerVaultParams[nft].length == 0) {\n            return DelayedProtocolPerVaultParams({protocolFee: 0});\n        }\n        return abi.decode(_stagedDelayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stagedDelayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory) {\n        if (_stagedDelayedStrategyParams[nft].length == 0) {\n            return\n                DelayedStrategyParams({\n                    strategyTreasury: address(0),\n                    strategyPerformanceTreasury: address(0),\n                    privateVault: false,\n                    managementFee: 0,\n                    performanceFee: 0,\n                    depositCallbackAddress: address(0),\n                    withdrawCallbackAddress: address(0)\n                });\n        }\n        return abi.decode(_stagedDelayedStrategyParams[nft], (DelayedStrategyParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function operatorParams() external view returns (OperatorParams memory) {\n        if (_operatorParams.length == 0) {\n            return OperatorParams({disableDeposit: false});\n        }\n        return abi.decode(_operatorParams, (OperatorParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function delayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory) {\n        if (_delayedStrategyParams[nft].length == 0) {\n            return\n                DelayedStrategyParams({\n                    strategyTreasury: address(0),\n                    strategyPerformanceTreasury: address(0),\n                    privateVault: false,\n                    managementFee: 0,\n                    performanceFee: 0,\n                    depositCallbackAddress: address(0),\n                    withdrawCallbackAddress: address(0)\n                });\n        }\n        return abi.decode(_delayedStrategyParams[nft], (DelayedStrategyParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function strategyParams(uint256 nft) external view returns (StrategyParams memory) {\n        if (_strategyParams[nft].length == 0) {\n            return StrategyParams({tokenLimitPerAddress: 0, tokenLimit: 0});\n        }\n        return abi.decode(_strategyParams[nft], (StrategyParams));\n    }\n\n    // @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IERC20RootVaultGovernance).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stageDelayedStrategyParams(uint256 nft, DelayedStrategyParams calldata params) external {\n        require(params.managementFee <= MAX_MANAGEMENT_FEE, ExceptionsLibrary.LIMIT_OVERFLOW);\n        require(params.performanceFee <= MAX_PERFORMANCE_FEE, ExceptionsLibrary.LIMIT_OVERFLOW);\n        _stageDelayedStrategyParams(nft, abi.encode(params));\n        emit StageDelayedStrategyParams(tx.origin, msg.sender, nft, params, _delayedStrategyParamsTimestamp[nft]);\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function commitDelayedStrategyParams(uint256 nft) external {\n        _commitDelayedStrategyParams(nft);\n        emit CommitDelayedStrategyParams(\n            tx.origin,\n            msg.sender,\n            nft,\n            abi.decode(_delayedStrategyParams[nft], (DelayedStrategyParams))\n        );\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stageDelayedProtocolPerVaultParams(uint256 nft, DelayedProtocolPerVaultParams calldata params) external {\n        require(params.protocolFee <= MAX_PROTOCOL_FEE, ExceptionsLibrary.LIMIT_OVERFLOW);\n        _stageDelayedProtocolPerVaultParams(nft, abi.encode(params));\n        emit StageDelayedProtocolPerVaultParams(\n            tx.origin,\n            msg.sender,\n            nft,\n            params,\n            _delayedStrategyParamsTimestamp[nft]\n        );\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function commitDelayedProtocolPerVaultParams(uint256 nft) external {\n        _commitDelayedProtocolPerVaultParams(nft);\n        emit CommitDelayedProtocolPerVaultParams(\n            tx.origin,\n            msg.sender,\n            nft,\n            abi.decode(_delayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams))\n        );\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function setStrategyParams(uint256 nft, StrategyParams calldata params) external {\n        _setStrategyParams(nft, abi.encode(params));\n        emit SetStrategyParams(tx.origin, msg.sender, nft, params);\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function setOperatorParams(OperatorParams calldata params) external {\n        _setOperatorParams(abi.encode(params));\n        emit SetOperatorParams(tx.origin, msg.sender, params);\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\n        require(address(params.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function createVault(\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        address owner_\n    ) external returns (IERC20RootVault vault, uint256 nft) {\n        address vaddr;\n        IVaultRegistry registry = _internalParams.registry;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IERC20RootVault(vaddr);\n        require(subvaultNfts_.length > 0, ExceptionsLibrary.EMPTY_LIST);\n        for (uint256 i = 0; i < subvaultNfts_.length; i++) {\n            uint256 subvaultNft = subvaultNfts_[i];\n            require(subvaultNft > 0, ExceptionsLibrary.VALUE_ZERO);\n            address subvault = registry.vaultForNft(subvaultNft);\n            require(subvault != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n            require(\n                IIntegrationVault(subvault).supportsInterface(type(IIntegrationVault).interfaceId),\n                ExceptionsLibrary.INVALID_INTERFACE\n            );\n            address[] memory subvaultTokens = IIntegrationVault(subvault).vaultTokens();\n            if (i == 0) {\n                // The zero-vault must have the same tokens as ERC20RootVault\n                require(vaultTokens_.length == subvaultTokens.length, ExceptionsLibrary.INVALID_LENGTH);\n                require(\n                    IERC165(subvault).supportsInterface(type(IERC20Vault).interfaceId),\n                    ExceptionsLibrary.INVALID_INTERFACE\n                );\n            }\n            uint256 subvaultTokenId = 0;\n            for (\n                uint256 tokenId = 0;\n                tokenId < vaultTokens_.length && subvaultTokenId < subvaultTokens.length;\n                ++tokenId\n            ) {\n                if (subvaultTokens[subvaultTokenId] == vaultTokens_[tokenId]) {\n                    subvaultTokenId++;\n                }\n            }\n            require(subvaultTokenId == subvaultTokens.length, ExceptionsLibrary.INVALID_TOKEN);\n\n            // RootVault is not yet initialized so we cannot use safeTransferFrom here\n            registry.transferFrom(msg.sender, vaddr, subvaultNfts_[i]);\n        }\n        vault.initialize(nft, vaultTokens_, strategy_, subvaultNfts_, helper);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ERC20RootVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new DelayedProtocolPerVaultParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolPerVaultParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedProtocolPerVaultParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedProtocolPerVaultParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that are committed\n    event CommitDelayedProtocolPerVaultParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedProtocolPerVaultParams params\n    );\n\n    /// @notice Emitted when new DelayedStrategyParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedStrategyParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedStrategyParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedStrategyParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that are committed\n    event CommitDelayedStrategyParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedStrategyParams params\n    );\n\n    /// @notice Emitted when new StrategyParams are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that are set\n    event SetStrategyParams(address indexed origin, address indexed sender, uint256 indexed nft, StrategyParams params);\n\n    /// @notice Emitted when new OperatorParams are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are set\n    event SetOperatorParams(address indexed origin, address indexed sender, OperatorParams params);\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/vaults/AaveVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IAaveVaultGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Governance that manages all Aave Vaults params and can deploy a new Aave Vault.\ncontract AaveVaultGovernance is ContractMeta, IAaveVaultGovernance, VaultGovernance {\n    uint256 public constant MAX_ESTIMATED_AAVE_APY = 100 * 10**7; // 100%\n\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    /// @param delayedProtocolParams_ Initial Protocol Params\n    constructor(InternalParams memory internalParams_, DelayedProtocolParams memory delayedProtocolParams_)\n        VaultGovernance(internalParams_)\n    {\n        require(address(delayedProtocolParams_.lendingPool) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(delayedProtocolParams_.estimatedAaveAPY != 0, ExceptionsLibrary.VALUE_ZERO);\n        require(delayedProtocolParams_.estimatedAaveAPY <= MAX_ESTIMATED_AAVE_APY, ExceptionsLibrary.LIMIT_OVERFLOW);\n\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IAaveVaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        // params are initialized in constructor, so cannot be 0\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || interfaceId == type(IAaveVaultGovernance).interfaceId;\n    }\n\n    /// @inheritdoc IAaveVaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return DelayedProtocolParams({lendingPool: ILendingPool(address(0)), estimatedAaveAPY: 0});\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IAaveVaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\n        require(address(params.lendingPool) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.estimatedAaveAPY != 0, ExceptionsLibrary.VALUE_ZERO);\n        require(params.estimatedAaveAPY <= MAX_ESTIMATED_AAVE_APY, ExceptionsLibrary.LIMIT_OVERFLOW);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IAaveVaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    /// @inheritdoc IAaveVaultGovernance\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IAaveVault vault, uint256 nft)\n    {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IAaveVault(vaddr);\n        vault.initialize(nft, vaultTokens_);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, \"\", owner_, vaddr, nft);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"AaveVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/interfaces/vaults/IAaveVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\nimport \"../external/aave/ILendingPool.sol\";\nimport \"./IAaveVault.sol\";\nimport \"./IVaultGovernance.sol\";\n\ninterface IAaveVaultGovernance is IVaultGovernance {\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param lendingPool Reference to Aave LendingPool\n    /// @param estimatedAaveAPY APY estimation for calulating tvl range. Measured in CommonLibrary.DENOMINATOR\n    struct DelayedProtocolParams {\n        ILendingPool lendingPool;\n        uint256 estimatedAaveAPY;\n    }\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolParamsTimestamp.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IAaveVault vault, uint256 nft);\n}\n"
    },
    "contracts/interfaces/vaults/IAaveVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../external/aave/ILendingPool.sol\";\nimport \"./IIntegrationVault.sol\";\n\ninterface IAaveVault is IIntegrationVault {\n    /// @notice Reference to Aave protocol lending pool.\n    function lendingPool() external view returns (ILendingPool);\n\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external;\n}\n"
    },
    "contracts/vaults/AaveVault.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"../interfaces/external/aave/ILendingPool.sol\";\nimport \"../interfaces/vaults/IAaveVaultGovernance.sol\";\nimport \"../interfaces/vaults/IAaveVault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"./IntegrationVault.sol\";\n\n/// @notice Vault that interfaces Aave protocol in the integration layer.\n/// @dev Notes:\n/// **TVL**\n///\n/// The TVL of the vault is cached and updated after each deposit withdraw.\n/// So essentially `tvl` call doesn't take into account accrued interest / donations to Aave since the\n/// last `deposit` / `withdraw`\n///\n/// **aTokens**\n/// aTokens are fixed at the token creation and addresses are taken from Aave Lending Pool.\n/// So essentially each aToken is fixed for life of the AaveVault. If the aToken is missing for some vaultToken,\n/// the AaveVault cannot be created.\n///\n/// **Push / Pull**\n/// It is assumed that any amounts of tokens can be deposited / withdrawn from Aave.\n/// The contract's vaultTokens are fully allowed to Aave Lending Pool.\ncontract AaveVault is IAaveVault, IntegrationVault {\n    using SafeERC20 for IERC20;\n    address[] internal _aTokens;\n    uint256[] internal _tvls;\n    uint256 private _lastTvlUpdateTimestamp;\n    ILendingPool private _lendingPool;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view override returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        minTokenAmounts = _tvls;\n        maxTokenAmounts = new uint256[](minTokenAmounts.length);\n        uint256 timeElapsed = block.timestamp - _lastTvlUpdateTimestamp;\n        uint256 factor = CommonLibrary.DENOMINATOR;\n        if (timeElapsed > 0) {\n            uint256 apy = IAaveVaultGovernance(address(_vaultGovernance)).delayedProtocolParams().estimatedAaveAPY;\n            factor = CommonLibrary.DENOMINATOR + FullMath.mulDiv(apy, timeElapsed, CommonLibrary.YEAR);\n        }\n        for (uint256 i = 0; i < minTokenAmounts.length; i++) {\n            maxTokenAmounts[i] = FullMath.mulDiv(factor, minTokenAmounts[i], CommonLibrary.DENOMINATOR);\n        }\n    }\n\n    /// @inheritdoc IAaveVault\n    function lendingPool() external view returns (ILendingPool) {\n        return _lendingPool;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, IntegrationVault) returns (bool) {\n        return IntegrationVault.supportsInterface(interfaceId) || interfaceId == type(IAaveVault).interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Update all tvls to current aToken balances.\n    function updateTvls() external {\n        _updateTvls();\n    }\n\n    /// @inheritdoc IAaveVault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external {\n        _initialize(vaultTokens_, nft_);\n        _lendingPool = IAaveVaultGovernance(address(_vaultGovernance)).delayedProtocolParams().lendingPool;\n        _aTokens = new address[](vaultTokens_.length);\n        for (uint256 i = 0; i < vaultTokens_.length; ++i) {\n            address aToken = _getAToken(vaultTokens_[i]);\n            require(aToken != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n            _aTokens[i] = aToken;\n            _tvls.push(0);\n        }\n        _lastTvlUpdateTimestamp = block.timestamp;\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _getAToken(address token) internal view returns (address) {\n        DataTypes.ReserveData memory data = _lendingPool.getReserveData(token);\n        return data.aTokenAddress;\n    }\n\n    function _isReclaimForbidden(address token) internal view override returns (bool) {\n        uint256 len = _aTokens.length;\n        for (uint256 i = 0; i < len; ++i) {\n            if (_aTokens[i] == token) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _updateTvls() private {\n        uint256 tvlsLength = _tvls.length;\n        for (uint256 i = 0; i < tvlsLength; ++i) {\n            _tvls[i] = IERC20(_aTokens[i]).balanceOf(address(this));\n        }\n        _lastTvlUpdateTimestamp = block.timestamp;\n    }\n\n    function _push(uint256[] memory tokenAmounts, bytes memory options)\n        internal\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        address[] memory tokens = _vaultTokens;\n        uint256 referralCode = 0;\n        if (options.length > 0) {\n            referralCode = abi.decode(options, (uint256));\n        }\n\n        for (uint256 i = 0; i < _aTokens.length; ++i) {\n            if (tokenAmounts[i] == 0) {\n                continue;\n            }\n            address token = tokens[i];\n            IERC20(token).safeIncreaseAllowance(address(_lendingPool), tokenAmounts[i]);\n            _lendingPool.deposit(tokens[i], tokenAmounts[i], address(this), uint16(referralCode));\n            IERC20(token).safeApprove(address(_lendingPool), 0);\n        }\n        _updateTvls();\n        actualTokenAmounts = tokenAmounts;\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        address[] memory tokens = _vaultTokens;\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\n        for (uint256 i = 0; i < _aTokens.length; ++i) {\n            if ((_tvls[i] == 0) || (tokenAmounts[i] == 0)) {\n                continue;\n            }\n            uint256 balance = IERC20(_aTokens[i]).balanceOf(address(this));\n            uint256 amount = tokenAmounts[i] < balance ? tokenAmounts[i] : balance;\n            actualTokenAmounts[i] = _lendingPool.withdraw(tokens[i], amount, to);\n        }\n        _updateTvls();\n    }\n}\n"
    },
    "contracts/vaults/YearnVault.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/yearn/IYearnProtocolVault.sol\";\nimport \"../interfaces/vaults/IYearnVaultGovernance.sol\";\nimport \"../interfaces/vaults/IYearnVault.sol\";\nimport \"./IntegrationVault.sol\";\n\n/// @notice Vault that interfaces Yearn protocol in the integration layer.\n/// @dev Notes:\n/// **TVL**\n///\n/// The TVL of the vault is updated after each deposit withdraw.\n///\n/// **yTokens**\n/// yTokens are fixed at the token creation and addresses are taken from YearnVault governance and if missing there\n/// - in YearnVaultRegistry.\n/// So essentially each yToken is fixed for life of the YearnVault. If the yToken is missing for some vaultToken,\n/// the YearnVault cannot be created.\n///\n/// **Push / Pull**\n/// There are some deposit limits imposed by Yearn vaults.\n/// The contract's vaultTokens are fully allowed to corresponding yTokens.\n\ncontract YearnVault is IYearnVault, IntegrationVault {\n    using SafeERC20 for IERC20;\n    uint256 public constant DEFAULT_MAX_LOSS = 10000; // 10000%%\n\n    address[] private _yTokens;\n\n    /// @notice Yearn protocol vaults used by this contract\n    function yTokens() external view returns (address[] memory) {\n        return _yTokens;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view override returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        address[] memory tokens = _vaultTokens;\n        minTokenAmounts = new uint256[](tokens.length);\n        for (uint256 i = 0; i < _yTokens.length; ++i) {\n            IYearnProtocolVault yToken = IYearnProtocolVault(_yTokens[i]);\n            minTokenAmounts[i] = FullMath.mulDiv(\n                yToken.balanceOf(address(this)),\n                yToken.pricePerShare(),\n                10**yToken.decimals()\n            );\n        }\n        maxTokenAmounts = minTokenAmounts;\n    }\n\n    /// @inheritdoc IntegrationVault\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, IntegrationVault)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId) || type(IYearnVault).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n    /// @inheritdoc IYearnVault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external {\n        _initialize(vaultTokens_, nft_);\n        _yTokens = new address[](vaultTokens_.length);\n        for (uint256 i = 0; i < vaultTokens_.length; ++i) {\n            _yTokens[i] = IYearnVaultGovernance(address(msg.sender)).yTokenForToken(vaultTokens_[i]);\n            require(_yTokens[i] != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -----------------------\n    function _isReclaimForbidden(address token) internal view override returns (bool) {\n        uint256 len = _yTokens.length;\n        for (uint256 i = 0; i < len; ++i) {\n            if (_yTokens[i] == token) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _push(uint256[] memory tokenAmounts, bytes memory)\n        internal\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        address[] memory tokens = _vaultTokens;\n        actualTokenAmounts = tokenAmounts;\n        for (uint256 i = 0; i < _yTokens.length; ++i) {\n            if (tokenAmounts[i] == 0) {\n                continue;\n            }\n\n            address token = tokens[i];\n            IYearnProtocolVault yToken = IYearnProtocolVault(_yTokens[i]);\n            IERC20(token).safeIncreaseAllowance(address(yToken), tokenAmounts[i]);\n            try yToken.deposit(tokenAmounts[i], address(this)) returns (uint256) {} catch (bytes memory) {\n                actualTokenAmounts[i] = 0;\n            }\n            IERC20(token).safeApprove(address(yToken), 0);\n        }\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\n        uint256 maxLoss = options.length > 0 ? abi.decode(options, (uint256)) : DEFAULT_MAX_LOSS;\n        for (uint256 i = 0; i < _yTokens.length; ++i) {\n            if (tokenAmounts[i] == 0) continue;\n\n            IYearnProtocolVault yToken = IYearnProtocolVault(_yTokens[i]);\n            uint256 yTokenAmount = FullMath.mulDiv(tokenAmounts[i], (10**yToken.decimals()), yToken.pricePerShare());\n            uint256 balance = yToken.balanceOf(address(this));\n            if (yTokenAmount > balance) {\n                yTokenAmount = balance;\n            }\n\n            if (yTokenAmount == 0) continue;\n\n            actualTokenAmounts[i] = yToken.withdraw(yTokenAmount, to, maxLoss);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/external/yearn/IYearnProtocolVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IYearnProtocolVault is IERC20 {\n    function decimals() external view returns (uint256);\n\n    function pricePerShare() external view returns (uint256);\n\n    function deposit(uint256 amount, address recipient) external returns (uint256);\n\n    // Default maxLoss = 1, i.e. 0.01% [BPS]\n    function withdraw(\n        uint256 maxShares,\n        address recipient,\n        uint256 maxLoss\n    ) external returns (uint256);\n}\n"
    },
    "contracts/strategies/LStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../interfaces/vaults/IUniV3Vault.sol\";\nimport \"../interfaces/oracles/IOracle.sol\";\nimport \"../interfaces/utils/ILStrategyHelper.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/GPv2Order.sol\";\nimport \"../utils/DefaultAccessControl.sol\";\n\ncontract LStrategy is DefaultAccessControl {\n    using SafeERC20 for IERC20;\n\n    // IMMUTABLES\n    uint256 public constant DENOMINATOR = 10**9;\n    bytes4 public constant SET_PRESIGNATURE_SELECTOR = 0xec6cb13f;\n    bytes4 public constant APPROVE_SELECTOR = 0x095ea7b3;\n    address[] public tokens;\n    IERC20Vault public immutable erc20Vault;\n    INonfungiblePositionManager public immutable positionManager;\n    ILStrategyHelper public immutable orderHelper;\n    uint24 public immutable poolFee;\n    address public immutable cowswap;\n    uint16 public immutable intervalWidthInTicks;\n\n    // INTERNAL STATE\n\n    IUniV3Vault public lowerVault;\n    IUniV3Vault public upperVault;\n    uint256 public lastRebalanceERC20UniV3VaultsTimestamp;\n    uint256 public lastRebalanceUniV3VaultsTimestamp;\n    uint256 public orderDeadline;\n    uint256[] internal _pullExistentials;\n\n    // MUTABLE PARAMS\n\n    struct TradingParams {\n        IOracle oracle;\n        uint32 maxSlippageD;\n        uint32 orderDeadline;\n        uint256 oracleSafetyMask;\n        uint256 maxFee0;\n        uint256 maxFee1;\n    }\n\n    struct RatioParams {\n        uint32 erc20UniV3CapitalRatioD;\n        uint32 erc20TokenRatioD;\n        uint32 minErc20UniV3CapitalRatioDeviationD;\n        uint32 minErc20TokenRatioDeviationD;\n        uint32 minUniV3LiquidityRatioDeviationD;\n    }\n\n    struct OtherParams {\n        uint256 minToken0ForOpening;\n        uint256 minToken1ForOpening;\n        uint256 secondsBetweenRebalances;\n    }\n\n    struct PreOrder {\n        address tokenIn;\n        address tokenOut;\n        uint64 deadline;\n        uint256 amountIn;\n        uint256 minAmountOut;\n    }\n\n    struct LiquidityParams {\n        uint128 targetUniV3LiquidityRatioD;\n        bool isNegativeLiquidityRatio;\n    }\n\n    TradingParams public tradingParams;\n    RatioParams public ratioParams;\n    OtherParams public otherParams;\n    PreOrder public preOrder;\n\n    // @notice Constructor for a new contract\n    // @param positionManager_ Reference to UniswapV3 positionManager\n    // @param erc20vault_ Reference to ERC20 Vault\n    // @param vault1_ Reference to Uniswap V3 Vault 1\n    // @param vault2_ Reference to Uniswap V3 Vault 2\n    constructor(\n        INonfungiblePositionManager positionManager_,\n        address cowswap_,\n        IERC20Vault erc20vault_,\n        IUniV3Vault vault1_,\n        IUniV3Vault vault2_,\n        ILStrategyHelper orderHelper_,\n        address admin_,\n        uint16 intervalWidthInTicks_\n    ) DefaultAccessControl(admin_) {\n        require(\n            (address(positionManager_) != address(0)) &&\n                (address(orderHelper_) != address(0)) &&\n                (address(vault1_) != address(0)) &&\n                (address(vault2_) != address(0)) &&\n                (address(erc20vault_) != address(0)) &&\n                (cowswap_ != address(0)),\n            ExceptionsLibrary.ADDRESS_ZERO\n        );\n\n        require(intervalWidthInTicks_ > 0, ExceptionsLibrary.VALUE_ZERO);\n\n        positionManager = positionManager_;\n        erc20Vault = erc20vault_;\n        lowerVault = vault1_;\n        upperVault = vault2_;\n        tokens = vault1_.vaultTokens();\n        poolFee = vault1_.pool().fee();\n        _pullExistentials = vault1_.pullExistentials();\n        cowswap = cowswap_;\n        orderHelper = orderHelper_;\n        intervalWidthInTicks = intervalWidthInTicks_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Target price based on mutable params, as a Q64.96 value\n    function getTargetPriceX96(\n        address token0,\n        address token1,\n        TradingParams memory tradingParams_\n    ) public view returns (uint256 priceX96) {\n        (uint256[] memory pricesX96, ) = tradingParams_.oracle.priceX96(\n            token0,\n            token1,\n            tradingParams_.oracleSafetyMask\n        );\n        require(pricesX96.length > 0, ExceptionsLibrary.INVALID_LENGTH);\n        for (uint256 i = 0; i < pricesX96.length; i++) {\n            priceX96 += pricesX96[i];\n        }\n        priceX96 /= pricesX96.length;\n    }\n\n    /// @notice Target liquidity ratio for UniV3 vaults\n    function targetUniV3LiquidityRatio(int24 targetTick_)\n        public\n        view\n        returns (uint128 liquidityRatioD, bool isNegative)\n    {\n        (int24 tickLower, int24 tickUpper, ) = _getVaultStats(lowerVault);\n        int24 midTick = (tickUpper + tickLower) / 2;\n        isNegative = midTick > targetTick_;\n        if (isNegative) {\n            liquidityRatioD = uint128(uint24(midTick - targetTick_));\n        } else {\n            liquidityRatioD = uint128(uint24(targetTick_ - midTick));\n        }\n        liquidityRatioD = uint128(liquidityRatioD * DENOMINATOR) / uint128(uint24(tickUpper - tickLower) / 2);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Make a rebalance between ERC20 and UniV3 Vaults\n    /// @param minLowerVaultTokens Min accepted tokenAmounts for lower vault\n    /// @param minUpperVaultTokens Min accepted tokenAmounts for upper vault\n    /// @param deadline Timestamp after which the transaction reverts\n    /// @return totalPulledAmounts total amounts pulled from erc20 vault or Uni vaults\n    /// @return isNegativeCapitalDelta `true` if rebalance if from UniVaults, false otherwise\n    /// @return percentageIncreaseD the percentage of capital change of UniV3 vaults\n    function rebalanceERC20UniV3Vaults(\n        uint256[] memory minLowerVaultTokens,\n        uint256[] memory minUpperVaultTokens,\n        uint256 deadline\n    )\n        public\n        returns (\n            uint256[] memory totalPulledAmounts,\n            bool isNegativeCapitalDelta,\n            uint256 percentageIncreaseD\n        )\n    {\n        _requireAtLeastOperator();\n        require(\n            block.timestamp >= lastRebalanceERC20UniV3VaultsTimestamp + otherParams.secondsBetweenRebalances,\n            ExceptionsLibrary.TIMESTAMP\n        );\n        lastRebalanceERC20UniV3VaultsTimestamp = block.timestamp;\n        uint256[] memory lowerTokenAmounts;\n        uint256[] memory upperTokenAmounts;\n        uint128 lowerVaultLiquidity;\n        uint128 upperVaultLiquidity;\n\n        totalPulledAmounts = new uint256[](2);\n\n        {\n            uint256 priceX96 = getTargetPriceX96(tokens[0], tokens[1], tradingParams);\n            uint256 sumUniV3Capital = _getCapital(priceX96, lowerVault) + _getCapital(priceX96, upperVault);\n\n            if (sumUniV3Capital == 0) {\n                bytes memory options = _makeUniswapVaultOptions(new uint256[](2), deadline);\n\n                erc20Vault.pull(address(lowerVault), tokens, _pullExistentials, options);\n\n                erc20Vault.pull(address(upperVault), tokens, _pullExistentials, options);\n\n                sumUniV3Capital = _getCapital(priceX96, lowerVault) + _getCapital(priceX96, upperVault);\n            }\n\n            uint256 erc20VaultCapital = _getCapital(priceX96, erc20Vault);\n            uint256 capitalDelta;\n\n            (capitalDelta, isNegativeCapitalDelta) = _liquidityDelta(\n                erc20VaultCapital,\n                sumUniV3Capital,\n                ratioParams.erc20UniV3CapitalRatioD,\n                ratioParams.minErc20UniV3CapitalRatioDeviationD\n            );\n            if (capitalDelta == 0) {\n                return (new uint256[](2), false, 0);\n            }\n\n            percentageIncreaseD = FullMath.mulDiv(DENOMINATOR, capitalDelta, sumUniV3Capital);\n            (, , lowerVaultLiquidity) = _getVaultStats(lowerVault);\n            (, , upperVaultLiquidity) = _getVaultStats(upperVault);\n            lowerTokenAmounts = lowerVault.liquidityToTokenAmounts(\n                uint128(FullMath.mulDiv(percentageIncreaseD, lowerVaultLiquidity, DENOMINATOR))\n            );\n            upperTokenAmounts = upperVault.liquidityToTokenAmounts(\n                uint128(FullMath.mulDiv(percentageIncreaseD, upperVaultLiquidity, DENOMINATOR))\n            );\n        }\n\n        if (!isNegativeCapitalDelta) {\n            if (lowerVaultLiquidity > 0) {\n                totalPulledAmounts = erc20Vault.pull(\n                    address(lowerVault),\n                    tokens,\n                    lowerTokenAmounts,\n                    _makeUniswapVaultOptions(minLowerVaultTokens, deadline)\n                );\n            }\n            if (upperVaultLiquidity > 0) {\n                uint256[] memory pulledAmounts = erc20Vault.pull(\n                    address(upperVault),\n                    tokens,\n                    upperTokenAmounts,\n                    _makeUniswapVaultOptions(minUpperVaultTokens, deadline)\n                );\n                for (uint256 i = 0; i < 2; i++) {\n                    totalPulledAmounts[i] += pulledAmounts[i];\n                }\n            }\n        } else {\n            totalPulledAmounts = lowerVault.pull(\n                address(erc20Vault),\n                tokens,\n                lowerTokenAmounts,\n                _makeUniswapVaultOptions(minLowerVaultTokens, deadline)\n            );\n            uint256[] memory pulledAmounts = upperVault.pull(\n                address(erc20Vault),\n                tokens,\n                upperTokenAmounts,\n                _makeUniswapVaultOptions(minUpperVaultTokens, deadline)\n            );\n            for (uint256 i = 0; i < 2; i++) {\n                totalPulledAmounts[i] += pulledAmounts[i];\n            }\n        }\n        emit RebalancedErc20UniV3(tx.origin, msg.sender, !isNegativeCapitalDelta, totalPulledAmounts);\n    }\n\n    /// @notice Make a rebalance of UniV3 vaults\n    /// @param minWithdrawTokens Min accepted tokenAmounts for withdrawal\n    /// @param minDepositTokens Min accepted tokenAmounts for deposit\n    /// @param deadline Timestamp after which the transaction reverts\n    /// @return pulledAmounts Amounts pulled from one vault\n    /// @return pushedAmounts Amounts pushed to the other vault\n    /// @return depositLiquidity Amount of liquidity deposited to vault\n    /// @return withdrawLiquidity Amount of liquidity withdrawn from vault\n    /// @return lowerToUpper true if liquidity is moved from lower vault to upper\n    function rebalanceUniV3Vaults(\n        uint256[] memory minWithdrawTokens,\n        uint256[] memory minDepositTokens,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256[] memory pulledAmounts,\n            uint256[] memory pushedAmounts,\n            uint128 depositLiquidity,\n            uint128 withdrawLiquidity,\n            bool lowerToUpper\n        )\n    {\n        _requireAtLeastOperator();\n        require(\n            block.timestamp >= lastRebalanceUniV3VaultsTimestamp + otherParams.secondsBetweenRebalances,\n            ExceptionsLibrary.TIMESTAMP\n        );\n        lastRebalanceUniV3VaultsTimestamp = block.timestamp;\n        LiquidityParams memory liquidityParams;\n\n        {\n            uint256 targetPriceX96 = getTargetPriceX96(tokens[0], tokens[1], tradingParams);\n            int24 targetTick = _tickFromPriceX96(targetPriceX96);\n            (\n                liquidityParams.targetUniV3LiquidityRatioD,\n                liquidityParams.isNegativeLiquidityRatio\n            ) = targetUniV3LiquidityRatio(targetTick);\n            // we crossed the interval right to left\n            if (liquidityParams.isNegativeLiquidityRatio) {\n                (, , uint128 liquidity) = _getVaultStats(upperVault);\n                if (liquidity > 0) {\n                    // pull all liquidity to other vault\n                    (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity) = _rebalanceUniV3Liquidity(\n                        upperVault,\n                        lowerVault,\n                        type(uint128).max,\n                        minWithdrawTokens,\n                        minDepositTokens,\n                        deadline\n                    );\n                    return (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity, lowerToUpper);\n                } else {\n                    _swapVaults(false, deadline);\n                    return (new uint256[](2), new uint256[](2), 0, 0, false);\n                }\n            }\n            // we crossed the interval left to right\n            if (liquidityParams.targetUniV3LiquidityRatioD > DENOMINATOR) {\n                lowerToUpper = true;\n                (, , uint128 liquidity) = _getVaultStats(lowerVault);\n                if (liquidity > 0) {\n                    (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity) = _rebalanceUniV3Liquidity(\n                        lowerVault,\n                        upperVault,\n                        type(uint128).max,\n                        minWithdrawTokens,\n                        minDepositTokens,\n                        deadline\n                    );\n                    return (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity, lowerToUpper);\n                } else {\n                    _swapVaults(true, deadline);\n                    return (new uint256[](2), new uint256[](2), 0, 0, true);\n                }\n            }\n        }\n        uint256 liquidityDelta;\n        IUniV3Vault fromVault;\n        IUniV3Vault toVault;\n\n        {\n            bool isNegativeLiquidityDelta;\n            (, , uint128 lowerLiquidity) = _getVaultStats(lowerVault);\n            (, , uint128 upperLiquidity) = _getVaultStats(upperVault);\n            (liquidityDelta, isNegativeLiquidityDelta) = _liquidityDelta(\n                lowerLiquidity,\n                upperLiquidity,\n                DENOMINATOR - liquidityParams.targetUniV3LiquidityRatioD,\n                ratioParams.minUniV3LiquidityRatioDeviationD\n            );\n            if (isNegativeLiquidityDelta) {\n                fromVault = upperVault;\n                toVault = lowerVault;\n            } else {\n                lowerToUpper = true;\n                fromVault = lowerVault;\n                toVault = upperVault;\n            }\n        }\n        (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity) = _rebalanceUniV3Liquidity(\n            fromVault,\n            toVault,\n            uint128(liquidityDelta),\n            minWithdrawTokens,\n            minDepositTokens,\n            deadline\n        );\n    }\n\n    /// @notice Post preorder for ERC20 vault rebalance.\n    /// @param minAmountOut minimum amount out of tokens to swap\n    /// @return preOrder_ Posted preorder\n    function postPreOrder(uint256 minAmountOut) external returns (PreOrder memory preOrder_) {\n        _requireAtLeastOperator();\n        require(block.timestamp > orderDeadline, ExceptionsLibrary.TIMESTAMP);\n        (uint256[] memory tvl, ) = erc20Vault.tvl();\n        uint256 priceX96 = getTargetPriceX96(tokens[0], tokens[1], tradingParams);\n        (uint256 tokenDelta, bool isNegative) = _liquidityDelta(\n            FullMath.mulDiv(tvl[0], priceX96, CommonLibrary.Q96),\n            tvl[1],\n            ratioParams.erc20TokenRatioD,\n            ratioParams.minErc20TokenRatioDeviationD\n        );\n        TradingParams memory tradingParams_ = tradingParams;\n\n        uint256 isNegativeInt = isNegative ? 1 : 0;\n        uint256[2] memory tokenValuesToTransfer = [\n            FullMath.mulDiv(tokenDelta, CommonLibrary.Q96, priceX96),\n            tokenDelta\n        ];\n        uint256 amountOut = FullMath.mulDiv(\n            tokenValuesToTransfer[1 ^ isNegativeInt],\n            DENOMINATOR - tradingParams_.maxSlippageD,\n            DENOMINATOR\n        );\n        amountOut = amountOut > minAmountOut ? amountOut : minAmountOut;\n        preOrder_ = PreOrder({\n            tokenIn: tokens[isNegativeInt],\n            tokenOut: tokens[1 ^ isNegativeInt],\n            deadline: uint64(block.timestamp + tradingParams_.orderDeadline),\n            amountIn: tokenValuesToTransfer[isNegativeInt],\n            minAmountOut: amountOut\n        });\n\n        preOrder = preOrder_;\n        emit PreOrderPosted(tx.origin, msg.sender, preOrder_);\n    }\n\n    /// @notice Sign offchain cowswap order onchain\n    /// @param order Cowswap order data\n    /// @param uuid Cowswap order id\n    /// @param signed To sign order set to `true`\n    function signOrder(\n        GPv2Order.Data memory order,\n        bytes calldata uuid,\n        bool signed\n    ) external {\n        _requireAtLeastOperator();\n        if (signed) {\n            address sellToken = address(order.sellToken);\n            orderHelper.checkOrder(\n                order,\n                uuid,\n                preOrder.tokenIn,\n                preOrder.tokenOut,\n                preOrder.amountIn,\n                preOrder.minAmountOut,\n                preOrder.deadline,\n                address(erc20Vault),\n                (sellToken == tokens[0] ? tradingParams.maxFee0 : tradingParams.maxFee1)\n            );\n            erc20Vault.externalCall(\n                address(order.sellToken),\n                APPROVE_SELECTOR,\n                abi.encode(cowswap, order.sellAmount + order.feeAmount)\n            );\n            erc20Vault.externalCall(cowswap, SET_PRESIGNATURE_SELECTOR, abi.encode(uuid, signed));\n            orderDeadline = order.validTo;\n            delete preOrder;\n            emit OrderSigned(tx.origin, msg.sender, uuid, order, preOrder, signed);\n        } else {\n            erc20Vault.externalCall(cowswap, SET_PRESIGNATURE_SELECTOR, abi.encode(uuid, false));\n        }\n    }\n\n    /// @notice Reset cowswap allowance to 0\n    /// @param tokenNumber The number of token in LStrategy\n    function resetCowswapAllowance(uint8 tokenNumber) external {\n        _requireAtLeastOperator();\n        bytes memory approveData = abi.encode(cowswap, uint256(0));\n        erc20Vault.externalCall(tokens[tokenNumber], APPROVE_SELECTOR, approveData);\n        emit CowswapAllowanceReset(tx.origin, msg.sender);\n    }\n\n    /// @notice Collect Uniswap pool fees to erc20 vault\n    /// @return totalCollectedEarnings Total collected fees\n    function collectUniFees() external returns (uint256[] memory totalCollectedEarnings) {\n        _requireAtLeastOperator();\n        totalCollectedEarnings = new uint256[](2);\n        uint256[] memory collectedEarnings = new uint256[](2);\n        totalCollectedEarnings = lowerVault.collectEarnings();\n        collectedEarnings = upperVault.collectEarnings();\n        for (uint256 i = 0; i < 2; i++) {\n            totalCollectedEarnings[i] += collectedEarnings[i];\n        }\n        emit FeesCollected(tx.origin, msg.sender, totalCollectedEarnings);\n    }\n\n    /// @notice Manually pull tokens from fromVault to toVault\n    /// @param fromVault Pull tokens from this vault\n    /// @param toVault Pull tokens to this vault\n    /// @param tokenAmounts Token amounts to pull\n    /// @param minTokensAmounts Minimal token amounts to pull\n    /// @param deadline Timestamp after which the transaction is invalid\n    function manualPull(\n        IIntegrationVault fromVault,\n        IIntegrationVault toVault,\n        uint256[] memory tokenAmounts,\n        uint256[] memory minTokensAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory actualTokenAmounts) {\n        _requireAdmin();\n        actualTokenAmounts = fromVault.pull(\n            address(toVault),\n            tokens,\n            tokenAmounts,\n            _makeUniswapVaultOptions(minTokensAmounts, deadline)\n        );\n        emit ManualPull(tx.origin, msg.sender, tokenAmounts, actualTokenAmounts);\n    }\n\n    /// @notice Sets new trading params\n    /// @param newTradingParams New trading parameters to set\n    function updateTradingParams(TradingParams calldata newTradingParams) external {\n        _requireAdmin();\n        require(\n            (newTradingParams.maxSlippageD <= DENOMINATOR) &&\n                (newTradingParams.orderDeadline <= 86400 * 30) &&\n                (newTradingParams.oracleSafetyMask > 3),\n            ExceptionsLibrary.INVARIANT\n        );\n        require(address(newTradingParams.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        tradingParams = newTradingParams;\n        emit TradingParamsUpdated(tx.origin, msg.sender, tradingParams);\n    }\n\n    /// @notice Sets new ratio params\n    /// @param newRatioParams New ratio parameters to set\n    function updateRatioParams(RatioParams calldata newRatioParams) external {\n        _requireAdmin();\n        require(\n            (newRatioParams.erc20UniV3CapitalRatioD <= DENOMINATOR) &&\n                (newRatioParams.erc20TokenRatioD <= DENOMINATOR) &&\n                (newRatioParams.minErc20UniV3CapitalRatioDeviationD <= DENOMINATOR) &&\n                (newRatioParams.minErc20TokenRatioDeviationD <= DENOMINATOR) &&\n                (newRatioParams.minUniV3LiquidityRatioDeviationD <= DENOMINATOR),\n            ExceptionsLibrary.INVARIANT\n        );\n        ratioParams = newRatioParams;\n        emit RatioParamsUpdated(tx.origin, msg.sender, ratioParams);\n    }\n\n    /// @notice Sets new other params\n    /// @param newOtherParams New other parameters to set\n    function updateOtherParams(OtherParams calldata newOtherParams) external {\n        _requireAdmin();\n        require(\n            (newOtherParams.minToken0ForOpening > 0) &&\n                (newOtherParams.minToken1ForOpening > 0) &&\n                (newOtherParams.minToken0ForOpening <= 1000000000) &&\n                (newOtherParams.minToken1ForOpening <= 1000000000) &&\n                (newOtherParams.secondsBetweenRebalances <= 86400 * 30),\n            ExceptionsLibrary.INVARIANT\n        );\n        otherParams = newOtherParams;\n        emit OtherParamsUpdated(tx.origin, msg.sender, otherParams);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    /// @notice Calculate a pure (not Uniswap) liquidity\n    /// @param priceX96 Current price y / x\n    /// @param vault Vault for liquidity calculation\n    /// @return Capital = x * p + y\n    function _getCapital(uint256 priceX96, IVault vault) internal view returns (uint256) {\n        (uint256[] memory minTvl, uint256[] memory maxTvl) = vault.tvl();\n        return FullMath.mulDiv((minTvl[0] + maxTvl[0]) / 2, priceX96, CommonLibrary.Q96) + (minTvl[1] + maxTvl[1]) / 2;\n    }\n\n    /// @notice Target tick based on mutable params\n    function _tickFromPriceX96(uint256 priceX96) internal view returns (int24) {\n        return orderHelper.tickFromPriceX96(priceX96);\n    }\n\n    /// @notice The vault to get stats from\n    /// @return tickLower Lower tick for the uniV3 poistion inside the vault\n    /// @return tickUpper Upper tick for the uniV3 poistion inside the vault\n    /// @return liquidity Vault liquidity\n    function _getVaultStats(IUniV3Vault vault)\n        internal\n        view\n        returns (\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity\n        )\n    {\n        (, , , , , tickLower, tickUpper, liquidity, , , , ) = positionManager.positions(vault.uniV3Nft());\n    }\n\n    /// @notice Liquidity required to be sold to reach targetLiquidityRatioD\n    /// @param lowerLiquidity Lower vault liquidity\n    /// @param upperLiquidity Upper vault liquidity\n    /// @param targetLiquidityRatioD Target liquidity ratio (multiplied by DENOMINATOR)\n    /// @param minDeviation Minimum allowed deviation between current and target liquidities (if the real is less, zero liquidity delta returned)\n    /// @return delta Liquidity required to be sold from LowerVault (if isNegative is true) of to be bought to LowerVault (if isNegative is false) to reach targetLiquidityRatioD\n    /// @return isNegative If `true` then delta needs to be bought to reach targetLiquidityRatioD, o/w needs to be sold\n    function _liquidityDelta(\n        uint256 lowerLiquidity,\n        uint256 upperLiquidity,\n        uint256 targetLiquidityRatioD,\n        uint256 minDeviation\n    ) internal pure returns (uint256 delta, bool isNegative) {\n        uint256 targetLowerLiquidity = FullMath.mulDiv(\n            targetLiquidityRatioD,\n            lowerLiquidity + upperLiquidity,\n            DENOMINATOR\n        );\n        if (minDeviation > 0) {\n            uint256 liquidityRatioD = FullMath.mulDiv(lowerLiquidity, DENOMINATOR, lowerLiquidity + upperLiquidity);\n            uint256 deviation = targetLiquidityRatioD > liquidityRatioD\n                ? targetLiquidityRatioD - liquidityRatioD\n                : liquidityRatioD - targetLiquidityRatioD;\n            if (deviation < minDeviation) {\n                return (0, false);\n            }\n        }\n        if (targetLowerLiquidity > lowerLiquidity) {\n            isNegative = true;\n            delta = targetLowerLiquidity - lowerLiquidity;\n        } else {\n            isNegative = false;\n            delta = lowerLiquidity - targetLowerLiquidity;\n        }\n    }\n\n    /// @notice Covert token amounts and deadline to byte options\n    /// @dev Empty tokenAmounts are equivalent to zero tokenAmounts\n    function _makeUniswapVaultOptions(uint256[] memory tokenAmounts, uint256 deadline)\n        internal\n        pure\n        returns (bytes memory options)\n    {\n        options = new bytes(0x60);\n        assembly {\n            mstore(add(options, 0x60), deadline)\n        }\n        if (tokenAmounts.length == 2) {\n            uint256 tokenAmount0 = tokenAmounts[0];\n            uint256 tokenAmount1 = tokenAmounts[1];\n            assembly {\n                mstore(add(options, 0x20), tokenAmount0)\n                mstore(add(options, 0x40), tokenAmount1)\n            }\n        }\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    /// @notice Pull liquidity from `fromVault` and put into `toVault`\n    /// @param fromVault The vault to pull liquidity from\n    /// @param toVault The vault to pull liquidity to\n    /// @param desiredLiquidity The amount of liquidity desired for rebalance. This could be cut to available erc20 vault balance and available uniV3 vault liquidity.\n    /// @param minWithdrawTokens Min accepted tokenAmounts for withdrawal\n    /// @param minDepositTokens Min accepted tokenAmounts for deposit\n    /// @param deadline Timestamp after which the transaction reverts\n    /// @return pulledAmounts amounts pulled from fromVault\n    /// @return pushedAmounts amounts pushed to toVault\n    function _rebalanceUniV3Liquidity(\n        IUniV3Vault fromVault,\n        IUniV3Vault toVault,\n        uint128 desiredLiquidity,\n        uint256[] memory minWithdrawTokens,\n        uint256[] memory minDepositTokens,\n        uint256 deadline\n    )\n        internal\n        returns (\n            uint256[] memory pulledAmounts,\n            uint256[] memory pushedAmounts,\n            uint128 liquidity,\n            uint128 withdrawLiquidity\n        )\n    {\n        if (desiredLiquidity == 0) {\n            return (new uint256[](2), new uint256[](2), 0, 0);\n        }\n        liquidity = desiredLiquidity;\n\n        // Cut for available liquidity in the vault\n        {\n            (, , uint128 fromVaultLiquidity) = _getVaultStats(fromVault);\n            liquidity = fromVaultLiquidity > liquidity ? liquidity : fromVaultLiquidity;\n        }\n\n        //--- Cut rebalance to available token balances on ERC20 Vault\n        // The rough idea is to translate one unit of liquituty into tokens for each interval shouldDepositTokenAmountsD, shouldWithdrawTokenAmountsD\n        // Then the actual tokens in the vault are shouldDepositTokenAmountsD * l, shouldWithdrawTokenAmountsD * l\n        // So the equation could be built: erc20 balances + l * shouldWithdrawTokenAmountsD >= l * shouldDepositTokenAmountsD and l tweaked so this inequality holds\n        {\n            (uint256[] memory availableBalances, ) = erc20Vault.tvl();\n            uint256[] memory shouldDepositTokenAmountsD = toVault.liquidityToTokenAmounts(uint128(DENOMINATOR));\n            uint256[] memory shouldWithdrawTokenAmountsD = fromVault.liquidityToTokenAmounts(uint128(DENOMINATOR));\n            for (uint256 i = 0; i < 2; i++) {\n                uint256 availableBalance = availableBalances[i] +\n                    FullMath.mulDiv(shouldWithdrawTokenAmountsD[i], liquidity, DENOMINATOR);\n                uint256 requiredBalance = FullMath.mulDiv(shouldDepositTokenAmountsD[i], liquidity, DENOMINATOR);\n                if (availableBalance < requiredBalance) {\n                    // since balances >= 0, this case means that shouldWithdrawTokenAmountsD < shouldDepositTokenAmountsD\n                    // this also means that liquidity on the line below will decrease compared to the liqiduity above\n                    uint128 potentialLiquidity = uint128(\n                        FullMath.mulDiv(\n                            availableBalances[i],\n                            DENOMINATOR,\n                            shouldDepositTokenAmountsD[i] - shouldWithdrawTokenAmountsD[i]\n                        )\n                    );\n                    liquidity = potentialLiquidity < liquidity ? potentialLiquidity : liquidity;\n                }\n            }\n        }\n        //--- End cut\n        {\n            withdrawLiquidity = desiredLiquidity == type(uint128).max ? desiredLiquidity : liquidity;\n            uint256[] memory depositTokenAmounts = toVault.liquidityToTokenAmounts(liquidity);\n            uint256[] memory withdrawTokenAmounts = fromVault.liquidityToTokenAmounts(withdrawLiquidity);\n            pulledAmounts = fromVault.pull(\n                address(erc20Vault),\n                tokens,\n                withdrawTokenAmounts,\n                _makeUniswapVaultOptions(minWithdrawTokens, deadline)\n            );\n            // The pull is on best effort so we don't worry on overflow\n            pushedAmounts = erc20Vault.pull(\n                address(toVault),\n                tokens,\n                depositTokenAmounts,\n                _makeUniswapVaultOptions(minDepositTokens, deadline)\n            );\n        }\n        emit RebalancedUniV3(\n            tx.origin,\n            msg.sender,\n            address(fromVault),\n            address(toVault),\n            pulledAmounts,\n            pushedAmounts,\n            desiredLiquidity,\n            liquidity\n        );\n    }\n\n    /// @notice Closes position with zero liquidity and creates a new one.\n    /// @dev This happens when the price croses \"zero\" point and a new interval must be created while old one is close\n    /// @param positiveTickGrowth `true` if price tick increased\n    /// @param deadline Deadline for Uniswap V3 operations\n    function _swapVaults(bool positiveTickGrowth, uint256 deadline) internal {\n        IUniV3Vault fromVault;\n        IUniV3Vault toVault;\n        if (!positiveTickGrowth) {\n            (fromVault, toVault) = (upperVault, lowerVault);\n        } else {\n            (fromVault, toVault) = (lowerVault, upperVault);\n        }\n        uint256 fromNft = fromVault.uniV3Nft();\n        uint256 toNft = toVault.uniV3Nft();\n\n        {\n            fromVault.collectEarnings();\n            (, , , , , , , uint128 fromLiquidity, , , , ) = positionManager.positions(fromNft);\n            require(fromLiquidity == 0, ExceptionsLibrary.INVARIANT);\n        }\n\n        (, , , , , int24 toTickLower, int24 toTickUpper, , , , , ) = positionManager.positions(toNft);\n        int24 newTickLower;\n        int24 newTickUpper;\n        if (positiveTickGrowth) {\n            newTickLower = (toTickLower + toTickUpper) / 2;\n            newTickUpper = newTickLower + int24(uint24(intervalWidthInTicks));\n        } else {\n            newTickUpper = (toTickLower + toTickUpper) / 2;\n            newTickLower = newTickUpper - int24(uint24(intervalWidthInTicks));\n        }\n\n        uint256 newNft = _mintNewNft(newTickLower, newTickUpper, deadline);\n        positionManager.safeTransferFrom(address(this), address(fromVault), newNft);\n        positionManager.burn(fromNft);\n\n        (lowerVault, upperVault) = (upperVault, lowerVault);\n\n        emit SwapVault(fromNft, newNft, newTickLower, newTickUpper);\n    }\n\n    /// @notice Mints new Nft in Uniswap V3 positionManager\n    /// @param lowerTick Lower tick of the Uni interval\n    /// @param upperTick Upper tick of the Uni interval\n    /// @param deadline Timestamp after which the transaction will be reverted\n    function _mintNewNft(\n        int24 lowerTick,\n        int24 upperTick,\n        uint256 deadline\n    ) internal returns (uint256 newNft) {\n        uint256 minToken0ForOpening = otherParams.minToken0ForOpening;\n        uint256 minToken1ForOpening = otherParams.minToken1ForOpening;\n        IERC20(tokens[0]).safeApprove(address(positionManager), minToken0ForOpening);\n        IERC20(tokens[1]).safeApprove(address(positionManager), minToken1ForOpening);\n        (newNft, , , ) = positionManager.mint(\n            INonfungiblePositionManager.MintParams({\n                token0: tokens[0],\n                token1: tokens[1],\n                fee: poolFee,\n                tickLower: lowerTick,\n                tickUpper: upperTick,\n                amount0Desired: minToken0ForOpening,\n                amount1Desired: minToken1ForOpening,\n                amount0Min: 0,\n                amount1Min: 0,\n                recipient: address(this),\n                deadline: deadline\n            })\n        );\n        IERC20(tokens[0]).safeApprove(address(positionManager), 0);\n        IERC20(tokens[1]).safeApprove(address(positionManager), 0);\n    }\n\n    /// @notice Emitted when a new cowswap preOrder is posted.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param preOrder Preorder that was posted\n    event PreOrderPosted(address indexed origin, address indexed sender, PreOrder preOrder);\n\n    /// @notice Emitted when cowswap preOrder was signed onchain.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param order Cowswap order\n    /// @param preOrder PreOrder that the order fulfills\n    /// @param signed Singned or unsigned\n    event OrderSigned(\n        address indexed origin,\n        address indexed sender,\n        bytes uuid,\n        GPv2Order.Data order,\n        PreOrder preOrder,\n        bool signed\n    );\n\n    /// @notice Emitted when manual pull from vault is executed.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param tokenAmounts The amounts of tokens that were\n    event ManualPull(\n        address indexed origin,\n        address indexed sender,\n        uint256[] tokenAmounts,\n        uint256[] actualTokenAmounts\n    );\n\n    /// @notice Emitted when vault is swapped.\n    /// @param oldNft UniV3 nft that was burned\n    /// @param newNft UniV3 nft that was created\n    /// @param newTickLower Lower tick for created UniV3 nft\n    /// @param newTickUpper Upper tick for created UniV3 nft\n    event SwapVault(uint256 oldNft, uint256 newNft, int24 newTickLower, int24 newTickUpper);\n\n    /// @notice Emitted when rebalance from UniV3 to ERC20 or vice versa happens\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param fromErc20 `true` if the rebalance is made\n    /// @param pulledAmounts amounts pulled from fromVault\n    event RebalancedErc20UniV3(address indexed origin, address indexed sender, bool fromErc20, uint256[] pulledAmounts);\n\n    /// @param fromVault The vault to pull liquidity from\n    /// @param toVault The vault to pull liquidity to\n    /// @param pulledAmounts amounts pulled from fromVault\n    /// @param pushedAmounts amounts pushed to toVault\n    /// @param desiredLiquidity The amount of liquidity desired for rebalance. This could be cut to available erc20 vault balance and available uniV3 vault liquidity.\n    /// @param liquidity The actual amount of liquidity rebalanced.\n    event RebalancedUniV3(\n        address indexed origin,\n        address indexed sender,\n        address fromVault,\n        address toVault,\n        uint256[] pulledAmounts,\n        uint256[] pushedAmounts,\n        uint128 desiredLiquidity,\n        uint128 liquidity\n    );\n\n    /// @notice Emitted when trading params were updated\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param tradingParams New trading parameters\n    event TradingParamsUpdated(address indexed origin, address indexed sender, TradingParams tradingParams);\n\n    /// @notice Emitted when ratio params were updated\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param ratioParams New ratio parameters\n    event RatioParamsUpdated(address indexed origin, address indexed sender, RatioParams ratioParams);\n\n    /// @notice Emitted when other params were updated\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param otherParams New trading parameters\n    event OtherParamsUpdated(address indexed origin, address indexed sender, OtherParams otherParams);\n\n    event CowswapAllowanceReset(address indexed origin, address indexed sender);\n    event FeesCollected(address indexed origin, address indexed sender, uint256[] collectedEarnings);\n}\n"
    },
    "contracts/interfaces/utils/ILStrategyHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../../libraries/external/GPv2Order.sol\";\n\ninterface ILStrategyHelper {\n    function checkOrder(\n        GPv2Order.Data memory order,\n        bytes calldata uuid,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        uint256 deadline,\n        address erc20Vault,\n        uint256 fee\n    ) external;\n\n    function tickFromPriceX96(uint256 priceX96) external pure returns (int24);\n}\n"
    },
    "contracts/libraries/external/GPv2Order.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Gnosis Protocol v2 Order Library\n/// @author Gnosis Developers\nlibrary GPv2Order {\n    /// @dev The complete data for a Gnosis Protocol order. This struct contains\n    /// all order parameters that are signed for submitting to GP.\n    struct Data {\n        IERC20 sellToken;\n        IERC20 buyToken;\n        address receiver;\n        uint256 sellAmount;\n        uint256 buyAmount;\n        uint32 validTo;\n        bytes32 appData;\n        uint256 feeAmount;\n        bytes32 kind;\n        bool partiallyFillable;\n        bytes32 sellTokenBalance;\n        bytes32 buyTokenBalance;\n    }\n\n    /// @dev The order EIP-712 type hash for the [`GPv2Order.Data`] struct.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\n    ///     \"Order(\" +\n    ///         \"address sellToken,\" +\n    ///         \"address buyToken,\" +\n    ///         \"address receiver,\" +\n    ///         \"uint256 sellAmount,\" +\n    ///         \"uint256 buyAmount,\" +\n    ///         \"uint32 validTo,\" +\n    ///         \"bytes32 appData,\" +\n    ///         \"uint256 feeAmount,\" +\n    ///         \"string kind,\" +\n    ///         \"bool partiallyFillable\" +\n    ///         \"string sellTokenBalance\" +\n    ///         \"string buyTokenBalance\" +\n    ///     \")\"\n    /// )\n    /// ```\n    bytes32 internal constant TYPE_HASH = hex\"d5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489\";\n\n    /// @dev The marker value for a sell order for computing the order struct\n    /// hash. This allows the EIP-712 compatible wallets to display a\n    /// descriptive string for the order kind (instead of 0 or 1).\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"sell\")\n    /// ```\n    bytes32 internal constant KIND_SELL = hex\"f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee346775\";\n\n    /// @dev The OrderKind marker value for a buy order for computing the order\n    /// struct hash.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"buy\")\n    /// ```\n    bytes32 internal constant KIND_BUY = hex\"6ed88e868af0a1983e3886d5f3e95a2fafbd6c3450bc229e27342283dc429ccc\";\n\n    /// @dev The TokenBalance marker value for using direct ERC20 balances for\n    /// computing the order struct hash.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"erc20\")\n    /// ```\n    bytes32 internal constant BALANCE_ERC20 = hex\"5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc9\";\n\n    /// @dev The TokenBalance marker value for using Balancer Vault external\n    /// balances (in order to re-use Vault ERC20 approvals) for computing the\n    /// order struct hash.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"external\")\n    /// ```\n    bytes32 internal constant BALANCE_EXTERNAL = hex\"abee3b73373acd583a130924aad6dc38cfdc44ba0555ba94ce2ff63980ea0632\";\n\n    /// @dev The TokenBalance marker value for using Balancer Vault internal\n    /// balances for computing the order struct hash.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"internal\")\n    /// ```\n    bytes32 internal constant BALANCE_INTERNAL = hex\"4ac99ace14ee0a5ef932dc609df0943ab7ac16b7583634612f8dc35a4289a6ce\";\n\n    /// @dev Marker address used to indicate that the receiver of the trade\n    /// proceeds should the owner of the order.\n    ///\n    /// This is chosen to be `address(0)` for gas efficiency as it is expected\n    /// to be the most common case.\n    address internal constant RECEIVER_SAME_AS_OWNER = address(0);\n\n    /// @dev The byte length of an order unique identifier.\n    uint256 internal constant UID_LENGTH = 56;\n\n    /// @dev Returns the actual receiver for an order. This function checks\n    /// whether or not the [`receiver`] field uses the marker value to indicate\n    /// it is the same as the order owner.\n    ///\n    /// @return receiver The actual receiver of trade proceeds.\n    function actualReceiver(Data memory order, address owner) internal pure returns (address receiver) {\n        if (order.receiver == RECEIVER_SAME_AS_OWNER) {\n            receiver = owner;\n        } else {\n            receiver = order.receiver;\n        }\n    }\n\n    /// @dev Return the EIP-712 signing hash for the specified order.\n    ///\n    /// @param order The order to compute the EIP-712 signing hash for.\n    /// @param domainSeparator The EIP-712 domain separator to use.\n    /// @return orderDigest The 32 byte EIP-712 struct hash.\n    function hash(Data memory order, bytes32 domainSeparator) internal pure returns (bytes32 orderDigest) {\n        bytes32 structHash;\n\n        // NOTE: Compute the EIP-712 order struct hash in place. As suggested\n        // in the EIP proposal, noting that the order struct has 10 fields, and\n        // including the type hash `(12 + 1) * 32 = 416` bytes to hash.\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-encodedata>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let dataStart := sub(order, 32)\n            let temp := mload(dataStart)\n            mstore(dataStart, TYPE_HASH)\n            structHash := keccak256(dataStart, 416)\n            mstore(dataStart, temp)\n        }\n\n        // NOTE: Now that we have the struct hash, compute the EIP-712 signing\n        // hash using scratch memory past the free memory pointer. The signing\n        // hash is computed from `\"\\x19\\x01\" || domainSeparator || structHash`.\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory>\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            mstore(freeMemoryPointer, \"\\x19\\x01\")\n            mstore(add(freeMemoryPointer, 2), domainSeparator)\n            mstore(add(freeMemoryPointer, 34), structHash)\n            orderDigest := keccak256(freeMemoryPointer, 66)\n        }\n    }\n\n    /// @dev Packs order UID parameters into the specified memory location. The\n    /// result is equivalent to `abi.encodePacked(...)` with the difference that\n    /// it allows re-using the memory for packing the order UID.\n    ///\n    /// This function reverts if the order UID buffer is not the correct size.\n    ///\n    /// @param orderUid The buffer pack the order UID parameters into.\n    /// @param orderDigest The EIP-712 struct digest derived from the order\n    /// parameters.\n    /// @param owner The address of the user who owns this order.\n    /// @param validTo The epoch time at which the order will stop being valid.\n    function packOrderUidParams(\n        bytes memory orderUid,\n        bytes32 orderDigest,\n        address owner,\n        uint32 validTo\n    ) internal pure {\n        require(orderUid.length == UID_LENGTH, \"GPv2: uid buffer overflow\");\n\n        // NOTE: Write the order UID to the allocated memory buffer. The order\n        // parameters are written to memory in **reverse order** as memory\n        // operations write 32-bytes at a time and we want to use a packed\n        // encoding. This means, for example, that after writing the value of\n        // `owner` to bytes `20:52`, writing the `orderDigest` to bytes `0:32`\n        // will **overwrite** bytes `20:32`. This is desirable as addresses are\n        // only 20 bytes and `20:32` should be `0`s:\n        //\n        //        |           1111111111222222222233333333334444444444555555\n        //   byte | 01234567890123456789012345678901234567890123456789012345\n        // -------+---------------------------------------------------------\n        //  field | [.........orderDigest..........][......owner.......][vT]\n        // -------+---------------------------------------------------------\n        // mstore |                         [000000000000000000000000000.vT]\n        //        |                     [00000000000.......owner.......]\n        //        | [.........orderDigest..........]\n        //\n        // Additionally, since Solidity `bytes memory` are length prefixed,\n        // 32 needs to be added to all the offsets.\n        //\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(add(orderUid, 56), validTo)\n            mstore(add(orderUid, 52), owner)\n            mstore(add(orderUid, 32), orderDigest)\n        }\n    }\n\n    /// @dev Extracts specific order information from the standardized unique\n    /// order id of the protocol.\n    ///\n    /// @param orderUid The unique identifier used to represent an order in\n    /// the protocol. This uid is the packed concatenation of the order digest,\n    /// the validTo order parameter and the address of the user who created the\n    /// order. It is used by the user to interface with the contract directly,\n    /// and not by calls that are triggered by the solvers.\n    /// @return orderDigest The EIP-712 signing digest derived from the order\n    /// parameters.\n    /// @return owner The address of the user who owns this order.\n    /// @return validTo The epoch time at which the order will stop being valid.\n    function extractOrderUidParams(bytes calldata orderUid)\n        internal\n        pure\n        returns (\n            bytes32 orderDigest,\n            address owner,\n            uint32 validTo\n        )\n    {\n        require(orderUid.length == UID_LENGTH, \"GPv2: invalid uid\");\n\n        // Use assembly to efficiently decode packed calldata.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            orderDigest := calldataload(orderUid.offset)\n            owner := shr(96, calldataload(add(orderUid.offset, 32)))\n            validTo := shr(224, calldataload(add(orderUid.offset, 52)))\n        }\n    }\n}\n"
    },
    "contracts/utils/DefaultAccessControl.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"../interfaces/utils/IDefaultAccessControl.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\n/// @notice This is a default access control with 3 roles:\n///\n/// - ADMIN: allowed to do anything\n/// - ADMIN_DELEGATE: allowed to do anything except assigning ADMIN and ADMIN_DELEGATE roles\n/// - OPERATOR: low-privileged role, generally keeper or some other bot\ncontract DefaultAccessControl is IDefaultAccessControl, AccessControlEnumerable {\n    bytes32 public constant OPERATOR = keccak256(\"operator\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"admin\");\n    bytes32 public constant ADMIN_DELEGATE_ROLE = keccak256(\"admin_delegate\");\n\n    /// @notice Creates a new contract.\n    /// @param admin Admin of the contract\n    constructor(address admin) {\n        require(admin != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n\n        _setupRole(OPERATOR, admin);\n        _setupRole(ADMIN_ROLE, admin);\n\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(ADMIN_DELEGATE_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(OPERATOR, ADMIN_DELEGATE_ROLE);\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @notice Checks if the address is ADMIN or ADMIN_DELEGATE.\n    /// @param sender Adddress to check\n    /// @return `true` if sender is an admin, `false` otherwise\n    function isAdmin(address sender) public view returns (bool) {\n        return hasRole(ADMIN_ROLE, sender) || hasRole(ADMIN_DELEGATE_ROLE, sender);\n    }\n\n    /// @notice Checks if the address is OPERATOR.\n    /// @param sender Adddress to check\n    /// @return `true` if sender is an admin, `false` otherwise\n    function isOperator(address sender) public view returns (bool) {\n        return hasRole(OPERATOR, sender);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _requireAdmin() internal view {\n        require(isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n\n    function _requireAtLeastOperator() internal view {\n        require(isAdmin(msg.sender) || isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/UnitPricesGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"./interfaces/IUnitPricesGovernance.sol\";\nimport \"./libraries/ExceptionsLibrary.sol\";\nimport \"./utils/DefaultAccessControl.sol\";\n\ncontract UnitPricesGovernance is IUnitPricesGovernance, DefaultAccessControl {\n    uint256 public constant DELAY = 14 days;\n    /// @inheritdoc IUnitPricesGovernance\n    mapping(address => uint256) public unitPrices;\n    /// @inheritdoc IUnitPricesGovernance\n    mapping(address => uint256) public stagedUnitPrices;\n    /// @inheritdoc IUnitPricesGovernance\n    mapping(address => uint256) public stagedUnitPricesTimestamps;\n\n    constructor(address admin) DefaultAccessControl(admin) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, AccessControlEnumerable)\n        returns (bool)\n    {\n        return (interfaceId == type(IUnitPricesGovernance).interfaceId) || super.supportsInterface(interfaceId);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IUnitPricesGovernance\n    function stageUnitPrice(address token, uint256 value) external {\n        require(token != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _requireAdmin();\n        stagedUnitPrices[token] = value;\n        stagedUnitPricesTimestamps[token] = unitPrices[token] == 0 ? block.timestamp : block.timestamp + DELAY;\n        emit UnitPriceStaged(tx.origin, msg.sender, token, value);\n    }\n\n    /// @inheritdoc IUnitPricesGovernance\n    function rollbackUnitPrice(address token) external {\n        _requireAdmin();\n        delete stagedUnitPrices[token];\n        delete stagedUnitPricesTimestamps[token];\n        emit UnitPriceRolledBack(tx.origin, msg.sender, token);\n    }\n\n    /// @inheritdoc IUnitPricesGovernance\n    function commitUnitPrice(address token) external {\n        _requireAdmin();\n        uint256 timestamp = stagedUnitPricesTimestamps[token];\n        require(timestamp != 0, ExceptionsLibrary.INVALID_STATE);\n        require(timestamp <= block.timestamp, ExceptionsLibrary.TIMESTAMP);\n\n        uint256 price = stagedUnitPrices[token];\n        unitPrices[token] = price;\n        delete stagedUnitPrices[token];\n        delete stagedUnitPricesTimestamps[token];\n        emit UnitPriceCommitted(tx.origin, msg.sender, token, price);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice UnitPrice staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param token Token address\n    /// @param unitPrice Unit price\n    event UnitPriceStaged(address indexed origin, address indexed sender, address token, uint256 unitPrice);\n\n    /// @notice UnitPrice rolled back\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param token Token address\n    event UnitPriceRolledBack(address indexed origin, address indexed sender, address token);\n\n    /// @notice UnitPrice committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param token Token address\n    /// @param unitPrice Unit price\n    event UnitPriceCommitted(address indexed origin, address indexed sender, address token, uint256 unitPrice);\n}\n"
    },
    "contracts/utils/DefaultAccessControlLateInit.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"../interfaces/utils/IDefaultAccessControl.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\n/// @notice This is a default access control with 3 roles:\n///\n/// - ADMIN: allowed to do anything\n/// - ADMIN_DELEGATE: allowed to do anything except assigning ADMIN and ADMIN_DELEGATE roles\n/// - OPERATOR: low-privileged role, generally keeper or some other bot\ncontract DefaultAccessControlLateInit is IDefaultAccessControl, AccessControlEnumerable {\n    bool public initialized;\n\n    bytes32 public constant OPERATOR = keccak256(\"operator\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"admin\");\n    bytes32 public constant ADMIN_DELEGATE_ROLE = keccak256(\"admin_delegate\");\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @inheritdoc IDefaultAccessControl\n    function isAdmin(address sender) public view returns (bool) {\n        return hasRole(ADMIN_ROLE, sender) || hasRole(ADMIN_DELEGATE_ROLE, sender);\n    }\n\n    /// @inheritdoc IDefaultAccessControl\n    function isOperator(address sender) public view returns (bool) {\n        return hasRole(OPERATOR, sender);\n    }\n\n    // -------------------------  EXTERNAL, MUTATING  ------------------------------\n\n    /// @notice Initializes a new contract with roles and single ADMIN.\n    /// @param admin Admin of the contract\n    function init(address admin) public {\n        require(admin != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(!initialized, ExceptionsLibrary.INIT);\n\n        _setupRole(OPERATOR, admin);\n        _setupRole(ADMIN_ROLE, admin);\n\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(ADMIN_DELEGATE_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(OPERATOR, ADMIN_DELEGATE_ROLE);\n\n        initialized = true;\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _requireAdmin() internal view {\n        require(isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n\n    function _requireAtLeastOperator() internal view {\n        require(isAdmin(msg.sender) || isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n}\n"
    },
    "contracts/ProtocolGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"./interfaces/IProtocolGovernance.sol\";\nimport \"./libraries/ExceptionsLibrary.sol\";\nimport \"./UnitPricesGovernance.sol\";\nimport \"./utils/ContractMeta.sol\";\n\n/// @notice Governance that manages all params common for Mellow Permissionless Vaults protocol.\ncontract ProtocolGovernance is ContractMeta, IProtocolGovernance, ERC165, UnitPricesGovernance, Multicall {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 public constant MAX_GOVERNANCE_DELAY = 7 days;\n    uint256 public constant MIN_WITHDRAW_LIMIT = 200_000;\n\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => uint256) public stagedPermissionGrantsTimestamps;\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => uint256) public stagedPermissionGrantsMasks;\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => uint256) public permissionMasks;\n\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => uint256) public stagedValidatorsTimestamps;\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => address) public stagedValidators;\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => address) public validators;\n\n    /// @inheritdoc IProtocolGovernance\n    uint256 public stagedParamsTimestamp;\n\n    EnumerableSet.AddressSet private _stagedPermissionGrantsAddresses;\n    EnumerableSet.AddressSet private _permissionAddresses;\n    EnumerableSet.AddressSet private _validatorsAddresses;\n    EnumerableSet.AddressSet private _stagedValidatorsAddresses;\n\n    Params private _stagedParams;\n    Params private _params;\n\n    /// @notice Creates a new contract\n    /// @param admin Initial admin of the contract\n    constructor(address admin) UnitPricesGovernance(admin) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IProtocolGovernance\n    function stagedParams() public view returns (Params memory) {\n        return _stagedParams;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function params() public view returns (Params memory) {\n        return _params;\n    }\n\n    function stagedValidatorsAddresses() external view returns (address[] memory) {\n        return _stagedValidatorsAddresses.values();\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function validatorsAddresses() external view returns (address[] memory) {\n        return _validatorsAddresses.values();\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function validatorsAddress(uint256 i) external view returns (address) {\n        return _validatorsAddresses.at(i);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function permissionAddresses() external view returns (address[] memory) {\n        return _permissionAddresses.values();\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory) {\n        return _stagedPermissionGrantsAddresses.values();\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory addresses) {\n        uint256 length = _permissionAddresses.length();\n        addresses = new address[](length);\n        uint256 addressesLength = 0;\n        uint256 mask = 1 << permissionId;\n        for (uint256 i = 0; i < length; i++) {\n            address addr = _permissionAddresses.at(i);\n            if (permissionMasks[addr] & mask != 0) {\n                addresses[addressesLength] = addr;\n                addressesLength++;\n            }\n        }\n        // shrink to fit\n        assembly {\n            mstore(addresses, addressesLength)\n        }\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function hasPermission(address target, uint8 permissionId) external view returns (bool) {\n        return ((permissionMasks[target] | _params.forceAllowMask) & (1 << (permissionId))) != 0;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool) {\n        uint256 submask = _permissionIdsToMask(permissionIds);\n        uint256 mask = permissionMasks[target] | _params.forceAllowMask;\n        return mask & submask == submask;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function maxTokensPerVault() external view returns (uint256) {\n        return _params.maxTokensPerVault;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function governanceDelay() external view returns (uint256) {\n        return _params.governanceDelay;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function protocolTreasury() external view returns (address) {\n        return _params.protocolTreasury;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function forceAllowMask() external view returns (uint256) {\n        return _params.forceAllowMask;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function withdrawLimit(address token) external view returns (uint256) {\n        return _params.withdrawLimit * unitPrices[token];\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(UnitPricesGovernance, IERC165, ERC165)\n        returns (bool)\n    {\n        return (interfaceId == type(IProtocolGovernance).interfaceId) || super.supportsInterface(interfaceId);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IProtocolGovernance\n    function stageValidator(address target, address validator) external {\n        _requireAdmin();\n        require(\n            target != address(0) &&\n            validator != address(0), \n            ExceptionsLibrary.ADDRESS_ZERO\n        );\n        _stagedValidatorsAddresses.add(target);\n        stagedValidators[target] = validator;\n        uint256 at = block.timestamp + _params.governanceDelay;\n        stagedValidatorsTimestamps[target] = at;\n        emit ValidatorStaged(tx.origin, msg.sender, target, validator, at);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function rollbackStagedValidators() external {\n        _requireAdmin();\n        uint256 length = _stagedValidatorsAddresses.length();\n        for (uint256 i; i != length; ++i) {\n            address target = _stagedValidatorsAddresses.at(0);\n            delete stagedValidators[target];\n            delete stagedValidatorsTimestamps[target];\n            _stagedValidatorsAddresses.remove(target);\n        }\n        emit AllStagedValidatorsRolledBack(tx.origin, msg.sender);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitValidator(address stagedAddress) external {\n        _requireAdmin();\n        uint256 stagedToCommitAt = stagedValidatorsTimestamps[stagedAddress];\n        require(block.timestamp >= stagedToCommitAt, ExceptionsLibrary.TIMESTAMP);\n        require(stagedToCommitAt != 0, ExceptionsLibrary.NULL);\n        validators[stagedAddress] = stagedValidators[stagedAddress];\n        _validatorsAddresses.add(stagedAddress);\n        delete stagedValidators[stagedAddress];\n        delete stagedValidatorsTimestamps[stagedAddress];\n        _stagedValidatorsAddresses.remove(stagedAddress);\n        emit ValidatorCommitted(tx.origin, msg.sender, stagedAddress);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory addressesCommitted) {\n        _requireAdmin();\n        uint256 length = _stagedValidatorsAddresses.length();\n        addressesCommitted = new address[](length);\n        uint256 addressesCommittedLength;\n        for (uint256 i; i != length;) {\n            address stagedAddress = _stagedValidatorsAddresses.at(i);\n            if (block.timestamp >= stagedValidatorsTimestamps[stagedAddress]) {\n                validators[stagedAddress] = stagedValidators[stagedAddress];\n                _validatorsAddresses.add(stagedAddress);\n                delete stagedValidators[stagedAddress];\n                delete stagedValidatorsTimestamps[stagedAddress];\n                _stagedValidatorsAddresses.remove(stagedAddress);\n                addressesCommitted[addressesCommittedLength] = stagedAddress;\n                ++addressesCommittedLength;\n                --length;\n                emit ValidatorCommitted(tx.origin, msg.sender, stagedAddress);\n            } else {\n                ++i;\n            }\n        }\n        assembly {\n            mstore(addressesCommitted, addressesCommittedLength)\n        }\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function revokeValidator(address target) external {\n        _requireAdmin();\n        require(target != address(0), ExceptionsLibrary.NULL);\n        delete validators[target];\n        _validatorsAddresses.remove(target);\n        emit ValidatorRevoked(tx.origin, msg.sender, target);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function rollbackStagedPermissionGrants() external {\n        _requireAdmin();\n        uint256 length = _stagedPermissionGrantsAddresses.length();\n        for (uint256 i; i != length; ++i) {\n            address target = _stagedPermissionGrantsAddresses.at(0);\n            delete stagedPermissionGrantsMasks[target];\n            delete stagedPermissionGrantsTimestamps[target];\n            _stagedPermissionGrantsAddresses.remove(target);\n        }\n        emit AllStagedPermissionGrantsRolledBack(tx.origin, msg.sender);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitPermissionGrants(address stagedAddress) external {\n        _requireAdmin();\n        uint256 stagedToCommitAt = stagedPermissionGrantsTimestamps[stagedAddress];\n        require(block.timestamp >= stagedToCommitAt, ExceptionsLibrary.TIMESTAMP);\n        require(stagedToCommitAt != 0, ExceptionsLibrary.NULL);\n        permissionMasks[stagedAddress] |= stagedPermissionGrantsMasks[stagedAddress];\n        _permissionAddresses.add(stagedAddress);\n        delete stagedPermissionGrantsMasks[stagedAddress];\n        delete stagedPermissionGrantsTimestamps[stagedAddress];\n        _stagedPermissionGrantsAddresses.remove(stagedAddress);\n        emit PermissionGrantsCommitted(tx.origin, msg.sender, stagedAddress);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory addresses) {\n        _requireAdmin();\n        uint256 length = _stagedPermissionGrantsAddresses.length();\n        uint256 addressesLeft = length;\n        addresses = new address[](length);\n        for (uint256 i; i != addressesLeft;) {\n            address stagedAddress = _stagedPermissionGrantsAddresses.at(i);\n            if (block.timestamp >= stagedPermissionGrantsTimestamps[stagedAddress]) {\n                permissionMasks[stagedAddress] |= stagedPermissionGrantsMasks[stagedAddress];\n                _permissionAddresses.add(stagedAddress);\n                delete stagedPermissionGrantsMasks[stagedAddress];\n                delete stagedPermissionGrantsTimestamps[stagedAddress];\n                _stagedPermissionGrantsAddresses.remove(stagedAddress);\n                addresses[length - addressesLeft] = stagedAddress;\n                --addressesLeft;\n                emit PermissionGrantsCommitted(tx.origin, msg.sender, stagedAddress);\n            } else {\n                ++i;\n            }\n        }\n        length -= addressesLeft;\n        assembly {\n            mstore(addresses, length)\n        }\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function revokePermissions(address target, uint8[] calldata permissionIds) external {\n        _requireAdmin();\n        require(target != address(0), ExceptionsLibrary.NULL);\n        uint256 diff = _permissionIdsToMask(permissionIds);\n        uint256 currentMask = permissionMasks[target];\n        uint256 newMask = currentMask & (~diff);\n        permissionMasks[target] = newMask;\n        if (newMask == 0) {\n            _permissionAddresses.remove(target);\n        }\n        emit PermissionsRevoked(tx.origin, msg.sender, target, permissionIds);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitParams() external {\n        _requireAdmin();\n        require(stagedParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(\n            block.timestamp >= stagedParamsTimestamp,\n            ExceptionsLibrary.TIMESTAMP\n        );\n        _params = _stagedParams;\n        delete _stagedParams;\n        delete stagedParamsTimestamp;\n        emit ParamsCommitted(tx.origin, msg.sender, _params);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function stagePermissionGrants(address target, uint8[] calldata permissionIds) external {\n        _requireAdmin();\n        require(target != address(0), ExceptionsLibrary.NULL);\n        _stagedPermissionGrantsAddresses.add(target);\n        stagedPermissionGrantsMasks[target] = _permissionIdsToMask(permissionIds);\n        uint256 stagedToCommitAt = block.timestamp + _params.governanceDelay;\n        stagedPermissionGrantsTimestamps[target] = stagedToCommitAt;\n        emit PermissionGrantsStaged(tx.origin, msg.sender, target, permissionIds, stagedToCommitAt);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function stageParams(IProtocolGovernance.Params calldata newParams) external {\n        _requireAdmin();\n        _validateGovernanceParams(newParams);\n        _stagedParams = newParams;\n        stagedParamsTimestamp = block.timestamp + _params.governanceDelay;\n        emit ParamsStaged(tx.origin, msg.sender, stagedParamsTimestamp, _stagedParams);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ProtocolGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _validateGovernanceParams(IProtocolGovernance.Params calldata newParams) private pure {\n        require(newParams.maxTokensPerVault != 0 && newParams.governanceDelay != 0, ExceptionsLibrary.NULL);\n        require(newParams.governanceDelay <= MAX_GOVERNANCE_DELAY, ExceptionsLibrary.LIMIT_OVERFLOW);\n        require(newParams.withdrawLimit >= MIN_WITHDRAW_LIMIT, ExceptionsLibrary.LIMIT_OVERFLOW);\n    }\n\n    function _permissionIdsToMask(uint8[] calldata permissionIds) private pure returns (uint256 mask) {\n        for (uint256 i = 0; i < permissionIds.length; ++i) {\n            mask |= 1 << permissionIds[i];\n        }\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when validators are staged to be granted for specific address.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    /// @param validator Staged validator\n    /// @param at Timestamp when the staged permissions could be committed\n    event ValidatorStaged(\n        address indexed origin,\n        address indexed sender,\n        address indexed target,\n        address validator,\n        uint256 at\n    );\n\n    /// @notice Validator revoked\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    event ValidatorRevoked(address indexed origin, address indexed sender, address indexed target);\n\n    /// @notice Emitted when staged validators are rolled back\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    event AllStagedValidatorsRolledBack(address indexed origin, address indexed sender);\n\n    /// @notice Emitted when staged validators are comitted for specific address\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    event ValidatorCommitted(address indexed origin, address indexed sender, address indexed target);\n\n    /// @notice Emitted when new permissions are staged to be granted for specific address.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    /// @param permissionIds Permission IDs to be granted\n    /// @param at Timestamp when the staged permissions could be committed\n    event PermissionGrantsStaged(\n        address indexed origin,\n        address indexed sender,\n        address indexed target,\n        uint8[] permissionIds,\n        uint256 at\n    );\n\n    /// @notice Emitted when permissions are revoked\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    /// @param permissionIds Permission IDs to be revoked\n    event PermissionsRevoked(\n        address indexed origin,\n        address indexed sender,\n        address indexed target,\n        uint8[] permissionIds\n    );\n\n    /// @notice Emitted when staged permissions are rolled back\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    event AllStagedPermissionGrantsRolledBack(address indexed origin, address indexed sender);\n\n    /// @notice Emitted when staged permissions are comitted for specific address\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    event PermissionGrantsCommitted(address indexed origin, address indexed sender, address indexed target);\n\n    /// @notice Emitted when pending parameters are set\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param at Timestamp when the pending parameters could be committed\n    /// @param params Pending parameters\n    event ParamsStaged(address indexed origin, address indexed sender, uint256 at, Params params);\n\n    /// @notice Emitted when pending parameters are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params Committed parameters\n    event ParamsCommitted(address indexed origin, address indexed sender, Params params);\n}\n"
    },
    "contracts/vaults/MellowVault.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity =0.8.9;\n\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../interfaces/vaults/IMellowVault.sol\";\nimport \"../interfaces/vaults/IERC20RootVault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"./IntegrationVault.sol\";\n\n/// @notice Vault that stores ERC20 tokens.\ncontract MellowVault is IMellowVault, IntegrationVault {\n    using SafeERC20 for IERC20;\n\n    /// @inheritdoc IMellowVault\n    IERC20RootVault public vault;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        IERC20RootVault vault_ = vault;\n        uint256 balance = vault_.balanceOf(address(this));\n        uint256 supply = vault_.totalSupply();\n        (minTokenAmounts, maxTokenAmounts) = vault_.tvl();\n        for (uint256 i = 0; i < minTokenAmounts.length; i++) {\n            minTokenAmounts[i] = FullMath.mulDiv(balance, minTokenAmounts[i], supply);\n            maxTokenAmounts[i] = FullMath.mulDiv(balance, maxTokenAmounts[i], supply);\n        }\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IMellowVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        IERC20RootVault vault_\n    ) external {\n        _initialize(vaultTokens_, nft_);\n        address[] memory mTokens = vault_.vaultTokens();\n        for (uint256 i = 0; i < vaultTokens_.length; i++) {\n            require(mTokens[i] == vaultTokens_[i], ExceptionsLibrary.INVALID_TOKEN);\n        }\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        require(registry.nftForVault(address(vault)) > 0, ExceptionsLibrary.INVALID_INTERFACE);\n        vault = vault_;\n    }\n\n    // -------------------  INTERNAL, VIEW  -----------------------\n    function _isReclaimForbidden(address token) internal view override returns (bool) {\n        address[] memory mTokens = vault.vaultTokens();\n        for (uint256 i = 0; i < mTokens.length; ++i) {\n            if (mTokens[i] == token) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _push(uint256[] memory tokenAmounts, bytes memory options)\n        internal\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        uint256 minLpTokens;\n        assembly {\n            minLpTokens := mload(add(options, 0x20))\n        }\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\n            IERC20(_vaultTokens[i]).safeIncreaseAllowance(address(vault), tokenAmounts[i]);\n        }\n        actualTokenAmounts = vault.deposit(tokenAmounts, minLpTokens, \"\");\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\n            IERC20(_vaultTokens[i]).safeApprove(address(vault), 0);\n        }\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        IERC20RootVault vault_ = vault;\n        uint256[] memory minTokenAmounts = abi.decode(options, (uint256[]));\n        (uint256[] memory minTvl, ) = tvl();\n        uint256 totalLpTokens = vault.balanceOf(address(this));\n        uint256 lpTokenAmount = type(uint256).max;\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\n            uint256 newAmount = FullMath.mulDiv(totalLpTokens, tokenAmounts[i], minTvl[i]);\n            if (newAmount < lpTokenAmount) {\n                lpTokenAmount = newAmount;\n            }\n        }\n        if (lpTokenAmount > totalLpTokens) {\n            lpTokenAmount = totalLpTokens;\n        }\n\n        bytes[] memory emptyOptions = new bytes[](vault.subvaultNfts().length);\n        for (uint256 i = 0; i < emptyOptions.length; ++i) {\n            emptyOptions[i] = \"\";\n        }\n        actualTokenAmounts = vault_.withdraw(to, lpTokenAmount, minTokenAmounts, emptyOptions);\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IMellowVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../external/aave/ILendingPool.sol\";\nimport \"./IERC20RootVault.sol\";\nimport \"./IIntegrationVault.sol\";\n\ninterface IMellowVault is IIntegrationVault {\n    /// @notice Reference to mellow root vault\n    function vault() external view returns (IERC20RootVault);\n\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param rootVault_ Reference to mellow root vault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        IERC20RootVault rootVault_\n    ) external;\n}\n"
    },
    "contracts/vaults/MellowVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IMellowVault.sol\";\nimport \"../interfaces/vaults/IMellowVaultGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Governance that manages all Mellow Vaults params and can deploy a new Mellow Vault.\ncontract MellowVaultGovernance is ContractMeta, IMellowVaultGovernance, VaultGovernance {\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    constructor(InternalParams memory internalParams_) VaultGovernance(internalParams_) {}\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"MellowVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IMellowVaultGovernance\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        IERC20RootVault underlyingVault\n    ) external returns (IMellowVault vault, uint256 nft) {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IMellowVault(vaddr);\n        vault.initialize(nft, vaultTokens_, underlyingVault);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, \"\", owner_, vaddr, nft);\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IMellowVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IMellowVault.sol\";\nimport \"./IVaultGovernance.sol\";\n\ninterface IMellowVaultGovernance is IVaultGovernance {\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    /// @param underlyingVault Underlying mellow vault\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        IERC20RootVault underlyingVault\n    ) external returns (IMellowVault vault, uint256 nft);\n}\n"
    },
    "contracts/VaultRegistry.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./interfaces/IProtocolGovernance.sol\";\nimport \"./interfaces/vaults/IVault.sol\";\nimport \"./interfaces/IVaultRegistry.sol\";\nimport \"./libraries/ExceptionsLibrary.sol\";\nimport \"./libraries/PermissionIdsLibrary.sol\";\nimport \"./utils/ContractMeta.sol\";\n\n/// @notice This contract is used to manage ERC721 NFT for all Vaults.\ncontract VaultRegistry is ContractMeta, IVaultRegistry, ERC721 {\n    uint256 private _stagedProtocolGovernanceTimestamp;\n    IProtocolGovernance private _protocolGovernance;\n    IProtocolGovernance private _stagedProtocolGovernance;\n\n    address[] private _vaults;\n    mapping(address => uint256) private _nftIndex;\n    mapping(uint256 => address) private _vaultIndex;\n    mapping(uint256 => bool) private _locks;\n    uint256 private _topNft = 1;\n\n    /// @notice Creates a new contract.\n    /// @param name ERC721 token name\n    /// @param symbol ERC721 token symbol\n    /// @param protocolGovernance_ Reference to ProtocolGovernance\n    constructor(\n        string memory name,\n        string memory symbol,\n        IProtocolGovernance protocolGovernance_\n    ) ERC721(name, symbol) {\n        _protocolGovernance = protocolGovernance_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    function vaults() external view returns (address[] memory) {\n        return _vaults;\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function vaultForNft(uint256 nft) external view returns (address) {\n        return _vaultIndex[nft];\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function nftForVault(address vault) external view returns (uint256) {\n        return _nftIndex[vault];\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function isLocked(uint256 nft) external view returns (bool) {\n        return _locks[nft];\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function protocolGovernance() external view returns (IProtocolGovernance) {\n        return _protocolGovernance;\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function stagedProtocolGovernance() external view returns (IProtocolGovernance) {\n        return _stagedProtocolGovernance;\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function stagedProtocolGovernanceTimestamp() external view returns (uint256) {\n        return _stagedProtocolGovernanceTimestamp;\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function vaultsCount() external view returns (uint256) {\n        return _vaults.length;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IVaultRegistry).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IVaultRegistry\n    function registerVault(address vault, address owner) external returns (uint256 nft) {\n        require(address(owner) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(ERC165(vault).supportsInterface(type(IVault).interfaceId), ExceptionsLibrary.INVALID_INTERFACE);\n        require(\n            _protocolGovernance.hasPermission(msg.sender, PermissionIdsLibrary.REGISTER_VAULT),\n            ExceptionsLibrary.FORBIDDEN\n        );\n        require(_nftIndex[vault] == 0, ExceptionsLibrary.DUPLICATE);\n        nft = _topNft;\n        _vaultIndex[nft] = vault;\n        _nftIndex[vault] = nft;\n        _vaults.push(vault);\n        _topNft += 1;\n        _safeMint(owner, nft);\n        emit VaultRegistered(tx.origin, msg.sender, nft, vault, owner);\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function stageProtocolGovernance(IProtocolGovernance newProtocolGovernance) external {\n        require(_isProtocolAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        require(address(newProtocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stagedProtocolGovernance = newProtocolGovernance;\n        _stagedProtocolGovernanceTimestamp = (block.timestamp + _protocolGovernance.governanceDelay());\n        emit StagedProtocolGovernance(tx.origin, msg.sender, newProtocolGovernance, _stagedProtocolGovernanceTimestamp);\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function commitStagedProtocolGovernance() external {\n        require(_isProtocolAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        require(_stagedProtocolGovernanceTimestamp != 0, ExceptionsLibrary.INIT);\n        require(block.timestamp >= _stagedProtocolGovernanceTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _protocolGovernance = _stagedProtocolGovernance;\n        delete _stagedProtocolGovernanceTimestamp;\n        delete _stagedProtocolGovernance;\n        emit CommitedProtocolGovernance(tx.origin, msg.sender, _protocolGovernance);\n    }\n\n    function lockNft(uint256 nft) external {\n        require(ownerOf(nft) == msg.sender, ExceptionsLibrary.FORBIDDEN);\n        _locks[nft] = true;\n        emit TokenLocked(tx.origin, msg.sender, nft);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"VaultRegistry\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _isProtocolAdmin(address sender) internal view returns (bool) {\n        return _protocolGovernance.isAdmin(sender);\n    }\n\n    function _beforeTokenTransfer(\n        address,\n        address,\n        uint256 tokenId\n    ) internal view override {\n        require(!_locks[tokenId], ExceptionsLibrary.LOCK);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when token is locked for transfers\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft NFT to be locked\n    event TokenLocked(address indexed origin, address indexed sender, uint256 indexed nft);\n\n    /// @notice Emitted when new Vault is registered in VaultRegistry\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param vault Address of the Vault contract\n    /// @param owner Owner of the VaultRegistry NFT\n    event VaultRegistered(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        address vault,\n        address owner\n    );\n\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param newProtocolGovernance Address of the new ProtocolGovernance\n    /// @param start Timestamp of the start of the new ProtocolGovernance\n    event StagedProtocolGovernance(\n        address indexed origin,\n        address indexed sender,\n        IProtocolGovernance newProtocolGovernance,\n        uint256 start\n    );\n\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param newProtocolGovernance Address of the new ProtocolGovernance that has been committed\n    event CommitedProtocolGovernance(\n        address indexed origin,\n        address indexed sender,\n        IProtocolGovernance newProtocolGovernance\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/validators/UniV3Validator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ3/ISwapRouter.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract UniV3Validator is ContractMeta, Validator {\n    bytes4 public constant EXACT_INPUT_SINGLE_SELECTOR = ISwapRouter.exactInputSingle.selector;\n    bytes4 public constant EXACT_INPUT_SELECTOR = ISwapRouter.exactInput.selector;\n    bytes4 public constant EXACT_OUTPUT_SINGLE_SELECTOR = ISwapRouter.exactOutputSingle.selector;\n    bytes4 public constant EXACT_OUTPUT_SELECTOR = ISwapRouter.exactOutput.selector;\n    address public immutable swapRouter;\n    IUniswapV3Factory public immutable factory;\n\n    constructor(\n        IProtocolGovernance protocolGovernance_,\n        address swapRouter_,\n        IUniswapV3Factory factory_\n    ) BaseValidator(protocolGovernance_) {\n        swapRouter = swapRouter_;\n        factory = factory_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {\n        require(address(swapRouter) == addr, ExceptionsLibrary.INVALID_TARGET);\n        require(value == 0, ExceptionsLibrary.INVALID_VALUE);\n        IVault vault = IVault(msg.sender);\n        if (selector == EXACT_INPUT_SINGLE_SELECTOR) {\n            ISwapRouter.ExactInputSingleParams memory params = abi.decode(data, (ISwapRouter.ExactInputSingleParams));\n            _verifySingleCall(vault, params.recipient, params.tokenIn, params.tokenOut, params.fee);\n        } else if (selector == EXACT_OUTPUT_SINGLE_SELECTOR) {\n            ISwapRouter.ExactOutputSingleParams memory params = abi.decode(data, (ISwapRouter.ExactOutputSingleParams));\n            _verifySingleCall(vault, params.recipient, params.tokenIn, params.tokenOut, params.fee);\n        } else if (selector == EXACT_INPUT_SELECTOR) {\n            ISwapRouter.ExactInputParams memory params = abi.decode(data, (ISwapRouter.ExactInputParams));\n            _verifyMultiCall(vault, params.recipient, params.path);\n        } else if (selector == EXACT_OUTPUT_SELECTOR) {\n            ISwapRouter.ExactOutputParams memory params = abi.decode(data, (ISwapRouter.ExactOutputParams));\n            _verifyMultiCall(vault, params.recipient, params.path);\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV3Validator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _verifyMultiCall(\n        IVault vault,\n        address recipient,\n        bytes memory path\n    ) private view {\n        uint256 i;\n        address token0;\n        address token1;\n        uint24 fee;\n        uint256 feeMask = (1 << 24) - 1;\n        uint256 tokenMask = (1 << 160) - 1;\n        require(recipient == address(vault), ExceptionsLibrary.INVALID_TARGET);\n        // the sample UniV3 path structure is (DAI address,DAI-USDC fee, USDC, USDC-WETH fee, WETH)\n        // addresses are 20 bytes, fees are 3 bytes\n        require(((path.length + 3) % 23 == 0) && (path.length >= 43), ExceptionsLibrary.INVALID_LENGTH);\n        while (path.length - i > 20) {\n            assembly {\n                let o := add(add(path, 0x20), i)\n                let d := mload(o)\n                d := shr(72, d)\n                fee := and(d, feeMask)\n                token0 := shr(24, d)\n                d := mload(add(o, 11))\n                token1 := and(d, tokenMask)\n            }\n            _verifyPathItem(token0, token1, fee);\n            i += 23;\n        }\n        require(vault.isVaultToken(token1), ExceptionsLibrary.INVALID_TOKEN);\n    }\n\n    function _verifySingleCall(\n        IVault vault,\n        address recipient,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) private view {\n        require(recipient == address(vault), ExceptionsLibrary.INVALID_TARGET);\n        require(vault.isVaultToken(tokenOut), ExceptionsLibrary.INVALID_TOKEN);\n        _verifyPathItem(tokenIn, tokenOut, fee);\n    }\n\n    function _verifyPathItem(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) private view {\n        require(tokenIn != tokenOut, ExceptionsLibrary.INVALID_TOKEN);\n        IProtocolGovernance protocolGovernance = _validatorParams.protocolGovernance;\n        address pool = factory.getPool(tokenIn, tokenOut, fee);\n        require(\n            protocolGovernance.hasPermission(pool, PermissionIdsLibrary.ERC20_APPROVE),\n            ExceptionsLibrary.FORBIDDEN\n        );\n    }\n}\n"
    },
    "contracts/interfaces/external/univ3/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/validators/Validator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/validators/IValidator.sol\";\nimport \"./BaseValidator.sol\";\n\nabstract contract Validator is IValidator, ERC165, BaseValidator {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return (interfaceId == type(IValidator).interfaceId) || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/validators/BaseValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/validators/IBaseValidator.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\ncontract BaseValidator is IBaseValidator {\n    IBaseValidator.ValidatorParams internal _validatorParams;\n    IBaseValidator.ValidatorParams internal _stagedValidatorParams;\n    uint256 internal _stagedValidatorParamsTimestamp;\n\n    constructor(IProtocolGovernance protocolGovernance) {\n        _validatorParams = IBaseValidator.ValidatorParams({protocolGovernance: protocolGovernance});\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IBaseValidator\n    function stagedValidatorParams() external view returns (ValidatorParams memory) {\n        return _stagedValidatorParams;\n    }\n\n    /// @inheritdoc IBaseValidator\n    function stagedValidatorParamsTimestamp() external view returns (uint256) {\n        return _stagedValidatorParamsTimestamp;\n    }\n\n    /// @inheritdoc IBaseValidator\n    function validatorParams() external view returns (ValidatorParams memory) {\n        return _validatorParams;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Stages params that could have been committed after governance delay expires.\n    /// @param newParams Params to stage\n    function stageValidatorParams(IBaseValidator.ValidatorParams calldata newParams) external {\n        IProtocolGovernance governance = _validatorParams.protocolGovernance;\n        require(governance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        _stagedValidatorParams = newParams;\n        _stagedValidatorParamsTimestamp = block.timestamp + governance.governanceDelay();\n        emit StagedValidatorParams(tx.origin, msg.sender, newParams, _stagedValidatorParamsTimestamp);\n    }\n\n    /// @notice Commits staged params\n    function commitValidatorParams() external {\n        require(_stagedValidatorParamsTimestamp != 0, ExceptionsLibrary.INVALID_STATE);\n        IProtocolGovernance governance = _validatorParams.protocolGovernance;\n        require(governance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        require(block.timestamp >= _stagedValidatorParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _validatorParams = _stagedValidatorParams;\n        delete _stagedValidatorParams;\n        delete _stagedValidatorParamsTimestamp;\n        emit CommittedValidatorParams(tx.origin, msg.sender, _validatorParams);\n    }\n\n    /// @notice Emitted when new params are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param newParams New params that were staged for commit\n    /// @param when When the params could be committed\n    event StagedValidatorParams(\n        address indexed origin,\n        address indexed sender,\n        IBaseValidator.ValidatorParams newParams,\n        uint256 when\n    );\n\n    /// @notice Emitted when new params are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    event CommittedValidatorParams(\n        address indexed origin,\n        address indexed sender,\n        IBaseValidator.ValidatorParams params\n    );\n}\n"
    },
    "contracts/validators/UniV2Validator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ2/IUniswapV2Factory.sol\";\nimport \"../interfaces/external/univ2/IUniswapV2Router01.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract UniV2Validator is ContractMeta, Validator {\n    struct TokenInput {\n        uint256 amount;\n        uint256 amountMax;\n        address[] path;\n        address to;\n        uint256 deadline;\n    }\n    struct EthInput {\n        uint256 amountMax;\n        address[] path;\n        address to;\n        uint256 deadline;\n    }\n    bytes4 public constant EXACT_INPUT_SELECTOR = IUniswapV2Router01.swapExactTokensForTokens.selector;\n    bytes4 public constant EXACT_OUTPUT_SELECTOR = IUniswapV2Router01.swapTokensForExactTokens.selector;\n    bytes4 public constant EXACT_ETH_INPUT_SELECTOR = IUniswapV2Router01.swapExactETHForTokens.selector;\n    bytes4 public constant EXACT_ETH_OUTPUT_SELECTOR = IUniswapV2Router01.swapTokensForExactETH.selector;\n    bytes4 public constant EXACT_TOKENS_INPUT_SELECTOR = IUniswapV2Router01.swapExactTokensForETH.selector;\n    bytes4 public constant EXACT_TOKENS_OUTPUT_SELECTOR = IUniswapV2Router01.swapETHForExactTokens.selector;\n\n    address public immutable swapRouter;\n    IUniswapV2Factory public immutable factory;\n\n    constructor(\n        IProtocolGovernance protocolGovernance_,\n        address swapRouter_,\n        IUniswapV2Factory factory_\n    ) BaseValidator(protocolGovernance_) {\n        swapRouter = swapRouter_;\n        factory = factory_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {\n        require(address(swapRouter) == addr, ExceptionsLibrary.INVALID_TARGET);\n        IVault vault = IVault(msg.sender);\n\n        address[] memory path;\n        address to;\n\n        if ((selector == EXACT_ETH_INPUT_SELECTOR) || (selector == EXACT_TOKENS_OUTPUT_SELECTOR)) {\n            (, path, to, ) = abi.decode(data, (uint256, address[], address, uint256));\n        } else if (\n            (selector == EXACT_ETH_OUTPUT_SELECTOR) ||\n            (selector == EXACT_TOKENS_INPUT_SELECTOR) ||\n            (selector == EXACT_INPUT_SELECTOR) ||\n            (selector == EXACT_OUTPUT_SELECTOR)\n        ) {\n            require(value == 0, ExceptionsLibrary.INVALID_VALUE);\n            (, , path, to, ) = abi.decode(data, (uint256, uint256, address[], address, uint256));\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n\n        require(to == msg.sender);\n        _verifyPath(vault, path);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV2Validator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _verifyPath(IVault vault, address[] memory path) private view {\n        require(path.length > 1, ExceptionsLibrary.INVALID_LENGTH);\n        require(vault.isVaultToken(path[path.length - 1]), ExceptionsLibrary.INVALID_TOKEN);\n        IProtocolGovernance protocolGovernance = _validatorParams.protocolGovernance;\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            address token0 = path[i];\n            address token1 = path[i + 1];\n            require(token0 != token1, ExceptionsLibrary.INVALID_TOKEN);\n            address pool = factory.getPair(token0, token1);\n            require(\n                protocolGovernance.hasPermission(pool, PermissionIdsLibrary.ERC20_APPROVE),\n                ExceptionsLibrary.FORBIDDEN\n            );\n        }\n    }\n}\n"
    },
    "contracts/interfaces/external/univ2/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniswapV2Factory {\n    function getPair(address token0, address token1) external view returns (address);\n}\n"
    },
    "contracts/interfaces/external/univ2/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/external/univ2/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/oracles/UniV2Oracle.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/external/univ2/IUniswapV2Pair.sol\";\nimport \"../interfaces/external/univ2/IUniswapV2Factory.sol\";\nimport \"../interfaces/oracles/IUniV2Oracle.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\n\ncontract UniV2Oracle is ContractMeta, IUniV2Oracle, ERC165 {\n    /// @inheritdoc IUniV2Oracle\n    IUniswapV2Factory public immutable factory;\n    /// @inheritdoc IUniV2Oracle\n    uint8 public constant safetyIndex = 1;\n\n    constructor(IUniswapV2Factory factory_) {\n        factory = factory_;\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @inheritdoc IOracle\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        bool isSwapped = false;\n        if (token0 > token1) {\n            (token0, token1) = (token1, token0);\n            isSwapped = true;\n        }\n        if (((safetyIndicesSet >> safetyIndex) & 1) != 1) {\n            return (pricesX96, safetyIndices);\n        }\n        IUniswapV2Pair pool = IUniswapV2Pair(factory.getPair(token0, token1));\n        if (address(pool) == address(0)) {\n            return (pricesX96, safetyIndices);\n        }\n        (uint112 reserve0, uint112 reserve1, ) = pool.getReserves();\n        pricesX96 = new uint256[](1);\n        safetyIndices = new uint256[](1);\n        if (isSwapped) {\n            pricesX96[0] = FullMath.mulDiv(reserve0, CommonLibrary.Q96, reserve1);\n        } else {\n            pricesX96[0] = FullMath.mulDiv(reserve1, CommonLibrary.Q96, reserve0);\n        }\n        safetyIndices[0] = safetyIndex;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IUniV2Oracle).interfaceId == interfaceId;\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV2Oracle\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n}\n"
    },
    "contracts/interfaces/external/univ2/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniswapV2Pair {\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/oracles/IUniV2Oracle.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../external/univ2/IUniswapV2Factory.sol\";\nimport \"./IOracle.sol\";\n\ninterface IUniV2Oracle is IOracle {\n    /// @notice Reference to UniV2 factory\n    function factory() external returns (IUniswapV2Factory);\n\n    /// @notice Index of safety bit\n    function safetyIndex() external view returns (uint8);\n}\n"
    },
    "contracts/oracles/MellowOracle.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/oracles/IChainlinkOracle.sol\";\nimport \"../interfaces/oracles/IUniV3Oracle.sol\";\nimport \"../interfaces/oracles/IUniV2Oracle.sol\";\nimport \"../interfaces/oracles/IMellowOracle.sol\";\nimport \"../utils/ContractMeta.sol\";\n\ncontract MellowOracle is ContractMeta, IMellowOracle, ERC165 {\n    /// @inheritdoc IMellowOracle\n    IUniV2Oracle public immutable univ2Oracle;\n    /// @inheritdoc IMellowOracle\n    IUniV3Oracle public immutable univ3Oracle;\n    /// @inheritdoc IMellowOracle\n    IChainlinkOracle public immutable chainlinkOracle;\n\n    constructor(\n        IUniV2Oracle univ2Oracle_,\n        IUniV3Oracle univ3Oracle_,\n        IChainlinkOracle chainlinkOracle_\n    ) {\n        univ2Oracle = univ2Oracle_;\n        univ3Oracle = univ3Oracle_;\n        chainlinkOracle = chainlinkOracle_;\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        IOracle[] memory oracles = _oracles();\n        pricesX96 = new uint256[](6);\n        safetyIndices = new uint256[](6);\n        uint256 len;\n        for (uint256 i = 0; i < oracles.length; i++) {\n            IOracle oracle = oracles[i];\n            (uint256[] memory oPrices, uint256[] memory oSafetyIndixes) = oracle.priceX96(\n                token0,\n                token1,\n                safetyIndicesSet\n            );\n            for (uint256 j = 0; j < oPrices.length; j++) {\n                pricesX96[len] = oPrices[j];\n                safetyIndices[len] = oSafetyIndixes[j];\n                len += 1;\n            }\n        }\n        assembly {\n            mstore(pricesX96, len)\n            mstore(safetyIndices, len)\n        }\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IOracle).interfaceId == interfaceId;\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"MellowOracle\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _oracles() internal view returns (IOracle[] memory oracles) {\n        oracles = new IOracle[](3);\n        uint256 len;\n        if (address(univ2Oracle) != address(0)) {\n            oracles[len] = univ2Oracle;\n            len += 1;\n        }\n        if (address(univ3Oracle) != address(0)) {\n            oracles[len] = univ3Oracle;\n            len += 1;\n        }\n        if (address(chainlinkOracle) != address(0)) {\n            oracles[len] = chainlinkOracle;\n            len += 1;\n        }\n        assembly {\n            mstore(oracles, len)\n        }\n    }\n}\n"
    },
    "contracts/interfaces/oracles/IChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../external/chainlink/IAggregatorV3.sol\";\nimport \"./IOracle.sol\";\n\ninterface IChainlinkOracle is IOracle {\n    /// @notice Index of safety bit\n    function safetyIndex() external view returns (uint8);\n\n    /// @notice Checks if token has chainlink oracle\n    /// @param token token address\n    /// @return `true` if token is allowed, `false` o/w\n    function hasOracle(address token) external view returns (bool);\n\n    /// @notice A list of supported tokens\n    function supportedTokens() external view returns (address[] memory);\n\n    /// @notice Chainlink oracle for a ERC20 token\n    /// @param token The address of the ERC20 token\n    /// @return Address of the chainlink oracle\n    function oraclesIndex(address token) external view returns (address);\n\n    /// @notice Negative sum of decimals of token and chainlink oracle data for this token\n    /// @param token The address of the ERC20 token\n    /// @return Negative sum of decimals of token and chainlink oracle data for this token\n    function decimalsIndex(address token) external view returns (int256);\n\n    /// Add a Chainlink price feed for a token\n    /// @param tokens ERC20 tokens for the feed\n    /// @param oracles Chainlink oracle price feeds (token / USD)\n    function addChainlinkOracles(address[] memory tokens, address[] memory oracles) external;\n}\n"
    },
    "contracts/interfaces/oracles/IUniV3Oracle.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../external/univ3/IUniswapV3Factory.sol\";\nimport \"../external/univ3/IUniswapV3Pool.sol\";\nimport \"./IOracle.sol\";\n\ninterface IUniV3Oracle is IOracle {\n    /// @notice Reference to UniV3 factory\n    function factory() external view returns (IUniswapV3Factory);\n\n    /// @notice The number of seconds for time delta between observations for oracle safety index 2 twap\n    function LOW_OBS_DELTA() external view returns (uint32);\n\n    /// @notice The number of seconds for time delta between observations for oracle safety index 3 twap\n    function MID_OBS_DELTA() external view returns (uint32);\n\n    /// @notice The number of seconds for time delta between observations for oracle safety index 4 twap\n    function HIGH_OBS_DELTA() external view returns (uint32);\n\n    /// @notice Available UniV3 pools for tokens\n    /// @param token0 First ERC20 token\n    /// @param token1 Second ERC20 token\n    /// @return UniV3 pool or 0 if the pool is not available for oracle\n    function poolsIndex(address token0, address token1) external view returns (IUniswapV3Pool);\n\n    /// @notice Add UniV3 pools for prices.\n    /// @param pools Pools to add\n    function addUniV3Pools(IUniswapV3Pool[] memory pools) external;\n}\n"
    },
    "contracts/interfaces/oracles/IMellowOracle.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../external/univ3/IUniswapV3Factory.sol\";\nimport \"../external/univ3/IUniswapV3Pool.sol\";\nimport \"./IOracle.sol\";\nimport \"./IUniV2Oracle.sol\";\nimport \"./IUniV3Oracle.sol\";\nimport \"./IChainlinkOracle.sol\";\n\ninterface IMellowOracle is IOracle {\n    /// @notice Reference to UniV2 oracle\n    function univ2Oracle() external view returns (IUniV2Oracle);\n\n    /// @notice Reference to UniV3 oracle\n    function univ3Oracle() external view returns (IUniV3Oracle);\n\n    /// @notice Reference to Chainlink oracle\n    function chainlinkOracle() external view returns (IChainlinkOracle);\n}\n"
    },
    "contracts/interfaces/external/chainlink/IAggregatorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAggregatorV3 {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    },
    "contracts/oracles/ChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/external/chainlink/IAggregatorV3.sol\";\nimport \"../interfaces/oracles/IChainlinkOracle.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../utils/DefaultAccessControl.sol\";\nimport \"../utils/ContractMeta.sol\";\n\n/// @notice Contract for getting chainlink data\ncontract ChainlinkOracle is ContractMeta, IChainlinkOracle, DefaultAccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @inheritdoc IChainlinkOracle\n    uint8 public constant safetyIndex = 5;\n    /// @inheritdoc IChainlinkOracle\n    mapping(address => address) public oraclesIndex;\n    /// @inheritdoc IChainlinkOracle\n    mapping(address => int256) public decimalsIndex;\n    EnumerableSet.AddressSet private _tokens;\n\n    constructor(\n        address[] memory tokens,\n        address[] memory oracles,\n        address admin\n    ) DefaultAccessControl(admin) {\n        _addChainlinkOracles(tokens, oracles);\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @inheritdoc IChainlinkOracle\n    function hasOracle(address token) external view returns (bool) {\n        return _tokens.contains(token);\n    }\n\n    /// @inheritdoc IChainlinkOracle\n    function supportedTokens() external view returns (address[] memory) {\n        return _tokens.values();\n    }\n\n    /// @inheritdoc IOracle\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        if (((safetyIndicesSet >> safetyIndex) & 1) != 1) {\n            return (pricesX96, safetyIndices);\n        }\n        IAggregatorV3 chainlinkOracle0 = IAggregatorV3(oraclesIndex[token0]);\n        IAggregatorV3 chainlinkOracle1 = IAggregatorV3(oraclesIndex[token1]);\n        if ((address(chainlinkOracle0) == address(0)) || (address(chainlinkOracle1) == address(0))) {\n            return (pricesX96, safetyIndices);\n        }\n        uint256 price0;\n        uint256 price1;\n        bool success;\n        (success, price0) = _queryChainlinkOracle(chainlinkOracle0);\n        if (!success) {\n            return (pricesX96, safetyIndices);\n        }\n        (success, price1) = _queryChainlinkOracle(chainlinkOracle1);\n        if (!success) {\n            return (pricesX96, safetyIndices);\n        }\n\n        int256 decimals0 = decimalsIndex[token0];\n        int256 decimals1 = decimalsIndex[token1];\n        if (decimals1 > decimals0) {\n            price1 *= 10**(uint256(decimals1 - decimals0));\n        } else if (decimals0 > decimals1) {\n            price0 *= 10**(uint256(decimals0 - decimals1));\n        }\n        pricesX96 = new uint256[](1);\n        safetyIndices = new uint256[](1);\n        pricesX96[0] = FullMath.mulDiv(price0, CommonLibrary.Q96, price1);\n        safetyIndices[0] = safetyIndex;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || interfaceId == type(IChainlinkOracle).interfaceId;\n    }\n\n    // -------------------------  EXTERNAL, MUTATING  ------------------------------\n\n    /// @inheritdoc IChainlinkOracle\n    function addChainlinkOracles(address[] memory tokens, address[] memory oracles) external {\n        _requireAdmin();\n        _addChainlinkOracles(tokens, oracles);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _queryChainlinkOracle(IAggregatorV3 oracle) internal view returns (bool success, uint256 answer) {\n        try oracle.latestRoundData() returns (uint80, int256 ans, uint256, uint256, uint80) {\n            return (true, uint256(ans));\n        } catch (bytes memory) {\n            return (false, 0);\n        }\n    }\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ChainlinkOracle\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // -------------------------  INTERNAL, MUTATING  ------------------------------\n\n    function _addChainlinkOracles(address[] memory tokens, address[] memory oracles) internal {\n        require(tokens.length == oracles.length, ExceptionsLibrary.INVALID_VALUE);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            address oracle = oracles[i];\n            _tokens.add(token);\n            oraclesIndex[token] = oracle;\n            decimalsIndex[token] = int256(\n                -int8(IERC20Metadata(token).decimals()) - int8(IAggregatorV3(oracle).decimals())\n            );\n        }\n        emit OraclesAdded(tx.origin, msg.sender, tokens, oracles);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new Chainlink oracle is added\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param tokens Tokens added\n    /// @param oracles Orecles added for the tokens\n    event OraclesAdded(address indexed origin, address indexed sender, address[] tokens, address[] oracles);\n}\n"
    },
    "contracts/vaults/ERC20Vault.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"./IntegrationVault.sol\";\n\n/// @notice Vault that stores ERC20 tokens.\ncontract ERC20Vault is IERC20Vault, IntegrationVault {\n    using SafeERC20 for IERC20;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        address[] memory tokens = _vaultTokens;\n        uint256 len = tokens.length;\n        minTokenAmounts = new uint256[](len);\n        for (uint256 i = 0; i < len; ++i) {\n            minTokenAmounts[i] = IERC20(tokens[i]).balanceOf(address(this));\n        }\n        maxTokenAmounts = minTokenAmounts;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n    /// @inheritdoc IERC20Vault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external {\n        _initialize(vaultTokens_, nft_);\n    }\n\n    // -------------------  INTERNAL, VIEW  -----------------------\n    function _isReclaimForbidden(address token) internal view override returns (bool) {\n        uint256 len = _vaultTokens.length;\n        for (uint256 i = 0; i < len; ++i) {\n            if (token == _vaultTokens[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _push(uint256[] memory tokenAmounts, bytes memory)\n        internal\n        pure\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        // no-op, tokens are already on balance\n        return tokenAmounts;\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\n        uint256[] memory pushTokenAmounts = new uint256[](tokenAmounts.length);\n        address[] memory tokens = _vaultTokens;\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        address owner = registry.ownerOf(_nft);\n\n        for (uint256 i = 0; i < tokenAmounts.length; ++i) {\n            IERC20 vaultToken = IERC20(tokens[i]);\n            uint256 balance = vaultToken.balanceOf(address(this));\n            uint256 amount = tokenAmounts[i] < balance ? tokenAmounts[i] : balance;\n            IERC20(tokens[i]).safeTransfer(to, amount);\n            actualTokenAmounts[i] = amount;\n            if (owner != to) {\n                // this will equal to amounts pulled + any accidental prior balances on `to`;\n                pushTokenAmounts[i] = IERC20(tokens[i]).balanceOf(to);\n            }\n        }\n        if (owner != to) {\n            // if we pull as a strategy, make sure everything is pushed\n            IIntegrationVault(to).push(tokens, pushTokenAmounts, options);\n            // any accidental prior balances + push leftovers\n            uint256[] memory reclaimed = IIntegrationVault(to).reclaimTokens(tokens);\n            for (uint256 i = 0; i < tokenAmounts.length; i++) {\n                // equals to exactly how much is pushed\n                actualTokenAmounts[i] = actualTokenAmounts[i] >= reclaimed[i]\n                    ? actualTokenAmounts[i] - reclaimed[i]\n                    : 0;\n            }\n        }\n    }\n\n    /// @inheritdoc IntegrationVault\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, IntegrationVault) returns (bool) {\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IERC20Vault).interfaceId);\n    }\n}\n"
    },
    "contracts/vaults/ERC20VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IERC20VaultGovernance.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../interfaces/vaults/IERC20VaultGovernance.sol\";\nimport \"./VaultGovernance.sol\";\nimport \"../utils/ContractMeta.sol\";\n\n/// @notice Governance that manages all ERC20 Vaults params and can deploy a new ERC20 Vault.\ncontract ERC20VaultGovernance is ContractMeta, IERC20VaultGovernance, VaultGovernance {\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    constructor(InternalParams memory internalParams_) VaultGovernance(internalParams_) {}\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ERC20VaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IERC20VaultGovernance\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IERC20Vault vault, uint256 nft)\n    {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IERC20Vault(vaddr);\n        vault.initialize(nft, vaultTokens_);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, \"\", owner_, vaddr, nft);\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IERC20VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\nimport \"./IERC20Vault.sol\";\nimport \"./IVaultGovernance.sol\";\n\ninterface IERC20VaultGovernance is IVaultGovernance {\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IERC20Vault vault, uint256 nft);\n}\n"
    },
    "contracts/strategies/MStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/external/univ3/ISwapRouter.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/OracleLibrary.sol\";\nimport \"../utils/DefaultAccessControlLateInit.sol\";\nimport \"../utils/ContractMeta.sol\";\n\ncontract MStrategy is ContractMeta, Multicall, DefaultAccessControlLateInit {\n    using SafeERC20 for IERC20;\n\n    // IMMUTABLES\n    uint256 public constant DENOMINATOR = 10**9;\n    bytes4 public constant APPROVE_SELECTOR = 0x095ea7b3;\n    bytes4 public constant EXACT_INPUT_SINGLE_SELECTOR = ISwapRouter.exactInputSingle.selector;\n\n    address[] public tokens;\n    IERC20Vault public erc20Vault;\n    IIntegrationVault public moneyVault;\n    IUniswapV3Pool public pool;\n    INonfungiblePositionManager public positionManager;\n    ISwapRouter public router;\n\n    // INTERNAL STATE\n    int24 public lastRebalanceTick;\n\n    // MUTABLE PARAMS\n\n    struct OracleParams {\n        uint32 oracleObservationDelta;\n        uint24 maxTickDeviation;\n        uint256 maxSlippageD;\n    }\n\n    struct RatioParams {\n        int24 tickMin;\n        int24 tickMax;\n        int24 minTickRebalanceThreshold;\n        int24 tickNeighborhood;\n        int24 tickIncrease;\n        uint256 erc20MoneyRatioD;\n        uint256 minErc20MoneyRatioDeviation0D;\n        uint256 minErc20MoneyRatioDeviation1D;\n    }\n\n    OracleParams public oracleParams;\n    RatioParams public ratioParams;\n\n    /// @notice Deploys a new contract\n    /// @param positionManager_ Uniswap V3 position manager\n    /// @param router_ Uniswap V3 swap router\n    constructor(INonfungiblePositionManager positionManager_, ISwapRouter router_) {\n        require(address(positionManager_) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(router_) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        positionManager = positionManager_;\n        router = router_;\n        DefaultAccessControlLateInit.init(address(this));\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice UniV3 pool price stats\n    /// @return averageTick Average tick according to oracle and oracleParams.maxTickDeviation\n    /// @return deviation Current pool tick - average tick\n    function getAverageTick() external view returns (int24 averageTick, int24 deviation) {\n        return _getAverageTick(pool);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Set initial values.\n    /// @dev Can be only called once.\n    /// @param positionManager_ Uniswap V3 position manager\n    /// @param router_ Uniswap V3 swap router\n    /// @param tokens_ Tokens under management\n    /// @param erc20Vault_ erc20Vault of the Strategy\n    /// @param moneyVault_ moneyVault of the Strategy\n    /// @param fee_ Uniswap V3 fee for the pool (needed for oracle and swaps)\n    /// @param admin_ Admin of the strategy\n    function initialize(\n        INonfungiblePositionManager positionManager_,\n        ISwapRouter router_,\n        address[] memory tokens_,\n        IERC20Vault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        uint24 fee_,\n        address admin_\n    ) external {\n        DefaultAccessControlLateInit.init(admin_); // call once is checked here\n        require(tokens_.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        address[] memory erc20Tokens = erc20Vault_.vaultTokens();\n        address[] memory moneyTokens = moneyVault_.vaultTokens();\n        require(erc20Tokens.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        require(moneyTokens.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        for (uint256 i = 0; i < 2; i++) {\n            require(erc20Tokens[i] == tokens_[i], ExceptionsLibrary.INVARIANT);\n            require(moneyTokens[i] == tokens_[i], ExceptionsLibrary.INVARIANT);\n        }\n        positionManager = positionManager_;\n        router = router_;\n        erc20Vault = erc20Vault_;\n        moneyVault = moneyVault_;\n        tokens = tokens_;\n        IUniswapV3Factory factory = IUniswapV3Factory(positionManager_.factory());\n        pool = IUniswapV3Pool(factory.getPool(tokens[0], tokens[1], fee_));\n        require(address(pool) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n    }\n\n    /// @notice Deploy a new strategy.\n    /// @param tokens_ Tokens under management\n    /// @param erc20Vault_ erc20Vault of the Strategy\n    /// @param moneyVault_ moneyVault of the Strategy\n    /// @param fee_ Uniswap V3 fee for the pool (needed for oracle and swaps)\n    /// @param admin_ Admin of the new strategy\n    function createStrategy(\n        address[] memory tokens_,\n        IERC20Vault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        uint24 fee_,\n        address admin_\n    ) external returns (MStrategy strategy) {\n        strategy = MStrategy(Clones.clone(address(this)));\n        strategy.initialize(positionManager, router, tokens_, erc20Vault_, moneyVault_, fee_, admin_);\n    }\n\n    /// @notice Perform a rebalance according to target ratios\n    /// @param minTokensAmount Lower bounds for amountOut of tokens, that we want to get after swap via SwapRouter\n    /// @param vaultOptions Parameters of money vault for operations with it\n    /// @return poolAmounts The amount of each token that was pulled from erc20Vault to the money vault if positive, otherwise vice versa\n    /// @return tokenAmounts The amount of each token passed to and from SwapRouter dependings on zeroToOne\n    /// @return zeroToOne Flag, that true if we swapped amount of zero token to first token, otherwise false\n    function rebalance(uint256[] memory minTokensAmount, bytes memory vaultOptions)\n        external\n        returns (\n            int256[] memory poolAmounts,\n            uint256[] memory tokenAmounts,\n            bool zeroToOne\n        )\n    {\n        _requireAtLeastOperator();\n        SwapToTargetParams memory params;\n        params.tokens = tokens;\n        params.pool = pool;\n        params.router = router;\n        params.erc20Vault = erc20Vault;\n        params.moneyVault = moneyVault;\n        tokenAmounts = new uint256[](2);\n        {\n            uint256 amountIn;\n            uint8 index;\n            uint256 amountOut;\n            (amountIn, index, amountOut) = _rebalanceTokens(\n                params,\n                minTokensAmount,\n                ratioParams.minTickRebalanceThreshold,\n                vaultOptions\n            );\n            if (index == 0) {\n                zeroToOne = true;\n                tokenAmounts[0] = amountIn;\n                tokenAmounts[1] = amountOut;\n            } else {\n                zeroToOne = false;\n                tokenAmounts[0] = amountOut;\n                tokenAmounts[1] = amountIn;\n            }\n        }\n        uint256[] memory minDeviations = new uint256[](2);\n        minDeviations[0] = ratioParams.minErc20MoneyRatioDeviation0D;\n        minDeviations[1] = ratioParams.minErc20MoneyRatioDeviation1D;\n        poolAmounts = _rebalancePools(params.erc20Vault, params.moneyVault, params.tokens, minDeviations, vaultOptions);\n    }\n\n    /// @notice Manually pull tokens from fromVault to toVault\n    /// @param fromVault Pull tokens from this vault\n    /// @param toVault Pull tokens to this vault\n    /// @param tokenAmounts Token amounts to pull\n    function manualPull(\n        IIntegrationVault fromVault,\n        IIntegrationVault toVault,\n        uint256[] memory tokenAmounts,\n        bytes memory vaultOptions\n    ) external {\n        _requireAdmin();\n        fromVault.pull(address(toVault), tokens, tokenAmounts, vaultOptions);\n    }\n\n    /// @notice Set new Oracle params\n    /// @param params Params to set\n    function setOracleParams(OracleParams memory params) external {\n        _requireAdmin();\n        require((params.maxSlippageD > 0) && (params.maxSlippageD <= DENOMINATOR), ExceptionsLibrary.INVARIANT);\n\n        oracleParams = params;\n        emit SetOracleParams(tx.origin, msg.sender, params);\n    }\n\n    /// @notice Set new Ratio params\n    /// @param params Params to set\n    function setRatioParams(RatioParams memory params) external {\n        _requireAdmin();\n        require(\n            (params.tickMin <= params.tickMax) &&\n                (params.erc20MoneyRatioD <= DENOMINATOR) &&\n                (params.minErc20MoneyRatioDeviation0D <= DENOMINATOR) &&\n                (params.minErc20MoneyRatioDeviation1D <= DENOMINATOR) &&\n                (params.tickMin >= TickMath.MIN_TICK) &&\n                (params.tickMax <= TickMath.MAX_TICK) &&\n                (params.tickNeighborhood >= 0) &&\n                (params.tickNeighborhood <= TickMath.MAX_TICK) &&\n                (params.tickIncrease >= 0) &&\n                (params.tickIncrease <= TickMath.MAX_TICK),\n            ExceptionsLibrary.INVARIANT\n        );\n\n        ratioParams = params;\n        emit SetRatioParams(tx.origin, msg.sender, params);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"MStrategy\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _priceX96FromTick(int24 _tick) internal pure returns (uint256) {\n        uint256 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(_tick);\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, CommonLibrary.Q96);\n    }\n\n    function _targetTokenRatioD(\n        int24 tick,\n        int24 tickMin,\n        int24 tickMax\n    ) internal pure returns (uint256) {\n        if (tick <= tickMin) {\n            return DENOMINATOR;\n        }\n        if (tick >= tickMax) {\n            return 0;\n        }\n        return (uint256(uint24(tickMax - tick)) * DENOMINATOR) / uint256(uint24(tickMax - tickMin));\n    }\n\n    function _getAverageTickChecked(IUniswapV3Pool pool_) internal view returns (int24) {\n        (int24 tick, int24 deviation) = _getAverageTick(pool_);\n        uint24 absoluteDeviation = deviation < 0 ? uint24(-deviation) : uint24(deviation);\n        require(absoluteDeviation < oracleParams.maxTickDeviation, ExceptionsLibrary.INVARIANT);\n        return tick;\n    }\n\n    function _getAverageTick(IUniswapV3Pool pool_) internal view returns (int24 averageTick, int24 tickDeviation) {\n        uint32 oracleObservationDelta = oracleParams.oracleObservationDelta;\n        (, int24 tick, , , , , ) = pool_.slot0();\n        bool withFail = false;\n        (averageTick, , withFail) = OracleLibrary.consult(address(pool_), oracleObservationDelta);\n        // Fails when we dont have observations, so return spot tick as this was the last trade price\n        if (withFail) {\n            averageTick = tick;\n        }\n        tickDeviation = tick - averageTick;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _rebalancePools(\n        IIntegrationVault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        address[] memory tokens_,\n        uint256[] memory minDeviations,\n        bytes memory vaultOptions\n    ) internal returns (int256[] memory tokenAmounts) {\n        uint256 erc20MoneyRatioD = ratioParams.erc20MoneyRatioD;\n        (uint256[] memory erc20Tvl, ) = erc20Vault_.tvl();\n        (uint256[] memory moneyTvl, ) = moneyVault_.tvl();\n        tokenAmounts = new int256[](2);\n        uint256 max = type(uint256).max / 2;\n        bool hasSignificantDeltas = false;\n        for (uint256 i = 0; i < 2; i++) {\n            uint256 targetErc20Token = FullMath.mulDiv(erc20Tvl[i] + moneyTvl[i], erc20MoneyRatioD, DENOMINATOR);\n            uint256 absoluteTokenAmount = 0;\n            if (targetErc20Token > erc20Tvl[i]) {\n                absoluteTokenAmount = targetErc20Token - erc20Tvl[i];\n            } else {\n                absoluteTokenAmount = erc20Tvl[i] - targetErc20Token;\n            }\n            require(absoluteTokenAmount < max, ExceptionsLibrary.LIMIT_OVERFLOW);\n            if (targetErc20Token > erc20Tvl[i]) {\n                tokenAmounts[i] = int256(absoluteTokenAmount);\n            } else {\n                tokenAmounts[i] = -int256(absoluteTokenAmount);\n            }\n            if (absoluteTokenAmount >= minDeviations[i]) {\n                hasSignificantDeltas = true;\n            }\n        }\n\n        if (!hasSignificantDeltas) {\n            return new int256[](2);\n        } else if ((tokenAmounts[0] <= 0) && (tokenAmounts[1] <= 0)) {\n            uint256[] memory amounts = new uint256[](2);\n            amounts[0] = uint256(-tokenAmounts[0]);\n            amounts[1] = uint256(-tokenAmounts[1]);\n            erc20Vault_.pull(address(moneyVault_), tokens_, amounts, vaultOptions);\n        } else if ((tokenAmounts[0] >= 0) && (tokenAmounts[1] >= 0)) {\n            uint256[] memory amounts = new uint256[](2);\n            amounts[0] = uint256(tokenAmounts[0]);\n            amounts[1] = uint256(tokenAmounts[1]);\n            moneyVault_.pull(address(erc20Vault_), tokens_, amounts, vaultOptions);\n        } else {\n            for (uint256 i = 0; i < 2; i++) {\n                uint256[] memory amounts = new uint256[](2);\n                if (tokenAmounts[i] > 0) {\n                    amounts[i] = uint256(tokenAmounts[i]);\n                    moneyVault_.pull(address(erc20Vault_), tokens_, amounts, vaultOptions);\n                } else if (tokenAmounts[i] < 0) {\n                    amounts[i] = uint256(-tokenAmounts[i]);\n                    erc20Vault_.pull(address(moneyVault_), tokens_, amounts, vaultOptions);\n                }\n            }\n        }\n        emit RebalancedPools(tokenAmounts);\n    }\n\n    function _rebalanceTokens(\n        SwapToTargetParams memory params,\n        uint256[] memory minTokensAmount,\n        int24 minTickRebalanceThreshold_,\n        bytes memory vaultOptions\n    )\n        internal\n        returns (\n            uint256, // amountIn     - amount of token, that we pushed into SwapRouter\n            uint8, // index        - index of token, that we pushed into SwapRouter\n            uint256 // amountOut    - amount of token, that we recieved from SwapRouter\n        )\n    {\n        uint256 token0;\n        uint256 targetToken0;\n        {\n            uint256 targetTokenRatioD;\n            {\n                int24 tick = _getAverageTickChecked(params.pool);\n                if (ratioParams.tickMin + ratioParams.tickNeighborhood > tick) {\n                    ratioParams.tickMin =\n                        (tick < ratioParams.tickMin ? tick : ratioParams.tickMin) -\n                        ratioParams.tickIncrease;\n                    if (ratioParams.tickMin < TickMath.MIN_TICK) {\n                        ratioParams.tickMin = TickMath.MIN_TICK;\n                    }\n                }\n                if (ratioParams.tickMax - ratioParams.tickNeighborhood < tick) {\n                    ratioParams.tickMax =\n                        (tick > ratioParams.tickMax ? tick : ratioParams.tickMax) +\n                        ratioParams.tickIncrease;\n                    if (ratioParams.tickMax > TickMath.MAX_TICK) {\n                        ratioParams.tickMax = TickMath.MAX_TICK;\n                    }\n                }\n\n                require(\n                    (tick > lastRebalanceTick + minTickRebalanceThreshold_) ||\n                        (tick < lastRebalanceTick - minTickRebalanceThreshold_),\n                    ExceptionsLibrary.LIMIT_UNDERFLOW\n                );\n                lastRebalanceTick = tick;\n                params.priceX96 = _priceX96FromTick(tick);\n                targetTokenRatioD = _targetTokenRatioD(tick, ratioParams.tickMin, ratioParams.tickMax);\n            }\n            (params.erc20Tvl, ) = params.erc20Vault.tvl();\n            uint256 token1;\n            {\n                (uint256[] memory moneyTvl, ) = params.moneyVault.tvl();\n                token0 = params.erc20Tvl[0] + moneyTvl[0];\n                token1 = params.erc20Tvl[1] + moneyTvl[1];\n            }\n\n            uint256 token1InToken0 = FullMath.mulDiv(token1, CommonLibrary.Q96, params.priceX96);\n            targetToken0 = FullMath.mulDiv(token1InToken0 + token0, targetTokenRatioD, DENOMINATOR);\n        }\n\n        if (targetToken0 < token0) {\n            params.amountIn = token0 - targetToken0;\n            params.tokenInIndex = 0;\n        } else {\n            params.amountIn = FullMath.mulDiv(targetToken0 - token0, params.priceX96, CommonLibrary.Q96);\n            params.tokenInIndex = 1;\n        }\n        if (params.amountIn != 0) {\n            uint256 amountOut = _swapToTarget(params, vaultOptions);\n            require(amountOut >= minTokensAmount[params.tokenInIndex ^ 1], ExceptionsLibrary.LIMIT_UNDERFLOW);\n            emit SwappedTokens(params);\n            return (params.amountIn, params.tokenInIndex, amountOut);\n        } else {\n            return (params.amountIn, params.tokenInIndex, 0);\n        }\n    }\n\n    struct SwapToTargetParams {\n        uint256 amountIn;\n        address[] tokens;\n        uint8 tokenInIndex;\n        uint256 priceX96;\n        uint256[] erc20Tvl;\n        IUniswapV3Pool pool;\n        ISwapRouter router;\n        IIntegrationVault erc20Vault;\n        IIntegrationVault moneyVault;\n    }\n\n    function _swapToTarget(SwapToTargetParams memory params, bytes memory vaultOptions)\n        internal\n        returns (uint256 amountOut)\n    {\n        ISwapRouter.ExactInputSingleParams memory swapParams;\n        uint8 tokenInIndex = params.tokenInIndex;\n        uint256 amountIn = params.amountIn;\n        ISwapRouter router_ = params.router;\n        {\n            uint256 priceX96 = params.priceX96;\n            uint256[] memory erc20Tvl = params.erc20Tvl;\n\n            if (amountIn > erc20Tvl[tokenInIndex]) {\n                uint256[] memory tokenAmounts = new uint256[](2);\n                tokenAmounts[tokenInIndex] = amountIn - erc20Tvl[tokenInIndex];\n                params.moneyVault.pull(address(params.erc20Vault), params.tokens, tokenAmounts, vaultOptions);\n                uint256 balance = IERC20(tokens[tokenInIndex]).balanceOf(address(erc20Vault));\n                if (balance < amountIn) {\n                    amountIn = balance;\n                }\n            }\n            uint256 amountOutMinimum;\n            if (tokenInIndex == 1) {\n                amountOutMinimum = FullMath.mulDiv(amountIn, CommonLibrary.Q96, priceX96);\n            } else {\n                amountOutMinimum = FullMath.mulDiv(amountIn, priceX96, CommonLibrary.Q96);\n            }\n            amountOutMinimum = FullMath.mulDiv(amountOutMinimum, DENOMINATOR - oracleParams.maxSlippageD, DENOMINATOR);\n            swapParams = ISwapRouter.ExactInputSingleParams({\n                tokenIn: params.tokens[tokenInIndex],\n                tokenOut: params.tokens[1 - tokenInIndex],\n                fee: params.pool.fee(),\n                recipient: address(erc20Vault),\n                deadline: block.timestamp + 1,\n                amountIn: amountIn,\n                amountOutMinimum: amountOutMinimum,\n                sqrtPriceLimitX96: 0\n            });\n        }\n        bytes memory data = abi.encode(swapParams);\n        erc20Vault.externalCall(tokens[tokenInIndex], APPROVE_SELECTOR, abi.encode(address(router_), amountIn)); // approve\n        bytes memory routerResult = erc20Vault.externalCall(address(router_), EXACT_INPUT_SINGLE_SELECTOR, data); //swap\n        erc20Vault.externalCall(tokens[tokenInIndex], APPROVE_SELECTOR, abi.encode(address(router_), 0)); // reset allowance\n        amountOut = abi.decode(routerResult, (uint256));\n    }\n\n    /// @notice Emitted when pool rebalance is initiated.\n    /// @param tokenAmounts Token amounts for rebalance, negative means erc20Vault => moneyVault and vice versa.\n    event RebalancedPools(int256[] tokenAmounts);\n\n    /// @notice Emitted when swap is initiated.\n    /// @param params Swap params\n    event SwappedTokens(SwapToTargetParams params);\n\n    /// @notice Emitted when Oracle params are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params Updated params\n    event SetOracleParams(address indexed origin, address indexed sender, OracleParams params);\n\n    /// @notice Emitted when Ratio params are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params Updated params\n    event SetRatioParams(address indexed origin, address indexed sender, RatioParams params);\n}\n"
    },
    "contracts/libraries/external/OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"./FullMath.sol\";\nimport \"./TickMath.sol\";\nimport \"../../interfaces/external/univ3/IUniswapV3Pool.sol\";\n\n/// @title Oracle library\n/// @notice Provides functions to integrate with V3 pool oracle\nlibrary OracleLibrary {\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\n    /// @param pool Address of the pool that we want to observe\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return withFail Flag that true if function observe of IUniswapV3Pool reverts with some error\n    function consult(address pool, uint32 secondsAgo)\n        internal\n        view\n        returns (\n            int24 arithmeticMeanTick,\n            uint128 harmonicMeanLiquidity,\n            bool withFail\n        )\n    {\n        require(secondsAgo != 0, \"BP\");\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        try IUniswapV3Pool(pool).observe(secondsAgos) returns (\n            int56[] memory tickCumulatives,\n            uint160[] memory secondsPerLiquidityCumulativeX128s\n        ) {\n            int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n            uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[1] -\n                secondsPerLiquidityCumulativeX128s[0];\n\n            arithmeticMeanTick = int24(tickCumulativesDelta / int56(uint56(secondsAgo)));\n            // Always round to negative infinity\n            if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(secondsAgo)) != 0))\n                arithmeticMeanTick--;\n\n            // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\n            uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\n            harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\n        } catch {\n            return (0, 0, true);\n        }\n    }\n}\n"
    },
    "contracts/test/MockMStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../strategies/MStrategy.sol\";\n\ncontract MockMStrategy is MStrategy {\n    constructor(INonfungiblePositionManager positionManager_, ISwapRouter router_)\n        MStrategy(positionManager_, router_)\n    {}\n\n    function targetTokenRatioD(\n        int24 tick,\n        int24 tickMin,\n        int24 tickMax\n    ) external pure returns (uint256) {\n        return _targetTokenRatioD(tick, tickMin, tickMax);\n    }\n\n    function swapToTarget(SwapToTargetParams memory params, bytes memory vaultOptions) external {\n        _swapToTarget(params, vaultOptions);\n    }\n\n    function rebalancePools(\n        IIntegrationVault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        address[] memory tokens_,\n        uint256[] memory minDeviations,\n        bytes memory vaultOptions\n    ) external returns (int256[] memory) {\n        return _rebalancePools(erc20Vault_, moneyVault_, tokens_, minDeviations, vaultOptions);\n    }\n}\n"
    },
    "contracts/oracles/UniV3Oracle.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/oracles/IUniV3Oracle.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/OracleLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../utils/DefaultAccessControl.sol\";\nimport \"../utils/ContractMeta.sol\";\n\ncontract UniV3Oracle is ContractMeta, IUniV3Oracle, DefaultAccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @inheritdoc IUniV3Oracle\n    uint32 public constant LOW_OBS_DELTA = 150; // 2.5 min\n    /// @inheritdoc IUniV3Oracle\n    uint32 public constant MID_OBS_DELTA = 450; // 7.5 min\n    /// @inheritdoc IUniV3Oracle\n    uint32 public constant HIGH_OBS_DELTA = 1800; // 30 min\n\n    /// @inheritdoc IUniV3Oracle\n    IUniswapV3Factory public immutable factory;\n    /// @inheritdoc IUniV3Oracle\n    mapping(address => mapping(address => IUniswapV3Pool)) public poolsIndex;\n    EnumerableSet.AddressSet private _pools;\n\n    constructor(\n        IUniswapV3Factory factory_,\n        IUniswapV3Pool[] memory pools,\n        address admin\n    ) DefaultAccessControl(admin) {\n        factory = factory_;\n        _addUniV3Pools(pools);\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @dev Logic of this function is next:\n    /// If there is no initialized pool for the passed tokens, empty arrays will be returned.\n    /// Depending on safetyIndicesSet if the 1st bit in safetyIndicesSet is non-zero, then the response will contain the spot price.\n    /// If there is a non-zero 2nd bit in the safetyIndicesSet and the corresponding position in the pool was created no later than LOW_OBS_DELTA seconds ago,\n    /// then the average price for the last LOW_OBS_DELTA seconds will be returned. The same logic exists for the 3rd and MID_OBS_DELTA, and 4th index and HIGH_OBS_DELTA.\n    /// @inheritdoc IOracle\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        bool isSwapped = false;\n        if (token0 > token1) {\n            (token0, token1) = (token1, token0);\n            isSwapped = true;\n        }\n        IUniswapV3Pool pool = poolsIndex[token0][token1];\n        if (address(pool) == address(0)) {\n            return (pricesX96, safetyIndices);\n        }\n        uint256[] memory sqrtPricesX96 = new uint256[](4);\n        pricesX96 = new uint256[](4);\n        safetyIndices = new uint256[](4);\n        uint256 len = 0;\n        if (safetyIndicesSet & 0x2 > 0) {\n            (uint256 spotSqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool).slot0();\n            sqrtPricesX96[len] = spotSqrtPriceX96;\n            safetyIndices[len] = 1;\n            len += 1;\n        }\n        for (uint256 i = 2; i < 5; i++) {\n            if (safetyIndicesSet & (1 << i) > 0) {\n                uint32 observationTimeDelta = _obsTimeForSafety(i);\n                (int24 tickAverage, , bool withFail) = OracleLibrary.consult(address(pool), observationTimeDelta);\n                if (withFail) {\n                    break;\n                }\n                sqrtPricesX96[len] = TickMath.getSqrtRatioAtTick(tickAverage);\n                safetyIndices[len] = i;\n                len += 1;\n            }\n        }\n        assembly {\n            mstore(pricesX96, len)\n            mstore(safetyIndices, len)\n        }\n        for (uint256 i = 0; i < len; i++) {\n            pricesX96[i] = FullMath.mulDiv(sqrtPricesX96[i], sqrtPricesX96[i], CommonLibrary.Q96);\n            if (isSwapped) {\n                pricesX96[i] = FullMath.mulDiv(CommonLibrary.Q96, CommonLibrary.Q96, pricesX96[i]);\n            }\n        }\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IUniV3Oracle).interfaceId == interfaceId;\n    }\n\n    // -------------------------  EXTERNAL, MUTATING  ------------------------------\n\n    /// @inheritdoc IUniV3Oracle\n    function addUniV3Pools(IUniswapV3Pool[] memory pools) external {\n        _requireAdmin();\n        _addUniV3Pools(pools);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV3Oracle\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _obsTimeForSafety(uint256 safety) internal pure returns (uint32) {\n        if (safety == 2) {\n            return LOW_OBS_DELTA;\n        } else if (safety == 3) {\n            return MID_OBS_DELTA;\n        } else {\n            require(safety == 4, ExceptionsLibrary.INVALID_VALUE);\n            return HIGH_OBS_DELTA;\n        }\n    }\n\n    function _addUniV3Pools(IUniswapV3Pool[] memory pools) internal {\n        IUniswapV3Pool[] memory replaced = new IUniswapV3Pool[](pools.length);\n        IUniswapV3Pool[] memory added = new IUniswapV3Pool[](pools.length);\n        uint256 j;\n        uint256 k;\n        for (uint256 i = 0; i < pools.length; i++) {\n            IUniswapV3Pool pool = pools[i];\n            address token0 = pool.token0();\n            address token1 = pool.token1();\n            _pools.add(address(pool));\n            IUniswapV3Pool currentPool = poolsIndex[token0][token1];\n            if (address(currentPool) != address(0)) {\n                replaced[j] = currentPool;\n                j += 1;\n            } else {\n                added[k] = pool;\n                k += 1;\n            }\n            poolsIndex[token0][token1] = pool;\n        }\n        assembly {\n            mstore(replaced, j)\n            mstore(added, k)\n        }\n        emit PoolsUpdated(tx.origin, msg.sender, added, replaced);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new pool is added or updated and become available for oracle prices\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param pools UniV3 pools added\n    /// @param replacedPools UniV3 pools updated\n    event PoolsUpdated(\n        address indexed origin,\n        address indexed sender,\n        IUniswapV3Pool[] pools,\n        IUniswapV3Pool[] replacedPools\n    );\n}\n"
    },
    "contracts/utils/LStrategyHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/cowswap/ICowswapSettlement.sol\";\nimport \"../interfaces/utils/ILStrategyHelper.sol\";\nimport \"../libraries/external/GPv2Order.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/external/TickMath.sol\";\n\ncontract LStrategyHelper is ILStrategyHelper {\n    // IMMUTABLES\n    address public immutable cowswap;\n\n    constructor(address cowswap_) {\n        cowswap = cowswap_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    function checkOrder(\n        GPv2Order.Data memory order,\n        bytes calldata uuid,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        uint256 deadline,\n        address erc20Vault,\n        uint256 fee\n    ) external view {\n        require(deadline >= block.timestamp, ExceptionsLibrary.TIMESTAMP);\n        (bytes32 orderHashFromUid, , ) = GPv2Order.extractOrderUidParams(uuid);\n        bytes32 domainSeparator = ICowswapSettlement(cowswap).domainSeparator();\n        bytes32 orderHash = GPv2Order.hash(order, domainSeparator);\n        require(orderHash == orderHashFromUid, ExceptionsLibrary.INVARIANT);\n        require(address(order.sellToken) == tokenIn, ExceptionsLibrary.INVALID_TOKEN);\n        require(address(order.buyToken) == tokenOut, ExceptionsLibrary.INVALID_TOKEN);\n        require(order.sellAmount == amountIn, ExceptionsLibrary.INVALID_VALUE);\n        require(order.buyAmount >= minAmountOut, ExceptionsLibrary.LIMIT_UNDERFLOW);\n        require(order.validTo <= deadline, ExceptionsLibrary.TIMESTAMP);\n        require(order.receiver == erc20Vault, ExceptionsLibrary.FORBIDDEN);\n        require(order.kind == GPv2Order.KIND_SELL, ExceptionsLibrary.INVALID_VALUE);\n        require(order.sellTokenBalance == GPv2Order.BALANCE_ERC20, ExceptionsLibrary.INVALID_VALUE);\n        require(order.buyTokenBalance == GPv2Order.BALANCE_ERC20, ExceptionsLibrary.INVALID_VALUE);\n        require(order.feeAmount <= fee, ExceptionsLibrary.INVALID_VALUE);\n    }\n\n    function tickFromPriceX96(uint256 priceX96) external pure returns (int24) {\n        uint256 sqrtPriceX96 = CommonLibrary.sqrtX96(priceX96);\n        return TickMath.getTickAtSqrtRatio(uint160(sqrtPriceX96));\n    }\n}\n"
    },
    "contracts/interfaces/external/cowswap/ICowswapSettlement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICowswapSettlement {\n    function domainSeparator() external view returns (bytes32);\n}\n"
    },
    "contracts/test/libraries/TickMathTest.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../../libraries/external/TickMath.sol\";\n\ncontract TickMathTest {\n    function getSqrtRatioAtTick(int24 tick) external pure returns (uint160 sqrtPriceX96) {\n        return TickMath.getSqrtRatioAtTick(tick);\n    }\n\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) external pure returns (int24 tick) {\n        return TickMath.getTickAtSqrtRatio(sqrtPriceX96);\n    }\n}\n"
    },
    "contracts/test/MockOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/oracles/IOracle.sol\";\n\ncontract MockOracle is IOracle {\n    uint256 public currentPriceX96 = 1 << 96;\n    uint256 public safetyIndex = 1;\n\n    function updatePrice(uint256 newPrice) public {\n        currentPriceX96 = newPrice;\n    }\n\n    function updateSafetyIndex(uint256 newSafetyIndex) public {\n        safetyIndex = newSafetyIndex;\n    }\n\n    function priceX96(\n        address,\n        address,\n        uint256\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        pricesX96 = new uint256[](2);\n        safetyIndices = new uint256[](2);\n        for (uint256 i = 0; i < 2; ++i) {\n            pricesX96[i] = currentPriceX96;\n            safetyIndices[i] = safetyIndex;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/utils/BatchCall.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\ncontract BatchCall {\n    function batchcall(address[] calldata targets, bytes[] calldata data) external returns (bytes[] memory results) {\n        require(targets.length == data.length, ExceptionsLibrary.INVALID_LENGTH);\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(targets[i], data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "contracts/utils/DefaultProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract DefaultProxy is TransparentUpgradeableProxy {\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/utils/DefaultProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\ncontract DefaultProxyAdmin is ProxyAdmin {}\n"
    },
    "contracts/test/libraries/SemverLibraryTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../../libraries/SemverLibrary.sol\";\n\ncontract SemverLibraryTest {\n    function stringifySemver(uint256 input) external pure returns (string memory) {\n        return SemverLibrary.stringifySemver(input);\n    }\n\n    function numberifySemver(string memory input) external pure returns (uint256) {\n        return SemverLibrary.numberifySemver(input);\n    }\n}\n"
    },
    "contracts/validators/ERC20Validator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/validators/IValidator.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract ERC20Validator is ContractMeta, Validator {\n    bytes4 public constant APPROVE_SELECTOR = IERC20.approve.selector;\n\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address sender,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {\n        require(value == 0, ExceptionsLibrary.INVALID_VALUE);\n        if (selector == APPROVE_SELECTOR) {\n            address spender;\n            assembly {\n                spender := calldataload(data.offset)\n            }\n            _verifyApprove(sender, addr, spender);\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ERC20Validator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _verifyApprove(\n        address sender,\n        address token,\n        address spender\n    ) private view {\n        IProtocolGovernance protocolGovernance = _validatorParams.protocolGovernance;\n        if (!protocolGovernance.hasPermission(token, PermissionIdsLibrary.ERC20_TRANSFER)) {\n            revert(ExceptionsLibrary.FORBIDDEN);\n        }\n        if (protocolGovernance.hasPermission(spender, PermissionIdsLibrary.ERC20_APPROVE)) {\n            return;\n        }\n        if (\n            protocolGovernance.hasPermission(spender, PermissionIdsLibrary.ERC20_APPROVE_RESTRICTED) &&\n            protocolGovernance.hasPermission(sender, PermissionIdsLibrary.TRUSTED_STRATEGY)\n        ) {\n            return;\n        }\n        revert(ExceptionsLibrary.FORBIDDEN);\n    }\n}\n"
    },
    "contracts/test/MockNonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"./MockUniswapV3Factory.sol\";\n\ncontract MockNonfungiblePositionManager is INonfungiblePositionManager {\n    MockUniswapV3Factory uniV3Factory;\n\n    constructor(MockUniswapV3Factory factory_) {\n        uniV3Factory = factory_;\n    }\n\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        )\n    {}\n\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {}\n\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {}\n\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1)\n    {}\n\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1) {}\n\n    function burn(uint256 tokenId) external payable {}\n\n    function balanceOf(address owner) external view returns (uint256 balance) {}\n\n    function ownerOf(uint256 tokenId) external view returns (address owner) {}\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external {}\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external {}\n\n    function approve(address to, uint256 tokenId) external {}\n\n    function getApproved(uint256 tokenId) external view returns (address operator) {}\n\n    function setApprovalForAll(address operator, bool _approved) external {}\n\n    function isApprovedForAll(address owner, address operator) external view returns (bool) {}\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external {}\n\n    function factory() external view returns (address) {\n        return address(uniV3Factory);\n    }\n\n    function WETH9() external view returns (address) {}\n\n    function supportsInterface(bytes4) external pure returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/test/MockUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"./MockUniswapV3Pool.sol\";\n\ncontract MockUniswapV3Factory is IUniswapV3Factory {\n    MockUniswapV3Pool uniV3Pool;\n\n    constructor(MockUniswapV3Pool pool_) {\n        uniV3Pool = pool_;\n    }\n\n    function owner() external view returns (address) {}\n\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24) {}\n\n    function getPool(\n        address,\n        address,\n        uint24\n    ) external view returns (address pool) {\n        pool = address(uniV3Pool);\n    }\n\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool) {}\n\n    function setOwner(address _owner) external {}\n\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external {}\n}\n"
    },
    "contracts/test/MockUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\n\ncontract MockUniswapV3Pool is IUniswapV3Pool {\n    struct Slot0Params {\n        uint160 sqrtPriceX96;\n        int24 tick;\n        uint16 observationIndex;\n        uint16 observationCardinality;\n        uint16 observationCardinalityNext;\n        uint8 feeProtocol;\n        bool unlocked;\n    }\n\n    struct ObservationsParams {\n        uint32 blockTimestamp;\n        int56 tickCumulative;\n        uint160 secondsPerLiquidityCumulativeX128;\n        bool initialized;\n        uint32 blockTimestampLast;\n        int56 tickCumulativeLast;\n        uint8 observationsCalled;\n    }\n\n    Slot0Params private slotParams;\n    ObservationsParams private observationsParams;\n\n    function initialize(uint160 sqrtPriceX96) external {}\n\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1) {}\n\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1) {}\n\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1) {}\n\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1) {}\n\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external {}\n\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external {}\n\n    function factory() external view returns (address) {}\n\n    function token0() external view returns (address) {}\n\n    function token1() external view returns (address) {}\n\n    function fee() external view returns (uint24) {}\n\n    function tickSpacing() external view returns (int24) {}\n\n    function maxLiquidityPerTick() external view returns (uint128) {}\n\n    function setSlot0Params(\n        uint160 sqrtPriceX96,\n        int24 tick,\n        uint16 observationIndex,\n        uint16 observationCardinality,\n        uint16 observationCardinalityNext,\n        uint8 feeProtocol,\n        bool unlocked\n    ) external {\n        slotParams.sqrtPriceX96 = sqrtPriceX96;\n        slotParams.tick = tick;\n        slotParams.observationIndex = observationIndex;\n        slotParams.observationCardinality = observationCardinality;\n        slotParams.observationCardinalityNext = observationCardinalityNext;\n        slotParams.feeProtocol = feeProtocol;\n        slotParams.unlocked = unlocked;\n    }\n\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        )\n    {\n        sqrtPriceX96 = slotParams.sqrtPriceX96;\n        tick = slotParams.tick;\n        observationIndex = slotParams.observationIndex;\n        observationCardinality = slotParams.observationCardinality;\n        observationCardinalityNext = slotParams.observationCardinalityNext;\n        feeProtocol = slotParams.feeProtocol;\n        unlocked = slotParams.unlocked;\n    }\n\n    function feeGrowthGlobal0X128() external view returns (uint256) {}\n\n    function feeGrowthGlobal1X128() external view returns (uint256) {}\n\n    function protocolPerformanceFees() external view returns (uint128, uint128) {}\n\n    function liquidity() external view returns (uint128) {}\n\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        )\n    {}\n\n    function tickBitmap(int16 wordPosition) external view returns (uint256) {}\n\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        )\n    {}\n\n    function setObservationsParams(\n        uint32 blockTimestamp,\n        int56 tickCumulative,\n        uint160 secondsPerLiquidityCumulativeX128,\n        bool initialized,\n        uint32 blockTimestampLast,\n        int56 tickCumulativeLast\n    ) external {\n        observationsParams.blockTimestamp = blockTimestamp;\n        observationsParams.tickCumulative = tickCumulative;\n        observationsParams.secondsPerLiquidityCumulativeX128 = secondsPerLiquidityCumulativeX128;\n        observationsParams.initialized = initialized;\n        observationsParams.blockTimestampLast = blockTimestampLast;\n        observationsParams.tickCumulativeLast = tickCumulativeLast;\n        observationsParams.observationsCalled = 0;\n    }\n\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        )\n    {\n        if (index == slotParams.observationIndex) {\n            blockTimestamp = observationsParams.blockTimestamp;\n            tickCumulative = observationsParams.tickCumulative;\n        } else {\n            blockTimestamp = observationsParams.blockTimestampLast;\n            tickCumulative = observationsParams.tickCumulativeLast;\n        }\n        secondsPerLiquidityCumulativeX128 = observationsParams.secondsPerLiquidityCumulativeX128;\n        initialized = observationsParams.initialized;\n    }\n\n    int56 observeCumulativeTick_;\n\n    function setObserveTick(int56 tick) external {\n        observeCumulativeTick_ = tick;\n    }\n\n    function observe(uint32[] calldata)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\n    {\n        tickCumulatives = new int56[](2);\n        tickCumulatives[0] = observeCumulativeTick_;\n        tickCumulatives[1] = observeCumulativeTick_ * 2;\n        secondsPerLiquidityCumulativeX128s = new uint160[](2);\n        secondsPerLiquidityCumulativeX128s[1] = 1;\n    }\n}\n"
    },
    "contracts/test/MockValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ3/ISwapRouter.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../validators/Validator.sol\";\n\ncontract MockValidator is Validator {\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {}\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _verifyMultiCall(\n        IVault vault,\n        address recipient,\n        bytes memory path\n    ) private view {}\n\n    function _verifySingleCall(\n        IVault,\n        address,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) private view {}\n\n    function _verifyPathItem(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) private view {}\n}\n"
    },
    "contracts/test/MockSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport \"../interfaces/external/univ3/ISwapRouter.sol\";\n\ncontract MockSwapRouter is ISwapRouter {\n    struct ExactInputSingleArgs {\n        uint256 amountOut;\n    }\n\n    ExactInputSingleArgs private exactInputSingleArgs;\n\n    function setExactInputSingleArgs(uint256 amountOut_) external {\n        exactInputSingleArgs.amountOut = amountOut_;\n    }\n\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut) {\n        amountOut = 0;\n        emit ExactInputSingle(params.amountIn);\n    }\n\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut) {}\n\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn) {}\n\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn) {}\n\n    event ExactInputSingle(uint256 amountIn);\n}\n"
    },
    "contracts/test/MockERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\ncontract MockERC165 is ERC165 {\n    mapping(bytes4 => bool) private _allowedInterfaceIdsMap;\n\n    function allowInterfaceId(bytes4 interfaceId) public {\n        _allowedInterfaceIdsMap[interfaceId] = true;\n    }\n\n    function denyInterfaceId(bytes4 interfaceId) public {\n        delete _allowedInterfaceIdsMap[interfaceId];\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _allowedInterfaceIdsMap[interfaceId];\n    }\n}\n"
    },
    "contracts/test/MockERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/external/erc/IERC1271.sol\";\nimport \"../libraries/CommonLibrary.sol\";\n\ncontract MockERC1271 is ERC165, IERC1271 {\n    address public signer;\n\n    function setSigner(address newSigner) public {\n        signer = newSigner;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\n        return (interfaceId == type(IERC165).interfaceId) || (interfaceId == type(IERC1271).interfaceId);\n    }\n\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue) {\n        if (CommonLibrary.recoverSigner(_hash, _signature) == signer) {\n            return 0x1626ba7e;\n        } else {\n            return 0xffffffff;\n        }\n    }\n}\n"
    },
    "contracts/test/MockERC20Token.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../utils/ERC20Token.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\ncontract MockERC20Token is ERC20Token {\n    function initERC20(string memory _name, string memory _symbol) external {\n        _initERC20(_name, _symbol);\n    }\n\n    function mint(address to, uint256 amount) external virtual {\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint256 amount) external virtual {\n        _burn(from, amount);\n    }\n}\n"
    },
    "contracts/test/MockCowswap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MockCowswap {\n    struct Data {\n        IERC20 sellToken;\n        IERC20 buyToken;\n        address receiver;\n        uint256 sellAmount;\n        uint256 buyAmount;\n        uint32 validTo;\n        bytes32 appData;\n        uint256 feeAmount;\n        bytes32 kind;\n        bool partiallyFillable;\n        bytes32 sellTokenBalance;\n        bytes32 buyTokenBalance;\n    }\n\n    bytes32 internal constant TYPE_HASH = hex\"d5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489\";\n    bytes32 public immutable domainSeparator;\n\n    bytes32 private constant DOMAIN_TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    bytes32 private constant DOMAIN_NAME = keccak256(\"Gnosis Protocol\");\n    bytes32 private constant DOMAIN_VERSION = keccak256(\"v2\");\n\n    mapping(bytes => bool) public preSignature;\n\n    function setPreSignature(bytes calldata orderUid, bool signed) external {\n        preSignature[orderUid] = signed;\n    }\n\n    constructor() {\n        uint256 chainId;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n        domainSeparator = keccak256(abi.encode(DOMAIN_TYPE_HASH, DOMAIN_NAME, DOMAIN_VERSION, chainId, address(this)));\n    }\n\n    uint256 internal constant UID_LENGTH = 56;\n\n    function extractOrderUidParams(bytes calldata orderUid)\n        internal\n        pure\n        returns (\n            bytes32 orderDigest,\n            address owner,\n            uint32 validTo\n        )\n    {\n        require(orderUid.length == UID_LENGTH, \"GPv2: invalid uid\");\n\n        // Use assembly to efficiently decode packed calldata.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            orderDigest := calldataload(orderUid.offset)\n            owner := shr(96, calldataload(add(orderUid.offset, 32)))\n            validTo := shr(224, calldataload(add(orderUid.offset, 52)))\n        }\n    }\n\n    /// @dev Return the EIP-712 signing hash for the specified order.\n    ///\n    /// @param order The order to compute the EIP-712 signing hash for.\n    /// @param domainSeparatorInternal The EIP-712 domain separator to use.\n    /// @return orderDigest The 32 byte EIP-712 struct hash.\n    function hash(Data memory order, bytes32 domainSeparatorInternal) public pure returns (bytes32 orderDigest) {\n        bytes32 structHash;\n\n        // NOTE: Compute the EIP-712 order struct hash in place. As suggested\n        // in the EIP proposal, noting that the order struct has 10 fields, and\n        // including the type hash `(12 + 1) * 32 = 416` bytes to hash.\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-encodedata>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let dataStart := sub(order, 32)\n            let temp := mload(dataStart)\n            mstore(dataStart, TYPE_HASH)\n            structHash := keccak256(dataStart, 416)\n            mstore(dataStart, temp)\n        }\n\n        // NOTE: Now that we have the struct hash, compute the EIP-712 signing\n        // hash using scratch memory past the free memory pointer. The signing\n        // hash is computed from `\"\\x19\\x01\" || domainSeparator || structHash`.\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory>\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            mstore(freeMemoryPointer, \"\\x19\\x01\")\n            mstore(add(freeMemoryPointer, 2), domainSeparatorInternal)\n            mstore(add(freeMemoryPointer, 34), structHash)\n            orderDigest := keccak256(freeMemoryPointer, 66)\n        }\n    }\n}\n"
    },
    "contracts/validators/CurveValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/curve/I3Pool.sol\";\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract CurveValidator is ContractMeta, Validator {\n    bytes4 public constant EXCHANGE_SELECTOR = 0x3df02124;\n\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address,\n        address addr,\n        uint256,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {\n        IVault vault = IVault(msg.sender);\n        if (selector == EXCHANGE_SELECTOR) {\n            (int128 i, int128 j, , ) = abi.decode(data, (int128, int128, uint256, uint256));\n            require(i != j, ExceptionsLibrary.INVALID_VALUE);\n            address to = I3Pool(addr).coins(uint256(uint128(j)));\n            require(vault.isVaultToken(to), ExceptionsLibrary.INVALID_TOKEN);\n            IProtocolGovernance protocolGovernance = _validatorParams.protocolGovernance;\n            require(\n                protocolGovernance.hasPermission(addr, PermissionIdsLibrary.ERC20_APPROVE),\n                ExceptionsLibrary.FORBIDDEN\n            );\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"CurveValidator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n}\n"
    },
    "contracts/interfaces/external/curve/I3Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface I3Pool {\n    function coins(uint256 id) external view returns (address);\n\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n}\n"
    },
    "contracts/validators/CowswapValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\n// @notice Validator allowing setPreSignature call with any params for cowswap\ncontract CowswapValidator is ContractMeta, Validator {\n    bytes4 public constant PRE_SIGNATURE_SELECTOR = 0xec6cb13f;\n\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inheritdoc IValidator\n    function validate(\n        address,\n        address,\n        uint256,\n        bytes4 selector,\n        bytes calldata\n    ) external pure {\n        // we don't validate TRUSTED_STRATEGY here because it's validated at allowance level\n        if (selector == PRE_SIGNATURE_SELECTOR) {\n            return;\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"CowswapValidator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n}\n"
    },
    "contracts/validators/AllowAllValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract AllowAllValidator is ContractMeta, Validator {\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inheritdoc IValidator\n    function validate(\n        address,\n        address,\n        uint256,\n        bytes4,\n        bytes calldata\n    ) external view {}\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"AllowAllValidator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n}\n"
    },
    "contracts/utils/ERC20RootVaultHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/utils/IERC20RootVaultHelper.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/external/FullMath.sol\";\n\ncontract ERC20RootVaultHelper is IERC20RootVaultHelper {\n    function getTvlToken0(\n        uint256[] calldata tvls,\n        address[] calldata tokens,\n        IOracle oracle\n    ) external view returns (uint256 tvl0) {\n        tvl0 = tvls[0];\n        for (uint256 i = 1; i < tvls.length; i++) {\n            (uint256[] memory pricesX96, ) = oracle.priceX96(tokens[0], tokens[i], 0x30);\n            require(pricesX96.length > 0, ExceptionsLibrary.VALUE_ZERO);\n            uint256 priceX96 = 0;\n            for (uint256 j = 0; j < pricesX96.length; j++) {\n                priceX96 += pricesX96[j];\n            }\n            priceX96 /= pricesX96.length;\n            tvl0 += FullMath.mulDiv(tvls[i], CommonLibrary.Q96, priceX96);\n        }\n    }\n}\n"
    },
    "contracts/test/libraries/CommonTest.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../../libraries/CommonLibrary.sol\";\n\ncontract CommonTest {\n    function sortUint(uint256[] memory arr) external pure returns (uint256[] memory) {\n        CommonLibrary.sortUint(arr);\n        return arr;\n    }\n\n    function isSortedAndUnique(address[] memory tokens) external pure returns (bool) {\n        return CommonLibrary.isSortedAndUnique(tokens);\n    }\n\n    function projectTokenAmounts(\n        address[] memory tokens,\n        address[] memory tokensToProject,\n        uint256[] memory tokenAmountsToProject\n    ) external pure returns (uint256[] memory) {\n        return CommonLibrary.projectTokenAmounts(tokens, tokensToProject, tokenAmountsToProject);\n    }\n\n    function sqrtX96(uint256 xX96) external pure returns (uint256) {\n        return CommonLibrary.sqrtX96(xX96);\n    }\n\n    function sqrt(uint256 x) external pure returns (uint256) {\n        return CommonLibrary.sqrt(x);\n    }\n\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) external pure returns (address) {\n        return CommonLibrary.recoverSigner(_ethSignedMessageHash, _signature);\n    }\n\n    function splitSignature(bytes memory sig)\n        external\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        ) \n    {  \n        return CommonLibrary.splitSignature(sig);\n    }\n}\n"
    },
    "contracts/test/MockLpCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/utils/ILpCallback.sol\";\n\ncontract MockLpCallback is ILpCallback {\n    enum WithdrawCallbackMode {\n        NO_ERROR,\n        EMPTY_ERROR,\n        NON_EMPTY_ERROR\n    }\n\n    WithdrawCallbackMode private _mode;\n\n    constructor(WithdrawCallbackMode mode_) {\n        _mode = mode_;\n    }\n\n    /// @notice Callback function\n    function depositCallback() external {\n        emit DepositCallbackCalled();\n    }\n\n    /// @notice Callback function\n    function withdrawCallback() external {\n        if (_mode == WithdrawCallbackMode.NO_ERROR) {\n            emit WithdrawCallbackCalled();\n        } else if (_mode == WithdrawCallbackMode.EMPTY_ERROR) {\n            require(false);\n        } else {\n            require(_mode == WithdrawCallbackMode.NON_EMPTY_ERROR);\n            require(false, \"Error description\");\n        }\n    }\n\n    /// @notice Emitted when callback in depositCallback called\n    event DepositCallbackCalled();\n\n    /// @notice Emitted when callback in withdrawCallback called\n    event WithdrawCallbackCalled();\n}\n"
    },
    "contracts/test/ContractMetaMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../utils/ContractMeta.sol\";\n\ncontract ContractMetaMock {\n    bytes32 private _contractName;\n    bytes32 private _contractVersion;\n\n    constructor(string memory name_, string memory version_) {\n        _contractName = bytes32(abi.encodePacked(name_));\n        _contractVersion = bytes32(abi.encodePacked(version_));\n    }\n\n    function contractName() external view returns (string memory) {\n        return _bytes32ToString(_contractName);\n    }\n\n    function contractNameBytes() external view returns (bytes32) {\n        return _contractName;\n    }\n\n    function contractVersion() external view returns (string memory) {\n        return _bytes32ToString(_contractVersion);\n    }\n\n    function contractVersionBytes() external view returns (bytes32) {\n        return _contractVersion;\n    }\n\n    function _bytes32ToString(bytes32 b) internal pure returns (string memory s) {\n        s = new string(32);\n        uint256 len = 32;\n        for (uint256 i = 0; i < 32; ++i) {\n            if (uint8(b[i]) == 0) {\n                len = i;\n                break;\n            }\n        }\n        assembly {\n            mstore(s, len)\n            mstore(add(s, 0x20), b)\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}