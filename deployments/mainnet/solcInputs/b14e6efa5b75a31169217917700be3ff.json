{
  "language": "Solidity",
  "sources": {
    "contracts/ContractRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"./interfaces/IProtocolGovernance.sol\";\nimport \"./interfaces/IContractRegistry.sol\";\nimport \"./libraries/ExceptionsLibrary.sol\";\nimport \"./libraries/SemverLibrary.sol\";\nimport \"./utils/ContractMeta.sol\";\n\ncontract ContractRegistry is ContractMeta, IContractRegistry, Multicall {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    IProtocolGovernance public governance;\n\n    mapping(bytes32 => mapping(uint256 => address)) private _nameToVersionToAddress;\n    mapping(bytes32 => uint256[]) private _nameToVersions;\n    EnumerableSet.AddressSet private _addresses;\n    EnumerableSet.Bytes32Set private _names;\n\n    constructor(address _governance) {\n        governance = IProtocolGovernance(_governance);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IContractRegistry\n    function addresses() external view returns (address[] memory) {\n        return _addresses.values();\n    }\n\n    /// @inheritdoc IContractRegistry\n    function names() external view returns (string[] memory result) {\n        uint256 length = _names.length();\n        result = new string[](length);\n        for (uint256 i; i != length; ++i) {\n            result[i] = _bytes32ToString(_names.at(i));\n        }\n    }\n\n    /// @inheritdoc IContractRegistry\n    function versions(string memory name_) external view returns (string[] memory result) {\n        bytes32 name = bytes32(bytes(name_));\n        uint256[] memory versions_ = _nameToVersions[name];\n        result = new string[](versions_.length);\n        for (uint256 i = 0; i < versions_.length; i++) {\n            result[i] = SemverLibrary.stringifySemver(versions_[i]);\n        }\n    }\n\n    /// @inheritdoc IContractRegistry\n    function versionAddress(string memory name_, string memory version) external view returns (address) {\n        bytes32 name = bytes32(bytes(name_));\n        uint256 versionNum = SemverLibrary.numberifySemver(version);\n        return _nameToVersionToAddress[name][versionNum];\n    }\n\n    /// @inheritdoc IContractRegistry\n    function latestVersion(string memory name_) external view returns (string memory, address) {\n        bytes32 name = bytes32(abi.encodePacked(name_));\n        uint256 version = _latestVersion(name);\n        return (string(SemverLibrary.stringifySemver(version)), _nameToVersionToAddress[name][version]);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IContractRegistry\n    function registerContract(address target) external {\n        _requireAtLeastOperator();\n        require(_addresses.add(target), ExceptionsLibrary.DUPLICATE);\n\n        IContractMeta newContract = IContractMeta(target);\n        bytes32 newContractName = newContract.contractNameBytes();\n        require(_validateContractName(newContractName), ExceptionsLibrary.INVALID_VALUE);\n\n        bytes32 newContractVersionRaw = newContract.contractVersionBytes();\n        uint256 newContractVersion = SemverLibrary.numberifySemver(newContract.contractVersion());\n        uint256 latestContractVersion = _latestVersion(newContractName);\n\n        require(newContractVersion > latestContractVersion, ExceptionsLibrary.INVARIANT);\n\n        uint256 newContractVersionMajor = newContractVersion >> 16;\n        uint256 latestContractVersionMajor = latestContractVersion >> 16;\n        require(newContractVersionMajor - latestContractVersionMajor <= 1, ExceptionsLibrary.INVARIANT);\n\n        _nameToVersionToAddress[newContractName][newContractVersion] = target;\n        _nameToVersions[newContractName].push(newContractVersion);\n        _names.add(newContractName);\n\n        emit ContractRegistered(tx.origin, msg.sender, newContractName, newContractVersionRaw, target);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ContractRegistry\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _requireAtLeastOperator() private view {\n        require(\n            governance.isOperator(msg.sender) || governance.isAdmin(msg.sender), \n            ExceptionsLibrary.FORBIDDEN\n        );\n    }\n\n    function _latestVersion(bytes32 name) private view returns (uint256) {\n        uint256 versionsLength = _nameToVersions[name].length;\n        return versionsLength != 0 ? _nameToVersions[name][versionsLength - 1] : 0;\n    }\n\n    function _validateContractName(bytes32 name_) private pure returns (bool) {\n        bytes memory name = bytes(_bytes32ToString(name_));\n        for (uint256 i; i < name.length; ++i) {\n            uint8 ascii = uint8(name[i]);\n            bool isAlphanumeric = ((0x61 <= ascii && ascii <= 0x7a) ||\n                (0x41 <= ascii && ascii <= 0x5a) ||\n                (0x30 <= ascii && ascii <= 0x39));\n            if (!isAlphanumeric) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    event ContractRegistered(\n        address indexed origin,\n        address indexed sender,\n        bytes32 indexed name,\n        bytes32 version,\n        address target\n    );\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Multicall.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Address.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * _Available since v4.1._\n */\nabstract contract Multicall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "contracts/interfaces/IProtocolGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./utils/IDefaultAccessControl.sol\";\nimport \"./IUnitPricesGovernance.sol\";\n\ninterface IProtocolGovernance is IDefaultAccessControl, IUnitPricesGovernance {\n    /// @notice CommonLibrary protocol params.\n    /// @param maxTokensPerVault Max different token addresses that could be managed by the vault\n    /// @param governanceDelay The delay (in secs) that must pass before setting new pending params to commiting them\n    /// @param protocolTreasury The address that collects protocolFees, if protocolFee is not zero\n    /// @param forceAllowMask If a permission bit is set in this mask it forces all addresses to have this permission as true\n    /// @param withdrawLimit Withdraw limit (in unit prices, i.e. usd)\n    struct Params {\n        uint256 maxTokensPerVault;\n        uint256 governanceDelay;\n        address protocolTreasury;\n        uint256 forceAllowMask;\n        uint256 withdrawLimit;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\n    /// @param target The given address\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\n    function stagedPermissionGrantsTimestamps(address target) external view returns (uint256);\n\n    /// @notice Staged granted permission bitmask for the given address.\n    /// @param target The given address\n    /// @return Bitmask\n    function stagedPermissionGrantsMasks(address target) external view returns (uint256);\n\n    /// @notice Permission bitmask for the given address.\n    /// @param target The given address\n    /// @return Bitmask\n    function permissionMasks(address target) external view returns (uint256);\n\n    /// @notice Timestamp after which staged pending protocol parameters can be committed\n    /// @return Zero if there are no staged parameters, timestamp otherwise.\n    function stagedParamsTimestamp() external view returns (uint256);\n\n    /// @notice Staged pending protocol parameters.\n    function stagedParams() external view returns (Params memory);\n\n    /// @notice Current protocol parameters.\n    function params() external view returns (Params memory);\n\n    /// @notice Addresses for which non-zero permissions are set.\n    function permissionAddresses() external view returns (address[] memory);\n\n    /// @notice Permission addresses staged for commit.\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory);\n\n    /// @notice Return all addresses where rawPermissionMask bit for permissionId is set to 1.\n    /// @param permissionId Id of the permission to check.\n    /// @return A list of dirty addresses.\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory);\n\n    /// @notice Checks if address has permission or given permission is force allowed for any address.\n    /// @param addr Address to check\n    /// @param permissionId Permission to check\n    function hasPermission(address addr, uint8 permissionId) external view returns (bool);\n\n    /// @notice Checks if address has all permissions.\n    /// @param target Address to check\n    /// @param permissionIds A list of permissions to check\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool);\n\n    /// @notice Max different ERC20 token addresses that could be managed by the protocol.\n    function maxTokensPerVault() external view returns (uint256);\n\n    /// @notice The delay for committing any governance params.\n    function governanceDelay() external view returns (uint256);\n\n    /// @notice The address of the protocol treasury.\n    function protocolTreasury() external view returns (address);\n\n    /// @notice Permissions mask which defines if ordinary permission should be reverted.\n    /// This bitmask is xored with ordinary mask.\n    function forceAllowMask() external view returns (uint256);\n\n    /// @notice Withdraw limit per token per block.\n    /// @param token Address of the token\n    /// @return Withdraw limit per token per block\n    function withdrawLimit(address token) external view returns (uint256);\n\n    /// @notice Addresses that has staged validators.\n    function stagedValidatorsAddresses() external view returns (address[] memory);\n\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\n    /// @param target The given address\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\n    function stagedValidatorsTimestamps(address target) external view returns (uint256);\n\n    /// @notice Staged validator for the given address.\n    /// @param target The given address\n    /// @return Validator\n    function stagedValidators(address target) external view returns (address);\n\n    /// @notice Addresses that has validators.\n    function validatorsAddresses() external view returns (address[] memory);\n\n    /// @notice Address that has validators.\n    /// @param i The number of address\n    /// @return Validator address\n    function validatorsAddress(uint256 i) external view returns (address);\n\n    /// @notice Validator for the given address.\n    /// @param target The given address\n    /// @return Validator\n    function validators(address target) external view returns (address);\n\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, IMMEDIATE  -------------------\n\n    /// @notice Rollback all staged validators.\n    function rollbackStagedValidators() external;\n\n    /// @notice Revoke validator instantly from the given address.\n    /// @param target The given address\n    function revokeValidator(address target) external;\n\n    /// @notice Stages a new validator for the given address\n    /// @param target The given address\n    /// @param validator The validator for the given address\n    function stageValidator(address target, address validator) external;\n\n    /// @notice Commits validator for the given address.\n    /// @dev Reverts if governance delay has not passed yet.\n    /// @param target The given address.\n    function commitValidator(address target) external;\n\n    /// @notice Commites all staged validators for which governance delay passed\n    /// @return Addresses for which validators were committed\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory);\n\n    /// @notice Rollback all staged granted permission grant.\n    function rollbackStagedPermissionGrants() external;\n\n    /// @notice Commits permission grants for the given address.\n    /// @dev Reverts if governance delay has not passed yet.\n    /// @param target The given address.\n    function commitPermissionGrants(address target) external;\n\n    /// @notice Commites all staged permission grants for which governance delay passed.\n    /// @return An array of addresses for which permission grants were committed.\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory);\n\n    /// @notice Revoke permission instantly from the given address.\n    /// @param target The given address.\n    /// @param permissionIds A list of permission ids to revoke.\n    function revokePermissions(address target, uint8[] memory permissionIds) external;\n\n    /// @notice Commits staged protocol params.\n    /// Reverts if governance delay has not passed yet.\n    function commitParams() external;\n\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, DELAY  -------------------\n\n    /// @notice Sets new pending params that could have been committed after governance delay expires.\n    /// @param newParams New protocol parameters to set.\n    function stageParams(Params memory newParams) external;\n\n    /// @notice Stage granted permissions that could have been committed after governance delay expires.\n    /// Resets commit delay and permissions if there are already staged permissions for this address.\n    /// @param target Target address\n    /// @param permissionIds A list of permission ids to grant\n    function stagePermissionGrants(address target, uint8[] memory permissionIds) external;\n}\n"
    },
    "contracts/interfaces/IContractRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IContractRegistry {\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Addresses of the registered contracts\n    function addresses() external view returns (address[] memory);\n\n    /// @notice Names of the registered contracts\n    function names() external view returns (string[] memory);\n\n    /// @notice Latest version of the contract\n    /// @param name Name of the contract\n    function latestVersion(string memory name) external view returns (string memory, address);\n\n    /// @notice All versions of the contract\n    /// @param name Name of the contract\n    function versions(string memory name) external view returns (string[] memory result);\n\n    /// @notice Address of the contract at a given version\n    /// @param name Name of the contract\n    /// @param version Version of the contract\n    function versionAddress(string memory name, string memory version) external view returns (address);\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Register a new contract\n    /// @param target Address of the contract to be registered\n    function registerContract(address target) external;\n}\n"
    },
    "contracts/libraries/ExceptionsLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @notice Exceptions stores project`s smart-contracts exceptions\nlibrary ExceptionsLibrary {\n    string constant ADDRESS_ZERO = \"AZ\";\n    string constant VALUE_ZERO = \"VZ\";\n    string constant EMPTY_LIST = \"EMPL\";\n    string constant NOT_FOUND = \"NF\";\n    string constant INIT = \"INIT\";\n    string constant DUPLICATE = \"DUP\";\n    string constant NULL = \"NULL\";\n    string constant TIMESTAMP = \"TS\";\n    string constant FORBIDDEN = \"FRB\";\n    string constant ALLOWLIST = \"ALL\";\n    string constant LIMIT_OVERFLOW = \"LIMO\";\n    string constant LIMIT_UNDERFLOW = \"LIMU\";\n    string constant INVALID_VALUE = \"INV\";\n    string constant INVARIANT = \"INVA\";\n    string constant INVALID_TARGET = \"INVTR\";\n    string constant INVALID_TOKEN = \"INVTO\";\n    string constant INVALID_INTERFACE = \"INVI\";\n    string constant INVALID_SELECTOR = \"INVS\";\n    string constant INVALID_STATE = \"INVST\";\n    string constant INVALID_LENGTH = \"INVL\";\n    string constant LOCK = \"LCKD\";\n    string constant DISABLED = \"DIS\";\n    string constant REBALANCE_NOT_NEEDED = \"RNN\";\n}\n"
    },
    "contracts/libraries/SemverLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nlibrary SemverLibrary {\n    uint8 internal constant ASCII_ZERO = 48;\n\n    function numberifySemver(string memory _semver) internal pure returns (uint256) {\n        uint256[3] memory res;\n        uint256 semverIndex;\n        uint256 semverLength;\n        for (uint256 i = 0; (i < bytes(_semver).length) && (semverIndex < 3); i++) {\n            uint8 b = uint8(bytes(_semver)[i]);\n            if (b == uint8(bytes1(\".\"))) {\n                // forbid empty semver part\n                if (semverLength == 0) {\n                    return 0;\n                }\n                semverIndex += 1;\n                semverLength = 0;\n                continue;\n            }\n            if (b < ASCII_ZERO || b > ASCII_ZERO + 9) {\n                return 0;\n            }\n            res[semverIndex] = res[semverIndex] * 10 + b - ASCII_ZERO;\n            semverLength += 1;\n        }\n        if ((semverIndex != 2) || (semverLength == 0)) {\n            return 0;\n        }\n        return (res[0] << 16) + (res[1] << 8) + res[2];\n    }\n\n    function stringifySemver(uint256 num) internal pure returns (string memory) {\n        if (num >= 1 << 24) {\n            return \"0\";\n        }\n        string memory major = Strings.toString(num >> 16);\n        string memory minor = Strings.toString((num >> 8) & 0xff);\n        string memory patch = Strings.toString(num & 0xff);\n        return string(abi.encodePacked(abi.encodePacked(major, \".\", minor, \".\", patch)));\n    }\n}\n"
    },
    "contracts/utils/ContractMeta.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/utils/IContractMeta.sol\";\n\nabstract contract ContractMeta is IContractMeta {\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    function contractName() external pure returns (string memory) {\n        return _bytes32ToString(_contractName());\n    }\n\n    function contractNameBytes() external pure returns (bytes32) {\n        return _contractName();\n    }\n\n    function contractVersion() external pure returns (string memory) {\n        return _bytes32ToString(_contractVersion());\n    }\n\n    function contractVersionBytes() external pure returns (bytes32) {\n        return _contractVersion();\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure virtual returns (bytes32);\n\n    function _contractVersion() internal pure virtual returns (bytes32);\n\n    function _bytes32ToString(bytes32 b) internal pure returns (string memory s) {\n        s = new string(32);\n        uint256 len = 32;\n        for (uint256 i = 0; i < 32; ++i) {\n            if (uint8(b[i]) == 0) {\n                len = i;\n                break;\n            }\n        }\n        assembly {\n            mstore(s, len)\n            mstore(add(s, 0x20), b)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/utils/IDefaultAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\";\n\ninterface IDefaultAccessControl is IAccessControlEnumerable {\n    /// @notice Checks that the address is contract admin.\n    /// @param who Address to check\n    /// @return `true` if who is admin, `false` otherwise\n    function isAdmin(address who) external view returns (bool);\n\n    /// @notice Checks that the address is contract admin.\n    /// @param who Address to check\n    /// @return `true` if who is operator, `false` otherwise\n    function isOperator(address who) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IUnitPricesGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./utils/IDefaultAccessControl.sol\";\n\ninterface IUnitPricesGovernance is IDefaultAccessControl, IERC165 {\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Estimated amount of token worth 1 USD staged for commit.\n    /// @param token Address of the token\n    /// @return The amount of token\n    function stagedUnitPrices(address token) external view returns (uint256);\n\n    /// @notice Timestamp after which staged unit prices for the given token can be committed.\n    /// @param token Address of the token\n    /// @return Timestamp\n    function stagedUnitPricesTimestamps(address token) external view returns (uint256);\n\n    /// @notice Estimated amount of token worth 1 USD.\n    /// @param token Address of the token\n    /// @return The amount of token\n    function unitPrices(address token) external view returns (uint256);\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Stage estimated amount of token worth 1 USD staged for commit.\n    /// @param token Address of the token\n    /// @param value The amount of token\n    function stageUnitPrice(address token, uint256 value) external;\n\n    /// @notice Reset staged value\n    /// @param token Address of the token\n    function rollbackUnitPrice(address token) external;\n\n    /// @notice Commit staged unit price\n    /// @param token Address of the token\n    function commitUnitPrice(address token) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/interfaces/utils/IContractMeta.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IContractMeta {\n    function contractName() external view returns (string memory);\n    function contractNameBytes() external view returns (bytes32);\n\n    function contractVersion() external view returns (string memory);\n    function contractVersionBytes() external view returns (bytes32);\n}\n"
    },
    "contracts/vaults/YearnVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IYearnVaultGovernance.sol\";\nimport \"../interfaces/vaults/IYearnVault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Governance that manages all Aave Vaults params and can deploy a new Aave Vault.\ncontract YearnVaultGovernance is ContractMeta, IYearnVaultGovernance, VaultGovernance {\n    mapping(address => address) private _yTokens;\n\n    /// @notice Creates a new contract\n    /// @param internalParams_ Initial Internal Params\n    /// @param delayedProtocolParams_ Initial Protocol Params\n    constructor(InternalParams memory internalParams_, DelayedProtocolParams memory delayedProtocolParams_)\n        VaultGovernance(internalParams_)\n    {\n        require(address(delayedProtocolParams_.yearnVaultRegistry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IYearnVaultGovernance\n    function yTokenForToken(address token) external view returns (address) {\n        address yToken = _yTokens[token];\n        if (yToken != address(0)) {\n            return yToken;\n        }\n        IYearnProtocolVaultRegistry yearnRegistry = delayedProtocolParams().yearnVaultRegistry;\n        try yearnRegistry.latestVault(token) returns (address _vault) {\n            return _vault;\n        } catch (bytes memory) {\n            return address(0);\n        }\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return DelayedProtocolParams({yearnVaultRegistry: IYearnProtocolVaultRegistry(address(0))});\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IYearnVaultGovernance).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IYearnVaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\n        require(address(params.yearnVaultRegistry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function setYTokenForToken(address token, address yToken) external {\n        _requireProtocolAdmin();\n        _yTokens[token] = yToken;\n        emit SetYToken(tx.origin, msg.sender, token, yToken);\n    }\n\n    /// @inheritdoc IYearnVaultGovernance\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IYearnVault vault, uint256 nft)\n    {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IYearnVault(vaddr);\n        vault.initialize(nft, vaultTokens_);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, \"\", owner_, vaddr, nft);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"YearnVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new yToken is set\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param token ERC-20 token for the yToken\n    /// @param yToken yToken for ERC-20 token\n    event SetYToken(address indexed origin, address indexed sender, address indexed token, address yToken);\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/interfaces/vaults/IYearnVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../external/yearn/IYearnProtocolVaultRegistry.sol\";\nimport \"./IVaultGovernance.sol\";\nimport \"./IYearnVault.sol\";\n\ninterface IYearnVaultGovernance is IVaultGovernance {\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param yearnVaultRegistry Reference to Yearn Vault Registry\n    struct DelayedProtocolParams {\n        IYearnProtocolVaultRegistry yearnVaultRegistry;\n    }\n\n    /// @notice Determines a corresponding Yearn vault for token\n    /// @param token ERC-20 token for the yToken\n    /// @return If there's a yToken returns its address, otherwise returns 0\n    function yTokenForToken(address token) external view returns (address);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolParamsTimestamp.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Sets the manual override for yToken vaults map\n    /// @dev Can only be called by Protocol Admin\n    /// @param token ERC-20 token for yToken\n    /// @param yToken for ERC-20 token\n    function setYTokenForToken(address token, address yToken) external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IYearnVault vault, uint256 nft);\n}\n"
    },
    "contracts/interfaces/vaults/IYearnVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IIntegrationVault.sol\";\n\ninterface IYearnVault is IIntegrationVault {\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external;\n\n    /// @notice Default maximal loss for withdraw\n    function DEFAULT_MAX_LOSS() external view returns (uint256);\n}\n"
    },
    "contracts/vaults/VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../interfaces/vaults/IVaultGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\n\n/// @notice Internal contract for managing different params.\n/// @dev The contract should be overriden by the concrete VaultGovernance,\n/// define different params structs and use abi.decode / abi.encode to serialize\n/// to bytes in this contract. It also should emit events on params change.\nabstract contract VaultGovernance is IVaultGovernance, ERC165 {\n    InternalParams internal _internalParams;\n    InternalParams private _stagedInternalParams;\n    uint256 internal _internalParamsTimestamp;\n\n    mapping(uint256 => bytes) internal _delayedStrategyParams;\n    mapping(uint256 => bytes) internal _stagedDelayedStrategyParams;\n    mapping(uint256 => uint256) internal _delayedStrategyParamsTimestamp;\n\n    mapping(uint256 => bytes) internal _delayedProtocolPerVaultParams;\n    mapping(uint256 => bytes) internal _stagedDelayedProtocolPerVaultParams;\n    mapping(uint256 => uint256) internal _delayedProtocolPerVaultParamsTimestamp;\n\n    bytes internal _delayedProtocolParams;\n    bytes internal _stagedDelayedProtocolParams;\n    uint256 internal _delayedProtocolParamsTimestamp;\n\n    mapping(uint256 => bytes) internal _strategyParams;\n    bytes internal _protocolParams;\n    bytes internal _operatorParams;\n\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    constructor(InternalParams memory internalParams_) {\n        require(address(internalParams_.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(internalParams_.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(internalParams_.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _internalParams = internalParams_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVaultGovernance\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256) {\n        return _delayedStrategyParamsTimestamp[nft];\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256) {\n        return _delayedProtocolPerVaultParamsTimestamp[nft];\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function delayedProtocolParamsTimestamp() external view returns (uint256) {\n        return _delayedProtocolParamsTimestamp;\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function internalParamsTimestamp() external view returns (uint256) {\n        return _internalParamsTimestamp;\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function internalParams() external view returns (InternalParams memory) {\n        return _internalParams;\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function stagedInternalParams() external view returns (InternalParams memory) {\n        return _stagedInternalParams;\n    }\n\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\n        return super.supportsInterface(interfaceID) || interfaceID == type(IVaultGovernance).interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IVaultGovernance\n    function stageInternalParams(InternalParams memory newParams) external {\n        _requireProtocolAdmin();\n        require(address(newParams.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(newParams.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(newParams.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stagedInternalParams = newParams;\n        _internalParamsTimestamp = block.timestamp + _internalParams.protocolGovernance.governanceDelay();\n        emit StagedInternalParams(tx.origin, msg.sender, newParams, _internalParamsTimestamp);\n    }\n\n    /// @inheritdoc IVaultGovernance\n    function commitInternalParams() external {\n        _requireProtocolAdmin();\n        require(_internalParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(block.timestamp >= _internalParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _internalParams = _stagedInternalParams;\n        delete _internalParamsTimestamp;\n        delete _stagedInternalParams;\n        emit CommitedInternalParams(tx.origin, msg.sender, _internalParams);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _requireAtLeastStrategy(uint256 nft) internal view {\n        require(\n            (_internalParams.protocolGovernance.isAdmin(msg.sender) ||\n                _internalParams.registry.getApproved(nft) == msg.sender ||\n                (_internalParams.registry.ownerOf(nft) == msg.sender)),\n            ExceptionsLibrary.FORBIDDEN\n        );\n    }\n\n    function _requireProtocolAdmin() internal view {\n        require(_internalParams.protocolGovernance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n\n    function _requireAtLeastOperator() internal view {\n        IProtocolGovernance governance = _internalParams.protocolGovernance;\n        require(governance.isAdmin(msg.sender) || governance.isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _createVault(address owner) internal returns (address vault, uint256 nft) {\n        IProtocolGovernance protocolGovernance = IProtocolGovernance(_internalParams.protocolGovernance);\n        require(\n            protocolGovernance.hasPermission(msg.sender, PermissionIdsLibrary.CREATE_VAULT),\n            ExceptionsLibrary.FORBIDDEN\n        );\n        IVaultRegistry vaultRegistry = _internalParams.registry;\n        nft = vaultRegistry.vaultsCount() + 1;\n        vault = Clones.cloneDeterministic(address(_internalParams.singleton), bytes32(nft));\n        vaultRegistry.registerVault(address(vault), owner);\n    }\n\n    /// @notice Set Delayed Strategy Params\n    /// @param nft Nft of the vault\n    /// @param params New params\n    function _stageDelayedStrategyParams(uint256 nft, bytes memory params) internal {\n        _requireAtLeastStrategy(nft);\n        _stagedDelayedStrategyParams[nft] = params;\n        uint256 delayFactor = _delayedStrategyParams[nft].length == 0 ? 0 : 1;\n        _delayedStrategyParamsTimestamp[nft] =\n            block.timestamp +\n            _internalParams.protocolGovernance.governanceDelay() *\n            delayFactor;\n    }\n\n    /// @notice Commit Delayed Strategy Params\n    function _commitDelayedStrategyParams(uint256 nft) internal {\n        _requireAtLeastStrategy(nft);\n        uint256 thisDelayedStrategyParamsTimestamp = _delayedStrategyParamsTimestamp[nft];\n        require(thisDelayedStrategyParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(block.timestamp >= thisDelayedStrategyParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _delayedStrategyParams[nft] = _stagedDelayedStrategyParams[nft];\n        delete _stagedDelayedStrategyParams[nft];\n        delete _delayedStrategyParamsTimestamp[nft];\n    }\n\n    /// @notice Set Delayed Protocol Per Vault Params\n    /// @param nft Nft of the vault\n    /// @param params New params\n    function _stageDelayedProtocolPerVaultParams(uint256 nft, bytes memory params) internal {\n        _requireProtocolAdmin();\n        _stagedDelayedProtocolPerVaultParams[nft] = params;\n        uint256 delayFactor = _delayedProtocolPerVaultParams[nft].length == 0 ? 0 : 1;\n        _delayedProtocolPerVaultParamsTimestamp[nft] =\n            block.timestamp +\n            _internalParams.protocolGovernance.governanceDelay() *\n            delayFactor;\n    }\n\n    /// @notice Commit Delayed Protocol Per Vault Params\n    function _commitDelayedProtocolPerVaultParams(uint256 nft) internal {\n        _requireProtocolAdmin();\n        uint256 thisDelayedProtocolPerVaultParamsTimestamp = _delayedProtocolPerVaultParamsTimestamp[nft];\n        require(thisDelayedProtocolPerVaultParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(block.timestamp >= thisDelayedProtocolPerVaultParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _delayedProtocolPerVaultParams[nft] = _stagedDelayedProtocolPerVaultParams[nft];\n        delete _stagedDelayedProtocolPerVaultParams[nft];\n        delete _delayedProtocolPerVaultParamsTimestamp[nft];\n    }\n\n    /// @notice Set Delayed Protocol Params\n    /// @param params New params\n    function _stageDelayedProtocolParams(bytes memory params) internal {\n        _requireProtocolAdmin();\n        uint256 delayFactor = _delayedProtocolParams.length == 0 ? 0 : 1;\n        _stagedDelayedProtocolParams = params;\n        _delayedProtocolParamsTimestamp =\n            block.timestamp +\n            _internalParams.protocolGovernance.governanceDelay() *\n            delayFactor;\n    }\n\n    /// @notice Commit Delayed Protocol Params\n    function _commitDelayedProtocolParams() internal {\n        _requireProtocolAdmin();\n        require(_delayedProtocolParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(block.timestamp >= _delayedProtocolParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _delayedProtocolParams = _stagedDelayedProtocolParams;\n        delete _stagedDelayedProtocolParams;\n        delete _delayedProtocolParamsTimestamp;\n    }\n\n    /// @notice Set immediate strategy params\n    /// @dev Should require nft > 0\n    /// @param nft Nft of the vault\n    /// @param params New params\n    function _setStrategyParams(uint256 nft, bytes memory params) internal {\n        _requireAtLeastStrategy(nft);\n        _strategyParams[nft] = params;\n    }\n\n    /// @notice Set immediate operator params\n    /// @param params New params\n    function _setOperatorParams(bytes memory params) internal {\n        _requireAtLeastOperator();\n        _operatorParams = params;\n    }\n\n    /// @notice Set immediate protocol params\n    /// @param params New params\n    function _setProtocolParams(bytes memory params) internal {\n        _requireProtocolAdmin();\n        _protocolParams = params;\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when InternalParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StagedInternalParams(address indexed origin, address indexed sender, InternalParams params, uint256 when);\n\n    /// @notice Emitted when InternalParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    event CommitedInternalParams(address indexed origin, address indexed sender, InternalParams params);\n\n    /// @notice Emitted when New Vault is deployed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param vaultTokens Vault tokens for this vault\n    /// @param options Options for deploy. The details of the options structure are specified in subcontracts\n    /// @param owner Owner of the VaultRegistry NFT for this vault\n    /// @param vaultAddress Address of the new Vault\n    /// @param vaultNft VaultRegistry NFT for the new Vault\n    event DeployedVault(\n        address indexed origin,\n        address indexed sender,\n        address[] vaultTokens,\n        bytes options,\n        address owner,\n        address vaultAddress,\n        uint256 vaultNft\n    );\n}\n"
    },
    "contracts/interfaces/external/yearn/IYearnProtocolVaultRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\ninterface IYearnProtocolVaultRegistry {\n    function latestVault(address vault) external view returns (address);\n}\n"
    },
    "contracts/interfaces/vaults/IVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../IProtocolGovernance.sol\";\nimport \"../IVaultRegistry.sol\";\nimport \"./IVault.sol\";\n\ninterface IVaultGovernance {\n    /// @notice Internal references of the contract.\n    /// @param protocolGovernance Reference to Protocol Governance\n    /// @param registry Reference to Vault Registry\n    struct InternalParams {\n        IProtocolGovernance protocolGovernance;\n        IVaultRegistry registry;\n        IVault singleton;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Timestamp in unix time seconds after which staged Delayed Strategy Params could be committed.\n    /// @param nft Nft of the vault\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256);\n\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params could be committed.\n    function delayedProtocolParamsTimestamp() external view returns (uint256);\n\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params Per Vault could be committed.\n    /// @param nft Nft of the vault\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256);\n\n    /// @notice Timestamp in unix time seconds after which staged Internal Params could be committed.\n    function internalParamsTimestamp() external view returns (uint256);\n\n    /// @notice Internal Params of the contract.\n    function internalParams() external view returns (InternalParams memory);\n\n    /// @notice Staged new Internal Params.\n    /// @dev The Internal Params could be committed after internalParamsTimestamp\n    function stagedInternalParams() external view returns (InternalParams memory);\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Stage new Internal Params.\n    /// @param newParams New Internal Params\n    function stageInternalParams(InternalParams memory newParams) external;\n\n    /// @notice Commit staged Internal Params.\n    function commitInternalParams() external;\n}\n"
    },
    "contracts/interfaces/IVaultRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./IProtocolGovernance.sol\";\n\ninterface IVaultRegistry is IERC721 {\n    /// @notice Get Vault for the giver NFT ID.\n    /// @param nftId NFT ID\n    /// @return vault Address of the Vault contract\n    function vaultForNft(uint256 nftId) external view returns (address vault);\n\n    /// @notice Get NFT ID for given Vault contract address.\n    /// @param vault Address of the Vault contract\n    /// @return nftId NFT ID\n    function nftForVault(address vault) external view returns (uint256 nftId);\n\n    /// @notice Checks if the nft is locked for all transfers\n    /// @param nft NFT to check for lock\n    /// @return `true` if locked, false otherwise\n    function isLocked(uint256 nft) external view returns (bool);\n\n    /// @notice Register new Vault and mint NFT.\n    /// @param vault address of the vault\n    /// @param owner owner of the NFT\n    /// @return nft Nft minted for the given Vault\n    function registerVault(address vault, address owner) external returns (uint256 nft);\n\n    /// @notice Number of Vaults registered.\n    function vaultsCount() external view returns (uint256);\n\n    /// @notice All Vaults registered.\n    function vaults() external view returns (address[] memory);\n\n    /// @notice Address of the ProtocolGovernance.\n    function protocolGovernance() external view returns (IProtocolGovernance);\n\n    /// @notice Address of the staged ProtocolGovernance.\n    function stagedProtocolGovernance() external view returns (IProtocolGovernance);\n\n    /// @notice Minimal timestamp when staged ProtocolGovernance can be applied.\n    function stagedProtocolGovernanceTimestamp() external view returns (uint256);\n\n    /// @notice Stage new ProtocolGovernance.\n    /// @param newProtocolGovernance new ProtocolGovernance\n    function stageProtocolGovernance(IProtocolGovernance newProtocolGovernance) external;\n\n    /// @notice Commit new ProtocolGovernance.\n    function commitStagedProtocolGovernance() external;\n\n    /// @notice Lock NFT for transfers\n    /// @dev Use this method when vault structure is set up and should become immutable. Can be called by owner.\n    /// @param nft - NFT to lock\n    function lockNft(uint256 nft) external;\n}\n"
    },
    "contracts/interfaces/vaults/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IVaultGovernance.sol\";\n\ninterface IVault is IERC165 {\n    /// @notice Checks if the vault is initialized\n\n    function initialized() external view returns (bool);\n\n    /// @notice VaultRegistry NFT for this vault\n    function nft() external view returns (uint256);\n\n    /// @notice Address of the Vault Governance for this contract.\n    function vaultGovernance() external view returns (IVaultGovernance);\n\n    /// @notice ERC20 tokens under Vault management.\n    function vaultTokens() external view returns (address[] memory);\n\n    /// @notice Checks if a token is vault token\n    /// @param token Address of the token to check\n    /// @return `true` if this token is managed by Vault\n    function isVaultToken(address token) external view returns (bool);\n\n    /// @notice Total value locked for this contract.\n    /// @dev Generally it is the underlying token value of this contract in some\n    /// other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract.\n    /// The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\n    /// @return minTokenAmounts Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\n    /// @return maxTokenAmounts Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\n    function tvl() external view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\n\n    /// @notice Existential amounts for each token\n    function pullExistentials() external view returns (uint256[] memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/vaults/IIntegrationVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../external/erc/IERC1271.sol\";\nimport \"./IVault.sol\";\n\ninterface IIntegrationVault is IVault, IERC1271 {\n    /// @notice Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from\n    /// the contract balance and convert it to yUSDC.\n    /// @dev Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\n    ///\n    /// Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.\n    /// @param tokens Tokens to push\n    /// @param tokenAmounts Amounts of tokens to push\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\n    function push(\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice The same as `push` method above but transfers tokens to vault balance prior to calling push.\n    /// After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full).\n    /// @param tokens Tokens to push\n    /// @param tokenAmounts Amounts of tokens to push\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\n    function transferAndPush(\n        address from,\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice Pulls tokens from the underlying protocol to the `to` address.\n    /// @dev Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\n    /// Strategy is approved address for the vault NFT.\n    /// When called by vault owner this method just pulls the tokens from the protocol to the `to` address\n    /// When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault)\n    /// When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left.\n    /// Thus any vault other than zero vault cannot have any tokens on it\n    ///\n    /// Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\n    ///\n    /// Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.\n    /// @param to Address to receive the tokens\n    /// @param tokens Tokens to pull\n    /// @param tokenAmounts Amounts of tokens to pull\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\n    /// @return actualTokenAmounts The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)\n    function pull(\n        address to,\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice Claim ERC20 tokens from vault balance to zero vault.\n    /// @dev Cannot be called from zero vault.\n    /// @param tokens Tokens to claim\n    /// @return actualTokenAmounts Amounts reclaimed\n    function reclaimTokens(address[] memory tokens) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice Execute one of whitelisted calls.\n    /// @dev Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\n    /// Strategy is approved address for the vault NFT.\n    ///\n    /// Since this method allows sending arbitrary transactions, the destinations of the calls\n    /// are whitelisted by Protocol Governance.\n    /// @param to Address of the reward pool\n    /// @param selector Selector of the call\n    /// @param data Abi encoded parameters to `to::selector`\n    /// @return result Result of execution of the call\n    function externalCall(\n        address to,\n        bytes4 selector,\n        bytes memory data\n    ) external payable returns (bytes memory result);\n}\n"
    },
    "contracts/interfaces/external/erc/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IERC1271 {\n    /// @notice Verifies offchain signature.\n    /// @dev Should return whether the signature provided is valid for the provided hash\n    ///\n    /// MUST return the bytes4 magic value 0x1626ba7e when function passes.\n    ///\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n    ///\n    /// MUST allow external calls\n    /// @param _hash Hash of the data to be signed\n    /// @param _signature Signature byte array associated with _hash\n    /// @return magicValue 0x1626ba7e if valid, 0xffffffff otherwise\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/libraries/PermissionIdsLibrary.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @notice Stores permission ids for addresses\nlibrary PermissionIdsLibrary {\n    // The msg.sender is allowed to register vault\n    uint8 constant REGISTER_VAULT = 0;\n    // The msg.sender is allowed to create vaults\n    uint8 constant CREATE_VAULT = 1;\n    // The token is allowed to be transfered by vault\n    uint8 constant ERC20_TRANSFER = 2;\n    // The token is allowed to be added to vault\n    uint8 constant ERC20_VAULT_TOKEN = 3;\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by any strategy\n    uint8 constant ERC20_APPROVE = 4;\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by trusted strategy\n    uint8 constant ERC20_APPROVE_RESTRICTED = 5;\n    // Strategy allowed using restricted API\n    uint8 constant TRUSTED_STRATEGY = 6;\n}\n"
    },
    "contracts/vaults/VoltzVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IVoltzVaultGovernance.sol\";\n\nimport \"../utils/VoltzVaultHelper.sol\";\nimport \"../utils/ContractMeta.sol\";\n\nimport \"./VaultGovernance.sol\";\n\n/// @notice Governance that manages all Voltz Vaults params and can deploy a new Voltz Vault.\ncontract VoltzVaultGovernance is ContractMeta, IVoltzVaultGovernance, VaultGovernance {\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    /// @param delayedProtocolParams_ Initial Protocol Params\n    constructor(InternalParams memory internalParams_, DelayedProtocolParams memory delayedProtocolParams_)\n        VaultGovernance(internalParams_)\n    {\n        require(address(delayedProtocolParams_.periphery) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVoltzVaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        // params are initialized in constructor, so cannot be 0\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IVoltzVaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return DelayedProtocolParams({periphery: IPeriphery(address(0))});\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IVoltzVaultGovernance).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IVoltzVaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\n        require(address(params.periphery) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IVoltzVaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    /// @inheritdoc IVoltzVaultGovernance\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        address marginEngine_,\n        address voltzVaultHelperSingleton_,\n        IVoltzVault.InitializeParams memory initializeParams\n    ) external override returns (IVoltzVault vault, uint256 nft) {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        address voltzVaultHelper_ = Clones.cloneDeterministic(address(voltzVaultHelperSingleton_), bytes32(nft));\n\n        vault = IVoltzVault(vaddr);\n        vault.initialize(\n            nft,\n            vaultTokens_,\n            marginEngine_,\n            address(abi.decode(_delayedProtocolParams, (DelayedProtocolParams)).periphery),\n            voltzVaultHelper_,\n            initializeParams\n        );\n\n        emit DeployedVault(\n            tx.origin,\n            msg.sender,\n            vaultTokens_,\n            abi.encode(marginEngine_, voltzVaultHelper_, initializeParams),\n            owner_,\n            vaddr,\n            nft\n        );\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"VoltzVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/interfaces/vaults/IVoltzVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"./IVaultGovernance.sol\";\nimport \"./IVoltzVault.sol\";\n\ninterface IVoltzVaultGovernance is IVaultGovernance {\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    struct DelayedProtocolParams {\n        IPeriphery periphery;\n    }\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    /// @param marginEngine_ margin engine address that the vault is created on top of\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        address marginEngine_,\n        address voltzHelper_,\n        IVoltzVault.InitializeParams memory initializeParams\n    ) external returns (IVoltzVault vault, uint256 nft);\n}\n"
    },
    "contracts/utils/VoltzVaultHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../libraries/ExceptionsLibrary.sol\";\n\nimport \"../vaults/VoltzVault.sol\";\n\ncontract VoltzVaultHelper {\n    using SafeERC20 for IERC20;\n    using SafeCastUni for uint128;\n    using SafeCastUni for int128;\n    using SafeCastUni for uint256;\n    using SafeCastUni for int256;\n    using PRBMathSD59x18 for int256;\n    using PRBMathUD60x18 for uint256;\n\n    /// @dev The Voltz Vault on Mellow\n    VoltzVault private _vault;\n\n    /// @dev The margin engine of Voltz Protocol\n    IMarginEngine private _marginEngine;\n    /// @dev The rate oracle of Voltz Protocol\n    IRateOracle private _rateOracle;\n    /// @dev The periphery of Voltz Protocol\n    IPeriphery private _periphery;\n\n    /// @dev The underlying token of the Voltz pool\n    address private _underlyingToken;\n\n    /// @dev The unix termStartTimestamp of the MarginEngine in Wad\n    uint256 private _termStartTimestampWad;\n    /// @dev The unix termEndTimestamp of the MarginEngine in Wad\n    uint256 private _termEndTimestampWad;\n\n    /// @dev The multiplier used to decide how much margin is left in partially unwound positions on Voltz (in wad)\n    uint256 private _marginMultiplierPostUnwindWad;\n    /// @dev The decimal delta used to compute lower and upper limits of estimated APY: (1 +/- delta) * estimatedAPY (in wad)\n    uint256 private _estimatedAPYDecimalDeltaWad;\n\n    uint256 public constant SECONDS_IN_YEAR_IN_WAD = 31536000e18;\n    uint256 public constant ONE_HUNDRED_IN_WAD = 100e18;\n\n    modifier onlyVault() {\n        require(msg.sender == address(_vault), \"Only Vault\");\n        _;\n    }\n\n    // -------------------  PUBLIC, PURE  -------------------\n\n    /// @notice Calculate the remaining cashflow to settle a position\n    /// @param fixedTokenBalance The current balance of the fixed side of the position\n    /// @param fixedFactorStartEndWad The fixed factor between the start and end of the pool (in wad)\n    /// @param variableTokenBalance The current balance of the variable side of the position\n    /// @param variableFactorStartEndWad The factor that expresses the variable rate between the start and end of the pool (in wad)\n    /// @return cashflow The remaining cashflow of the position\n    function calculateSettlementCashflow(\n        int256 fixedTokenBalance,\n        uint256 fixedFactorStartEndWad,\n        int256 variableTokenBalance,\n        uint256 variableFactorStartEndWad\n    ) public pure returns (int256 cashflow) {\n        // Fixed Cashflow\n        int256 fixedTokenBalanceWad = fixedTokenBalance.fromInt();\n        int256 fixedCashflowBalanceWad = fixedTokenBalanceWad.mul(int256(fixedFactorStartEndWad));\n        int256 fixedCashflowBalance = fixedCashflowBalanceWad.toInt();\n\n        // Variable Cashflow\n        int256 variableTokenBalanceWad = variableTokenBalance.fromInt();\n        int256 variableCashflowBalanceWad = variableTokenBalanceWad.mul(int256(variableFactorStartEndWad));\n        int256 variableCashflowBalance = variableCashflowBalanceWad.toInt();\n\n        cashflow = fixedCashflowBalance + variableCashflowBalance;\n    }\n\n    /// @notice Divide a given time in seconds by the number of seconds in a year\n    /// @param timeInSecondsAsWad A time in seconds in Wad (i.e. scaled up by 10^18)\n    /// @return timeInYearsWad An annualised factor of timeInSeconds, also in Wad\n    function accrualFact(uint256 timeInSecondsAsWad) public pure returns (uint256 timeInYearsWad) {\n        timeInYearsWad = timeInSecondsAsWad.div(SECONDS_IN_YEAR_IN_WAD);\n    }\n\n    /// @notice Calculate the fixed factor for a position - that is, the percentage earned over\n    /// @notice the specified period of time, assuming 1% per year\n    /// @param termStartTimestampWad When does the period of time begin, in wei-seconds\n    /// @param termEndTimestampWad When does the period of time end, in wei-seconds\n    /// @return fixedFactorWad The fixed factor for the position (in Wad)\n    function fixedFactor(uint256 termStartTimestampWad, uint256 termEndTimestampWad)\n        public\n        pure\n        returns (uint256 fixedFactorWad)\n    {\n        require(termStartTimestampWad <= termEndTimestampWad, ExceptionsLibrary.TIMESTAMP);\n        uint256 timeInSecondsWad = termEndTimestampWad - termStartTimestampWad;\n        fixedFactorWad = accrualFact(timeInSecondsWad).div(ONE_HUNDRED_IN_WAD);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Returns the associated Voltz Vault contract\n    function vault() external view returns (IVoltzVault) {\n        return _vault;\n    }\n\n    /// @notice Returns the multiplier used to decide how much margin is\n    /// @notice left in partially unwound positions on Voltz (in wad)\n    function marginMultiplierPostUnwindWad() external view returns (uint256) {\n        return _marginMultiplierPostUnwindWad;\n    }\n\n    /// @notice Returns the decimal delta used to compute lower and upper limits of\n    /// @notice estimated APY: (1 +/- delta) * estimatedAPY (in wad)\n    function estimatedAPYDecimalDeltaWad() external view returns (uint256) {\n        return _estimatedAPYDecimalDeltaWad;\n    }\n\n    /// @notice Computes liqudity value for a given liquidity notional\n    function getLiquidityFromNotional(int256 liquidityNotionalDelta) external view returns (uint128) {\n        if (liquidityNotionalDelta != 0) {\n            VoltzVault.TickRange memory currentPosition_ = _vault.currentPosition();\n            uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(currentPosition_.tickLower);\n            uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(currentPosition_.tickUpper);\n\n            uint128 liquidity = _periphery.getLiquidityForNotional(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                (liquidityNotionalDelta < 0)\n                    ? (-liquidityNotionalDelta).toUint256()\n                    : liquidityNotionalDelta.toUint256()\n            );\n\n            return liquidity;\n        }\n\n        return 0;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Initializes the contract\n    /// @dev It requires the vault to be already initialized. Can\n    /// @dev only be called by the Voltz Vault Governance\n    function initialize() external {\n        require(address(_vault) == address(0), ExceptionsLibrary.INIT);\n\n        VoltzVault vault_ = VoltzVault(msg.sender);\n        _vault = vault_;\n\n        IMarginEngine marginEngine = vault_.marginEngine();\n        _marginEngine = marginEngine;\n\n        _rateOracle = vault_.rateOracle();\n        _periphery = vault_.periphery();\n\n        _underlyingToken = address(marginEngine.underlyingToken());\n        _termStartTimestampWad = marginEngine.termStartTimestampWad();\n        _termEndTimestampWad = marginEngine.termEndTimestampWad();\n\n        _marginMultiplierPostUnwindWad = vault_.marginMultiplierPostUnwindWad();\n    }\n\n    /// @notice Sets the multiplier used to decide how much margin is\n    /// @notice left in partially unwound positions on Voltz (in wad)\n    function setMarginMultiplierPostUnwindWad(uint256 marginMultiplierPostUnwindWad_) external onlyVault {\n        _marginMultiplierPostUnwindWad = marginMultiplierPostUnwindWad_;\n    }\n\n    /// @notice Sets the decimal delta used to compute lower and upper limits of\n    /// @notice estimated APY: (1 +/- delta) * estimatedAPY (in wad)\n    function setEstimatedAPYDecimalDeltaWad(uint256 estimatedAPYDecimalDeltaWad_) external onlyVault {\n        _estimatedAPYDecimalDeltaWad = estimatedAPYDecimalDeltaWad_;\n    }\n\n    /// @notice Calculates the TVL value\n    /// @param aggregatedInactiveFixedTokenBalance Sum of fixed token balances of all\n    /// positions in the trackedPositions array, apart from the balance of the currently\n    /// active position\n    /// @param aggregatedInactiveVariableTokenBalance Sum of variable token balances of all\n    /// positions in the trackedPositions array, apart from the balance of the currently\n    /// active position\n    /// @param aggregatedInactiveMargin Sum of margins of all positions in the trackedPositions\n    /// array apart from the margin of the currently active position\n    function calculateTVL(\n        int256 aggregatedInactiveFixedTokenBalance,\n        int256 aggregatedInactiveVariableTokenBalance,\n        int256 aggregatedInactiveMargin\n    ) external returns (int256 tvl) {\n        VoltzVault vault_ = _vault;\n        VoltzVault.TickRange memory currentPosition = vault_.currentPosition();\n\n        // Calculate estimated variable factor between start and end\n        uint256 estimatedVariableFactorStartEndWad;\n        estimatedVariableFactorStartEndWad = _estimateVariableFactor();\n\n        Position.Info memory currentPositionInfo_ = _marginEngine.getPosition(\n            address(vault_),\n            currentPosition.tickLower,\n            currentPosition.tickUpper\n        );\n\n        tvl = IERC20(_underlyingToken).balanceOf(address(vault_)).toInt256();\n\n        // Aggregate estimated settlement cashflows into TVL\n        tvl +=\n            calculateSettlementCashflow(\n                aggregatedInactiveFixedTokenBalance + currentPositionInfo_.fixedTokenBalance,\n                fixedFactor(_termStartTimestampWad, _termEndTimestampWad),\n                aggregatedInactiveVariableTokenBalance + currentPositionInfo_.variableTokenBalance,\n                estimatedVariableFactorStartEndWad\n            ) +\n            aggregatedInactiveMargin +\n            currentPositionInfo_.margin;\n    }\n\n    /// @notice Calculates the margin that must be kept in the\n    /// @notice current position of the Vault\n    /// @param currentPositionInfo_ The Info of the current position\n    /// @return trackPosition Whether the current position must be tracked or not\n    /// @return marginToKeep Margin that must be kept in the current position\n    function getMarginToKeep(Position.Info memory currentPositionInfo_)\n        external\n        returns (bool trackPosition, uint256 marginToKeep)\n    {\n        VoltzVault vault_ = _vault;\n        VoltzVault.TickRange memory currentPosition = vault_.currentPosition();\n        if (currentPositionInfo_.variableTokenBalance != 0) {\n            // keep k * initial margin requirement, withdraw the rest\n            // need to track to redeem the rest at maturity\n            uint256 positionMarginRequirementInitial = _marginEngine.getPositionMarginRequirement(\n                address(vault_),\n                currentPosition.tickLower,\n                currentPosition.tickUpper,\n                false\n            );\n\n            marginToKeep = _marginMultiplierPostUnwindWad.mul(positionMarginRequirementInitial);\n\n            if (marginToKeep <= positionMarginRequirementInitial) {\n                marginToKeep = positionMarginRequirementInitial + 1;\n            }\n\n            trackPosition = true;\n        } else {\n            if (currentPositionInfo_.fixedTokenBalance > 0) {\n                // withdraw all margin\n                // need to track to redeem ft cashflow at maturity\n                marginToKeep = 1;\n                trackPosition = true;\n            } else {\n                // withdraw everything up to amount that covers negative ft\n                // no need to track for later settlement\n                // since vt = 0, margin requirement initial is equal to fixed cashflow\n                uint256 fixedFactorValueWad = fixedFactor(_termStartTimestampWad, _termEndTimestampWad);\n                uint256 positionMarginRequirementInitial = ((-currentPositionInfo_.fixedTokenBalance).toUint256() *\n                    fixedFactorValueWad).toUint();\n                marginToKeep = positionMarginRequirementInitial + 1;\n            }\n        }\n    }\n\n    /// @notice Returns Position.Info of current position\n    function getVaultPosition(VoltzVault.TickRange memory position) external returns (Position.Info memory) {\n        return _marginEngine.getPosition(address(_vault), position.tickLower, position.tickUpper);\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    /// @notice Estimates the variable factor from the start\n    /// @notice to the end of the pool\n    function _estimateVariableFactor() internal returns (uint256 estimatedVariableFactorStartEndWad) {\n        uint256 termCurrentTimestampWad = Time.blockTimestampScaled();\n        uint256 termEndTimestampWad = _termEndTimestampWad;\n        if (termCurrentTimestampWad > termEndTimestampWad) {\n            termCurrentTimestampWad = termEndTimestampWad;\n        }\n\n        uint256 variableFactorStartCurrentWad = _rateOracle.variableFactorNoCache(\n            _termStartTimestampWad,\n            termCurrentTimestampWad\n        );\n\n        uint256 historicalAPYWad = _marginEngine.getHistoricalApy();\n        uint256 estimatedVariableFactorCurrentEndWad = historicalAPYWad.mul(\n            accrualFact(termEndTimestampWad - termCurrentTimestampWad)\n        );\n\n        // Estimated Variable Factor\n        estimatedVariableFactorStartEndWad = variableFactorStartCurrentWad + estimatedVariableFactorCurrentEndWad;\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IVoltzVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IIntegrationVault.sol\";\nimport \"../external/voltz/IMarginEngine.sol\";\nimport \"../external/voltz/IPeriphery.sol\";\nimport \"../external/voltz/IVAMM.sol\";\nimport \"../external/voltz/rate_oracles/IRateOracle.sol\";\n\ninterface IVoltzVault is IIntegrationVault {\n    /// @dev LP Position on Voltz\n    struct TickRange {\n        /// @dev Lower tick of LP position on Voltz\n        int24 tickLower;\n        /// @dev Upper tick of LP position on Voltz\n        int24 tickUpper;\n    }\n\n    struct InitializeParams {\n        /// @dev Lower tick of initial LP position on Voltz\n        int24 tickLower;\n        /// @dev Upper tick of initial LP position on Voltz\n        int24 tickUpper;\n        /// @dev Leverage used for LP positions on Voltz (in wad)\n        uint256 leverageWad; \n        /// @dev Multiplier used to decide how much margin is left in partially unwound positions on Voltz (in wad)\n        uint256 marginMultiplierPostUnwindWad;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Returns the leverage used for LP positions on Voltz (in wad)\n    function leverageWad() external view returns (uint256);\n\n    /// @notice Returns the multiplier used to decide how much margin is \n    /// @notice left in partially unwound positions on Voltz (in wad)\n    function marginMultiplierPostUnwindWad() external view returns (uint256);\n\n    /// @notice Reference to the margin engine of Voltz Protocol\n    function marginEngine() external view returns (IMarginEngine);\n\n    /// @notice Reference to the vamm of Voltz Protocol\n    function vamm() external view returns (IVAMM);\n\n    /// @notice Reference to the rate oracle of Voltz Protocol\n    function rateOracle() external view returns (IRateOracle);\n\n    /// @notice Reference to the periphery of Voltz Protocol\n    function periphery() external view returns (IPeriphery);\n\n    /// @notice Returns the currently active LP position of the Vault\n    function currentPosition() external view returns (TickRange memory);\n\n    /// @notice Returns the address of the associated Voltz Vault Helper\n    function voltzVaultHelper() external view returns (address);\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Initializes a new vault\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param marginEngine_ the underlying margin engine of the Voltz pool\n    /// @param initializeParams the InitializeParams used to initiate the vault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        address marginEngine_,\n        address periphery_,\n        address voltzHelper_,\n        InitializeParams memory initializeParams\n    ) external;\n\n    /// @notice Vault's available funds are moved to a new LP position\n    /// @dev Unwinds existing active position and funnels \n    /// @dev available funds into a new LP position on Voltz\n    /// @param position The new LP position on Voltz\n    function rebalance(TickRange memory position) external;\n\n    /// @notice Settles Vault-owned position on Voltz and withdraws margin\n    /// @dev The function settles position only if not settled before and\n    /// @dev withdraws all available funds\n    /// @param position The LP position to be settled and withdrawn from\n    function settleVaultPositionAndWithdrawMargin(TickRange memory position) external;\n\n    /// @notice Settles up to batchSize Vault-owned positions on Voltz and withdraws margin\n    /// @dev Only positions with strictly positive cashflows are settled\n    /// @dev and withdrawn from\n    /// @param batchSize Limit on the number of positions to be settled (settles all positions if 0)\n    /// @return settledBatchSize Number of positions which were settled and withdrawn from\n    function settleVault(uint256 batchSize) external returns (uint256 settledBatchSize);\n\n    /// @notice Updates estimated tvl values\n    function updateTvl() external returns (\n        uint256[] memory minTokenAmounts, \n        uint256[] memory maxTokenAmounts\n    ); \n\n    /// @notice Sets the leverage used for LP positions on Voltz (in wad)\n    function setLeverageWad(uint256 leverageWad) external;\n\n    /// @notice Sets the multiplier used to decide how much margin is \n    /// @notice left in partially unwound positions on Voltz (in wad)\n    function setMarginMultiplierPostUnwindWad(uint256 marginMultiplierPostUnwindWad) external;\n\n    // -------------------  EVENTS  -------------------\n\n    /// @notice Emitted when active LP position is changed\n    /// @param oldPosition the previous active position\n    /// @param marginLeftInOldPosition margin left in previous unwound position\n    /// @param newPosition the new active position\n    /// @param marginDepositedInNewPosition margin deposited in the new active position\n    /// @param notionalLiquidityMintedInNewPosition the amount of notional that was minted as liquidity in the new position\n    event PositionRebalance(\n        TickRange oldPosition,\n        int256 marginLeftInOldPosition,\n        TickRange newPosition,\n        uint256 marginDepositedInNewPosition,\n        uint256 notionalLiquidityMintedInNewPosition\n    );\n\n    /// @notice Emitted when Vault is initialised\n    /// @param marginEngine The address of the Voltz margin engine\n    /// @param periphery The address of the Voltz periphery\n    /// @param voltzVaultHelper The address of the Voltz Vault helper\n    /// @param tickLower Lower tick of initial LP position on Voltz\n    /// @param tickUpper Upper tick of initial LP position on Voltz\n    /// @param leverageWad Leverage used for LP positions on Voltz (in wad)\n    /// @param marginMultiplierPostUnwindWad Multiplier used to decide how much margin is left in partially unwound positions on Voltz (in wad)\n    event VaultInitialized(\n        address indexed marginEngine,\n        address indexed periphery,\n        address indexed voltzVaultHelper,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 leverageWad,\n        uint256 marginMultiplierPostUnwindWad\n    );\n\n    /// @notice Emitted when tokens are deposited into the Vault\n    /// @param amountDeposited The amount depositied\n    /// @param notionalLiquidityMinted The amount of liquidity minted on deposit\n    event PushDeposit(\n        uint256 amountDeposited,\n        uint256 notionalLiquidityMinted\n    );\n\n    /// @notice Emitted when tokens are withdrawn from the Vault\n    /// @param to Address of recipient\n    /// @param amountRequestedToWithdraw The amount requested to be withdrawn\n    /// @param amountWithdrawn The amount sent to the recipient\n    event PullWithdraw(\n        address to,\n        uint256 amountRequestedToWithdraw,\n        uint256 amountWithdrawn\n    );\n\n    /// @notice Emitted when TVL is updated\n    /// @param tvl The estimated TVL\n    event TvlUpdate(\n        int256 tvl\n    );\n\n    /// @notice Emitted when a single Vault-owned position is settled and withdrawn from\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param margin The margin withdrawn\n    event PositionSettledAndMarginWithdrawn(\n        int24 tickLower,\n        int24 tickUpper,\n        int256 margin\n    );\n\n    /// @notice Emitted when multilpe Vault-owned positions are settled and withdrawn from\n    /// @param batchSizeRequested The number of positions requested to be settled and withdrawn from\n    /// @param fromIndex The index of the first position from the trackedPositions array to be settled and withdrawn from\n    /// @param toIndex The index of the last position from the trackedPositions array to be settled and withdrawn from\n    event VaultSettle(\n        uint256 batchSizeRequested,\n        uint256 fromIndex,\n        uint256 toIndex\n    );\n\n    /// @notice Emitted when unwind fails\n    /// @param reason Reason of failure\n    event UnwindFail(\n        string reason\n    );\n}\n"
    },
    "contracts/interfaces/external/voltz/IMarginEngine.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity =0.8.9;\nimport \"./IVAMM.sol\";\nimport \"./IPositionStructs.sol\";\nimport \"./utils/Position.sol\";\nimport \"./rate_oracles/IRateOracle.sol\";\nimport \"./fcms/IFCM.sol\";\nimport \"./IFactory.sol\";\nimport \"./IERC20Minimal.sol\";\nimport \"./utils/CustomErrors.sol\";\n\ninterface IMarginEngine is IPositionStructs, CustomErrors {\n    // structs\n\n    function setPausability(bool state) external;\n\n    struct MarginCalculatorParameters {\n        /// @dev Upper bound of the underlying pool (e.g. Aave v2 USDC lending pool) APY from the initiation of the IRS AMM and until its maturity (18 decimals fixed point number)\n        uint256 apyUpperMultiplierWad;\n        /// @dev Lower bound of the underlying pool (e.g. Aave v2 USDC lending pool) APY from the initiation of the IRS AMM and until its maturity (18 decimals)\n        uint256 apyLowerMultiplierWad;\n        /// @dev The volatility of the underlying pool APY (settable by the owner of the Margin Engine) (18 decimals)\n        int256 sigmaSquaredWad;\n        /// @dev Margin Engine Parameter estimated via CIR model calibration (for details refer to litepaper) (18 decimals)\n        int256 alphaWad;\n        /// @dev Margin Engine Parameter estimated via CIR model calibration (for details refer to litepaper) (18 decimals)\n        int256 betaWad;\n        /// @dev Standard normal critical value used in the computation of the Upper APY Bound of the underlying pool\n        int256 xiUpperWad;\n        /// @dev Standard normal critical value used in the computation of the Lower APY Bound of the underlying pool\n        int256 xiLowerWad;\n        /// @dev Max term possible for a Voltz IRS AMM in seconds (18 decimals)\n        int256 tMaxWad;\n        /// @dev multiplier of the starting fixed rate (refer to the litepaper) if simulating a counterfactual fixed taker unwind (moving to the left along the VAMM) for purposes of calculating liquidation margin requirement\n        uint256 devMulLeftUnwindLMWad;\n        /// @dev multiplier of the starting fixed rate (refer to the litepaper) if simulating a counterfactual variable taker unwind (moving to the right along the VAMM) for purposes of calculating liquidation margin requirement\n        uint256 devMulRightUnwindLMWad;\n        /// @dev same as devMulLeftUnwindLMWad but for purposes of calculating the initial margin requirement\n        uint256 devMulLeftUnwindIMWad;\n        /// @dev same as devMulRightUnwindLMWad but for purposes of calculating the initial margin requirement\n        uint256 devMulRightUnwindIMWad;\n        /// @dev r_min from the litepaper eq. 11 for a scenario where counterfactual is a simulated fixed taker unwind (left unwind along the VAMM), used for liquidation margin calculation\n        uint256 fixedRateDeviationMinLeftUnwindLMWad;\n        /// @dev r_min from the litepaper eq. 11 for a scenario where counterfactual is a simulated variable taker unwind (right unwind along the VAMM), used for liquidation margin calculation\n        uint256 fixedRateDeviationMinRightUnwindLMWad;\n        /// @dev same as fixedRateDeviationMinLeftUnwindLMWad but for Initial Margin Requirement\n        uint256 fixedRateDeviationMinLeftUnwindIMWad;\n        /// @dev same as fixedRateDeviationMinRightUnwindLMWad but for Initial Margin Requirement\n        uint256 fixedRateDeviationMinRightUnwindIMWad;\n        /// @dev gamma from eqn. 12 [append this logic to the litepaper] from the litepaper, gamma is an adjustable parameter necessary to calculate scaled deviations to the fixed rate in counterfactual unwinds for minimum margin requirement calculations\n        uint256 gammaWad;\n        /// @dev settable parameter that ensures that minimumMarginRequirement is always above or equal to the minMarginToIncentiviseLiquidators which ensures there is always sufficient incentive for liquidators to liquidate positions given the fact their income is a proportion of position margin\n        uint256 minMarginToIncentiviseLiquidators;\n    }\n\n    // Events\n    event HistoricalApyWindowSetting(uint256 secondsAgo);\n    event CacheMaxAgeSetting(uint256 cacheMaxAgeInSeconds);\n    event RateOracle(uint256 cacheMaxAgeInSeconds);\n\n    event ProtocolCollection(\n        address sender,\n        address indexed recipient,\n        uint256 amount\n    );\n    event LiquidatorRewardSetting(uint256 liquidatorRewardWad);\n\n    event VAMMSetting(IVAMM indexed vamm);\n\n    event RateOracleSetting(IRateOracle indexed rateOracle);\n\n    event FCMSetting(IFCM indexed fcm);\n\n    event MarginCalculatorParametersSetting(\n        MarginCalculatorParameters marginCalculatorParameters\n    );\n\n    event PositionMarginUpdate(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        int256 marginDelta\n    );\n\n    event HistoricalApy(uint256 value);\n\n    event PositionSettlement(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        int256 settlementCashflow\n    );\n\n    event PositionLiquidation(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        address liquidator,\n        int256 notionalUnwound,\n        uint256 liquidatorReward\n    );\n\n    event PositionUpdate(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 _liquidity,\n        int256 margin,\n        int256 fixedTokenBalance,\n        int256 variableTokenBalance,\n        uint256 accumulatedFees\n    );\n\n    /// @dev emitted after the _isAlpha boolean is updated by the owner of the Margin Engine\n    /// @dev _isAlpha boolean dictates whether the Margin Engine is in the Alpha State, i.e. margin updates can only be done via the periphery\n    /// @dev additionally, the periphery has the logic to take care of lp margin caps in the Alpha State phase of the Margin Engine\n    /// @dev __isAlpha is the newly set value for the _isAlpha boolean\n    event IsAlpha(bool __isAlpha);\n\n    // immutables\n\n    /// @notice The Full Collateralisation Module (FCM)\n    /// @dev The FCM is a smart contract that acts as an intermediary Position between the Voltz Core and traders who wish to take fully collateralised fixed taker positions\n    /// @dev An example FCM is the AaveFCM.sol module which inherits from the IFCM interface, it lets fixed takers deposit underlying yield bearing tokens (e.g.) aUSDC as margin to enter into a fixed taker swap without the need to worry about liquidations\n    /// @dev since the MarginEngine is confident the FCM is always fully collateralised, it does not let liquidators liquidate the FCM Position\n    /// @return The Full Collateralisation Module linked to the MarginEngine\n    function fcm() external view returns (IFCM);\n\n    /// @notice The Factory\n    /// @dev the factory that deployed the master Margin Engine\n    function factory() external view returns (IFactory);\n\n    /// @notice The address of the underlying (non-yield bearing) token - e.g. USDC\n    /// @return The underlying ERC20 token (e.g. USDC)\n    function underlyingToken() external view returns (IERC20Minimal);\n\n    /// @notice The rateOracle contract which lets the protocol access historical apys in the yield bearing pools it is built on top of\n    /// @return The underlying ERC20 token (e.g. USDC)\n    function rateOracle() external view returns (IRateOracle);\n\n    /// @notice The unix termStartTimestamp of the MarginEngine in Wad\n    /// @return Term Start Timestamp in Wad\n    function termStartTimestampWad() external view returns (uint256);\n\n    /// @notice The unix termEndTimestamp of the MarginEngine in Wad\n    /// @return Term End Timestamp in Wad\n    function termEndTimestampWad() external view returns (uint256);\n\n    /// @dev \"constructor\" for proxy instances\n    function initialize(\n        IERC20Minimal __underlyingToken,\n        IRateOracle __rateOracle,\n        uint256 __termStartTimestampWad,\n        uint256 __termEndTimestampWad\n    ) external;\n\n    // view functions\n\n    /// @notice The liquidator Reward Percentage (in Wad)\n    /// @dev liquidatorReward (in wad) is the percentage of the margin (of a liquidated position) that is sent to the liquidator\n    /// @dev following a successful liquidation that results in a trader/position unwind; example value:  2 * 10**16 => 2% of position margin is used to cover liquidator reward\n    /// @return Liquidator Reward in Wad\n    function liquidatorRewardWad() external view returns (uint256);\n\n    /// @notice VAMM (Virtual Automated Market Maker) linked to the MarginEngine\n    /// @dev The VAMM is responsible for pricing only (determining the effective fixed rate at which a given Interest Rate Swap notional will be executed)\n    /// @return The VAMM\n    function vamm() external view returns (IVAMM);\n\n    /// @return If true, the Margin Engine Proxy is currently in alpha state, hence margin updates of LPs can only be done via the periphery. If false, lps can directly update their margin via Margin Engine.\n    function isAlpha() external view returns (bool);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param _owner The address of the position owner\n    /// @param _tickLower The lower tick boundary of the position\n    /// @param _tickUpper The upper tick boundary of the position\n    /// Returns position The Position.Info corresponding to the requested position\n    function getPosition(\n        address _owner,\n        int24 _tickLower,\n        int24 _tickUpper\n    ) external returns (Position.Info memory position);\n\n    /// @notice Gets the look-back window size that's used to request the historical APY from the rate Oracle\n    /// @dev The historical APY of the Rate Oracle is necessary for MarginEngine computations\n    /// @dev The look-back window is seconds from the current timestamp\n    /// @dev This value is only settable by the the Factory owner and may be unique for each MarginEngine\n    /// @dev When setting secondAgo, the setter needs to take into consideration the underlying volatility of the APYs in the reference yield-bearing pool (e.g. Aave v2 USDC)\n    function lookbackWindowInSeconds() external view returns (uint256);\n\n    // non-view functions\n\n    /// @notice Sets secondsAgo: The look-back window size used to calculate the historical APY for margin purposes\n    /// @param _secondsAgo the duration of the lookback window in seconds\n    /// @dev Can only be set by the Factory Owner\n    function setLookbackWindowInSeconds(uint256 _secondsAgo) external;\n\n    /// @notice Set the MarginCalculatorParameters (each margin engine can have its own custom set of margin calculator parameters)\n    /// @param _marginCalculatorParameters the MarginCalculatorParameters to set\n    /// @dev marginCalculatorParameteres is of type MarginCalculatorParameters (refer to the definition of the struct for elaboration on what each parameter means)\n    function setMarginCalculatorParameters(\n        MarginCalculatorParameters memory _marginCalculatorParameters\n    ) external;\n\n    /// @notice Sets the liquidator reward: proportion of liquidated position's margin paid as a reward to the liquidator\n    function setLiquidatorReward(uint256 _liquidatorRewardWad) external;\n\n    /// @notice Function that sets the _isAlpha state variable, if it is set to true the protocol is in the Alpha State\n    /// @dev if the Margin Engine is at the alpha state, lp margin updates can only be done via the periphery which in turn takes care of margin caps for the LPs\n    /// @dev this function can only be called by the owner of the VAMM\n    function setIsAlpha(bool __isAlpha) external;\n\n    /// @notice updates the margin account of a position which can be uniquily identified with its _owner, tickLower, tickUpper\n    /// @dev if the position has positive liquidity then before the margin update, we call the updatePositionTokenBalancesAndAccountForFees functon that calculates up to date\n    /// @dev margin, fixed and variable token balances by taking into account the fee income from their tick range and fixed and variable deltas settled along their tick range\n    /// @dev marginDelta is the delta applied to the current margin of a position, if the marginDelta is negative, the position is withdrawing margin, if the marginDelta is positive, the position is depositing funds in terms of the underlying tokens\n    /// @dev if marginDelta is negative, we need to check if the msg.sender is either the _owner of the position or the msg.sender is apporved by the _owner to act on their behalf in Voltz Protocol\n    /// @dev the approval logic is implemented in the Factory.sol\n    /// @dev if marginDelta is negative, we additionally need to check if post the initial margin requirement is still satisfied post withdrawal\n    /// @dev if marginDelta is positive, the depositor of the margin is either the msg.sender or the owner who interacted through an approved peripheral contract\n    function updatePositionMargin(\n        address _owner,\n        int24 _tickLower,\n        int24 _tickUpper,\n        int256 marginDelta\n    ) external;\n\n    /// @notice Settles a Position\n    /// @dev Can be called by anyone\n    /// @dev A position cannot be settled before maturity\n    /// @dev Steps to settle a position:\n    /// @dev 1. Retrieve the current fixed and variable token growth inside the tick range of a position\n    /// @dev 2. Calculate accumulated fixed and variable balances of the position since the last mint/poke/burn\n    /// @dev 3. Update the postion's fixed and variable token balances\n    /// @dev 4. Update the postion's fixed and varaible token growth inside last to enable future updates\n    /// @dev 5. Calculates the settlement cashflow from all of the IRS contracts the position has entered since entering the AMM\n    /// @dev 6. Updates the fixed and variable token balances of the position to be zero, adds the settlement cashflow to the position's current margin\n    function settlePosition(\n        address _owner,\n        int24 _tickLower,\n        int24 _tickUpper\n    ) external;\n\n    /// @notice Liquidate a Position\n    /// @dev Steps to liquidate: update position's fixed and variable token balances to account for balances accumulated throughout the trades made since the last mint/burn/poke,\n    /// @dev Check if the position is liquidatable by calling the isLiquidatablePosition function of the calculator, revert if that is not the case,\n    /// @dev Calculate the liquidation reward = current margin of the position * liquidatorReward, subtract the liquidator reward from the position margin,\n    /// @dev Burn the position's liquidity, unwind unnetted fixed and variable balances of a position, transfer the reward to the liquidator\n    function liquidatePosition(\n        address _owner,\n        int24 _tickLower,\n        int24 _tickUpper\n    ) external returns (uint256);\n\n    /// @notice Update a Position post VAMM induced mint or burn\n    /// @dev Steps taken:\n    /// @dev 1. Update position liquidity based on params.liquidityDelta\n    /// @dev 2. Update fixed and variable token balances of the position based on how much has been accumulated since the last mint/burn/poke\n    /// @dev 3. Update position's margin by taking into account the position accumulated fees since the last mint/burn/poke\n    /// @dev 4. Update fixed and variable token growth + fee growth in the position info struct for future interactions with the position\n    /// @param _params necessary for the purposes of referencing the position being updated (owner, tickLower, tickUpper, _) and the liquidity delta that needs to be applied to position._liquidity\n    function updatePositionPostVAMMInducedMintBurn(\n        IPositionStructs.ModifyPositionParams memory _params\n    ) external returns (int256 _positionMarginRequirement);\n\n    // @notive Update a position post VAMM induced swap\n    /// @dev Since every position can also engage in swaps with the VAMM, this function needs to be invoked after non-external calls are made to the VAMM's swap function\n    /// @dev This purpose of this function is to:\n    /// @dev 1. updatePositionTokenBalancesAndAccountForFees\n    /// @dev 2. update position margin to account for fees paid to execute the swap\n    /// @dev 3. calculate the position margin requrement given the swap, check if the position marigin satisfies the most up to date requirement\n    /// @dev 4. if all the requirements are satisfied then position gets updated to take into account the swap that it just entered, if the minimum margin requirement is not satisfied then the transaction will revert\n    function updatePositionPostVAMMInducedSwap(\n        address _owner,\n        int24 _tickLower,\n        int24 _tickUpper,\n        int256 _fixedTokenDelta,\n        int256 _variableTokenDelta,\n        uint256 _cumulativeFeeIncurred,\n        int256 _fixedTokenDeltaUnbalanced\n    ) external returns (int256 _positionMarginRequirement);\n\n    /// @notice function that can only be called by the owner enables collection of protocol generated fees from any give margin engine\n    /// @param _recipient the address which collects the protocol generated fees\n    /// @param _amount the amount in terms of underlying tokens collected from the protocol's earnings\n    function collectProtocol(address _recipient, uint256 _amount) external;\n\n    /// @notice sets the Virtual Automated Market Maker (VAMM) attached to the MarginEngine\n    /// @dev the VAMM is responsible for price discovery, whereas the management of the underlying collateral and liquidations are handled by the Margin Engine\n    function setVAMM(IVAMM _vAMM) external;\n\n    /// @notice sets the Virtual Automated Market Maker (VAMM) attached to the MarginEngine\n    /// @dev the VAMM is responsible for price discovery, whereas the management of the underlying collateral and liquidations are handled by the Margin Engine\n    function setRateOracle(IRateOracle __rateOracle) external;\n\n    /// @notice sets the Full Collateralisation Module\n    function setFCM(IFCM _newFCM) external;\n\n    /// @notice transfers margin in terms of underlying tokens to a trader from the Full Collateralisation Module\n    /// @dev post maturity date of the MarginEngine, the traders from the Full Collateralisation module will be able to settle with the MarginEngine\n    /// @dev to ensure their fixed yield is guaranteed, in order to collect the funds from the MarginEngine, the FCM needs to invoke the transferMarginToFCMTrader function whcih is only callable by the FCM attached to a particular Margin Engine\n    function transferMarginToFCMTrader(address _account, uint256 _marginDelta)\n        external;\n\n    /// @notice Gets the maximum age of the cached historical APY value can be without being refreshed\n    function cacheMaxAgeInSeconds() external view returns (uint256);\n\n    /// @notice Sets the maximum age that the cached historical APY value\n    /// @param _cacheMaxAgeInSeconds The new maximum age that the historical APY cache can be before being considered stale\n    function setCacheMaxAgeInSeconds(uint256 _cacheMaxAgeInSeconds) external;\n\n    /// @notice Get Historical APY\n    /// @dev The lookback window used by this function is determined by `lookbackWindowInSeconds`\n    /// @dev refresh the historical apy cache if necessary\n    /// @return historicalAPY (Wad)\n    function getHistoricalApy() external returns (uint256);\n\n    /// @notice Computes the historical APY value of the RateOracle, without updating the cached value\n    /// @dev The lookback window used by this function is determined by `lookbackWindowInSeconds`\n    function getHistoricalApyReadOnly() external view returns (uint256);\n\n    function getPositionMarginRequirement(\n        address _recipient,\n        int24 _tickLower,\n        int24 _tickUpper,\n        bool _isLM\n    ) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/external/voltz/IPeriphery.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity =0.8.9;\n\nimport \"./IMarginEngine.sol\";\nimport \"./IVAMM.sol\";\nimport \"./utils/CustomErrors.sol\";\n\ninterface IPeriphery is CustomErrors {\n    // events\n\n    /// @dev emitted after new lp margin cap is set\n    event MarginCap(IVAMM _vamm, int256 _lpMarginCapNew);\n\n    // structs\n\n    struct MintOrBurnParams {\n        IMarginEngine marginEngine;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 notional;\n        bool isMint;\n        int256 marginDelta;\n    }\n\n    struct SwapPeripheryParams {\n        IMarginEngine marginEngine;\n        bool isFT;\n        uint256 notional;\n        uint160 sqrtPriceLimitX96;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 marginDelta;\n    }\n\n    // view functions\n\n    function getCurrentTick(IMarginEngine marginEngine)\n        external\n        view\n        returns (int24 currentTick);\n\n    /// @param _vamm VAMM for which to get the lp cap in underlying tokens\n    /// @return Notional Cap for liquidity providers that mint or burn via periphery (enforced in the core if isAlpha is set to true)\n    function lpMarginCaps(IVAMM _vamm) external returns (int256);\n\n    /// @param _vamm VAMM for which to get the lp notional cumulative in underlying tokens\n    /// @return Total amount of notional supplied by the LPs to a given VAMM via the periphery\n    function lpMarginCumulatives(IVAMM _vamm) external returns (int256);\n\n    // non-view functions\n\n    function mintOrBurn(MintOrBurnParams memory params)\n        external\n        returns (int256 positionMarginRequirement);\n\n    function swap(SwapPeripheryParams memory params)\n        external\n        returns (\n            int256 _fixedTokenDelta,\n            int256 _variableTokenDelta,\n            uint256 _cumulativeFeeIncurred,\n            int256 _fixedTokenDeltaUnbalanced,\n            int256 _marginRequirement,\n            int24 _tickAfter\n        );\n\n    function updatePositionMargin(\n        IMarginEngine _marginEngine,\n        int24 _tickLower,\n        int24 _tickUpper,\n        int256 _marginDelta,\n        bool _fullyWithdraw\n    ) external;\n\n    function setLPMarginCap(IVAMM _vamm, int256 _lpMarginCapNew) external;\n\n    function settlePositionAndWithdrawMargin(\n        IMarginEngine _marginEngine,\n        address _owner,\n        int24 _tickLower,\n        int24 _tickUpper\n    ) external;\n    \n    function getLiquidityForNotional(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 notionalAmount\n    ) external pure returns (uint128 liquidity);\n}\n"
    },
    "contracts/interfaces/external/voltz/IVAMM.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.9;\nimport \"./IMarginEngine.sol\";\nimport \"./IFactory.sol\";\nimport \"./IPositionStructs.sol\";\nimport \"./utils/Tick.sol\";\nimport \"./utils/CustomErrors.sol\";\n\ninterface IVAMM is IPositionStructs, CustomErrors {\n    function setPausability(bool state) external;\n\n    // events\n    event Swap(\n        address sender,\n        address indexed recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        int256 desiredNotional,\n        uint160 sqrtPriceLimitX96,\n        uint256 cumulativeFeeIncurred,\n        int256 fixedTokenDelta,\n        int256 variableTokenDelta,\n        int256 fixedTokenDeltaUnbalanced\n    );\n\n    /// @dev emitted after a given vamm is successfully initialized\n    event VAMMInitialization(uint160 sqrtPriceX96, int24 tick);\n\n    /// @dev emitted after a successful minting of a given LP position\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount\n    );\n\n    /// @dev emitted after a successful burning of a given LP position\n    event Burn(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount\n    );\n\n    /// @dev emitted after setting feeProtocol\n    event FeeProtocol(uint8 feeProtocol);\n\n    /// @dev emitted after fee is set\n    event Fee(uint256 feeWad);\n\n    /// @dev emitted after the _isAlpha boolean is updated by the owner of the VAMM\n    /// @dev _isAlpha boolean dictates whether the VAMM is in the Alpha State, i.e. mints can only be done via the periphery\n    /// @dev additionally, the periphery has the logic to take care of lp notional caps in the Alpha State phase of VAMM\n    /// @dev __isAlpha is the newly set value for the _isAlpha boolean\n    event IsAlpha(bool __isAlpha);\n\n    event VAMMPriceChange(int24 tick);\n\n    // structs\n\n    struct VAMMVars {\n        /// @dev The current price of the pool as a sqrt(variableToken/fixedToken) Q64.96 value\n        uint160 sqrtPriceX96;\n        /// @dev The current tick of the vamm, i.e. according to the last tick transition that was run.\n        int24 tick;\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\n        // represented as an integer denominator (1/x)\n        uint8 feeProtocol;\n    }\n\n    struct SwapParams {\n        /// @dev Address of the trader initiating the swap\n        address recipient;\n        /// @dev The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n        int256 amountSpecified;\n        /// @dev The Q64.96 sqrt price limit. If !isFT, the price cannot be less than this\n        uint160 sqrtPriceLimitX96;\n        /// @dev lower tick of the position\n        int24 tickLower;\n        /// @dev upper tick of the position\n        int24 tickUpper;\n    }\n\n    struct SwapCache {\n        /// @dev liquidity at the beginning of the swap\n        uint128 liquidityStart;\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\n        // represented as an integer denominator (1/x)%\n        uint8 feeProtocol;\n    }\n\n    /// @dev the top level state of the swap, the results of which are recorded in storage at the end\n    struct SwapState {\n        /// @dev the amount remaining to be swapped in/out of the input/output asset\n        int256 amountSpecifiedRemaining;\n        /// @dev the amount already swapped out/in of the output/input asset\n        int256 amountCalculated;\n        /// @dev current sqrt(price)\n        uint160 sqrtPriceX96;\n        /// @dev the tick associated with the current price\n        int24 tick;\n        /// @dev the global fixed token growth\n        int256 fixedTokenGrowthGlobalX128;\n        /// @dev the global variable token growth\n        int256 variableTokenGrowthGlobalX128;\n        /// @dev the current liquidity in range\n        uint128 liquidity;\n        /// @dev the global fee growth of the underlying token\n        uint256 feeGrowthGlobalX128;\n        /// @dev amount of underlying token paid as protocol fee\n        uint256 protocolFee;\n        /// @dev cumulative fee incurred while initiating a swap\n        uint256 cumulativeFeeIncurred;\n        /// @dev fixedTokenDelta that will be applied to the fixed token balance of the position executing the swap (recipient)\n        int256 fixedTokenDeltaCumulative;\n        /// @dev variableTokenDelta that will be applied to the variable token balance of the position executing the swap (recipient)\n        int256 variableTokenDeltaCumulative;\n        /// @dev fixed token delta cumulative but without rebalancings applied\n        int256 fixedTokenDeltaUnbalancedCumulative;\n    }\n\n    struct StepComputations {\n        /// @dev the price at the beginning of the step\n        uint160 sqrtPriceStartX96;\n        /// @dev the next tick to swap to from the current tick in the swap direction\n        int24 tickNext;\n        /// @dev whether tickNext is initialized or not\n        bool initialized;\n        /// @dev sqrt(price) for the next tick (1/0)\n        uint160 sqrtPriceNextX96;\n        /// @dev how much is being swapped in in this step\n        uint256 amountIn;\n        /// @dev how much is being swapped out\n        uint256 amountOut;\n        /// @dev how much fee is being paid in (underlying token)\n        uint256 feeAmount;\n        /// @dev ...\n        uint256 feeProtocolDelta;\n        /// @dev ...\n        int256 fixedTokenDeltaUnbalanced; // for LP\n        /// @dev ...\n        int256 fixedTokenDelta; // for LP\n        /// @dev ...\n        int256 variableTokenDelta; // for LP\n    }\n\n    /// @dev \"constructor\" for proxy instances\n    function initialize(IMarginEngine __marginEngine, int24 __tickSpacing)\n        external;\n\n    // immutables\n\n    /// @notice The vamm's fee (proportion) in wad\n    /// @return The fee in wad\n    function feeWad() external view returns (uint256);\n\n    /// @notice The vamm tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter should be enforced per tick (when setting) to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to the vamm\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n\n    // state variables\n\n    /// @return The current VAMM Vars (see struct definition for semantics)\n    function vammVars() external view returns (VAMMVars memory);\n\n    /// @return If true, the VAMM Proxy is currently in alpha state, hence minting can only be done via the periphery. If false, minting can be done directly via VAMM.\n    function isAlpha() external view returns (bool);\n\n    /// @notice The fixed token growth accumulated per unit of liquidity for the entire life of the vamm\n    /// @dev This value can overflow the uint256\n    function fixedTokenGrowthGlobalX128() external view returns (int256);\n\n    /// @notice The variable token growth accumulated per unit of liquidity for the entire life of the vamm\n    /// @dev This value can overflow the uint256\n    function variableTokenGrowthGlobalX128() external view returns (int256);\n\n    /// @notice The fee growth collected per unit of liquidity for the entire life of the vamm\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobalX128() external view returns (uint256);\n\n    /// @notice The currently in range liquidity available to the vamm\n    function liquidity() external view returns (uint128);\n\n    /// @notice The amount underlying token that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint256\n    function protocolFees() external view returns (uint256);\n\n    function marginEngine() external view returns (IMarginEngine);\n\n    function factory() external view returns (IFactory);\n\n    /// @notice Function that sets the feeProtocol of the vamm\n    /// @dev the current protocol fee as a percentage of the swap fee taken on withdrawal\n    // represented as an integer denominator (1/x)\n    function setFeeProtocol(uint8 feeProtocol) external;\n\n    /// @notice Function that sets the _isAlpha state variable, if it is set to true the protocol is in the Alpha State\n    /// @dev if the VAMM is at the alpha state, mints can only be done via the periphery which in turn takes care of notional caps for the LPs\n    /// @dev this function can only be called by the owner of the VAMM\n    function setIsAlpha(bool __isAlpha) external;\n\n    /// @notice Function that sets fee of the vamm\n    /// @dev The vamm's fee (proportion) in wad\n    function setFee(uint256 _fee) external;\n\n    /// @notice Updates internal accounting to reflect a collection of protocol fees. The actual transfer of fees must happen separately in the AMM\n    /// @dev can only be done via the collectProtocol function of the parent AMM of the vamm\n    function updateProtocolFees(uint256 protocolFeesCollected) external;\n\n    /// @notice Sets the initial price for the vamm\n    /// @dev Price is represented as a sqrt(amountVariableToken/amountFixedToken) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the vamm as a Q64.96\n    function initializeVAMM(uint160 sqrtPriceX96) external;\n\n    /// @notice removes liquidity given recipient/tickLower/tickUpper of the position\n    /// @param recipient The address for which the liquidity will be removed\n    /// @param tickLower The lower tick of the position in which to remove liquidity\n    /// @param tickUpper The upper tick of the position in which to remove liqudiity\n    /// @param amount The amount of liquidity to burn\n    function burn(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (int256 positionMarginRequirement);\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (int256 positionMarginRequirement);\n\n    /// @notice Initiate an Interest Rate Swap\n    /// @param params SwapParams necessary to initiate an Interest Rate Swap\n    /// @return fixedTokenDelta Fixed Token Delta\n    /// @return variableTokenDelta Variable Token Delta\n    /// @return cumulativeFeeIncurred Cumulative Fee Incurred\n    function swap(SwapParams memory params)\n        external\n        returns (\n            int256 fixedTokenDelta,\n            int256 variableTokenDelta,\n            uint256 cumulativeFeeIncurred,\n            int256 fixedTokenDeltaUnbalanced,\n            int256 marginRequirement\n        );\n\n    /// @notice Look up information about a specific tick in the amm\n    /// @param tick The tick to look up\n    /// @return liquidityGross: the total amount of position liquidity that uses the vamm either as tick lower or tick upper,\n    /// liquidityNet: how much liquidity changes when the vamm price crosses the tick,\n    /// feeGrowthOutsideX128: the fee growth on the other side of the tick from the current tick in underlying token. i.e. if liquidityGross is greater than 0. In addition, these values are only relative.\n    function ticks(int24 tick) external view returns (Tick.Info memory);\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Computes the current fixed and variable token growth inside a given tick range given the current tick in the vamm\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @return fixedTokenGrowthInsideX128 Fixed Token Growth inside the given tick range\n    /// @return variableTokenGrowthInsideX128 Variable Token Growth inside the given tick range\n    /// @return feeGrowthInsideX128 Fee Growth Inside given tick range\n    function computeGrowthInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int256 fixedTokenGrowthInsideX128,\n            int256 variableTokenGrowthInsideX128,\n            uint256 feeGrowthInsideX128\n        );\n}\n"
    },
    "contracts/interfaces/external/voltz/rate_oracles/IRateOracle.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity =0.8.9;\n\nimport \"../utils/CustomErrors.sol\";\nimport \"../IERC20Minimal.sol\";\n\n/// @dev The RateOracle is used for two purposes on the Voltz Protocol\n/// @dev Settlement: in order to be able to settle IRS positions after the termEndTimestamp of a given AMM\n/// @dev Margin Engine Computations: getApyFromTo is used by the MarginCalculator and MarginEngine\n/// @dev It is necessary to produce margin requirements for Trader and Liquidity Providers\ninterface IRateOracle is CustomErrors {\n\n    // events\n    event MinSecondsSinceLastUpdate(uint256 _minSecondsSinceLastUpdate);\n    event OracleBufferUpdate(\n        uint256 blockTimestampScaled,\n        address source,\n        uint16 index,\n        uint32 blockTimestamp,\n        uint256 observedValue,\n        uint16 cardinality,\n        uint16 cardinalityNext\n    );\n\n    /// @notice Emitted by the rate oracle for increases to the number of observations that can be stored\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event RateCardinalityNext(\n        uint16 observationCardinalityNextNew\n    );\n\n    // view functions\n\n    /// @notice Gets minimum number of seconds that need to pass since the last update to the rates array\n    /// @dev This is a throttling mechanic that needs to ensure we don't run out of space in the rates array\n    /// @dev The maximum size of the rates array is 65535 entries\n    // AB: as long as this doesn't affect the termEndTimestamp rateValue too much\n    // AB: can have a different minSecondsSinceLastUpdate close to termEndTimestamp to have more granularity for settlement purposes\n    /// @return minSecondsSinceLastUpdate in seconds\n    function minSecondsSinceLastUpdate() external view returns (uint256);\n\n    /// @notice Gets the address of the underlying token of the RateOracle\n    /// @return underlying The address of the underlying token\n    function underlying() external view returns (IERC20Minimal);\n\n    /// @notice Gets the variable factor between termStartTimestamp and termEndTimestamp\n    /// @return result The variable factor\n    /// @dev If the current block timestamp is beyond the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp, termEndTimestamp). Term end timestamps are cached for quick retrieval later.\n    /// @dev If the current block timestamp is before the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp,Time.blockTimestampScaled());\n    /// @dev if queried before maturity then returns the rate of return between pool initiation and current timestamp (in wad)\n    /// @dev if queried after maturity then returns the rate of return between pool initiation and maturity timestamp (in wad)\n    function variableFactor(uint256 termStartTimestamp, uint256 termEndTimestamp) external returns(uint256 result);\n\n    /// @notice Gets the variable factor between termStartTimestamp and termEndTimestamp\n    /// @return result The variable factor\n    /// @dev If the current block timestamp is beyond the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp, termEndTimestamp). No caching takes place.\n    /// @dev If the current block timestamp is before the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp,Time.blockTimestampScaled());\n    function variableFactorNoCache(uint256 termStartTimestamp, uint256 termEndTimestamp) external view returns(uint256 result);\n\n    \n    /// @notice Calculates the observed interest returned by the underlying in a given period\n    /// @dev Reverts if we have no data point for either timestamp\n    /// @param from The timestamp of the start of the period, in seconds\n    /// @param to The timestamp of the end of the period, in seconds\n    /// @return The \"floating rate\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10*16\n    function getRateFromTo(uint256 from, uint256 to)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Calculates the observed APY returned by the rate oracle in a given period\n    /// @param from The timestamp of the start of the period, in seconds\n    /// @param to The timestamp of the end of the period, in seconds\n    /// @dev Reverts if we have no data point for either timestamp\n    //  how is the returned rate encoded? Floating rate?\n    function getApyFromTo(uint256 from, uint256 to)\n        external\n        view\n        returns (uint256 apyFromTo);\n\n    // non-view functions\n\n    /// @notice Sets minSecondsSinceLastUpdate: The minimum number of seconds that need to pass since the last update to the rates array\n    /// @dev Can only be set by the Factory Owner\n    function setMinSecondsSinceLastUpdate(uint256 _minSecondsSinceLastUpdate) external;\n\n    /// @notice Increase the maximum number of rates observations that this RateOracle will store\n    /// @dev This method is no-op if the RateOracle already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param rateCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 rateCardinalityNext) external;\n\n    /// @notice Writes a rate observation to the rates array given the current rate cardinality, rate index and rate cardinality next\n    /// Write oracle entry is called whenever a new position is minted via the vamm or when a swap is initiated via the vamm\n    /// That way the gas costs of Rate Oracle updates can be distributed across organic interactions with the protocol\n    function writeOracleEntry() external;\n\n    /// @notice unique ID of the underlying yield bearing protocol (e.g. Aave v2 has id 1)\n    /// @return yieldBearingProtocolID unique id of the underlying yield bearing protocol\n    function UNDERLYING_YIELD_BEARING_PROTOCOL_ID() external view returns(uint8 yieldBearingProtocolID);\n}\n"
    },
    "contracts/interfaces/external/voltz/IPositionStructs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.9;\n\ninterface IPositionStructs {\n    struct ModifyPositionParams {\n        // the address that owns the position\n        address owner;\n        // the lower and upper tick of the position\n        int24 tickLower;\n        int24 tickUpper;\n        // any change in liquidity\n        int128 liquidityDelta;\n    }\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/Position.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.9;\n\nimport \"./LiquidityMath.sol\";\nimport \"./FixedPoint128.sol\";\nimport \"./Tick.sol\";\nimport \"@prb/math/contracts/PRBMathSD59x18.sol\";\nimport \"@prb/math/contracts/PRBMathUD60x18.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"contracts/libraries/external/FullMath.sol\";\n\n/// @title Position\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n/// @dev Positions store additional state for tracking fees owed to the position as well as their fixed and variable token balances\nlibrary Position {\n    using Position for Info;\n\n    // info stored for each user's position\n    struct Info {\n        // has the position been already burned\n        // a burned position can no longer support new IRS contracts but still needs to cover settlement cash-flows of on-going IRS contracts it entered\n        // bool isBurned;, equivalent to having zero liquidity\n        // is position settled\n        bool isSettled;\n        // the amount of liquidity owned by this position\n        uint128 _liquidity;\n        // current margin of the position in terms of the underlyingToken\n        int256 margin;\n        // fixed token growth per unit of liquidity as of the last update to liquidity or fixed/variable token balance\n        int256 fixedTokenGrowthInsideLastX128;\n        // variable token growth per unit of liquidity as of the last update to liquidity or fixed/variable token balance\n        int256 variableTokenGrowthInsideLastX128;\n        // current Fixed Token balance of the position, 1 fixed token can be redeemed for 1% APY * (annualised amm term) at the maturity of the amm\n        // assuming 1 token worth of notional \"deposited\" in the underlying pool at the inception of the amm\n        // can be negative/positive/zero\n        int256 fixedTokenBalance;\n        // current Variable Token Balance of the position, 1 variable token can be redeemed for underlyingPoolAPY*(annualised amm term) at the maturity of the amm\n        // assuming 1 token worth of notional \"deposited\" in the underlying pool at the inception of the amm\n        // can be negative/positive/zero\n        int256 variableTokenBalance;\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed (via the margin)\n        uint256 feeGrowthInsideLastX128;\n        // amount of variable tokens at the initiation of liquidity\n        uint256 rewardPerAmount;\n        // amount of fees accumulated\n        uint256 accumulatedFees;\n    }\n\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\n    /// @param self The mapping containing all user positions\n    /// @param owner The address of the position owner\n    /// @param tickLower The lower tick boundary of the position\n    /// @param tickUpper The upper tick boundary of the position\n    /// @return position The position info struct of the given owners' position\n    function get(\n        mapping(bytes32 => Info) storage self,\n        address owner,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal view returns (Position.Info storage position) {\n        Tick.checkTicks(tickLower, tickUpper);\n\n        position = self[\n            keccak256(abi.encodePacked(owner, tickLower, tickUpper))\n        ];\n    }\n\n    function settlePosition(Info storage self) internal {\n        require(!self.isSettled, \"already settled\");\n        self.isSettled = true;\n    }\n\n    /// @notice Updates the Info struct of a position by changing the amount of margin according to marginDelta\n    /// @param self Position Info Struct of the Liquidity Provider\n    /// @param marginDelta Change in the margin account of the position (in wei)\n    function updateMarginViaDelta(Info storage self, int256 marginDelta)\n        internal\n    {\n        self.margin += marginDelta;\n    }\n\n    /// @notice Updates the Info struct of a position by changing the fixed and variable token balances of the position\n    /// @param self Position Info struct of the liquidity provider\n    /// @param fixedTokenBalanceDelta Change in the number of fixed tokens in the position's fixed token balance\n    /// @param variableTokenBalanceDelta Change in the number of variable tokens in the position's variable token balance\n    function updateBalancesViaDeltas(\n        Info storage self,\n        int256 fixedTokenBalanceDelta,\n        int256 variableTokenBalanceDelta\n    ) internal {\n        if (fixedTokenBalanceDelta | variableTokenBalanceDelta != 0) {\n            self.fixedTokenBalance += fixedTokenBalanceDelta;\n            self.variableTokenBalance += variableTokenBalanceDelta;\n        }\n    }\n\n    /// @notice Returns Fee Delta = (feeGrowthInside-feeGrowthInsideLast) * liquidity of the position\n    /// @param self position info struct represeting a liquidity provider\n    /// @param feeGrowthInsideX128 fee growth per unit of liquidity as of now\n    /// @return _feeDelta Fee Delta\n    function calculateFeeDelta(Info storage self, uint256 feeGrowthInsideX128)\n        internal\n        pure\n        returns (uint256 _feeDelta)\n    {\n        Info memory _self = self;\n\n        /// @dev 0xZenus: The multiplication overflows, need to wrap the below expression in an unchecked block.\n        unchecked {\n            _feeDelta = FullMath.mulDiv(\n                feeGrowthInsideX128 - _self.feeGrowthInsideLastX128,\n                _self._liquidity,\n                FixedPoint128.Q128\n            );\n        }\n    }\n\n    /// @notice Returns Fixed and Variable Token Deltas\n    /// @param self position info struct represeting a liquidity provider\n    /// @param fixedTokenGrowthInsideX128 fixed token growth per unit of liquidity as of now (in wei)\n    /// @param variableTokenGrowthInsideX128 variable token growth per unit of liquidity as of now (in wei)\n    /// @return _fixedTokenDelta = (fixedTokenGrowthInside-fixedTokenGrowthInsideLast) * liquidity of a position\n    /// @return _variableTokenDelta = (variableTokenGrowthInside-variableTokenGrowthInsideLast) * liquidity of a position\n    function calculateFixedAndVariableDelta(\n        Info storage self,\n        int256 fixedTokenGrowthInsideX128,\n        int256 variableTokenGrowthInsideX128\n    )\n        internal\n        pure\n        returns (int256 _fixedTokenDelta, int256 _variableTokenDelta)\n    {\n        Info memory _self = self;\n\n        int256 fixedTokenGrowthInsideDeltaX128 = fixedTokenGrowthInsideX128 -\n            _self.fixedTokenGrowthInsideLastX128;\n\n        _fixedTokenDelta = FullMath.mulDivSigned(\n            fixedTokenGrowthInsideDeltaX128,\n            _self._liquidity,\n            FixedPoint128.Q128\n        );\n\n        int256 variableTokenGrowthInsideDeltaX128 = variableTokenGrowthInsideX128 -\n                _self.variableTokenGrowthInsideLastX128;\n\n        _variableTokenDelta = FullMath.mulDivSigned(\n            variableTokenGrowthInsideDeltaX128,\n            _self._liquidity,\n            FixedPoint128.Q128\n        );\n    }\n\n    /// @notice Updates fixedTokenGrowthInsideLast and variableTokenGrowthInsideLast to the current values\n    /// @param self position info struct represeting a liquidity provider\n    /// @param fixedTokenGrowthInsideX128 fixed token growth per unit of liquidity as of now\n    /// @param variableTokenGrowthInsideX128 variable token growth per unit of liquidity as of now\n    function updateFixedAndVariableTokenGrowthInside(\n        Info storage self,\n        int256 fixedTokenGrowthInsideX128,\n        int256 variableTokenGrowthInsideX128\n    ) internal {\n        self.fixedTokenGrowthInsideLastX128 = fixedTokenGrowthInsideX128;\n        self.variableTokenGrowthInsideLastX128 = variableTokenGrowthInsideX128;\n    }\n\n    /// @notice Updates feeGrowthInsideLast to the current value\n    /// @param self position info struct represeting a liquidity provider\n    /// @param feeGrowthInsideX128 fee growth per unit of liquidity as of now\n    function updateFeeGrowthInside(\n        Info storage self,\n        uint256 feeGrowthInsideX128\n    ) internal {\n        self.feeGrowthInsideLastX128 = feeGrowthInsideX128;\n    }\n\n    /// @notice Updates position's liqudity following either mint or a burn\n    /// @param self The individual position to update\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\n    function updateLiquidity(Info storage self, int128 liquidityDelta)\n        internal\n    {\n        Info memory _self = self;\n\n        if (liquidityDelta == 0) {\n            require(_self._liquidity > 0, \"NP\"); // disallow pokes for 0 liquidity positions\n        } else {\n            self._liquidity = LiquidityMath.addDelta(\n                _self._liquidity,\n                liquidityDelta\n            );\n        }\n    }\n}\n"
    },
    "contracts/interfaces/external/voltz/fcms/IFCM.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity =0.8.9;\n\nimport \"../IMarginEngine.sol\";\nimport \"../utils/CustomErrors.sol\";\nimport \"../IERC20Minimal.sol\";\nimport \"./TraderWithYieldBearingAssets.sol\";\nimport \"../IVAMM.sol\";\nimport \"../rate_oracles/IRateOracle.sol\";\n\ninterface IFCM is CustomErrors {\n    function setPausability(bool state) external;\n\n    function getTraderWithYieldBearingAssets(address trader)\n        external\n        view\n        returns (TraderWithYieldBearingAssets.Info memory traderInfo);\n\n    /// @notice Initiate a Fully Collateralised Fixed Taker Swap\n    /// @param notional amount of notional (in terms of the underlying token) to trade\n    /// @param sqrtPriceLimitX96 the sqrtPriceLimit (in binary fixed point math notation) beyond which swaps won't be executed\n    /// @dev An example of an initiated fully collateralised fixed taker swap is a scenario where a trader with 100 aTokens wishes to get a fixed return on them\n    /// @dev they can choose to deposit their 100aTokens into the FCM (enter into a fixed taker position with a notional of 100) to swap variable cashflows from the aTokens\n    /// @dev with the fixed cashflows from the variable takers\n    function initiateFullyCollateralisedFixedTakerSwap(\n        uint256 notional,\n        uint160 sqrtPriceLimitX96\n    ) external returns (int256 fixedTokenDelta, int256 variableTokenDelta, uint256 cumulativeFeeIncurred, int256 fixedTokenDeltaUnbalanced);\n\n    /// @notice Unwind a Fully Collateralised Fixed Taker Swap\n    /// @param notionalToUnwind The amount of notional of the original Fully Collateralised Fixed Taker swap to be unwound at the current VAMM fixed rates\n    /// @param sqrtPriceLimitX96 the sqrtPriceLimit (in binary fixed point math notation) beyond which the unwind swaps won't be executed\n    /// @dev The purpose of this function is to let fully collateralised fixed takers to exist their swaps by entering into variable taker positions against the VAMM\n    /// @dev thus effectively releasing the margin in yield bearing tokens from the fixed swap contract\n    function unwindFullyCollateralisedFixedTakerSwap(\n        uint256 notionalToUnwind,\n        uint160 sqrtPriceLimitX96\n    ) external returns (int256 fixedTokenDelta, int256 variableTokenDelta, uint256 cumulativeFeeIncurred, int256 fixedTokenDeltaUnbalanced);\n\n    /// @notice Settle Trader\n    /// @dev this function in the fcm let's traders settle with the MarginEngine based on their settlement cashflows which is a functon of their fixed and variable token balances\n    function settleTrader() external returns (int256);\n\n    /// @notice\n    /// @param account address of the position owner from the MarginEngine who wishes to settle with the FCM in underlying tokens\n    /// @param marginDeltaInUnderlyingTokens amount in terms of underlying tokens that needs to be settled with the trader from the MarginEngine\n    function transferMarginToMarginEngineTrader(\n        address account,\n        uint256 marginDeltaInUnderlyingTokens\n    ) external;\n\n    /// @notice initialize is the constructor for the proxy instances of the FCM\n    /// @dev \"constructor\" for proxy instances\n    /// @dev in the initialize function we set the vamm and the margiEngine associated with the fcm\n    /// @dev different FCM implementations are free to have different implementations for the initialisation logic\n    function initialize(IVAMM __vamm, IMarginEngine __marginEngine)\n        external;\n\n    /// @notice Margine Engine linked to the Full Collateralisation Module\n    /// @return marginEngine Margine Engine linked to the Full Collateralisation Module\n    function marginEngine() external view returns (IMarginEngine);\n\n    /// @notice VAMM linked to the Full Collateralisation Module\n    /// @return VAMM linked to the Full Collateralisation Module\n    function vamm() external view returns (IVAMM);\n\n    /// @notice Rate Oracle linked to the Full Collateralisation Module\n    /// @return Rate Oracle linked to the Full Collateralisation Module\n    function rateOracle() external view returns (IRateOracle);\n\n    event FullyCollateralisedSwap(\n        address indexed trader,\n        uint256 desiredNotional,\n        uint160 sqrtPriceLimitX96,\n        uint256 cumulativeFeeIncurred,\n        int256 fixedTokenDelta,\n        int256 variableTokenDelta,\n        int256 fixedTokenDeltaUnbalanced\n    );\n\n    event FullyCollateralisedUnwind(\n        address indexed trader,\n        uint256 desiredNotional,\n        uint160 sqrtPriceLimitX96,\n        uint256 cumulativeFeeIncurred,\n        int256 fixedTokenDelta,\n        int256 variableTokenDelta,\n        int256 fixedTokenDeltaUnbalanced\n    );\n\n    event fcmPositionSettlement(\n        address indexed trader,\n        int256 settlementCashflow\n    );\n\n    event FCMTraderUpdate(\n        address indexed trader,\n        uint256 marginInScaledYieldBearingTokens,\n        int256 fixedTokenBalance,\n        int256 variableTokenBalance\n    );\n}\n"
    },
    "contracts/interfaces/external/voltz/IFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity =0.8.9;\n\nimport \"./utils/CustomErrors.sol\";\nimport \"./rate_oracles/IRateOracle.sol\";\nimport \"./IMarginEngine.sol\";\nimport \"./IVAMM.sol\";\nimport \"./fcms/IFCM.sol\";\nimport \"./IERC20Minimal.sol\";\nimport \"./IPeriphery.sol\";\n\n/// @title The interface for the Voltz AMM Factory\n/// @notice The AMM Factory facilitates creation of Voltz AMMs\ninterface IFactory is CustomErrors {\n    event IrsInstance(\n        IERC20Minimal indexed underlyingToken,\n        IRateOracle indexed rateOracle,\n        uint256 termStartTimestampWad,\n        uint256 termEndTimestampWad,\n        int24 tickSpacing,\n        IMarginEngine marginEngine,\n        IVAMM vamm,\n        IFCM fcm,\n        uint8 yieldBearingProtocolID,\n        uint8 underlyingTokenDecimals\n    );\n\n    event MasterFCM(IFCM masterFCMAddress, uint8 yieldBearingProtocolID);\n\n    event Approval(\n        address indexed owner,\n        address indexed intAddress,\n        bool indexed isApproved\n    );\n\n    event PeripheryUpdate(IPeriphery periphery);\n\n    // view functions\n\n    function isApproved(address _owner, address intAddress)\n        external\n        view\n        returns (bool);\n\n    function masterVAMM() external view returns (IVAMM);\n\n    function masterMarginEngine() external view returns (IMarginEngine);\n\n    function periphery() external view returns (IPeriphery);\n\n    // settters\n\n    function setApproval(address intAddress, bool allowIntegration) external;\n\n    function setMasterFCM(IFCM masterFCM, uint8 yieldBearingProtocolID)\n        external;\n\n    function setMasterVAMM(IVAMM _masterVAMM) external;\n\n    function setMasterMarginEngine(IMarginEngine _masterMarginEngine) external;\n\n    function setPeriphery(IPeriphery _periphery) external;\n\n    /// @notice Deploys the contracts required for a new Interest Rate Swap instance\n    function deployIrsInstance(\n        IERC20Minimal _underlyingToken,\n        IRateOracle _rateOracle,\n        uint256 _termStartTimestampWad,\n        uint256 _termEndTimestampWad,\n        int24 _tickSpacing\n    )\n        external\n        returns (\n            IMarginEngine marginEngineProxy,\n            IVAMM vammProxy,\n            IFCM fcmProxy\n        );\n\n    function masterFCMs(uint8 yieldBearingProtocolID)\n        external\n        view\n        returns (IFCM masterFCM);\n}\n"
    },
    "contracts/interfaces/external/voltz/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.9;\n\n/// @title Minimal ERC20 interface for Voltz\n/// @notice Contains a subset of the full ERC20 interface that is used in Voltz\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @dev Returns the number of decimals used to get its user representation.\n    // For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5,05 (505 / 10 ** 2).\n    // Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n    function decimals() external view returns (uint8);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/CustomErrors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity =0.8.9;\n\ninterface CustomErrors {\n    /// @dev No need to unwind a net zero position\n    error PositionNetZero();\n\n    error DebugError(uint256 x, uint256 y);\n\n    /// @dev Cannot have less margin than the minimum requirement\n    error MarginLessThanMinimum(int256 marginRequirement);\n\n    /// @dev We can't withdraw more margin than we have\n    error WithdrawalExceedsCurrentMargin();\n\n    /// @dev Position must be settled after AMM has reached maturity\n    error PositionNotSettled();\n\n    /// The resulting margin does not meet minimum requirements\n    error MarginRequirementNotMet(\n        int256 marginRequirement,\n        int24 tick,\n        int256 fixedTokenDelta,\n        int256 variableTokenDelta,\n        uint256 cumulativeFeeIncurred,\n        int256 fixedTokenDeltaUnbalanced\n    );\n\n    /// The position/trader needs to be below the liquidation threshold to be liquidated\n    error CannotLiquidate();\n\n    /// Only the position/trade owner can update the LP/Trader margin\n    error OnlyOwnerCanUpdatePosition();\n\n    error OnlyVAMM();\n\n    error OnlyFCM();\n\n    /// Margin delta must not equal zero\n    error InvalidMarginDelta();\n\n    /// Positions and Traders cannot be settled before the applicable interest rate swap has matured\n    error CannotSettleBeforeMaturity();\n\n    error closeToOrBeyondMaturity();\n\n    /// @dev There are not enough funds available for the requested operation\n    error NotEnoughFunds(uint256 requested, uint256 available);\n\n    /// @dev The two values were expected to have oppostite sigs, but do not\n    error ExpectedOppositeSigns(int256 amount0, int256 amount1);\n\n    /// @dev Error which is reverted if the sqrt price of the vamm is non-zero before a vamm is initialized\n    error ExpectedSqrtPriceZeroBeforeInit(uint160 sqrtPriceX96);\n\n    /// @dev Error which ensures the liquidity delta is positive if a given LP wishes to mint further liquidity in the vamm\n    error LiquidityDeltaMustBePositiveInMint(uint128 amount);\n\n    /// @dev Error which ensures the liquidity delta is positive if a given LP wishes to burn liquidity in the vamm\n    error LiquidityDeltaMustBePositiveInBurn(uint128 amount);\n\n    /// @dev Error which ensures the amount of notional specified when initiating an IRS contract (via the swap function in the vamm) is non-zero\n    error IRSNotionalAmountSpecifiedMustBeNonZero();\n\n    /// @dev Error which ensures the VAMM is unlocked\n    error CanOnlyTradeIfUnlocked(bool unlocked);\n\n    /// @dev only the margin engine can run a certain function\n    error OnlyMarginEngine();\n\n    /// The resulting margin does not meet minimum requirements\n    error MarginRequirementNotMetFCM(int256 marginRequirement);\n\n    /// @dev getReserveNormalizedIncome() returned zero for underlying asset. Oracle only supports active Aave-V2 assets.\n    error AavePoolGetReserveNormalizedIncomeReturnedZero();\n\n    /// @dev ctoken.exchangeRateStored() returned zero for a given Compound ctoken. Oracle only supports active Compound assets.\n    error CTokenExchangeRateReturnedZero();\n\n    /// @dev currentTime < queriedTime\n    error OOO();\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/Tick.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.9;\nimport \"./LiquidityMath.sol\";\nimport \"./TickMath.sol\";\nimport \"./SafeCastUni.sol\";\n\n/// @title Tick\n/// @notice Contains functions for managing tick processes and relevant calculations\nlibrary Tick {\n    using SafeCastUni for int256;\n    using SafeCastUni for uint256;\n\n    int24 public constant MAXIMUM_TICK_SPACING = 16384;\n\n    // info stored for each initialized individual tick\n    struct Info {\n        /// @dev the total position liquidity that references this tick (either as tick lower or tick upper)\n        uint128 liquidityGross;\n        /// @dev amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\n        int128 liquidityNet;\n        /// @dev fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n        /// @dev only has relative meaning, not absolute — the value depends on when the tick is initialized\n        int256 fixedTokenGrowthOutsideX128;\n        int256 variableTokenGrowthOutsideX128;\n        uint256 feeGrowthOutsideX128;\n        /// @dev true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\n        /// @dev these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\n        bool initialized;\n    }\n\n    /// @notice Derives max liquidity per tick from given tick spacing\n    /// @dev Executed within the pool constructor\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n    /// @return The max liquidity per tick\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing)\n        internal\n        pure\n        returns (uint128)\n    {\n        int24 minTick = TickMath.MIN_TICK - (TickMath.MIN_TICK % tickSpacing);\n        int24 maxTick = -minTick;\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\n        return type(uint128).max / numTicks;\n    }\n\n    /// @dev Common checks for valid tick inputs.\n    function checkTicks(int24 tickLower, int24 tickUpper) internal pure {\n        require(tickLower < tickUpper, \"TLU\");\n        require(tickLower >= TickMath.MIN_TICK, \"TLM\");\n        require(tickUpper <= TickMath.MAX_TICK, \"TUM\");\n    }\n\n    struct FeeGrowthInsideParams {\n        int24 tickLower;\n        int24 tickUpper;\n        int24 tickCurrent;\n        uint256 feeGrowthGlobalX128;\n    }\n\n    function _getGrowthInside(\n        int24 _tickLower,\n        int24 _tickUpper,\n        int24 _tickCurrent,\n        int256 _growthGlobalX128,\n        int256 _lowerGrowthOutsideX128,\n        int256 _upperGrowthOutsideX128\n) private pure returns (int256) {\n        // calculate the growth below\n        int256 _growthBelowX128;\n\n        if (_tickCurrent >= _tickLower) {\n            _growthBelowX128 = _lowerGrowthOutsideX128;\n        } else {\n            _growthBelowX128 = _growthGlobalX128 - _lowerGrowthOutsideX128;\n        }\n\n        // calculate the growth above\n        int256 _growthAboveX128;\n\n        if (_tickCurrent < _tickUpper) {\n            _growthAboveX128 = _upperGrowthOutsideX128;\n        } else {\n            _growthAboveX128 = _growthGlobalX128 - _upperGrowthOutsideX128;\n        }\n\n        int256 _growthInsideX128;\n\n        _growthInsideX128 =\n            _growthGlobalX128 -\n            (_growthBelowX128 + _growthAboveX128);\n\n        return _growthInsideX128;\n    }\n\n    function getFeeGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        FeeGrowthInsideParams memory params\n    ) internal view returns (uint256 feeGrowthInsideX128) {\n        unchecked {\n            Info storage lower = self[params.tickLower];\n            Info storage upper = self[params.tickUpper];\n\n            feeGrowthInsideX128 = uint256(\n                _getGrowthInside(\n                    params.tickLower,\n                    params.tickUpper,\n                    params.tickCurrent,\n                    params.feeGrowthGlobalX128.toInt256(),\n                    lower.feeGrowthOutsideX128.toInt256(),\n                    upper.feeGrowthOutsideX128.toInt256()\n                )\n            );\n        }\n    }\n\n    struct VariableTokenGrowthInsideParams {\n        int24 tickLower;\n        int24 tickUpper;\n        int24 tickCurrent;\n        int256 variableTokenGrowthGlobalX128;\n    }\n\n    function getVariableTokenGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        VariableTokenGrowthInsideParams memory params\n    ) internal view returns (int256 variableTokenGrowthInsideX128) {\n        Info storage lower = self[params.tickLower];\n        Info storage upper = self[params.tickUpper];\n\n        variableTokenGrowthInsideX128 = _getGrowthInside(\n            params.tickLower,\n            params.tickUpper,\n            params.tickCurrent,\n            params.variableTokenGrowthGlobalX128,\n            lower.variableTokenGrowthOutsideX128,\n            upper.variableTokenGrowthOutsideX128\n        );\n    }\n\n    struct FixedTokenGrowthInsideParams {\n        int24 tickLower;\n        int24 tickUpper;\n        int24 tickCurrent;\n        int256 fixedTokenGrowthGlobalX128;\n    }\n\n    function getFixedTokenGrowthInside(\n        mapping(int24 => Tick.Info) storage self,\n        FixedTokenGrowthInsideParams memory params\n    ) internal view returns (int256 fixedTokenGrowthInsideX128) {\n        Info storage lower = self[params.tickLower];\n        Info storage upper = self[params.tickUpper];\n\n        // do we need an unchecked block in here (given we are dealing with an int256)?\n        fixedTokenGrowthInsideX128 = _getGrowthInside(\n            params.tickLower,\n            params.tickUpper,\n            params.tickCurrent,\n            params.fixedTokenGrowthGlobalX128,\n            lower.fixedTokenGrowthOutsideX128,\n            upper.fixedTokenGrowthOutsideX128\n        );\n    }\n\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The tick that will be updated\n    /// @param tickCurrent The current tick\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n    /// @param fixedTokenGrowthGlobalX128 The fixed token growth accumulated per unit of liquidity for the entire life of the vamm\n    /// @param variableTokenGrowthGlobalX128 The variable token growth accumulated per unit of liquidity for the entire life of the vamm\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\n    function update(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        int24 tickCurrent,\n        int128 liquidityDelta,\n        int256 fixedTokenGrowthGlobalX128,\n        int256 variableTokenGrowthGlobalX128,\n        uint256 feeGrowthGlobalX128,\n        bool upper,\n        uint128 maxLiquidity\n    ) internal returns (bool flipped) {\n        Tick.Info storage info = self[tick];\n\n        uint128 liquidityGrossBefore = info.liquidityGross;\n        require(\n            int128(info.liquidityGross) + liquidityDelta >= 0,\n            \"not enough liquidity to burn\"\n        );\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(\n            liquidityGrossBefore,\n            liquidityDelta\n        );\n\n        require(liquidityGrossAfter <= maxLiquidity, \"LO\");\n\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n        if (liquidityGrossBefore == 0) {\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n            if (tick <= tickCurrent) {\n                info.feeGrowthOutsideX128 = feeGrowthGlobalX128;\n\n                info.fixedTokenGrowthOutsideX128 = fixedTokenGrowthGlobalX128;\n\n                info\n                    .variableTokenGrowthOutsideX128 = variableTokenGrowthGlobalX128;\n            }\n\n            info.initialized = true;\n        }\n\n        /// check shouldn't we unintialize the tick if liquidityGrossAfter = 0?\n\n        info.liquidityGross = liquidityGrossAfter;\n\n        /// add comments\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\n        info.liquidityNet = upper\n            ? info.liquidityNet - liquidityDelta\n            : info.liquidityNet + liquidityDelta;\n    }\n\n    /// @notice Clears tick data\n    /// @param self The mapping containing all initialized tick information for initialized ticks\n    /// @param tick The tick that will be cleared\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick)\n        internal\n    {\n        delete self[tick];\n    }\n\n    /// @notice Transitions to next tick as needed by price movement\n    /// @param self The mapping containing all tick information for initialized ticks\n    /// @param tick The destination tick of the transition\n    /// @param fixedTokenGrowthGlobalX128 The fixed token growth accumulated per unit of liquidity for the entire life of the vamm\n    /// @param variableTokenGrowthGlobalX128 The variable token growth accumulated per unit of liquidity for the entire life of the vamm\n    /// @param feeGrowthGlobalX128 The fee growth collected per unit of liquidity for the entire life of the vamm\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\n    function cross(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        int256 fixedTokenGrowthGlobalX128,\n        int256 variableTokenGrowthGlobalX128,\n        uint256 feeGrowthGlobalX128\n    ) internal returns (int128 liquidityNet) {\n        Tick.Info storage info = self[tick];\n\n        info.feeGrowthOutsideX128 =\n            feeGrowthGlobalX128 -\n            info.feeGrowthOutsideX128;\n\n        info.fixedTokenGrowthOutsideX128 =\n            fixedTokenGrowthGlobalX128 -\n            info.fixedTokenGrowthOutsideX128;\n\n        info.variableTokenGrowthOutsideX128 =\n            variableTokenGrowthGlobalX128 -\n            info.variableTokenGrowthOutsideX128;\n\n        liquidityNet = info.liquidityNet;\n    }\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/LiquidityMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.9;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        if (y < 0) {\n            uint128 yAbsolute;\n\n            unchecked {\n                yAbsolute = uint128(-y);\n            }\n\n            z = x - yAbsolute;\n        } else {\n            z = x + uint128(y);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/FixedPoint128.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.9;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
    },
    "@prb/math/contracts/PRBMathSD59x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathSD59x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\nlibrary PRBMathSD59x18 {\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\n    int256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev Half the SCALE number.\n    int256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\n\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MAX_WHOLE_SD59x18 =\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\n\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\n    int256 internal constant MIN_WHOLE_SD59x18 =\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    int256 internal constant SCALE = 1e18;\n\n    /// INTERNAL FUNCTIONS ///\n\n    /// @notice Calculate the absolute value of x.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than MIN_SD59x18.\n    ///\n    /// @param x The number to calculate the absolute value for.\n    /// @param result The absolute value of x.\n    function abs(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x == MIN_SD59x18) {\n                revert PRBMathSD59x18__AbsInputTooSmall();\n            }\n            result = x < 0 ? -x : x;\n        }\n    }\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\n        // The operations can never overflow.\n        unchecked {\n            int256 sum = (x >> 1) + (y >> 1);\n            if (sum < 0) {\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\n                // right rounds down to infinity.\n                assembly {\n                    result := add(sum, and(or(x, y), 1))\n                }\n            } else {\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\n                // remainder gets truncated twice.\n                result = sum + (x & y & 1);\n            }\n        }\n    }\n\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function ceil(int256 x) internal pure returns (int256 result) {\n        if (x > MAX_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__CeilOverflow(x);\n        }\n        unchecked {\n            int256 remainder = x % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                result = x - remainder;\n                if (x > 0) {\n                    result += SCALE;\n                }\n            }\n        }\n    }\n\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDiv\".\n    /// - None of the inputs can be MIN_SD59x18.\n    /// - The denominator cannot be zero.\n    /// - The result must fit within int256.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDiv\".\n    ///\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__DivInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x and y.\n        uint256 ax;\n        uint256 ay;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n        }\n\n        // Compute the absolute value of (x*SCALE)÷y. The result must fit within int256.\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__DivOverflow(rAbs);\n        }\n\n        // Get the signs of x and y.\n        uint256 sx;\n        uint256 sy;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n        }\n\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\n        // should be positive. Otherwise, it should be negative.\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (int256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\".\n    /// - For any x less than -41.446531673892822322, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp(int256 x) internal pure returns (int256 result) {\n        // Without this check, the value passed to \"exp2\" would be less than -59.794705707972522261.\n        if (x < -41_446531673892822322) {\n            return 0;\n        }\n\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathSD59x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            int256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - For any x less than -59.794705707972522261, the result is zero.\n    ///\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function exp2(int256 x) internal pure returns (int256 result) {\n        // This works because 2^(-x) = 1/2^x.\n        if (x < 0) {\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\n            if (x < -59_794705707972522261) {\n                return 0;\n            }\n\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n            unchecked {\n                result = 1e36 / exp2(-x);\n            }\n        } else {\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n            if (x >= 192e18) {\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\n            }\n\n            unchecked {\n                // Convert x to the 192.64-bit fixed-point format.\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\n\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\n                result = int256(PRBMath.exp2(x192x64));\n            }\n        }\n    }\n\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\n    function floor(int256 x) internal pure returns (int256 result) {\n        if (x < MIN_WHOLE_SD59x18) {\n            revert PRBMathSD59x18__FloorUnderflow(x);\n        }\n        unchecked {\n            int256 remainder = x % SCALE;\n            if (remainder == 0) {\n                result = x;\n            } else {\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\n                result = x - remainder;\n                if (x < 0) {\n                    result -= SCALE;\n                }\n            }\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\n    /// of the radix point for negative numbers.\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\n    function frac(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            result = x % SCALE;\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\n    function fromInt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x < MIN_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntUnderflow(x);\n            }\n            if (x > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__FromIntOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\n    /// - x * y cannot be negative.\n    ///\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            int256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathSD59x18__GmOverflow(x, y);\n            }\n\n            // The product cannot be negative.\n            if (xy < 0) {\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = int256(PRBMath.sqrt(uint256(xy)));\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\n    function inv(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\n    function ln(int256 x) internal pure returns (int256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 195205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\n    function log10(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly mul operation, not the \"mul\" function defined in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            default {\n                result := MAX_SD59x18\n            }\n        }\n\n        if (result == MAX_SD59x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than zero.\n    ///\n    /// Caveats:\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\n    function log2(int256 x) internal pure returns (int256 result) {\n        if (x <= 0) {\n            revert PRBMathSD59x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // This works because log2(x) = -log2(1/x).\n            int256 sign;\n            if (x >= SCALE) {\n                sign = 1;\n            } else {\n                sign = -1;\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\n                assembly {\n                    x := div(1000000000000000000000000000000000000, x)\n                }\n            }\n\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\n\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\n            result = int256(n) * SCALE;\n\n            // This is y = x * 2^(-n).\n            int256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result * sign;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n            result *= sign;\n        }\n    }\n\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\n    /// fixed-point number.\n    ///\n    /// @dev Variant of \"mulDiv\" that works with signed numbers and employs constant folding, i.e. the denominator is\n    /// always 1e18.\n    ///\n    /// Requirements:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - None of the inputs can be MIN_SD59x18\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    ///\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\n            revert PRBMathSD59x18__MulInputTooSmall();\n        }\n\n        unchecked {\n            uint256 ax;\n            uint256 ay;\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\n            if (rAbs > uint256(MAX_SD59x18)) {\n                revert PRBMathSD59x18__MulOverflow(rAbs);\n            }\n\n            uint256 sx;\n            uint256 sy;\n            assembly {\n                sx := sgt(x, sub(0, 1))\n                sy := sgt(y, sub(0, 1))\n            }\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\n        }\n    }\n\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\n    function pi() internal pure returns (int256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - z cannot be zero.\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : int256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - All from \"abs\" and \"PRBMath.mulDivFixedPoint\".\n    /// - The result must fit within MAX_SD59x18.\n    ///\n    /// Caveats:\n    /// - All from \"PRBMath.mulDivFixedPoint\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\n        uint256 xAbs = uint256(abs(x));\n\n        // Calculate the first iteration of the loop in advance.\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        uint256 yAux = y;\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (yAux & 1 > 0) {\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\n            }\n        }\n\n        // The result must fit within the 59.18-decimal fixed-point representation.\n        if (rAbs > uint256(MAX_SD59x18)) {\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\n        }\n\n        // Is the base negative and the exponent an odd number?\n        bool isNegative = x < 0 && y & 1 == 1;\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\n    function scale() internal pure returns (int256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x cannot be negative.\n    /// - x must be less than MAX_SD59x18 / SCALE.\n    ///\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as a signed 59.18-decimal fixed-point .\n    function sqrt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            if (x < 0) {\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\n            }\n            if (x > MAX_SD59x18 / SCALE) {\n                revert PRBMathSD59x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\n        }\n    }\n\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toInt(int256 x) internal pure returns (int256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "@prb/math/contracts/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathUD60x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\n/// maximum values permitted by the Solidity type uint256.\nlibrary PRBMathUD60x18 {\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\n    uint256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\n\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_WHOLE_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // The operations can never overflow.\n        unchecked {\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\n        }\n    }\n\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function ceil(uint256 x) internal pure returns (uint256 result) {\n        if (x > MAX_WHOLE_UD60x18) {\n            revert PRBMathUD60x18__CeilOverflow(x);\n        }\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"SCALE - remainder\" but faster.\n            let delta := sub(SCALE, remainder)\n\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\n            result := add(x, mul(delta, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\n    ///\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    ///\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDiv(x, SCALE, y);\n    }\n\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (uint256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp(uint256 x) internal pure returns (uint256 result) {\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathUD60x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            uint256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / SCALE;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = PRBMath.exp2(x192x64);\n        }\n    }\n\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function floor(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\n            result := sub(x, mul(remainder, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x.\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\n    function frac(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            result := mod(x, SCALE)\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__FromUintOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\n    ///\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            uint256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathUD60x18__GmOverflow(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.sqrt(xy);\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\n    function inv(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\n    function ln(uint256 x) internal pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log10(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly multiplication operation, not the \"mul\" function defined\n        // in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\n            default {\n                result := MAX_UD60x18\n            }\n        }\n\n        if (result == MAX_UD60x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\n    /// fixed-point number.\n    /// @dev See the documentation for the \"PRBMath.mulDivFixedPoint\" function.\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDivFixedPoint(x, y);\n    }\n\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\n    function pi() internal pure returns (uint256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : uint256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// Caveats:\n    /// - All from \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // Calculate the first iteration of the loop in advance.\n        result = y & 1 > 0 ? x : SCALE;\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        for (y >>= 1; y > 0; y >>= 1) {\n            x = PRBMath.mulDivFixedPoint(x, x);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (y & 1 > 0) {\n                result = PRBMath.mulDivFixedPoint(result, x);\n            }\n        }\n    }\n\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\n    function scale() internal pure returns (uint256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x must be less than MAX_UD60x18 / SCALE.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = PRBMath.sqrt(x * SCALE);\n        }\n    }\n\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/libraries/external/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // diff: original lib works under 0.7.6 with overflows enabled\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            // diff: original uint256 twos = -denominator & denominator;\n            uint256 twos = uint256(-int256(denominator)) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // diff: original lib works under 0.7.6 with overflows enabled\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n\n    function mulDivSigned(\n        int256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (int256 result) {\n        if (a < 0) return -int256(mulDiv(uint256(-a), b, denominator));\n        return int256(mulDiv(uint256(a), b, denominator));\n    }\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/TickMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\n// solhint-disable no-inline-assembly\n\npragma solidity =0.8.9;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev MIN_TICK corresponds to an annualized fixed rate of 1000%\n    /// @dev MAX_TICK corresponds to an annualized fixed rate of 0.001%\n    /// @dev MIN and MAX TICKs can't be safely changed without reinstating getSqrtRatioAtTick removed lines of code from original\n    /// TickMath.sol implementation in uniswap v3\n\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -69100;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 2503036416286949174936592462;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 2507794810551837817144115957740;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick)\n        internal\n        pure\n        returns (uint160 sqrtPriceX96)\n    {\n        uint256 absTick = tick < 0\n            ? uint256(-int256(tick))\n            : uint256(int256(tick));\n        require(absTick <= uint256(int256(MAX_TICK)), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\n            : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0)\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0)\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0)\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0)\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0)\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0)\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0)\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0)\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0)\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0)\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0)\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0)\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0)\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0)\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0)\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0)\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160(\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\n        );\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96)\n        internal\n        pure\n        returns (int24 tick)\n    {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\n            \"R\"\n        );\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        // solhint-disable-next-line var-name-mixedcase\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        // solhint-disable-next-line var-name-mixedcase\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24(\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\n        );\n        int24 tickHi = int24(\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\n        );\n\n        tick = tickLow == tickHi\n            ? tickLow\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\n            ? tickHi\n            : tickLow;\n    }\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/SafeCastUni.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// With contributions from OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\n\npragma solidity =0.8.9;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCastUni {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        require((z = uint160(y)) == y, \"toUint160 oflo\");\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        require((z = int128(y)) == y, \"toInt128 oflo\");\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        require(y < 2**255, \"toInt256 oflo\");\n        z = int256(y);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"toUint256 < 0\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Converts a signed int128 into an unsigned uint128.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint128(int128 value) internal pure returns (uint128) {\n        require(value >= 0, \"toUint128 < 0\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Converts a signed uint256 into an unsigned uint128.\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"toUint128 > max(uint128)\");\n        return uint128(value);\n    }\n}\n"
    },
    "@prb/math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/external/voltz/fcms/TraderWithYieldBearingAssets.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity =0.8.9;\n\n/// @title Trader\nlibrary TraderWithYieldBearingAssets {\n    // info stored for each user's position\n    struct Info {\n        // For Aave v2 The scaled balance is the sum of all the updated stored balances in the\n        // underlying token, divided by the reserve's liquidity index at the moment of the update\n        //\n        // For componund, the scaled balance is the sum of all the updated stored balances in the\n        // underlying token, divided by the cToken exchange rate at the moment of the update.\n        // This is simply the number of cTokens!\n        uint256 marginInScaledYieldBearingTokens;\n        int256 fixedTokenBalance;\n        int256 variableTokenBalance;\n        bool isSettled;\n    }\n\n    function updateMarginInScaledYieldBearingTokens(\n        Info storage self,\n        uint256 _marginInScaledYieldBearingTokens\n    ) internal {\n        self\n            .marginInScaledYieldBearingTokens = _marginInScaledYieldBearingTokens;\n    }\n\n    function settleTrader(Info storage self) internal {\n        require(!self.isSettled, \"already settled\");\n        self.isSettled = true;\n    }\n\n    function updateBalancesViaDeltas(\n        Info storage self,\n        int256 fixedTokenBalanceDelta,\n        int256 variableTokenBalanceDelta\n    )\n        internal\n        returns (int256 _fixedTokenBalance, int256 _variableTokenBalance)\n    {\n        _fixedTokenBalance = self.fixedTokenBalance + fixedTokenBalanceDelta;\n        _variableTokenBalance =\n            self.variableTokenBalance +\n            variableTokenBalanceDelta;\n\n        self.fixedTokenBalance = _fixedTokenBalance;\n        self.variableTokenBalance = _variableTokenBalance;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/vaults/VoltzVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"./IntegrationVault.sol\";\nimport \"../interfaces/utils/IDefaultAccessControl.sol\";\n\nimport \"../interfaces/vaults/IVoltzVault.sol\";\nimport \"../interfaces/external/voltz/utils/Time.sol\";\n\nimport \"../utils/VoltzVaultHelper.sol\";\n\n/// @notice Vault that interfaces Voltz protocol in the integration layer on the liquidity provider (LP) side.\ncontract VoltzVault is IVoltzVault, IntegrationVault {\n    using SafeERC20 for IERC20;\n    using SafeCastUni for uint128;\n    using SafeCastUni for int128;\n    using SafeCastUni for uint256;\n    using SafeCastUni for int256;\n    using PRBMathSD59x18 for int256;\n    using PRBMathUD60x18 for uint256;\n\n    /// @dev The helper Voltz contract\n    VoltzVaultHelper private _voltzVaultHelper;\n\n    /// @dev The margin engine of Voltz Protocol\n    IMarginEngine private _marginEngine;\n    /// @dev The vamm of Voltz Protocol\n    IVAMM private _vamm;\n    /// @dev The rate oracle of Voltz Protocol\n    IRateOracle private _rateOracle;\n    /// @dev The periphery of Voltz Protocol\n    IPeriphery private _periphery;\n\n    /// @dev The VAMM tick spacing\n    int24 private _tickSpacing;\n    /// @dev The unix termEndTimestamp of the MarginEngine in Wad\n    uint256 private _termEndTimestampWad;\n\n    /// @dev The leverage used for LP positions on Voltz (in wad)\n    uint256 private _leverageWad;\n    /// @dev The multiplier used to decide how much margin is left in partially unwound positions on Voltz (in wad)\n    uint256 private _marginMultiplierPostUnwindWad;\n\n    /// @dev The estimated TVL\n    int256 private _tvl;\n\n    /// @dev Array of Vault-owned positions on Voltz with strictly positive cashflow\n    TickRange[] public trackedPositions;\n    /// @dev Index into the trackedPositions array of the currently active LP position of the Vault\n    uint256 private _currentPositionIndex;\n    /// @dev Maps a given Voltz position to its index into the trackedPositions array,\n    /// @dev which is artifically 1-indexed by the mapping.\n    mapping(bytes => uint256) private _positionToIndexPlusOne;\n    /// @dev Number of positions settled and withdrawn from counting from the first position\n    /// @dev in the trackedPositions array\n    uint256 private _settledPositionsCount;\n\n    /// @dev Sum of fixed token balances of all positions in the trackedPositions\n    /// @dev array, apart from the balance of the currently active position\n    int256 private _aggregatedInactiveFixedTokenBalance;\n    /// @dev Sum of variable token balances of all positions in the trackedPositions\n    /// @dev array, apart from the balance of the currently active position\n    int256 private _aggregatedInactiveVariableTokenBalance;\n    /// @dev Sum of margins of all positions in the trackedPositions array,\n    /// @dev apart from the margin of the currently active position\n    int256 private _aggregatedInactiveMargin;\n\n    // -------------------  PUBLIC, MUTATING  -------------------\n\n    /// @inheritdoc IVoltzVault\n    function updateTvl() public override returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        int256 tvl_ = _voltzVaultHelper.calculateTVL(\n            _aggregatedInactiveFixedTokenBalance,\n            _aggregatedInactiveVariableTokenBalance,\n            _aggregatedInactiveMargin\n        );\n        _tvl = tvl_;\n\n        minTokenAmounts = new uint256[](1);\n        maxTokenAmounts = new uint256[](1);\n\n        if (tvl_ > 0) {\n            minTokenAmounts[0] = tvl_.toUint256();\n            maxTokenAmounts[0] = minTokenAmounts[0];\n        }\n\n        emit TvlUpdate(tvl_);\n    }\n\n    /// @inheritdoc IVoltzVault\n    function settleVaultPositionAndWithdrawMargin(TickRange memory position) public override {\n        VoltzVaultHelper voltzVaultHelper_ = _voltzVaultHelper;\n        IMarginEngine marginEngine_ = _marginEngine;\n\n        Position.Info memory positionInfo = voltzVaultHelper_.getVaultPosition(position);\n\n        if (!positionInfo.isSettled) {\n            marginEngine_.settlePosition(address(this), position.tickLower, position.tickUpper);\n            positionInfo = voltzVaultHelper_.getVaultPosition(position);\n        }\n\n        if (positionInfo.margin > 0) {\n            marginEngine_.updatePositionMargin(\n                address(this),\n                position.tickLower,\n                position.tickUpper,\n                -positionInfo.margin\n            );\n        }\n\n        emit PositionSettledAndMarginWithdrawn(position.tickLower, position.tickUpper, positionInfo.margin);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVoltzVault\n    function leverageWad() external view override returns (uint256) {\n        return _leverageWad;\n    }\n\n    /// @inheritdoc IVoltzVault\n    function marginMultiplierPostUnwindWad() external view override returns (uint256) {\n        return _marginMultiplierPostUnwindWad;\n    }\n\n    /// @inheritdoc IVault\n    function tvl() public view override returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        minTokenAmounts = new uint256[](1);\n        maxTokenAmounts = new uint256[](1);\n\n        int256 tvl_ = _tvl;\n        if (tvl_ > 0) {\n            minTokenAmounts[0] = tvl_.toUint256();\n            maxTokenAmounts[0] = minTokenAmounts[0];\n        }\n    }\n\n    /// @inheritdoc IVoltzVault\n    function marginEngine() external view override returns (IMarginEngine) {\n        return _marginEngine;\n    }\n\n    /// @inheritdoc IVoltzVault\n    function vamm() external view override returns (IVAMM) {\n        return _vamm;\n    }\n\n    /// @inheritdoc IVoltzVault\n    function rateOracle() external view override returns (IRateOracle) {\n        return _rateOracle;\n    }\n\n    /// @inheritdoc IVoltzVault\n    function periphery() external view override returns (IPeriphery) {\n        return _periphery;\n    }\n\n    /// @inheritdoc IVoltzVault\n    function currentPosition() external view override returns (TickRange memory) {\n        return trackedPositions[_currentPositionIndex];\n    }\n\n    /// @inheritdoc IVoltzVault\n    function voltzVaultHelper() external view override returns (address) {\n        return address(_voltzVaultHelper);\n    }\n\n    /// @inheritdoc IntegrationVault\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, IntegrationVault) returns (bool) {\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IVoltzVault).interfaceId);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IVoltzVault\n    function setLeverageWad(uint256 leverageWad_) external override {\n        require(_isAdmin(msg.sender) || _isStrategy(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        _leverageWad = leverageWad_;\n    }\n\n    /// @inheritdoc IVoltzVault\n    function setMarginMultiplierPostUnwindWad(uint256 marginMultiplierPostUnwindWad_) external override {\n        require(_isAdmin(msg.sender) || _isStrategy(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        _marginMultiplierPostUnwindWad = marginMultiplierPostUnwindWad_;\n        _voltzVaultHelper.setMarginMultiplierPostUnwindWad(marginMultiplierPostUnwindWad_);\n    }\n\n    /// @inheritdoc IVoltzVault\n    function rebalance(TickRange memory position) external override {\n        require(_isAdmin(msg.sender) || _isStrategy(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        require(Time.blockTimestampScaled() <= _termEndTimestampWad, ExceptionsLibrary.FORBIDDEN);\n\n        TickRange memory oldPosition = trackedPositions[_currentPositionIndex];\n        Position.Info memory oldPositionInfo = _voltzVaultHelper.getVaultPosition(oldPosition);\n\n        // burn liquidity first, then unwind and exit existing position\n        // this makes sure that we do not use our own liquidity to unwind ourselves\n        _mintOrBurnLiquidity(oldPosition, oldPositionInfo._liquidity, false);\n        int256 marginLeftInOldPosition = _unwindAndExitCurrentPosition(oldPosition, oldPositionInfo);\n\n        _updateCurrentPosition(position);\n\n        uint256 vaultBalance = IERC20(_vaultTokens[0]).balanceOf(address(this));\n        _updateMargin(position, vaultBalance.toInt256());\n        uint256 notionalLiquidityToMint = vaultBalance.mul(_leverageWad);\n        _mintOrBurnLiquidityNotional(position, notionalLiquidityToMint.toInt256());\n\n        updateTvl();\n\n        emit PositionRebalance(oldPosition, marginLeftInOldPosition, position, vaultBalance, notionalLiquidityToMint);\n    }\n\n    /// @inheritdoc IVoltzVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        address marginEngine_,\n        address periphery_,\n        address voltzVaultHelper_,\n        InitializeParams memory initializeParams\n    ) external override {\n        require(vaultTokens_.length == 1, ExceptionsLibrary.INVALID_VALUE);\n\n        IMarginEngine marginEngine__ = IMarginEngine(marginEngine_);\n        _marginEngine = marginEngine__;\n\n        address underlyingToken = address(marginEngine__.underlyingToken());\n        require(vaultTokens_[0] == underlyingToken, ExceptionsLibrary.INVALID_VALUE);\n\n        _initialize(vaultTokens_, nft_);\n\n        IPeriphery periphery__ = IPeriphery(periphery_);\n        _periphery = periphery__;\n\n        IVAMM vamm__ = marginEngine__.vamm();\n        _vamm = vamm__;\n\n        _rateOracle = marginEngine__.rateOracle();\n        _tickSpacing = vamm__.tickSpacing();\n        _termEndTimestampWad = marginEngine__.termEndTimestampWad();\n\n        require(Time.blockTimestampScaled() <= _termEndTimestampWad, ExceptionsLibrary.FORBIDDEN);\n\n        _leverageWad = initializeParams.leverageWad;\n        _marginMultiplierPostUnwindWad = initializeParams.marginMultiplierPostUnwindWad;\n        _updateCurrentPosition(TickRange(initializeParams.tickLower, initializeParams.tickUpper));\n\n        VoltzVaultHelper voltzVaultHelper__ = VoltzVaultHelper(voltzVaultHelper_);\n        voltzVaultHelper__.initialize();\n        _voltzVaultHelper = voltzVaultHelper__;\n\n        emit VaultInitialized(\n            marginEngine_,\n            periphery_,\n            voltzVaultHelper_,\n            initializeParams.tickLower,\n            initializeParams.tickUpper,\n            initializeParams.leverageWad,\n            initializeParams.marginMultiplierPostUnwindWad\n        );\n    }\n\n    /// @inheritdoc IVoltzVault\n    function settleVault(uint256 batchSize) external override returns (uint256 settledBatchSize) {\n        uint256 from = _settledPositionsCount;\n        if (batchSize == 0) {\n            batchSize = trackedPositions.length - from;\n        }\n\n        uint256 to = from + batchSize;\n        if (trackedPositions.length < to) {\n            to = trackedPositions.length;\n        }\n\n        if (to <= from) {\n            return 0;\n        }\n\n        for (uint256 i = from; i < to; i++) {\n            settleVaultPositionAndWithdrawMargin(trackedPositions[i]);\n        }\n\n        settledBatchSize = to - from;\n        _settledPositionsCount += settledBatchSize;\n\n        emit VaultSettle(batchSize, from, to);\n    }\n\n    // -------------------  INTERNAL, PURE  -------------------\n\n    /// @inheritdoc IntegrationVault\n    function _isReclaimForbidden(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    /// @notice Checks whether a contract is the approved strategy for this vault\n    /// @param addr The address of the contract to be checked\n    /// @return Returns true if addr is the address of the strategy contract approved by the vault\n    function _isStrategy(address addr) internal view returns (bool) {\n        return _vaultGovernance.internalParams().registry.getApproved(_nft) == addr;\n    }\n\n    /// @notice Checks whether an address is the approved admin of the strategy\n    /// @param addr The address to be checked\n    /// @return Returns true if addr is the admin of the strategy\n    function _isAdmin(address addr) internal view returns (bool) {\n        return IDefaultAccessControl(_vaultGovernance.internalParams().registry.getApproved(_nft)).isAdmin(addr);\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IntegrationVault\n    function _push(uint256[] memory tokenAmounts, bytes memory)\n        internal\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        actualTokenAmounts = new uint256[](1);\n        actualTokenAmounts[0] = tokenAmounts[0];\n        TickRange memory currentPosition_ = trackedPositions[_currentPositionIndex];\n        _updateMargin(currentPosition_, tokenAmounts[0].toInt256());\n\n        uint256 notionalLiquidityToMint = tokenAmounts[0].mul(_leverageWad);\n        _mintOrBurnLiquidityNotional(currentPosition_, notionalLiquidityToMint.toInt256());\n\n        updateTvl();\n\n        emit PushDeposit(tokenAmounts[0], notionalLiquidityToMint);\n    }\n\n    /// @inheritdoc IntegrationVault\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        require(Time.blockTimestampScaled() > _termEndTimestampWad, ExceptionsLibrary.FORBIDDEN);\n\n        actualTokenAmounts = new uint256[](1);\n\n        uint256 vaultBalance = IERC20(_vaultTokens[0]).balanceOf(address(this));\n\n        uint256 amountToWithdraw = tokenAmounts[0];\n        if (vaultBalance < amountToWithdraw) {\n            amountToWithdraw = vaultBalance;\n        }\n\n        if (amountToWithdraw == 0) {\n            return actualTokenAmounts;\n        }\n\n        IERC20(_vaultTokens[0]).safeTransfer(to, amountToWithdraw);\n        actualTokenAmounts[0] = amountToWithdraw;\n\n        updateTvl();\n\n        emit PullWithdraw(to, tokenAmounts[0], actualTokenAmounts[0]);\n    }\n\n    /// @notice Updates the margin of the currently active LP position\n    /// @param currentPosition_ The current active position\n    /// @param marginDelta Change in the margin account of the position\n    function _updateMargin(TickRange memory currentPosition_, int256 marginDelta) internal {\n        IPeriphery periphery_ = _periphery;\n\n        if (marginDelta == 0) {\n            return;\n        }\n\n        if (marginDelta > 0) {\n            IERC20(_vaultTokens[0]).safeIncreaseAllowance(address(periphery_), marginDelta.toUint256());\n        }\n\n        periphery_.updatePositionMargin(\n            _marginEngine,\n            currentPosition_.tickLower,\n            currentPosition_.tickUpper,\n            marginDelta,\n            false\n        );\n\n        if (marginDelta > 0) {\n            IERC20(_vaultTokens[0]).safeApprove(address(periphery_), 0);\n        }\n    }\n\n    /// @notice Mints or burns liquidity notional in the currently active LP position\n    /// @param liquidityNotionalDelta The change in pool liquidity notional as a result of the position update\n    function _mintOrBurnLiquidityNotional(TickRange memory currentPosition_, int256 liquidityNotionalDelta) internal {\n        if (liquidityNotionalDelta != 0) {\n            uint128 liquidity = _voltzVaultHelper.getLiquidityFromNotional(liquidityNotionalDelta);\n            _mintOrBurnLiquidity(currentPosition_, liquidity, (liquidityNotionalDelta >= 0));\n        }\n    }\n\n    /// @notice Mints or burns liquidity in the currently active LP position\n    /// @param liquidity The change in pool liquidity as a result of the position update\n    /// @param isMint true if mint, false if burn\n    function _mintOrBurnLiquidity(\n        TickRange memory currentPosition_,\n        uint128 liquidity,\n        bool isMint\n    ) internal {\n        if (liquidity > 0) {\n            if (isMint) {\n                _vamm.mint(address(this), currentPosition_.tickLower, currentPosition_.tickUpper, liquidity);\n            } else {\n                _vamm.burn(address(this), currentPosition_.tickLower, currentPosition_.tickUpper, liquidity);\n            }\n        }\n    }\n\n    /// @notice Updates the currently active LP position of the Vault\n    /// @dev The function adds the new position to the trackedPositions\n    /// @dev array (if not present already), and updates the currentPositionIndex,\n    /// @dev mapping and aggregated variables accordingly.\n    /// @param position The new current position of the Vault\n    function _updateCurrentPosition(TickRange memory position) internal {\n        Tick.checkTicks(position.tickLower, position.tickUpper);\n\n        int24 tickSpacing = _tickSpacing;\n        require(position.tickLower % tickSpacing == 0, ExceptionsLibrary.INVALID_VALUE);\n        require(position.tickUpper % tickSpacing == 0, ExceptionsLibrary.INVALID_VALUE);\n\n        bytes memory encodedPosition = abi.encode(position);\n        if (_positionToIndexPlusOne[encodedPosition] == 0) {\n            trackedPositions.push(position);\n            _currentPositionIndex = trackedPositions.length - 1;\n            _positionToIndexPlusOne[encodedPosition] = trackedPositions.length;\n        } else {\n            // we rebalance to some previous position\n            // so we need to update the aggregate variables\n            _currentPositionIndex = _positionToIndexPlusOne[encodedPosition] - 1;\n            Position.Info memory currentPositionInfo_ = _voltzVaultHelper.getVaultPosition(position);\n            _aggregatedInactiveFixedTokenBalance -= currentPositionInfo_.fixedTokenBalance;\n            _aggregatedInactiveVariableTokenBalance -= currentPositionInfo_.variableTokenBalance;\n            _aggregatedInactiveMargin -= currentPositionInfo_.margin;\n        }\n    }\n\n    /// @notice Unwinds the currently active position and withdraws the maximum amount of funds possible\n    /// @dev The function unwinds the currently active position and proceeds as follows:\n    /// @dev 1. if variableTokenBalance != 0, withdraw all funds up to marginMultiplierPostUnwind * positionMarginRequirementInitial\n    /// @dev 2. otherwise, if fixedTokenBalance > 0, withdraw everything\n    /// @dev 3. otherwise, if fixedTokenBalance <= 0, withdraw everything up to positionMarginRequirementInitial\n    /// @dev The unwound position is tracked only in cases 1 and 2\n    /// @return marginLeftInOldPosition The margin left in the unwound position\n    function _unwindAndExitCurrentPosition(TickRange memory currentPosition_, Position.Info memory currentPositionInfo_)\n        internal\n        returns (int256 marginLeftInOldPosition)\n    {\n        if (currentPositionInfo_.variableTokenBalance != 0) {\n            bool _isFT = currentPositionInfo_.variableTokenBalance < 0;\n\n            IVAMM.SwapParams memory _params = IVAMM.SwapParams({\n                recipient: address(this),\n                amountSpecified: currentPositionInfo_.variableTokenBalance,\n                sqrtPriceLimitX96: _isFT ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1,\n                tickLower: currentPosition_.tickLower,\n                tickUpper: currentPosition_.tickUpper\n            });\n\n            try _vamm.swap(_params) returns (\n                int256 _fixedTokenDelta,\n                int256 _variableTokenDelta,\n                uint256 _cumulativeFeeIncurred,\n                int256,\n                int256\n            ) {\n                currentPositionInfo_.fixedTokenBalance += _fixedTokenDelta;\n                currentPositionInfo_.variableTokenBalance += _variableTokenDelta;\n                currentPositionInfo_.margin -= _cumulativeFeeIncurred.toInt256();\n            } catch Error(string memory reason) {\n                emit UnwindFail(reason);\n            } catch {\n                emit UnwindFail(\"Unwind failed without reason\");\n            }\n        }\n\n        bool trackPosition;\n        uint256 marginToKeep;\n        (trackPosition, marginToKeep) = _voltzVaultHelper.getMarginToKeep(currentPositionInfo_);\n\n        if (currentPositionInfo_.margin > 0) {\n            if (marginToKeep > currentPositionInfo_.margin.toUint256()) {\n                marginToKeep = currentPositionInfo_.margin.toUint256();\n            }\n\n            _updateMargin(currentPosition_, -(currentPositionInfo_.margin - marginToKeep.toInt256()));\n            currentPositionInfo_.margin = marginToKeep.toInt256();\n        }\n\n        if (!trackPosition) {\n            // no need to track it, so we remove it from the array\n            _removePositionFromTrackedPositions(_currentPositionIndex);\n        } else {\n            // otherwise, the position is now a past tracked position\n            // so we update the aggregated variables\n            _aggregatedInactiveFixedTokenBalance += currentPositionInfo_.fixedTokenBalance;\n            _aggregatedInactiveVariableTokenBalance += currentPositionInfo_.variableTokenBalance;\n            _aggregatedInactiveMargin += currentPositionInfo_.margin;\n        }\n\n        return currentPositionInfo_.margin;\n    }\n\n    /// @notice Untracks position\n    /// @dev Removes position from the trackedPositions array and\n    /// @dev updates the mapping and aggregated variables accordingly\n    function _removePositionFromTrackedPositions(uint256 positionIndex) internal {\n        _positionToIndexPlusOne[abi.encode(trackedPositions[positionIndex])] = 0;\n        if (positionIndex != trackedPositions.length - 1) {\n            delete trackedPositions[positionIndex];\n            trackedPositions[positionIndex] = trackedPositions[trackedPositions.length - 1];\n            _positionToIndexPlusOne[abi.encode(trackedPositions[positionIndex])] = positionIndex + 1;\n        }\n\n        trackedPositions.pop();\n    }\n}\n"
    },
    "contracts/vaults/IntegrationVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/external/erc/IERC1271.sol\";\nimport \"../interfaces/vaults/IVaultRoot.sol\";\nimport \"../interfaces/vaults/IIntegrationVault.sol\";\nimport \"../interfaces/validators/IValidator.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"./Vault.sol\";\n\n/// @notice Abstract contract that has logic common for every Vault.\n/// @dev Notes:\n/// ### ERC-721\n///\n/// Each Vault should be registered in VaultRegistry and get corresponding VaultRegistry NFT.\n///\n/// ### Access control\n///\n/// `push` and `pull` methods are only allowed for owner / approved person of the NFT. However,\n/// `pull` for approved person also checks that pull destination is another vault of the Vault System.\n///\n/// The semantics is: NFT owner owns all Vault liquidity, Approved person is liquidity manager.\n/// ApprovedForAll person cannot do anything except ERC-721 token transfers.\n///\n/// Both NFT owner and approved person can call externalCall method which claims liquidity mining rewards (if any)\n///\n/// `reclaimTokens` for claiming rewards given by an underlying protocol to erc20Vault in order to sell them there\nabstract contract IntegrationVault is IIntegrationVault, ReentrancyGuard, Vault {\n    using SafeERC20 for IERC20;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Vault) returns (bool) {\n        return\n            super.supportsInterface(interfaceId) ||\n            (interfaceId == type(IIntegrationVault).interfaceId) ||\n            (interfaceId == type(IERC1271).interfaceId);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IIntegrationVault\n    function push(\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) public nonReentrant returns (uint256[] memory actualTokenAmounts) {\n        uint256 nft_ = _nft;\n        require(nft_ != 0, ExceptionsLibrary.INIT);\n        IVaultRegistry vaultRegistry = _vaultGovernance.internalParams().registry;\n        IVault ownerVault = IVault(vaultRegistry.ownerOf(nft_)); // Also checks that the token exists\n        uint256 ownerNft = vaultRegistry.nftForVault(address(ownerVault));\n        require(ownerNft != 0, ExceptionsLibrary.NOT_FOUND); // require deposits only through Vault\n        uint256[] memory pTokenAmounts = _validateAndProjectTokens(tokens, tokenAmounts);\n        uint256[] memory pActualTokenAmounts = _push(pTokenAmounts, options);\n        actualTokenAmounts = CommonLibrary.projectTokenAmounts(tokens, _vaultTokens, pActualTokenAmounts);\n        emit Push(pActualTokenAmounts);\n    }\n\n    /// @inheritdoc IIntegrationVault\n    function transferAndPush(\n        address from,\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external returns (uint256[] memory actualTokenAmounts) {\n        uint256 len = tokens.length;\n        for (uint256 i = 0; i < len; ++i)\n            if (tokenAmounts[i] != 0) {\n                IERC20(tokens[i]).safeTransferFrom(from, address(this), tokenAmounts[i]);\n            }\n\n        actualTokenAmounts = push(tokens, tokenAmounts, options);\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            uint256 leftover = actualTokenAmounts[i] < tokenAmounts[i] ? tokenAmounts[i] - actualTokenAmounts[i] : 0;\n            if (leftover != 0) IERC20(tokens[i]).safeTransfer(from, leftover);\n        }\n    }\n\n    /// @inheritdoc IIntegrationVault\n    function pull(\n        address to,\n        address[] memory tokens,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) external nonReentrant returns (uint256[] memory actualTokenAmounts) {\n        uint256 nft_ = _nft;\n        require(nft_ != 0, ExceptionsLibrary.INIT);\n        require(_isApprovedOrOwner(msg.sender), ExceptionsLibrary.FORBIDDEN); // Also checks that the token exists\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        address owner = registry.ownerOf(nft_);\n        IVaultRoot root = _root(registry, nft_, owner);\n        if (owner != msg.sender) {\n            address zeroVault = root.subvaultAt(0);\n            if (zeroVault == address(this)) {\n                // If we pull from zero vault\n                require(\n                    root.hasSubvault(registry.nftForVault(to)) && to != address(this),\n                    ExceptionsLibrary.INVALID_TARGET\n                );\n            } else {\n                // If we pull from other vault\n                require(zeroVault == to, ExceptionsLibrary.INVALID_TARGET);\n            }\n        }\n        uint256[] memory pTokenAmounts = _validateAndProjectTokens(tokens, tokenAmounts);\n        uint256[] memory pActualTokenAmounts = _pull(to, pTokenAmounts, options);\n        actualTokenAmounts = CommonLibrary.projectTokenAmounts(tokens, _vaultTokens, pActualTokenAmounts);\n        emit Pull(to, actualTokenAmounts);\n    }\n\n    /// @inheritdoc IIntegrationVault\n    function reclaimTokens(address[] memory tokens)\n        external\n        virtual\n        nonReentrant\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        uint256 nft_ = _nft;\n        require(nft_ != 0, ExceptionsLibrary.INIT);\n        IVaultGovernance.InternalParams memory params = _vaultGovernance.internalParams();\n        IProtocolGovernance governance = params.protocolGovernance;\n        IVaultRegistry registry = params.registry;\n        address owner = registry.ownerOf(nft_);\n        address to = _root(registry, nft_, owner).subvaultAt(0);\n        actualTokenAmounts = new uint256[](tokens.length);\n        if (to == address(this)) {\n            return actualTokenAmounts;\n        }\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            if (\n                _isReclaimForbidden(tokens[i]) ||\n                !governance.hasPermission(tokens[i], PermissionIdsLibrary.ERC20_TRANSFER)\n            ) {\n                continue;\n            }\n            IERC20 token = IERC20(tokens[i]);\n            actualTokenAmounts[i] = token.balanceOf(address(this));\n\n            token.safeTransfer(to, actualTokenAmounts[i]);\n        }\n        emit ReclaimTokens(to, tokens, actualTokenAmounts);\n    }\n\n    /// @inheritdoc IERC1271\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue) {\n        IVaultGovernance.InternalParams memory params = _vaultGovernance.internalParams();\n        IVaultRegistry registry = params.registry;\n        IProtocolGovernance protocolGovernance = params.protocolGovernance;\n        uint256 nft_ = _nft;\n        if (nft_ == 0) {\n            return 0xffffffff;\n        }\n        address strategy = registry.getApproved(nft_);\n        if (!protocolGovernance.hasPermission(strategy, PermissionIdsLibrary.TRUSTED_STRATEGY)) {\n            return 0xffffffff;\n        }\n        uint32 size;\n        assembly {\n            size := extcodesize(strategy)\n        }\n        if (size > 0) {\n            if (IERC165(strategy).supportsInterface(type(IERC1271).interfaceId)) {\n                return IERC1271(strategy).isValidSignature(_hash, _signature);\n            } else {\n                return 0xffffffff;\n            }\n        }\n        if (CommonLibrary.recoverSigner(_hash, _signature) == strategy) {\n            return 0x1626ba7e;\n        }\n        return 0xffffffff;\n    }\n\n    /// @inheritdoc IIntegrationVault\n    function externalCall(\n        address to,\n        bytes4 selector,\n        bytes calldata data\n    ) external payable nonReentrant returns (bytes memory result) {\n        require(_nft != 0, ExceptionsLibrary.INIT);\n        require(_isApprovedOrOwner(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        IProtocolGovernance protocolGovernance = _vaultGovernance.internalParams().protocolGovernance;\n        IValidator validator = IValidator(protocolGovernance.validators(to));\n        require(address(validator) != address(0), ExceptionsLibrary.FORBIDDEN);\n        validator.validate(msg.sender, to, msg.value, selector, data);\n        (bool res, bytes memory returndata) = to.call{value: msg.value}(abi.encodePacked(selector, data));\n        if (!res) {\n            assembly {\n                let returndata_size := mload(returndata)\n                // Bubble up revert reason\n                revert(add(32, returndata), returndata_size)\n            }\n        }\n        result = returndata;\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _validateAndProjectTokens(address[] memory tokens, uint256[] memory tokenAmounts)\n        internal\n        view\n        returns (uint256[] memory pTokenAmounts)\n    {\n        require(CommonLibrary.isSortedAndUnique(tokens), ExceptionsLibrary.INVARIANT);\n        require(tokens.length == tokenAmounts.length, ExceptionsLibrary.INVALID_VALUE);\n        pTokenAmounts = CommonLibrary.projectTokenAmounts(_vaultTokens, tokens, tokenAmounts);\n    }\n\n    function _root(\n        IVaultRegistry registry,\n        uint256 thisNft,\n        address thisOwner\n    ) internal view returns (IVaultRoot) {\n        uint256 thisOwnerNft = registry.nftForVault(thisOwner);\n        require((thisNft != 0) && (thisOwnerNft != 0), ExceptionsLibrary.INIT);\n\n        return IVaultRoot(thisOwner);\n    }\n\n    function _isApprovedOrOwner(address sender) internal view returns (bool) {\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        uint256 nft_ = _nft;\n        if (nft_ == 0) {\n            return false;\n        }\n        return registry.getApproved(nft_) == sender || registry.ownerOf(nft_) == sender;\n    }\n\n    /// @notice check if token is forbidden to transfer under reclaim\n    /// @dev it is done in order to prevent reclaiming internal protocol tokens\n    ///      for example to prevent YEarn tokens to reclaimed\n    ///      if our vault is managing tokens, depositing it in YEarn\n    /// @param token The address of token to check\n    /// @return if token is forbidden\n    function _isReclaimForbidden(address token) internal view virtual returns (bool);\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    /// Guaranteed to have exact signature matchinn vault tokens\n    function _push(uint256[] memory tokenAmounts, bytes memory options)\n        internal\n        virtual\n        returns (uint256[] memory actualTokenAmounts);\n\n    /// Guaranteed to have exact signature matchinn vault tokens\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal virtual returns (uint256[] memory actualTokenAmounts);\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted on successful push\n    /// @param tokenAmounts The amounts of tokens to pushed\n    event Push(uint256[] tokenAmounts);\n\n    /// @notice Emitted on successful pull\n    /// @param to The target address for pulled tokens\n    /// @param tokenAmounts The amounts of tokens to pull\n    event Pull(address to, uint256[] tokenAmounts);\n\n    /// @notice Emitted when tokens are reclaimed\n    /// @param to The target address for pulled tokens\n    /// @param tokens ERC20 tokens to be reclaimed\n    /// @param tokenAmounts The amounts of reclaims\n    event ReclaimTokens(address to, address[] tokens, uint256[] tokenAmounts);\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/Time.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity =0.8.9;\nimport \"@prb/math/contracts/PRBMathUD60x18.sol\";\n\nlibrary Time {\n    uint256 public constant SECONDS_IN_DAY_WAD = 86400e18;\n\n    /// @notice Calculate block.timestamp to wei precision\n    /// @return Current timestamp in wei-seconds (1/1e18)\n    function blockTimestampScaled() internal view returns (uint256) {\n        // solhint-disable-next-line not-rely-on-time\n        return PRBMathUD60x18.fromUint(block.timestamp);\n    }\n\n    /// @dev Returns the block timestamp truncated to 32 bits, checking for overflow.\n    function blockTimestampTruncated() internal view returns (uint32) {\n        return timestampAsUint32(block.timestamp);\n    }\n\n    function timestampAsUint32(uint256 _timestamp)\n        internal\n        pure\n        returns (uint32 timestamp)\n    {\n        require((timestamp = uint32(_timestamp)) == _timestamp, \"TSOFLOW\");\n    }\n\n    function isCloseToMaturityOrBeyondMaturity(uint256 termEndTimestampWad)\n        internal\n        view\n        returns (bool vammInactive)\n    {\n        return\n            Time.blockTimestampScaled() + SECONDS_IN_DAY_WAD >=\n            termEndTimestampWad;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IVaultRoot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IVaultRoot {\n    /// @notice Checks if subvault is present\n    /// @param nft_ index of subvault for check\n    /// @return `true` if subvault present, `false` otherwise\n    function hasSubvault(uint256 nft_) external view returns (bool);\n\n    /// @notice Get subvault by index\n    /// @param index Index of subvault\n    /// @return address Address of the contract\n    function subvaultAt(uint256 index) external view returns (address);\n\n    /// @notice Get index of subvault by nft\n    /// @param nft_ Nft for getting subvault\n    /// @return index Index of subvault\n    function subvaultOneBasedIndex(uint256 nft_) external view returns (uint256);\n\n    /// @notice Get all subvalutNfts in the current Vault\n    /// @return subvaultNfts Subvaults of NTFs\n    function subvaultNfts() external view returns (uint256[] memory);\n}\n"
    },
    "contracts/interfaces/validators/IValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"./IBaseValidator.sol\";\n\ninterface IValidator is IBaseValidator, IERC165 {\n    // @notice Validate if call can be made to external contract.\n    // @dev Reverts if validation failed. Returns nothing if validation is ok\n    // @param sender Sender of the externalCall method\n    // @param addr Address of the called contract\n    // @param value Ether value for the call\n    // @param selector Selector of the called method\n    // @param data Call data after selector\n    function validate(\n        address sender,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view;\n}\n"
    },
    "contracts/libraries/CommonLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./ExceptionsLibrary.sol\";\n\n/// @notice CommonLibrary shared utilities\nlibrary CommonLibrary {\n    uint256 constant DENOMINATOR = 10**9;\n    uint256 constant D18 = 10**18;\n    uint256 constant YEAR = 365 * 24 * 3600;\n    uint256 constant Q128 = 2**128;\n    uint256 constant Q96 = 2**96;\n    uint256 constant Q48 = 2**48;\n    uint256 constant Q160 = 2**160;\n    uint256 constant UNI_FEE_DENOMINATOR = 10**6;\n\n    /// @notice Sort uint256 using bubble sort. The sorting is done in-place.\n    /// @param arr Array of uint256\n    function sortUint(uint256[] memory arr) internal pure {\n        uint256 l = arr.length;\n        for (uint256 i = 0; i < l; ++i) {\n            for (uint256 j = i + 1; j < l; ++j) {\n                if (arr[i] > arr[j]) {\n                    uint256 temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n    }\n\n    /// @notice Checks if array of addresses is sorted and all adresses are unique\n    /// @param tokens A set of addresses to check\n    /// @return `true` if all addresses are sorted and unique, `false` otherwise\n    function isSortedAndUnique(address[] memory tokens) internal pure returns (bool) {\n        if (tokens.length < 2) {\n            return true;\n        }\n        for (uint256 i = 0; i < tokens.length - 1; ++i) {\n            if (tokens[i] >= tokens[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /// @notice Projects tokenAmounts onto subset or superset of tokens\n    /// @dev\n    /// Requires both sets of tokens to be sorted. When tokens are not sorted, it's undefined behavior.\n    /// If there is a token in tokensToProject that is not part of tokens and corresponding tokenAmountsToProject > 0, reverts.\n    /// Zero token amount is eqiuvalent to missing token\n    function projectTokenAmounts(\n        address[] memory tokens,\n        address[] memory tokensToProject,\n        uint256[] memory tokenAmountsToProject\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory res = new uint256[](tokens.length);\n        uint256 t = 0;\n        uint256 tp = 0;\n        while ((t < tokens.length) && (tp < tokensToProject.length)) {\n            if (tokens[t] < tokensToProject[tp]) {\n                res[t] = 0;\n                t++;\n            } else if (tokens[t] > tokensToProject[tp]) {\n                if (tokenAmountsToProject[tp] == 0) {\n                    tp++;\n                } else {\n                    revert(\"TPS\");\n                }\n            } else {\n                res[t] = tokenAmountsToProject[tp];\n                t++;\n                tp++;\n            }\n        }\n        while (t < tokens.length) {\n            res[t] = 0;\n            t++;\n        }\n        return res;\n    }\n\n    /// @notice Calculated sqrt of uint in X96 format\n    /// @param xX96 input number in X96 format\n    /// @return sqrt of xX96 in X96 format\n    function sqrtX96(uint256 xX96) internal pure returns (uint256) {\n        uint256 sqX96 = sqrt(xX96);\n        return sqX96 << 48;\n    }\n\n    /// @notice Calculated sqrt of uint\n    /// @param x input number\n    /// @return sqrt of x\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x4) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n\n    /// @notice Recovers signer address from signed message hash\n    /// @param _ethSignedMessageHash signed message\n    /// @param _signature contatenated ECDSA r, s, v (65 bytes)\n    /// @return Recovered address if the signature is valid, address(0) otherwise\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) internal pure returns (address) {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    /// @notice Get ECDSA r, s, v from signature\n    /// @param sig signature (65 bytes)\n    /// @return r ECDSA r\n    /// @return s ECDSA s\n    /// @return v ECDSA v\n    function splitSignature(bytes memory sig)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, ExceptionsLibrary.INVALID_LENGTH);\n\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n    }\n}\n"
    },
    "contracts/vaults/Vault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Abstract contract that has logic common for every Vault.\n/// @dev Notes:\n/// ### ERC-721\n///\n/// Each Vault should be registered in VaultRegistry and get corresponding VaultRegistry NFT.\n///\n/// ### Access control\n///\n/// `push` and `pull` methods are only allowed for owner / approved person of the NFT. However,\n/// `pull` for approved person also checks that pull destination is another vault of the Vault System.\n///\n/// The semantics is: NFT owner owns all Vault liquidity, Approved person is liquidity manager.\n/// ApprovedForAll person cannot do anything except ERC-721 token transfers.\n///\n/// Both NFT owner and approved person can call externalCall method which claims liquidity mining rewards (if any)\n///\n/// `reclaimTokens` for mistakenly transfered tokens (not included into vaultTokens) additionally can be withdrawn by\n/// the protocol admin\nabstract contract Vault is IVault, ERC165 {\n    using SafeERC20 for IERC20;\n\n    IVaultGovernance internal _vaultGovernance;\n    address[] internal _vaultTokens;\n    mapping(address => int256) internal _vaultTokensIndex;\n    uint256 internal _nft;\n    uint256[] internal _pullExistentials;\n\n    constructor() {\n        // lock initialization and thus all mutations for any deployed Vault\n        _nft = type(uint256).max;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function initialized() external view returns (bool) {\n        return _nft != 0;\n    }\n\n    /// @inheritdoc IVault\n    function isVaultToken(address token) public view returns (bool) {\n        return _vaultTokensIndex[token] != 0;\n    }\n\n    /// @inheritdoc IVault\n    function vaultGovernance() external view returns (IVaultGovernance) {\n        return _vaultGovernance;\n    }\n\n    /// @inheritdoc IVault\n    function vaultTokens() external view returns (address[] memory) {\n        return _vaultTokens;\n    }\n\n    /// @inheritdoc IVault\n    function nft() external view returns (uint256) {\n        return _nft;\n    }\n\n    /// @inheritdoc IVault\n    function tvl() public view virtual returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\n\n    /// @inheritdoc IVault\n    function pullExistentials() external view returns (uint256[] memory) {\n        return _pullExistentials;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IVault).interfaceId);\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _initialize(address[] memory vaultTokens_, uint256 nft_) internal virtual {\n        require(_nft == 0, ExceptionsLibrary.INIT);\n        require(CommonLibrary.isSortedAndUnique(vaultTokens_), ExceptionsLibrary.INVARIANT);\n        require(nft_ != 0, ExceptionsLibrary.VALUE_ZERO); // guarantees that this method can only be called once\n        IProtocolGovernance governance = IVaultGovernance(msg.sender).internalParams().protocolGovernance;\n        require(\n            vaultTokens_.length > 0 && vaultTokens_.length <= governance.maxTokensPerVault(),\n            ExceptionsLibrary.INVALID_VALUE\n        );\n        for (uint256 i = 0; i < vaultTokens_.length; i++) {\n            require(\n                governance.hasPermission(vaultTokens_[i], PermissionIdsLibrary.ERC20_VAULT_TOKEN),\n                ExceptionsLibrary.FORBIDDEN\n            );\n        }\n        _vaultGovernance = IVaultGovernance(msg.sender);\n        _vaultTokens = vaultTokens_;\n        _nft = nft_;\n        uint256 len = _vaultTokens.length;\n        for (uint256 i = 0; i < len; ++i) {\n            _vaultTokensIndex[vaultTokens_[i]] = int256(i + 1);\n\n            IERC20Metadata token = IERC20Metadata(vaultTokens_[i]);\n            _pullExistentials.push(10**(token.decimals() / 2));\n        }\n        emit Initialized(tx.origin, msg.sender, vaultTokens_, nft_);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when Vault is intialized\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param vaultTokens_ ERC20 tokens under the vault management\n    /// @param nft_ VaultRegistry NFT assigned to the vault\n    event Initialized(address indexed origin, address indexed sender, address[] vaultTokens_, uint256 nft_);\n}\n"
    },
    "contracts/interfaces/validators/IBaseValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../IProtocolGovernance.sol\";\n\ninterface IBaseValidator {\n    /// @notice Validator parameters\n    /// @param protocolGovernance Reference to Protocol Governance\n    struct ValidatorParams {\n        IProtocolGovernance protocolGovernance;\n    }\n\n    /// @notice Validator params staged to commit.\n    function stagedValidatorParams() external view returns (ValidatorParams memory);\n\n    /// @notice Timestamp after which validator params can be committed.\n    function stagedValidatorParamsTimestamp() external view returns (uint256);\n\n    /// @notice Current validator params.\n    function validatorParams() external view returns (ValidatorParams memory);\n\n    /// @notice Stage new validator params for commit.\n    /// @param newParams New params for commit\n    function stageValidatorParams(ValidatorParams calldata newParams) external;\n\n    /// @notice Commit new validator params.\n    function commitValidatorParams() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/vaults/YearnVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/yearn/IYearnProtocolVault.sol\";\nimport \"../interfaces/vaults/IYearnVaultGovernance.sol\";\nimport \"../interfaces/vaults/IYearnVault.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"./IntegrationVault.sol\";\n\n/// @notice Vault that interfaces Yearn protocol in the integration layer.\n/// @dev Notes:\n/// **TVL**\n///\n/// The TVL of the vault is updated after each deposit withdraw.\n///\n/// **yTokens**\n/// yTokens are fixed at the token creation and addresses are taken from YearnVault governance and if missing there\n/// - in YearnVaultRegistry.\n/// So essentially each yToken is fixed for life of the YearnVault. If the yToken is missing for some vaultToken,\n/// the YearnVault cannot be created.\n///\n/// **Push / Pull**\n/// There are some deposit limits imposed by Yearn vaults.\n/// The contract's vaultTokens are fully allowed to corresponding yTokens.\n\ncontract YearnVault is IYearnVault, IntegrationVault {\n    using SafeERC20 for IERC20;\n    uint256 public constant DEFAULT_MAX_LOSS = 10000; // 10000%%\n\n    address[] private _yTokens;\n\n    /// @notice Yearn protocol vaults used by this contract\n    function yTokens() external view returns (address[] memory) {\n        return _yTokens;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view override returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        address[] memory tokens = _vaultTokens;\n        minTokenAmounts = new uint256[](tokens.length);\n        for (uint256 i = 0; i < _yTokens.length; ++i) {\n            IYearnProtocolVault yToken = IYearnProtocolVault(_yTokens[i]);\n            minTokenAmounts[i] = FullMath.mulDiv(\n                yToken.balanceOf(address(this)),\n                yToken.pricePerShare(),\n                10**yToken.decimals()\n            );\n        }\n        maxTokenAmounts = minTokenAmounts;\n    }\n\n    /// @inheritdoc IntegrationVault\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, IntegrationVault)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId) || type(IYearnVault).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n    /// @inheritdoc IYearnVault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external {\n        _initialize(vaultTokens_, nft_);\n        _yTokens = new address[](vaultTokens_.length);\n        for (uint256 i = 0; i < vaultTokens_.length; ++i) {\n            _yTokens[i] = IYearnVaultGovernance(address(msg.sender)).yTokenForToken(vaultTokens_[i]);\n            require(_yTokens[i] != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -----------------------\n    function _isReclaimForbidden(address token) internal view override returns (bool) {\n        uint256 len = _yTokens.length;\n        for (uint256 i = 0; i < len; ++i) {\n            if (_yTokens[i] == token) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _push(uint256[] memory tokenAmounts, bytes memory)\n        internal\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        address[] memory tokens = _vaultTokens;\n        actualTokenAmounts = tokenAmounts;\n        for (uint256 i = 0; i < _yTokens.length; ++i) {\n            if (tokenAmounts[i] == 0) {\n                continue;\n            }\n\n            address token = tokens[i];\n            IYearnProtocolVault yToken = IYearnProtocolVault(_yTokens[i]);\n            IERC20(token).safeIncreaseAllowance(address(yToken), tokenAmounts[i]);\n            try yToken.deposit(tokenAmounts[i], address(this)) returns (uint256) {} catch (bytes memory) {\n                actualTokenAmounts[i] = 0;\n            }\n            IERC20(token).safeApprove(address(yToken), 0);\n        }\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\n        uint256 maxLoss = options.length > 0 ? abi.decode(options, (uint256)) : DEFAULT_MAX_LOSS;\n        for (uint256 i = 0; i < _yTokens.length; ++i) {\n            if (tokenAmounts[i] == 0) continue;\n\n            IYearnProtocolVault yToken = IYearnProtocolVault(_yTokens[i]);\n            uint256 yTokenAmount = FullMath.mulDiv(tokenAmounts[i], (10**yToken.decimals()), yToken.pricePerShare());\n            uint256 balance = yToken.balanceOf(address(this));\n            if (yTokenAmount > balance) {\n                yTokenAmount = balance;\n            }\n\n            if (yTokenAmount == 0) continue;\n\n            actualTokenAmounts[i] = yToken.withdraw(yTokenAmount, to, maxLoss);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/external/yearn/IYearnProtocolVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IYearnProtocolVault is IERC20 {\n    function decimals() external view returns (uint256);\n\n    function pricePerShare() external view returns (uint256);\n\n    function deposit(uint256 amount, address recipient) external returns (uint256);\n\n    // Default maxLoss = 1, i.e. 0.01% [BPS]\n    function withdraw(\n        uint256 maxShares,\n        address recipient,\n        uint256 maxLoss\n    ) external returns (uint256);\n}\n"
    },
    "contracts/vaults/UniV3Vault.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/vaults/IUniV3VaultGovernance.sol\";\nimport \"../interfaces/vaults/IUniV3Vault.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/LiquidityAmounts.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"./IntegrationVault.sol\";\nimport \"../utils/UniV3Helper.sol\";\n\n/// @notice Vault that interfaces UniswapV3 protocol in the integration layer.\ncontract UniV3Vault is IUniV3Vault, IntegrationVault {\n    using SafeERC20 for IERC20;\n\n    struct Pair {\n        uint256 a0;\n        uint256 a1;\n    }\n\n    /// @inheritdoc IUniV3Vault\n    IUniswapV3Pool public pool;\n    /// @inheritdoc IUniV3Vault\n    uint256 public uniV3Nft;\n    INonfungiblePositionManager private _positionManager;\n    UniV3Helper private _uniV3Helper;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        if (uniV3Nft == 0) {\n            return (new uint256[](2), new uint256[](2));\n        }\n\n        minTokenAmounts = new uint256[](2);\n        maxTokenAmounts = new uint256[](2);\n        int24 tickLower;\n        int24 tickUpper;\n        uint128 liquidity;\n        {\n            IUniV3VaultGovernance.DelayedProtocolParams memory params = IUniV3VaultGovernance(address(_vaultGovernance))\n                .delayedProtocolParams();\n            {\n                uint128 tokensOwed0;\n                uint128 tokensOwed1;\n\n                (tickLower, tickUpper, liquidity, tokensOwed0, tokensOwed1) = _uniV3Helper.calculatePositionInfo(\n                    _positionManager,\n                    pool,\n                    uniV3Nft\n                );\n\n                minTokenAmounts[0] = tokensOwed0;\n                maxTokenAmounts[0] = tokensOwed0;\n                minTokenAmounts[1] = tokensOwed1;\n                maxTokenAmounts[1] = tokensOwed1;\n            }\n            {\n                uint256 amountMin0;\n                uint256 amountMax0;\n                uint256 amountMin1;\n                uint256 amountMax1;\n                uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n                uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n                (uint256 minPriceX96, uint256 maxPriceX96) = _getMinMaxPrice(params.oracle);\n                {\n                    uint256 minSqrtPriceX96 = CommonLibrary.sqrtX96(minPriceX96);\n                    (amountMin0, amountMin1) = LiquidityAmounts.getAmountsForLiquidity(\n                        uint160(minSqrtPriceX96),\n                        sqrtPriceAX96,\n                        sqrtPriceBX96,\n                        liquidity\n                    );\n                }\n                {\n                    uint256 maxSqrtPriceX96 = CommonLibrary.sqrtX96(maxPriceX96);\n                    (amountMax0, amountMax1) = LiquidityAmounts.getAmountsForLiquidity(\n                        uint160(maxSqrtPriceX96),\n                        sqrtPriceAX96,\n                        sqrtPriceBX96,\n                        liquidity\n                    );\n                }\n                minTokenAmounts[0] += amountMin0 < amountMax0 ? amountMin0 : amountMax0;\n                minTokenAmounts[1] += amountMin1 < amountMax1 ? amountMin1 : amountMax1;\n                maxTokenAmounts[0] += amountMin0 < amountMax0 ? amountMax0 : amountMin0;\n                maxTokenAmounts[1] += amountMin1 < amountMax1 ? amountMax1 : amountMin1;\n            }\n        }\n    }\n\n    /// @inheritdoc IntegrationVault\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, IntegrationVault) returns (bool) {\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IUniV3Vault).interfaceId);\n    }\n\n    /// @inheritdoc IUniV3Vault\n    function positionManager() external view returns (INonfungiblePositionManager) {\n        return _positionManager;\n    }\n\n    /// @inheritdoc IUniV3Vault\n    function liquidityToTokenAmounts(uint128 liquidity) external view returns (uint256[] memory tokenAmounts) {\n        tokenAmounts = _uniV3Helper.liquidityToTokenAmounts(liquidity, pool, uniV3Nft, _positionManager);\n    }\n\n    /// @inheritdoc IUniV3Vault\n    function tokenAmountsToLiquidity(uint256[] memory tokenAmounts) public view returns (uint128 liquidity) {\n        liquidity = _uniV3Helper.tokenAmountsToLiquidity(tokenAmounts, pool, uniV3Nft, _positionManager);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n    /// @inheritdoc IUniV3Vault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        uint24 fee_,\n        address uniV3Hepler_\n    ) external {\n        require(vaultTokens_.length == 2, ExceptionsLibrary.INVALID_VALUE);\n        _initialize(vaultTokens_, nft_);\n        _positionManager = IUniV3VaultGovernance(address(_vaultGovernance)).delayedProtocolParams().positionManager;\n        pool = IUniswapV3Pool(\n            IUniswapV3Factory(_positionManager.factory()).getPool(_vaultTokens[0], _vaultTokens[1], fee_)\n        );\n        _uniV3Helper = UniV3Helper(uniV3Hepler_);\n        require(address(pool) != address(0), ExceptionsLibrary.NOT_FOUND);\n    }\n\n    /// @inheritdoc IERC721Receiver\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes memory\n    ) external returns (bytes4) {\n        require(msg.sender == address(_positionManager), ExceptionsLibrary.FORBIDDEN);\n        require(_isStrategy(operator), ExceptionsLibrary.FORBIDDEN);\n        (, , address token0, address token1, uint24 fee, , , , , , , ) = _positionManager.positions(tokenId);\n        // new position should have vault tokens\n        require(\n            token0 == _vaultTokens[0] && token1 == _vaultTokens[1] && fee == pool.fee(),\n            ExceptionsLibrary.INVALID_TOKEN\n        );\n\n        if (uniV3Nft != 0) {\n            (, , , , , , , uint128 liquidity, , , uint128 tokensOwed0, uint128 tokensOwed1) = _positionManager\n                .positions(uniV3Nft);\n            require(liquidity == 0 && tokensOwed0 == 0 && tokensOwed1 == 0, ExceptionsLibrary.INVALID_VALUE);\n            // return previous uni v3 position nft\n            _positionManager.transferFrom(address(this), from, uniV3Nft);\n        }\n\n        uniV3Nft = tokenId;\n        return this.onERC721Received.selector;\n    }\n\n    /// @inheritdoc IUniV3Vault\n    function collectEarnings() external nonReentrant returns (uint256[] memory collectedEarnings) {\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        address owner = registry.ownerOf(_nft);\n        address to = _root(registry, _nft, owner).subvaultAt(0);\n        collectedEarnings = new uint256[](2);\n        (uint256 collectedEarnings0, uint256 collectedEarnings1) = _positionManager.collect(\n            INonfungiblePositionManager.CollectParams({\n                tokenId: uniV3Nft,\n                recipient: to,\n                amount0Max: type(uint128).max,\n                amount1Max: type(uint128).max\n            })\n        );\n        collectedEarnings[0] = collectedEarnings0;\n        collectedEarnings[1] = collectedEarnings1;\n        emit CollectedEarnings(tx.origin, msg.sender, to, collectedEarnings0, collectedEarnings1);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _parseOptions(bytes memory options) internal view returns (Options memory) {\n        if (options.length == 0) return Options({amount0Min: 0, amount1Min: 0, deadline: block.timestamp + 600});\n\n        require(options.length == 32 * 3, ExceptionsLibrary.INVALID_VALUE);\n        return abi.decode(options, (Options));\n    }\n\n    function _isStrategy(address addr) internal view returns (bool) {\n        return _vaultGovernance.internalParams().registry.getApproved(_nft) == addr;\n    }\n\n    function _isReclaimForbidden(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    function _getMinMaxPrice(IOracle oracle) internal view returns (uint256 minPriceX96, uint256 maxPriceX96) {\n        (uint256[] memory prices, ) = oracle.priceX96(_vaultTokens[0], _vaultTokens[1], 0x2A);\n        require(prices.length > 1, ExceptionsLibrary.INVARIANT);\n        minPriceX96 = prices[0];\n        maxPriceX96 = prices[0];\n        for (uint32 i = 1; i < prices.length; ++i) {\n            if (prices[i] < minPriceX96) {\n                minPriceX96 = prices[i];\n            } else if (prices[i] > maxPriceX96) {\n                maxPriceX96 = prices[i];\n            }\n        }\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _push(uint256[] memory tokenAmounts, bytes memory options)\n        internal\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        actualTokenAmounts = new uint256[](2);\n        if (uniV3Nft == 0) return actualTokenAmounts;\n\n        uint128 liquidity = tokenAmountsToLiquidity(tokenAmounts);\n\n        if (liquidity == 0) return actualTokenAmounts;\n        else {\n            address[] memory tokens = _vaultTokens;\n            for (uint256 i = 0; i < tokens.length; ++i) {\n                IERC20(tokens[i]).safeIncreaseAllowance(address(_positionManager), tokenAmounts[i]);\n            }\n\n            Options memory opts = _parseOptions(options);\n            Pair memory amounts = Pair({a0: tokenAmounts[0], a1: tokenAmounts[1]});\n            Pair memory minAmounts = Pair({a0: opts.amount0Min, a1: opts.amount1Min});\n            (, uint256 amount0, uint256 amount1) = _positionManager.increaseLiquidity(\n                INonfungiblePositionManager.IncreaseLiquidityParams({\n                    tokenId: uniV3Nft,\n                    amount0Desired: amounts.a0,\n                    amount1Desired: amounts.a1,\n                    amount0Min: minAmounts.a0,\n                    amount1Min: minAmounts.a1,\n                    deadline: opts.deadline\n                })\n            );\n\n            actualTokenAmounts[0] = amount0;\n            actualTokenAmounts[1] = amount1;\n\n            for (uint256 i = 0; i < tokens.length; ++i) {\n                IERC20(tokens[i]).safeApprove(address(_positionManager), 0);\n            }\n        }\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        // UniV3Vault should have strictly 2 vault tokens\n        actualTokenAmounts = new uint256[](2);\n        if (uniV3Nft == 0) return actualTokenAmounts;\n\n        Options memory opts = _parseOptions(options);\n        Pair memory amounts = _pullUniV3Nft(tokenAmounts, to, opts);\n        actualTokenAmounts[0] = amounts.a0;\n        actualTokenAmounts[1] = amounts.a1;\n    }\n\n    function _getMaximalLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = LiquidityAmounts.getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = LiquidityAmounts.getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 > liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    function _pullUniV3Nft(\n        uint256[] memory tokenAmounts,\n        address to,\n        Options memory opts\n    ) internal returns (Pair memory) {\n        uint128 liquidityToPull;\n        // scope the code below to avoid stack-too-deep exception\n        {\n            (, , , , , int24 tickLower, int24 tickUpper, uint128 liquidity, , , , ) = _positionManager.positions(\n                uniV3Nft\n            );\n            (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n            uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n            uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n            liquidityToPull = _getMaximalLiquidityForAmounts(\n                sqrtPriceX96,\n                sqrtPriceAX96,\n                sqrtPriceBX96,\n                tokenAmounts[0],\n                tokenAmounts[1]\n            );\n            liquidityToPull = liquidity < liquidityToPull ? liquidity : liquidityToPull;\n        }\n        if (liquidityToPull != 0) {\n            Pair memory minAmounts = Pair({a0: opts.amount0Min, a1: opts.amount1Min});\n            _positionManager.decreaseLiquidity(\n                INonfungiblePositionManager.DecreaseLiquidityParams({\n                    tokenId: uniV3Nft,\n                    liquidity: liquidityToPull,\n                    amount0Min: minAmounts.a0,\n                    amount1Min: minAmounts.a1,\n                    deadline: opts.deadline\n                })\n            );\n        }\n        (uint256 amount0Collected, uint256 amount1Collected) = _positionManager.collect(\n            INonfungiblePositionManager.CollectParams({\n                tokenId: uniV3Nft,\n                recipient: to,\n                amount0Max: type(uint128).max,\n                amount1Max: type(uint128).max\n            })\n        );\n        amount0Collected = amount0Collected > tokenAmounts[0] ? tokenAmounts[0] : amount0Collected;\n        amount1Collected = amount1Collected > tokenAmounts[1] ? tokenAmounts[1] : amount1Collected;\n        return Pair({a0: amount0Collected, a1: amount1Collected});\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when earnings are collected\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param to Receiver of the fees\n    /// @param amount0 Amount of token0 collected\n    /// @param amount1 Amount of token1 collected\n    event CollectedEarnings(\n        address indexed origin,\n        address indexed sender,\n        address indexed to,\n        uint256 amount0,\n        uint256 amount1\n    );\n}\n"
    },
    "contracts/interfaces/external/univ3/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./IPeripheryImmutableState.sol\";\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is IPeripheryImmutableState, IERC721 {\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/interfaces/external/univ3/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport \"./pool/IUniswapV3PoolActions.sol\";\nimport \"./pool/IUniswapV3PoolImmutables.sol\";\nimport \"./pool/IUniswapV3PoolState.sol\";\nimport \"./pool/IUniswapV3PoolDerivedState.sol\";\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions\n{\n\n}\n"
    },
    "contracts/interfaces/external/univ3/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/interfaces/vaults/IUniV3VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../external/univ3/INonfungiblePositionManager.sol\";\nimport \"../oracles/IOracle.sol\";\nimport \"./IVaultGovernance.sol\";\nimport \"./IUniV3Vault.sol\";\n\ninterface IUniV3VaultGovernance is IVaultGovernance {\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param positionManager Reference to UniV3 INonfungiblePositionManager\n    struct DelayedProtocolParams {\n        INonfungiblePositionManager positionManager;\n        IOracle oracle;\n    }\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    /// @param fee_ Fee of the UniV3 pool\n    /// @param uniV3Helper_ address of helper for UniV3 arithmetic with ticks\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        uint24 fee_,\n        address uniV3Helper_\n    ) external returns (IUniV3Vault vault, uint256 nft);\n}\n"
    },
    "contracts/interfaces/vaults/IUniV3Vault.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./IIntegrationVault.sol\";\nimport \"../external/univ3/INonfungiblePositionManager.sol\";\nimport \"../external/univ3/IUniswapV3Pool.sol\";\n\ninterface IUniV3Vault is IERC721Receiver, IIntegrationVault {\n    struct Options {\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Reference to INonfungiblePositionManager of UniswapV3 protocol.\n    function positionManager() external view returns (INonfungiblePositionManager);\n\n    /// @notice Reference to UniswapV3 pool.\n    function pool() external view returns (IUniswapV3Pool);\n\n    /// @notice NFT of UniV3 position manager\n    function uniV3Nft() external view returns (uint256);\n\n    /// @notice Returns tokenAmounts corresponding to liquidity, based on the current Uniswap position\n    /// @param liquidity Liquidity that will be converted to token amounts\n    /// @return tokenAmounts Token amounts for the specified liquidity\n    function liquidityToTokenAmounts(uint128 liquidity) external view returns (uint256[] memory tokenAmounts);\n\n    /// @notice Returns liquidity corresponding to token amounts, based on the current Uniswap position\n    /// @param tokenAmounts Token amounts that will be converted to liquidity\n    /// @return liquidity Liquidity for the specified token amounts\n    function tokenAmountsToLiquidity(uint256[] memory tokenAmounts) external view returns (uint128 liquidity);\n\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param fee_ Fee of the UniV3 pool\n    /// @param uniV3Helper_ address of helper for UniV3 arithmetic with ticks\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        uint24 fee_,\n        address uniV3Helper_\n    ) external;\n\n    /// @notice Collect UniV3 fees to zero vault.\n    function collectEarnings() external returns (uint256[] memory collectedEarnings);\n}\n"
    },
    "contracts/libraries/external/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        // diff: original require(absTick <= uint256(MAX_TICK), \"T\");\n        require(absTick <= uint256(int256(MAX_TICK)), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \"R\");\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "contracts/libraries/external/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\nimport \"./FullMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    /// @notice Downcasts uint256 to uint128\n    /// @param x The uint258 to be downcasted\n    /// @return y The passed value, downcasted to uint128\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param amount0 The amount of token0 being sent in\n    /// @param amount1 The amount of token1 being sent in\n    /// @return liquidity The maximum amount of liquidity received\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount of token1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n        } else {\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n        }\n    }\n}\n"
    },
    "contracts/utils/UniV3Helper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/LiquidityAmounts.sol\";\nimport \"../libraries/external/OracleLibrary.sol\";\n\ncontract UniV3Helper {\n    function liquidityToTokenAmounts(\n        uint128 liquidity,\n        IUniswapV3Pool pool,\n        uint256 uniV3Nft,\n        INonfungiblePositionManager positionManager\n    ) external view returns (uint256[] memory tokenAmounts) {\n        tokenAmounts = new uint256[](2);\n        (, , , , , int24 tickLower, int24 tickUpper, , , , , ) = positionManager.positions(uniV3Nft);\n\n        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n        uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n        uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n        (tokenAmounts[0], tokenAmounts[1]) = LiquidityAmounts.getAmountsForLiquidity(\n            sqrtPriceX96,\n            sqrtPriceAX96,\n            sqrtPriceBX96,\n            liquidity\n        );\n    }\n\n    function tokenAmountsToLiquidity(\n        uint256[] memory tokenAmounts,\n        IUniswapV3Pool pool,\n        uint256 uniV3Nft,\n        INonfungiblePositionManager positionManager\n    ) external view returns (uint128 liquidity) {\n        (, , , , , int24 tickLower, int24 tickUpper, , , , , ) = positionManager.positions(uniV3Nft);\n        (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n        uint160 sqrtPriceAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n        uint160 sqrtPriceBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n\n        liquidity = LiquidityAmounts.getLiquidityForAmounts(\n            sqrtPriceX96,\n            sqrtPriceAX96,\n            sqrtPriceBX96,\n            tokenAmounts[0],\n            tokenAmounts[1]\n        );\n    }\n\n    function _getFeeGrowthInside(\n        IUniswapV3Pool pool,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        uint256 feeGrowthGlobal0X128,\n        uint256 feeGrowthGlobal1X128\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\n        unchecked {\n            (, , uint256 lowerFeeGrowthOutside0X128, uint256 lowerFeeGrowthOutside1X128, , , , ) = pool.ticks(\n                tickLower\n            );\n            (, , uint256 upperFeeGrowthOutside0X128, uint256 upperFeeGrowthOutside1X128, , , , ) = pool.ticks(\n                tickUpper\n            );\n\n            // calculate fee growth below\n            uint256 feeGrowthBelow0X128;\n            uint256 feeGrowthBelow1X128;\n            if (tickCurrent >= tickLower) {\n                feeGrowthBelow0X128 = lowerFeeGrowthOutside0X128;\n                feeGrowthBelow1X128 = lowerFeeGrowthOutside1X128;\n            } else {\n                feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lowerFeeGrowthOutside0X128;\n                feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lowerFeeGrowthOutside1X128;\n            }\n\n            // calculate fee growth above\n            uint256 feeGrowthAbove0X128;\n            uint256 feeGrowthAbove1X128;\n            if (tickCurrent < tickUpper) {\n                feeGrowthAbove0X128 = upperFeeGrowthOutside0X128;\n                feeGrowthAbove1X128 = upperFeeGrowthOutside1X128;\n            } else {\n                feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upperFeeGrowthOutside0X128;\n                feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upperFeeGrowthOutside1X128;\n            }\n\n            feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\n            feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\n        }\n    }\n\n    function calculatePositionInfo(\n        INonfungiblePositionManager positionManager,\n        IUniswapV3Pool pool,\n        uint256 uniV3Nft\n    )\n        external\n        view\n        returns (\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        )\n    {\n        uint256 feeGrowthInside0LastX128;\n        uint256 feeGrowthInside1LastX128;\n        (\n            ,\n            ,\n            ,\n            ,\n            ,\n            tickLower,\n            tickUpper,\n            liquidity,\n            feeGrowthInside0LastX128,\n            feeGrowthInside1LastX128,\n            tokensOwed0,\n            tokensOwed1\n        ) = positionManager.positions(uniV3Nft);\n\n        if (liquidity == 0) {\n            return (tickLower, tickUpper, liquidity, tokensOwed0, tokensOwed1);\n        }\n\n        uint256 feeGrowthGlobal0X128 = pool.feeGrowthGlobal0X128();\n        uint256 feeGrowthGlobal1X128 = pool.feeGrowthGlobal1X128();\n        (, int24 tick, , , , , ) = pool.slot0();\n\n        (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = _getFeeGrowthInside(\n            pool,\n            tickLower,\n            tickUpper,\n            tick,\n            feeGrowthGlobal0X128,\n            feeGrowthGlobal1X128\n        );\n\n        uint256 feeGrowthInside0DeltaX128;\n        uint256 feeGrowthInside1DeltaX128;\n        unchecked {\n            feeGrowthInside0DeltaX128 = feeGrowthInside0X128 - feeGrowthInside0LastX128;\n            feeGrowthInside1DeltaX128 = feeGrowthInside1X128 - feeGrowthInside1LastX128;\n        }\n\n        tokensOwed0 += uint128(FullMath.mulDiv(feeGrowthInside0DeltaX128, liquidity, CommonLibrary.Q128));\n\n        tokensOwed1 += uint128(FullMath.mulDiv(feeGrowthInside1DeltaX128, liquidity, CommonLibrary.Q128));\n    }\n\n    function getTickDeviationForTimeSpan(\n        int24 tick,\n        address pool_,\n        uint32 secondsAgo\n    ) external view returns (bool withFail, int24 deviation) {\n        int24 averageTick;\n        (averageTick, , withFail) = OracleLibrary.consult(pool_, secondsAgo);\n        deviation = tick - averageTick;\n    }\n\n    /// @dev calculates the distribution of tokens that can be added to the position after swap for given capital in token 0\n    function getPositionTokenAmountsByCapitalOfToken0(\n        uint256 lowerPriceSqrtX96,\n        uint256 upperPriceSqrtX96,\n        uint256 spotPriceForSqrtFormulasX96,\n        uint256 spotPriceX96,\n        uint256 capital\n    ) external pure returns (uint256 token0Amount, uint256 token1Amount) {\n        // sqrt(upperPrice) * (sqrt(price) - sqrt(lowerPrice))\n        uint256 lowerPriceTermX96 = FullMath.mulDiv(\n            upperPriceSqrtX96,\n            spotPriceForSqrtFormulasX96 - lowerPriceSqrtX96,\n            CommonLibrary.Q96\n        );\n        // sqrt(price) * (sqrt(upperPrice) - sqrt(price))\n        uint256 upperPriceTermX96 = FullMath.mulDiv(\n            spotPriceForSqrtFormulasX96,\n            upperPriceSqrtX96 - spotPriceForSqrtFormulasX96,\n            CommonLibrary.Q96\n        );\n\n        token1Amount = FullMath.mulDiv(\n            FullMath.mulDiv(capital, spotPriceX96, CommonLibrary.Q96),\n            lowerPriceTermX96,\n            lowerPriceTermX96 + upperPriceTermX96\n        );\n\n        token0Amount = capital - FullMath.mulDiv(token1Amount, CommonLibrary.Q96, spotPriceX96);\n    }\n}\n"
    },
    "contracts/interfaces/external/univ3/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "contracts/interfaces/external/univ3/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "contracts/interfaces/external/univ3/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "contracts/interfaces/external/univ3/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolPerformanceFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "contracts/interfaces/external/univ3/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n}\n"
    },
    "contracts/interfaces/oracles/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IOracle {\n    /// @notice Oracle price for tokens as a Q64.96 value.\n    /// @notice Returns pricing information based on the indexes of non-zero bits in safetyIndicesSet.\n    /// @notice It is possible that not all indices will have their respective prices returned.\n    /// @dev The price is token1 / token0 i.e. how many weis of token1 required for 1 wei of token0.\n    /// The safety indexes are:\n    ///\n    /// 1 - unsafe, this is typically a spot price that can be easily manipulated,\n    ///\n    /// 2 - 4 - more or less safe, this is typically a uniV3 oracle, where the safety is defined by the timespan of the average price\n    ///\n    /// 5 - safe - this is typically a chailink oracle\n    /// @param token0 Reference to token0\n    /// @param token1 Reference to token1\n    /// @param safetyIndicesSet Bitmask of safety indices that are allowed for the return prices. For set of safety indexes = { 1 }, safetyIndicesSet = 0x2\n    /// @return pricesX96 Prices that satisfy safetyIndex and tokens\n    /// @return safetyIndices Safety indices for those prices\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/libraries/external/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/libraries/external/OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../../interfaces/external/univ3/IUniswapV3Pool.sol\";\n\n/// @title Oracle library\n/// @notice Provides functions to integrate with V3 pool oracle\nlibrary OracleLibrary {\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\n    /// @param pool Address of the pool that we want to observe\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return withFail Flag that true if function observe of IUniswapV3Pool reverts with some error\n    function consult(address pool, uint32 secondsAgo)\n        internal\n        view\n        returns (\n            int24 arithmeticMeanTick,\n            uint128 harmonicMeanLiquidity,\n            bool withFail\n        )\n    {\n        require(secondsAgo != 0, \"BP\");\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        try IUniswapV3Pool(pool).observe(secondsAgos) returns (\n            int56[] memory tickCumulatives,\n            uint160[] memory secondsPerLiquidityCumulativeX128s\n        ) {\n            int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n            uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[1] -\n                secondsPerLiquidityCumulativeX128s[0];\n\n            arithmeticMeanTick = int24(tickCumulativesDelta / int56(uint56(secondsAgo)));\n            // Always round to negative infinity\n            if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(secondsAgo)) != 0))\n                arithmeticMeanTick--;\n\n            // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\n            uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\n            harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\n        } catch {\n            return (0, 0, true);\n        }\n    }\n}\n"
    },
    "contracts/strategies/MStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/external/univ3/ISwapRouter.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/OracleLibrary.sol\";\nimport \"../utils/DefaultAccessControlLateInit.sol\";\nimport \"../utils/ContractMeta.sol\";\n\ncontract MStrategy is ContractMeta, Multicall, DefaultAccessControlLateInit {\n    using SafeERC20 for IERC20;\n\n    // IMMUTABLES\n    uint256 public constant DENOMINATOR = 10**9;\n    bytes4 public constant APPROVE_SELECTOR = 0x095ea7b3;\n    bytes4 public constant EXACT_INPUT_SINGLE_SELECTOR = ISwapRouter.exactInputSingle.selector;\n\n    address[] public tokens;\n    IERC20Vault public erc20Vault;\n    IIntegrationVault public moneyVault;\n    IUniswapV3Pool public pool;\n    INonfungiblePositionManager public positionManager;\n    ISwapRouter public router;\n\n    // INTERNAL STATE\n    int24 public lastRebalanceTick;\n\n    // MUTABLE PARAMS\n\n    struct OracleParams {\n        uint32 oracleObservationDelta;\n        uint24 maxTickDeviation;\n        uint256 maxSlippageD;\n    }\n\n    struct RatioParams {\n        int24 tickMin;\n        int24 tickMax;\n        int24 minTickRebalanceThreshold;\n        int24 tickNeighborhood;\n        int24 tickIncrease;\n        uint256 erc20MoneyRatioD;\n        uint256 minErc20MoneyRatioDeviation0D;\n        uint256 minErc20MoneyRatioDeviation1D;\n    }\n\n    OracleParams public oracleParams;\n    RatioParams public ratioParams;\n\n    /// @notice Deploys a new contract\n    /// @param positionManager_ Uniswap V3 position manager\n    /// @param router_ Uniswap V3 swap router\n    constructor(INonfungiblePositionManager positionManager_, ISwapRouter router_) {\n        require(address(positionManager_) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(router_) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        positionManager = positionManager_;\n        router = router_;\n        DefaultAccessControlLateInit.init(address(this));\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice UniV3 pool price stats\n    /// @return averageTick Average tick according to oracle and oracleParams.maxTickDeviation\n    /// @return deviation Current pool tick - average tick\n    function getAverageTick() external view returns (int24 averageTick, int24 deviation) {\n        return _getAverageTick(pool);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Set initial values.\n    /// @dev Can be only called once.\n    /// @param positionManager_ Uniswap V3 position manager\n    /// @param router_ Uniswap V3 swap router\n    /// @param tokens_ Tokens under management\n    /// @param erc20Vault_ erc20Vault of the Strategy\n    /// @param moneyVault_ moneyVault of the Strategy\n    /// @param fee_ Uniswap V3 fee for the pool (needed for oracle and swaps)\n    /// @param admin_ Admin of the strategy\n    function initialize(\n        INonfungiblePositionManager positionManager_,\n        ISwapRouter router_,\n        address[] memory tokens_,\n        IERC20Vault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        uint24 fee_,\n        address admin_\n    ) external {\n        DefaultAccessControlLateInit.init(admin_); // call once is checked here\n        require(tokens_.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        address[] memory erc20Tokens = erc20Vault_.vaultTokens();\n        address[] memory moneyTokens = moneyVault_.vaultTokens();\n        require(erc20Tokens.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        require(moneyTokens.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        for (uint256 i = 0; i < 2; i++) {\n            require(erc20Tokens[i] == tokens_[i], ExceptionsLibrary.INVARIANT);\n            require(moneyTokens[i] == tokens_[i], ExceptionsLibrary.INVARIANT);\n        }\n        positionManager = positionManager_;\n        router = router_;\n        erc20Vault = erc20Vault_;\n        moneyVault = moneyVault_;\n        tokens = tokens_;\n        IUniswapV3Factory factory = IUniswapV3Factory(positionManager_.factory());\n        pool = IUniswapV3Pool(factory.getPool(tokens[0], tokens[1], fee_));\n        require(address(pool) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n    }\n\n    /// @notice Deploy a new strategy.\n    /// @param tokens_ Tokens under management\n    /// @param erc20Vault_ erc20Vault of the Strategy\n    /// @param moneyVault_ moneyVault of the Strategy\n    /// @param fee_ Uniswap V3 fee for the pool (needed for oracle and swaps)\n    /// @param admin_ Admin of the new strategy\n    function createStrategy(\n        address[] memory tokens_,\n        IERC20Vault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        uint24 fee_,\n        address admin_\n    ) external returns (MStrategy strategy) {\n        strategy = MStrategy(Clones.clone(address(this)));\n        strategy.initialize(positionManager, router, tokens_, erc20Vault_, moneyVault_, fee_, admin_);\n    }\n\n    /// @notice Perform a rebalance according to target ratios\n    /// @param minTokensAmount Lower bounds for amountOut of tokens, that we want to get after swap via SwapRouter\n    /// @param vaultOptions Parameters of money vault for operations with it\n    /// @return poolAmounts The amount of each token that was pulled from erc20Vault to the money vault if positive, otherwise vice versa\n    /// @return tokenAmounts The amount of each token passed to and from SwapRouter dependings on zeroToOne\n    /// @return zeroToOne Flag, that true if we swapped amount of zero token to first token, otherwise false\n    function rebalance(uint256[] memory minTokensAmount, bytes memory vaultOptions)\n        external\n        returns (\n            int256[] memory poolAmounts,\n            uint256[] memory tokenAmounts,\n            bool zeroToOne\n        )\n    {\n        _requireAtLeastOperator();\n        SwapToTargetParams memory params;\n        params.tokens = tokens;\n        params.pool = pool;\n        params.router = router;\n        params.erc20Vault = erc20Vault;\n        params.moneyVault = moneyVault;\n        tokenAmounts = new uint256[](2);\n        {\n            uint256 amountIn;\n            uint8 index;\n            uint256 amountOut;\n            (amountIn, index, amountOut) = _rebalanceTokens(\n                params,\n                minTokensAmount,\n                ratioParams.minTickRebalanceThreshold,\n                vaultOptions\n            );\n            if (index == 0) {\n                zeroToOne = true;\n                tokenAmounts[0] = amountIn;\n                tokenAmounts[1] = amountOut;\n            } else {\n                zeroToOne = false;\n                tokenAmounts[0] = amountOut;\n                tokenAmounts[1] = amountIn;\n            }\n        }\n        uint256[] memory minDeviations = new uint256[](2);\n        minDeviations[0] = ratioParams.minErc20MoneyRatioDeviation0D;\n        minDeviations[1] = ratioParams.minErc20MoneyRatioDeviation1D;\n        poolAmounts = _rebalancePools(params.erc20Vault, params.moneyVault, params.tokens, minDeviations, vaultOptions);\n    }\n\n    /// @notice Manually pull tokens from fromVault to toVault\n    /// @param fromVault Pull tokens from this vault\n    /// @param toVault Pull tokens to this vault\n    /// @param tokenAmounts Token amounts to pull\n    function manualPull(\n        IIntegrationVault fromVault,\n        IIntegrationVault toVault,\n        uint256[] memory tokenAmounts,\n        bytes memory vaultOptions\n    ) external {\n        _requireAdmin();\n        fromVault.pull(address(toVault), tokens, tokenAmounts, vaultOptions);\n    }\n\n    /// @notice Set new Oracle params\n    /// @param params Params to set\n    function setOracleParams(OracleParams memory params) external {\n        _requireAdmin();\n        require((params.maxSlippageD > 0) && (params.maxSlippageD <= DENOMINATOR), ExceptionsLibrary.INVARIANT);\n\n        oracleParams = params;\n        emit SetOracleParams(tx.origin, msg.sender, params);\n    }\n\n    /// @notice Set new Ratio params\n    /// @param params Params to set\n    function setRatioParams(RatioParams memory params) external {\n        _requireAdmin();\n        require(\n            (params.tickMin <= params.tickMax) &&\n                (params.erc20MoneyRatioD <= DENOMINATOR) &&\n                (params.minErc20MoneyRatioDeviation0D <= DENOMINATOR) &&\n                (params.minErc20MoneyRatioDeviation1D <= DENOMINATOR) &&\n                (params.tickMin >= TickMath.MIN_TICK) &&\n                (params.tickMax <= TickMath.MAX_TICK) &&\n                (params.tickNeighborhood >= 0) &&\n                (params.tickNeighborhood <= TickMath.MAX_TICK) &&\n                (params.tickIncrease >= 0) &&\n                (params.tickIncrease <= TickMath.MAX_TICK),\n            ExceptionsLibrary.INVARIANT\n        );\n\n        ratioParams = params;\n        emit SetRatioParams(tx.origin, msg.sender, params);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"MStrategy\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _priceX96FromTick(int24 _tick) internal pure returns (uint256) {\n        uint256 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(_tick);\n        return FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, CommonLibrary.Q96);\n    }\n\n    function _targetTokenRatioD(\n        int24 tick,\n        int24 tickMin,\n        int24 tickMax\n    ) internal pure returns (uint256) {\n        if (tick <= tickMin) {\n            return DENOMINATOR;\n        }\n        if (tick >= tickMax) {\n            return 0;\n        }\n        return (uint256(uint24(tickMax - tick)) * DENOMINATOR) / uint256(uint24(tickMax - tickMin));\n    }\n\n    function _getAverageTickChecked(IUniswapV3Pool pool_) internal view returns (int24) {\n        (int24 tick, int24 deviation) = _getAverageTick(pool_);\n        uint24 absoluteDeviation = deviation < 0 ? uint24(-deviation) : uint24(deviation);\n        require(absoluteDeviation < oracleParams.maxTickDeviation, ExceptionsLibrary.INVARIANT);\n        return tick;\n    }\n\n    function _getAverageTick(IUniswapV3Pool pool_) internal view returns (int24 averageTick, int24 tickDeviation) {\n        uint32 oracleObservationDelta = oracleParams.oracleObservationDelta;\n        (, int24 tick, , , , , ) = pool_.slot0();\n        bool withFail = false;\n        (averageTick, , withFail) = OracleLibrary.consult(address(pool_), oracleObservationDelta);\n        // Fails when we dont have observations, so return spot tick as this was the last trade price\n        if (withFail) {\n            averageTick = tick;\n        }\n        tickDeviation = tick - averageTick;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _rebalancePools(\n        IIntegrationVault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        address[] memory tokens_,\n        uint256[] memory minDeviations,\n        bytes memory vaultOptions\n    ) internal returns (int256[] memory tokenAmounts) {\n        uint256 erc20MoneyRatioD = ratioParams.erc20MoneyRatioD;\n        (uint256[] memory erc20Tvl, ) = erc20Vault_.tvl();\n        (uint256[] memory moneyTvl, ) = moneyVault_.tvl();\n        tokenAmounts = new int256[](2);\n        uint256 max = type(uint256).max / 2;\n        bool hasSignificantDeltas = false;\n        for (uint256 i = 0; i < 2; i++) {\n            uint256 targetErc20Token = FullMath.mulDiv(erc20Tvl[i] + moneyTvl[i], erc20MoneyRatioD, DENOMINATOR);\n            uint256 absoluteTokenAmount = 0;\n            if (targetErc20Token > erc20Tvl[i]) {\n                absoluteTokenAmount = targetErc20Token - erc20Tvl[i];\n            } else {\n                absoluteTokenAmount = erc20Tvl[i] - targetErc20Token;\n            }\n            require(absoluteTokenAmount < max, ExceptionsLibrary.LIMIT_OVERFLOW);\n            if (targetErc20Token > erc20Tvl[i]) {\n                tokenAmounts[i] = int256(absoluteTokenAmount);\n            } else {\n                tokenAmounts[i] = -int256(absoluteTokenAmount);\n            }\n            if (absoluteTokenAmount >= minDeviations[i]) {\n                hasSignificantDeltas = true;\n            }\n        }\n\n        if (!hasSignificantDeltas) {\n            return new int256[](2);\n        } else if ((tokenAmounts[0] <= 0) && (tokenAmounts[1] <= 0)) {\n            uint256[] memory amounts = new uint256[](2);\n            amounts[0] = uint256(-tokenAmounts[0]);\n            amounts[1] = uint256(-tokenAmounts[1]);\n            erc20Vault_.pull(address(moneyVault_), tokens_, amounts, vaultOptions);\n        } else if ((tokenAmounts[0] >= 0) && (tokenAmounts[1] >= 0)) {\n            uint256[] memory amounts = new uint256[](2);\n            amounts[0] = uint256(tokenAmounts[0]);\n            amounts[1] = uint256(tokenAmounts[1]);\n            moneyVault_.pull(address(erc20Vault_), tokens_, amounts, vaultOptions);\n        } else {\n            for (uint256 i = 0; i < 2; i++) {\n                uint256[] memory amounts = new uint256[](2);\n                if (tokenAmounts[i] > 0) {\n                    amounts[i] = uint256(tokenAmounts[i]);\n                    moneyVault_.pull(address(erc20Vault_), tokens_, amounts, vaultOptions);\n                } else if (tokenAmounts[i] < 0) {\n                    amounts[i] = uint256(-tokenAmounts[i]);\n                    erc20Vault_.pull(address(moneyVault_), tokens_, amounts, vaultOptions);\n                }\n            }\n        }\n        emit RebalancedPools(tokenAmounts);\n    }\n\n    function _rebalanceTokens(\n        SwapToTargetParams memory params,\n        uint256[] memory minTokensAmount,\n        int24 minTickRebalanceThreshold_,\n        bytes memory vaultOptions\n    )\n        internal\n        returns (\n            uint256, // amountIn     - amount of token, that we pushed into SwapRouter\n            uint8, // index        - index of token, that we pushed into SwapRouter\n            uint256 // amountOut    - amount of token, that we recieved from SwapRouter\n        )\n    {\n        uint256 token0;\n        uint256 targetToken0;\n        {\n            uint256 targetTokenRatioD;\n            {\n                int24 tick = _getAverageTickChecked(params.pool);\n                if (ratioParams.tickMin + ratioParams.tickNeighborhood > tick) {\n                    ratioParams.tickMin =\n                        (tick < ratioParams.tickMin ? tick : ratioParams.tickMin) -\n                        ratioParams.tickIncrease;\n                    if (ratioParams.tickMin < TickMath.MIN_TICK) {\n                        ratioParams.tickMin = TickMath.MIN_TICK;\n                    }\n                }\n                if (ratioParams.tickMax - ratioParams.tickNeighborhood < tick) {\n                    ratioParams.tickMax =\n                        (tick > ratioParams.tickMax ? tick : ratioParams.tickMax) +\n                        ratioParams.tickIncrease;\n                    if (ratioParams.tickMax > TickMath.MAX_TICK) {\n                        ratioParams.tickMax = TickMath.MAX_TICK;\n                    }\n                }\n\n                require(\n                    (tick > lastRebalanceTick + minTickRebalanceThreshold_) ||\n                        (tick < lastRebalanceTick - minTickRebalanceThreshold_),\n                    ExceptionsLibrary.LIMIT_UNDERFLOW\n                );\n                lastRebalanceTick = tick;\n                params.priceX96 = _priceX96FromTick(tick);\n                targetTokenRatioD = _targetTokenRatioD(tick, ratioParams.tickMin, ratioParams.tickMax);\n            }\n            (params.erc20Tvl, ) = params.erc20Vault.tvl();\n            uint256 token1;\n            {\n                (uint256[] memory moneyTvl, ) = params.moneyVault.tvl();\n                token0 = params.erc20Tvl[0] + moneyTvl[0];\n                token1 = params.erc20Tvl[1] + moneyTvl[1];\n            }\n\n            uint256 token1InToken0 = FullMath.mulDiv(token1, CommonLibrary.Q96, params.priceX96);\n            targetToken0 = FullMath.mulDiv(token1InToken0 + token0, targetTokenRatioD, DENOMINATOR);\n        }\n\n        if (targetToken0 < token0) {\n            params.amountIn = token0 - targetToken0;\n            params.tokenInIndex = 0;\n        } else {\n            params.amountIn = FullMath.mulDiv(targetToken0 - token0, params.priceX96, CommonLibrary.Q96);\n            params.tokenInIndex = 1;\n        }\n        if (params.amountIn != 0) {\n            uint256 amountOut = _swapToTarget(params, vaultOptions);\n            require(amountOut >= minTokensAmount[params.tokenInIndex ^ 1], ExceptionsLibrary.LIMIT_UNDERFLOW);\n            emit SwappedTokens(params);\n            return (params.amountIn, params.tokenInIndex, amountOut);\n        } else {\n            return (params.amountIn, params.tokenInIndex, 0);\n        }\n    }\n\n    struct SwapToTargetParams {\n        uint256 amountIn;\n        address[] tokens;\n        uint8 tokenInIndex;\n        uint256 priceX96;\n        uint256[] erc20Tvl;\n        IUniswapV3Pool pool;\n        ISwapRouter router;\n        IIntegrationVault erc20Vault;\n        IIntegrationVault moneyVault;\n    }\n\n    function _swapToTarget(SwapToTargetParams memory params, bytes memory vaultOptions)\n        internal\n        returns (uint256 amountOut)\n    {\n        ISwapRouter.ExactInputSingleParams memory swapParams;\n        uint8 tokenInIndex = params.tokenInIndex;\n        uint256 amountIn = params.amountIn;\n        ISwapRouter router_ = params.router;\n        {\n            uint256 priceX96 = params.priceX96;\n            uint256[] memory erc20Tvl = params.erc20Tvl;\n\n            if (amountIn > erc20Tvl[tokenInIndex]) {\n                uint256[] memory tokenAmounts = new uint256[](2);\n                tokenAmounts[tokenInIndex] = amountIn - erc20Tvl[tokenInIndex];\n                params.moneyVault.pull(address(params.erc20Vault), params.tokens, tokenAmounts, vaultOptions);\n                uint256 balance = IERC20(tokens[tokenInIndex]).balanceOf(address(erc20Vault));\n                if (balance < amountIn) {\n                    amountIn = balance;\n                }\n            }\n            uint256 amountOutMinimum;\n            if (tokenInIndex == 1) {\n                amountOutMinimum = FullMath.mulDiv(amountIn, CommonLibrary.Q96, priceX96);\n            } else {\n                amountOutMinimum = FullMath.mulDiv(amountIn, priceX96, CommonLibrary.Q96);\n            }\n            amountOutMinimum = FullMath.mulDiv(amountOutMinimum, DENOMINATOR - oracleParams.maxSlippageD, DENOMINATOR);\n            swapParams = ISwapRouter.ExactInputSingleParams({\n                tokenIn: params.tokens[tokenInIndex],\n                tokenOut: params.tokens[1 - tokenInIndex],\n                fee: params.pool.fee(),\n                recipient: address(erc20Vault),\n                deadline: block.timestamp + 1,\n                amountIn: amountIn,\n                amountOutMinimum: amountOutMinimum,\n                sqrtPriceLimitX96: 0\n            });\n        }\n        bytes memory data = abi.encode(swapParams);\n        erc20Vault.externalCall(tokens[tokenInIndex], APPROVE_SELECTOR, abi.encode(address(router_), amountIn)); // approve\n        bytes memory routerResult = erc20Vault.externalCall(address(router_), EXACT_INPUT_SINGLE_SELECTOR, data); //swap\n        erc20Vault.externalCall(tokens[tokenInIndex], APPROVE_SELECTOR, abi.encode(address(router_), 0)); // reset allowance\n        amountOut = abi.decode(routerResult, (uint256));\n    }\n\n    /// @notice Emitted when pool rebalance is initiated.\n    /// @param tokenAmounts Token amounts for rebalance, negative means erc20Vault => moneyVault and vice versa.\n    event RebalancedPools(int256[] tokenAmounts);\n\n    /// @notice Emitted when swap is initiated.\n    /// @param params Swap params\n    event SwappedTokens(SwapToTargetParams params);\n\n    /// @notice Emitted when Oracle params are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params Updated params\n    event SetOracleParams(address indexed origin, address indexed sender, OracleParams params);\n\n    /// @notice Emitted when Ratio params are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params Updated params\n    event SetRatioParams(address indexed origin, address indexed sender, RatioParams params);\n}\n"
    },
    "contracts/interfaces/external/univ3/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/interfaces/vaults/IERC20Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IIntegrationVault.sol\";\n\ninterface IERC20Vault is IIntegrationVault {\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external;\n}\n"
    },
    "contracts/utils/DefaultAccessControlLateInit.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"../interfaces/utils/IDefaultAccessControl.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\n/// @notice This is a default access control with 3 roles:\n///\n/// - ADMIN: allowed to do anything\n/// - ADMIN_DELEGATE: allowed to do anything except assigning ADMIN and ADMIN_DELEGATE roles\n/// - OPERATOR: low-privileged role, generally keeper or some other bot\ncontract DefaultAccessControlLateInit is IDefaultAccessControl, AccessControlEnumerable {\n    bool public initialized;\n\n    bytes32 public constant OPERATOR = keccak256(\"operator\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"admin\");\n    bytes32 public constant ADMIN_DELEGATE_ROLE = keccak256(\"admin_delegate\");\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @inheritdoc IDefaultAccessControl\n    function isAdmin(address sender) public view returns (bool) {\n        return hasRole(ADMIN_ROLE, sender) || hasRole(ADMIN_DELEGATE_ROLE, sender);\n    }\n\n    /// @inheritdoc IDefaultAccessControl\n    function isOperator(address sender) public view returns (bool) {\n        return hasRole(OPERATOR, sender);\n    }\n\n    // -------------------------  EXTERNAL, MUTATING  ------------------------------\n\n    /// @notice Initializes a new contract with roles and single ADMIN.\n    /// @param admin Admin of the contract\n    function init(address admin) public {\n        require(admin != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(!initialized, ExceptionsLibrary.INIT);\n\n        _setupRole(OPERATOR, admin);\n        _setupRole(ADMIN_ROLE, admin);\n\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(ADMIN_DELEGATE_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(OPERATOR, ADMIN_DELEGATE_ROLE);\n\n        initialized = true;\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _requireAdmin() internal view {\n        require(isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n\n    function _requireAtLeastOperator() internal view {\n        require(isAdmin(msg.sender) || isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/test/MockMStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../strategies/MStrategy.sol\";\n\ncontract MockMStrategy is MStrategy {\n    constructor(INonfungiblePositionManager positionManager_, ISwapRouter router_)\n        MStrategy(positionManager_, router_)\n    {}\n\n    function targetTokenRatioD(\n        int24 tick,\n        int24 tickMin,\n        int24 tickMax\n    ) external pure returns (uint256) {\n        return _targetTokenRatioD(tick, tickMin, tickMax);\n    }\n\n    function swapToTarget(SwapToTargetParams memory params, bytes memory vaultOptions) external {\n        _swapToTarget(params, vaultOptions);\n    }\n\n    function rebalancePools(\n        IIntegrationVault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        address[] memory tokens_,\n        uint256[] memory minDeviations,\n        bytes memory vaultOptions\n    ) external returns (int256[] memory) {\n        return _rebalancePools(erc20Vault_, moneyVault_, tokens_, minDeviations, vaultOptions);\n    }\n}\n"
    },
    "contracts/strategies/LPOptimiserStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../interfaces/vaults/IVoltzVault.sol\";\nimport \"../utils/DefaultAccessControlLateInit.sol\";\nimport \"../interfaces/utils/ILpCallback.sol\";\nimport \"../libraries/external/FixedPoint96.sol\";\n\ncontract LPOptimiserStrategy is DefaultAccessControlLateInit, ILpCallback {\n    using SafeERC20 for IERC20;\n    using PRBMathUD60x18 for uint256;\n\n    // VAULT PARAMETERS\n    struct VaultParams {\n        int256 sigmaWad; // standard deviation parameter in wad 10^18\n        int256 maxPossibleLowerBoundWad; // Maximum Possible Fixed Rate Lower bounds when initiating a rebalance\n        uint256 proximityWad; // closeness parameter in wad 10^18\n        uint256 weight; // weight parameter that decides how many funds are going to this vault\n    }\n\n    // IMMUTABLES\n    address[] public tokens;\n    IERC20Vault public erc20Vault;\n\n    // INTERNAL STATE\n    IVoltzVault[] internal _vaults;\n    VaultParams[] internal _vaultParams;\n    uint256 private _totalWeight; // sum of all vault weights\n\n    // CONSTANTS\n    int256 internal constant MINIMUM_FIXED_RATE = 1e16;\n    uint256 internal constant LOG_BASE = 1000100000000000000;\n\n    // GETTERS AND SETTERS\n\n    /// @notice Get the addresses of all vaults\n    function getVaults() public view returns (IVoltzVault[] memory) {\n        return _vaults;\n    }\n\n    /// @notice Get the parameters of a vault\n    /// @param index The index of the vault in _vaults\n    function getVaultParams(uint256 index) public view returns (VaultParams memory) {\n        return _vaultParams[index];\n    }\n\n    /// @notice Set the parameters of a vault\n    /// @param index The index of the vault in _vaults\n    /// @param vaultParams_ The new parameters of the vault\n    function setVaultParams(uint256 index, VaultParams memory vaultParams_) external {\n        _requireAdmin();\n        require(index < _vaults.length, ExceptionsLibrary.INVALID_STATE);\n\n        uint256 previousWeight = _vaultParams[index].weight;\n        _vaultParams[index] = vaultParams_;\n        _totalWeight = (_totalWeight + vaultParams_.weight) - previousWeight;\n    }\n\n    constructor(address admin_) {\n        DefaultAccessControlLateInit.init(admin_);\n    }\n\n    /// @notice Constructor for a new contract\n    /// @param erc20vault_ Reference to ERC20 Vault\n    /// @param vaults_ Reference to Voltz Vaults\n    /// @param vaultParams_ Rebalancing parameters of the voltz vaults\n    /// @param admin_ Admin of the strategy\n    function initialize(\n        IERC20Vault erc20vault_,\n        IVoltzVault[] memory vaults_,\n        VaultParams[] memory vaultParams_,\n        address admin_\n    ) public {\n        erc20Vault = erc20vault_;\n\n        tokens = erc20vault_.vaultTokens();\n        require(tokens.length == 1, ExceptionsLibrary.INVALID_TOKEN);\n\n        require(vaults_.length == vaultParams_.length, ExceptionsLibrary.INVALID_LENGTH);\n        for (uint256 i = 0; i < vaults_.length; i += 1) {\n            _addVault(vaults_[i], vaultParams_[i]);\n        }\n\n        DefaultAccessControlLateInit.init(admin_);\n\n        emit StrategyDeployment(erc20vault_, vaults_, vaultParams_, admin_);\n    }\n\n    function createStrategy(\n        IERC20Vault erc20vault_,\n        IVoltzVault[] memory vaults_,\n        VaultParams[] memory vaultParams_,\n        address admin_\n    ) external returns (LPOptimiserStrategy strategy) {\n        strategy = LPOptimiserStrategy(Clones.clone(address(this)));\n        strategy.initialize(erc20vault_, vaults_, vaultParams_, admin_);\n    }\n\n    function _addVault(IVoltzVault vault_, VaultParams memory vaultParams_) internal {\n        // 0. Set the local variables\n        address[] memory vaultTokens = vault_.vaultTokens();\n\n        // 1. Check if the tokens correspond\n        require(vaultTokens.length == 1, ExceptionsLibrary.INVALID_TOKEN);\n        require(vaultTokens[0] == tokens[0], ExceptionsLibrary.INVALID_TOKEN);\n\n        // 2. Add the vault\n        _vaults.push(vault_);\n        _vaultParams.push(vaultParams_);\n        _totalWeight += vaultParams_.weight;\n    }\n\n    /// @notice Get the current tick and position ticks and decide whether to rebalance\n    /// @param index The index of the vault in _vaults\n    /// @param currentFixedRateWad currentFixedRate which is passed in from a 7-day rolling avg. historical fixed rate\n    /// @return bool True if rebalanceTicks should be called, false otherwise\n    function rebalanceCheck(uint256 index, uint256 currentFixedRateWad) public view returns (bool) {\n        require(index < _vaults.length, ExceptionsLibrary.INVALID_STATE);\n\n        // 0. Set the local variables\n        VaultParams memory vaultParams = _vaultParams[index];\n        IVoltzVault vault = _vaults[index];\n\n        // 1. Get current position, lower, and upper ticks form VoltzVault.sol\n        IVoltzVault.TickRange memory currentPosition = vault.currentPosition();\n\n        // 2. Convert the ticks into fixed rate\n        uint256 lowFixedRateWad = convertTickToFixedRate(currentPosition.tickUpper);\n        uint256 highFixedRateWad = convertTickToFixedRate(currentPosition.tickLower);\n\n        if (\n            lowFixedRateWad + vaultParams.proximityWad <= currentFixedRateWad &&\n            currentFixedRateWad + vaultParams.proximityWad <= highFixedRateWad\n        ) {\n            // 3.1. If current fixed rate is within bounds, return false (don't rebalance)\n            return false;\n        } else {\n            // 3.2. If current fixed rate is outside bounds, return true (do rebalance)\n            return true;\n        }\n    }\n\n    /// @notice Get the nearest tick multiple given a tick and tick spacing\n    /// @param newTick The tick to be rounded to the closest multiple of tickSpacing\n    /// @param tickSpacing The tick spacing of the vamm being used for this strategy\n    /// @return int24 The nearest tick multiple for newTick\n    function nearestTickMultiple(int24 newTick, int24 tickSpacing) public pure returns (int24) {\n        return\n            (newTick /\n                tickSpacing +\n                ((((newTick % tickSpacing) + tickSpacing) % tickSpacing) >= tickSpacing / 2 ? int24(1) : int24(0))) *\n            tickSpacing;\n    }\n\n    /// @notice Convert a fixed rate to a tick in wad\n    /// @param fixedRateWad The fixed rate to be converted to a tick in wad\n    /// @return int256 The tick in wad\n    function convertFixedRateToTick(int256 fixedRateWad) public pure returns (int256) {\n        return -PRBMathSD59x18.div(PRBMathSD59x18.log2(int256(fixedRateWad)), PRBMathSD59x18.log2(int256(LOG_BASE)));\n    }\n\n    /// @notice Get the fixed rate corresponding to tick\n    /// @param tick The tick to be converted into fixed rate\n    /// @return uint256 The fixed rate in wad (1.0001 ^ -tick)\n    function convertTickToFixedRate(int24 tick) public pure returns (uint256) {\n        // 1. Convert the tick into X96 sqrt price (scaled by 2^96)\n        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // 2. Convert the X96 sqrt price (scaled by 2^96) to wad 1/sqrt price (scaled by 10^18)\n        uint256 sqrtRatioWad = FullMath.mulDiv(1e18, FixedPoint96.Q96, sqrtPriceX96);\n\n        // 3. Convert 1/sqrt price into fixed rate (1/price)\n        uint256 fixedRateWad = sqrtRatioWad.mul(sqrtRatioWad);\n\n        // 4. Return the fixed rate\n        return fixedRateWad;\n    }\n\n    /// @notice Set new optimal tick range based on current twap tick given that we are using the offchain moving average of the fixed rate in the current iteration\n    /// @param index The index of the vault in _vaults\n    /// @param currentFixedRateWad currentFixedRate which is passed in from a 7-day rolling avg. historical fixed rate.\n    /// @return newTickLower The new lower tick for the rebalanced position\n    /// @return newTickUpper The new upper tick for the rebalanced position\n    function rebalanceTicks(uint256 index, uint256 currentFixedRateWad)\n        public\n        returns (int24 newTickLower, int24 newTickUpper)\n    {\n        _requireAtLeastOperator();\n        require(rebalanceCheck(index, currentFixedRateWad), ExceptionsLibrary.REBALANCE_NOT_NEEDED);\n\n        VaultParams memory vaultParams = _vaultParams[index];\n        IVoltzVault vault = _vaults[index];\n\n        // 0. Get tickspacing from vamm\n        int24 tickSpacing = vault.vamm().tickSpacing();\n\n        // 1. Get the new tick lower\n        int256 deltaWad = int256(currentFixedRateWad) - vaultParams.sigmaWad;\n        int256 newFixedLowerWad;\n        if (deltaWad > MINIMUM_FIXED_RATE) {\n            // delta is greater than MINIMUM_FIXED_RATE (0.01) => choose delta\n            if (deltaWad < vaultParams.maxPossibleLowerBoundWad) {\n                newFixedLowerWad = deltaWad;\n            } else {\n                newFixedLowerWad = vaultParams.maxPossibleLowerBoundWad;\n            }\n        } else {\n            // delta is less than or equal to MINIMUM_FIXED_RATE (0.01) => choose MINIMUM_FIXED_RATE (0.01)\n            newFixedLowerWad = MINIMUM_FIXED_RATE;\n        }\n        // 2. Get the new tick upper\n        int256 newFixedUpperWad = newFixedLowerWad + 2 * vaultParams.sigmaWad;\n\n        // 3. Convert new fixed lower rate back to tick\n        int256 newTickLowerWad = convertFixedRateToTick(newFixedUpperWad);\n\n        // 4. Convert new fixed upper rate back to tick\n        int256 newTickUpperWad = convertFixedRateToTick(newFixedLowerWad);\n\n        // 5. Scale ticks from wad\n        int256 newTickLowerExact = newTickLowerWad / 1e18;\n        int256 newTickUpperExact = newTickUpperWad / 1e18;\n\n        // 6. The underlying Voltz VAMM accepts only ticks multiple of tickSpacing\n        // Hence, we get the nearest usable tick\n        newTickLower = nearestTickMultiple(int24(newTickLowerExact), tickSpacing);\n        newTickUpper = nearestTickMultiple(int24(newTickUpperExact), tickSpacing);\n\n        // Call to VoltzVault contract to update the position lower and upper ticks\n        vault.rebalance(IVoltzVault.TickRange(newTickLower, newTickUpper));\n\n        emit RebalancedTicks(vault, newTickLower, newTickUpper);\n        return (newTickLower, newTickUpper);\n    }\n\n    /// @notice This function grabs all funds from the buffer vault\n    /// and distributed them to the voltz vaults according to their weights\n    function _distributeTokens() internal {\n        // 0. Set the local variables\n        IERC20Vault localErc20Vault = erc20Vault;\n        address[] memory localTokens = tokens;\n        VaultParams[] memory vaultParams = _vaultParams;\n        uint256 totalWeight = _totalWeight;\n\n        uint256[] memory balances = new uint256[](1);\n        balances[0] = IERC20(localTokens[0]).balanceOf(address(localErc20Vault));\n\n        // 1. Distribute the funds\n        uint256[] memory vaultShare = new uint256[](1);\n\n        for (uint256 i = 0; i < _vaults.length; i++) {\n            uint256 vaultWeight = vaultParams[i].weight;\n\n            if (vaultWeight == 0) {\n                continue;\n            }\n\n            // The share of i-th is vaultWeight / sum(vaultParams.weight)\n            vaultShare[0] = FullMath.mulDiv(balances[0], vaultWeight, totalWeight);\n\n            // Pull funds from the erc20 vault and push the share into the i-th voltz vault\n            localErc20Vault.pull(address(_vaults[i]), localTokens, vaultShare, \"\");\n        }\n    }\n\n    function transferPermissions(address newStrategy) external {\n        _requireAdmin();\n        IVaultRegistry vaultRegistry = erc20Vault.vaultGovernance().internalParams().registry;\n        IVoltzVault[] memory voltzVaults = _vaults;\n        for (uint256 i = 0; i < voltzVaults.length; ++i) {\n            vaultRegistry.approve(newStrategy, voltzVaults[i].nft());\n        }\n        vaultRegistry.approve(newStrategy, erc20Vault.nft());\n    }\n\n    /// @notice Callback function called after for ERC20RootVault::deposit\n    function depositCallback() external override {\n        _distributeTokens();\n    }\n\n    /// @notice Callback function called after for ERC20RootVault::withdraw\n    function withdrawCallback() external override {\n        // Do nothing on withdraw\n    }\n\n    // EVENTS\n    event StrategyDeployment(IERC20Vault erc20vault, IVoltzVault[] vaults, VaultParams[] vaultParams, address admin);\n\n    event RebalancedTicks(IVoltzVault voltzVault, int24 tickLower, int24 tickUpper);\n}\n"
    },
    "contracts/interfaces/utils/ILpCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ILpCallback {\n    /// @notice Function, that ERC20RootVault calling after deposit\n    function depositCallback() external;\n\n    /// @notice Function, that ERC20RootVault calling after withdraw\n    function withdrawCallback() external;\n}\n"
    },
    "contracts/utils/HStrategyHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/vaults/IIntegrationVault.sol\";\nimport \"../interfaces/vaults/IAaveVault.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/LiquidityAmounts.sol\";\nimport \"../strategies/HStrategy.sol\";\nimport \"./UniV3Helper.sol\";\n\ncontract HStrategyHelper {\n    uint32 constant DENOMINATOR = 10**9;\n\n    /// @notice calculates the ratios of the capital on all vaults using price from the oracle\n    /// @param domainPositionParams the current state of the position, pool and oracle prediction\n    /// @return ratios ratios of the capital\n    function calculateExpectedRatios(HStrategy.DomainPositionParams memory domainPositionParams)\n        external\n        pure\n        returns (HStrategy.ExpectedRatios memory ratios)\n    {\n        uint256 denominatorX96 = CommonLibrary.Q96 *\n            2 -\n            FullMath.mulDiv(\n                domainPositionParams.domainLowerPriceSqrtX96,\n                CommonLibrary.Q96,\n                domainPositionParams.intervalPriceSqrtX96\n            ) -\n            FullMath.mulDiv(\n                domainPositionParams.intervalPriceSqrtX96,\n                CommonLibrary.Q96,\n                domainPositionParams.domainUpperPriceSqrtX96\n            );\n\n        uint256 nominator0X96 = FullMath.mulDiv(\n            domainPositionParams.intervalPriceSqrtX96,\n            CommonLibrary.Q96,\n            domainPositionParams.upperPriceSqrtX96\n        ) -\n            FullMath.mulDiv(\n                domainPositionParams.intervalPriceSqrtX96,\n                CommonLibrary.Q96,\n                domainPositionParams.domainUpperPriceSqrtX96\n            );\n\n        uint256 nominator1X96 = FullMath.mulDiv(\n            domainPositionParams.lowerPriceSqrtX96,\n            CommonLibrary.Q96,\n            domainPositionParams.intervalPriceSqrtX96\n        ) -\n            FullMath.mulDiv(\n                domainPositionParams.domainLowerPriceSqrtX96,\n                CommonLibrary.Q96,\n                domainPositionParams.intervalPriceSqrtX96\n            );\n\n        ratios.token0RatioD = uint32(FullMath.mulDiv(nominator0X96, DENOMINATOR, denominatorX96));\n        ratios.token1RatioD = uint32(FullMath.mulDiv(nominator1X96, DENOMINATOR, denominatorX96));\n\n        ratios.uniV3RatioD = DENOMINATOR - ratios.token0RatioD - ratios.token1RatioD;\n    }\n\n    /// @notice calculates amount of missing tokens for uniV3 and money vaults\n    /// @param moneyVault the strategy money vault\n    /// @param expectedTokenAmounts the amount of tokens we expect after rebalance\n    /// @param domainPositionParams current position and pool state combined with predictions from the oracle\n    /// @param liquidity current liquidity in position\n    /// @return missingTokenAmounts amounts of missing tokens\n    function calculateMissingTokenAmounts(\n        IIntegrationVault moneyVault,\n        HStrategy.TokenAmounts memory expectedTokenAmounts,\n        HStrategy.DomainPositionParams memory domainPositionParams,\n        uint128 liquidity\n    ) external view returns (HStrategy.TokenAmounts memory missingTokenAmounts) {\n        // for uniV3Vault\n        {\n            uint256 token0Amount = 0;\n            uint256 token1Amount = 0;\n            (token0Amount, token1Amount) = LiquidityAmounts.getAmountsForLiquidity(\n                domainPositionParams.intervalPriceSqrtX96,\n                domainPositionParams.lowerPriceSqrtX96,\n                domainPositionParams.upperPriceSqrtX96,\n                liquidity\n            );\n\n            if (token0Amount < expectedTokenAmounts.uniV3Token0) {\n                missingTokenAmounts.uniV3Token0 = expectedTokenAmounts.uniV3Token0 - token0Amount;\n            }\n            if (token1Amount < expectedTokenAmounts.uniV3Token1) {\n                missingTokenAmounts.uniV3Token1 = expectedTokenAmounts.uniV3Token1 - token1Amount;\n            }\n        }\n\n        // for moneyVault\n        {\n            (, uint256[] memory maxTvl) = moneyVault.tvl();\n            uint256 token0Amount = maxTvl[0];\n            uint256 token1Amount = maxTvl[1];\n\n            if (token0Amount < expectedTokenAmounts.moneyToken0) {\n                missingTokenAmounts.moneyToken0 = expectedTokenAmounts.moneyToken0 - token0Amount;\n            }\n\n            if (token1Amount < expectedTokenAmounts.moneyToken1) {\n                missingTokenAmounts.moneyToken1 = expectedTokenAmounts.moneyToken1 - token1Amount;\n            }\n        }\n    }\n\n    /// @notice calculates extra tokens on uniV3 vault\n    /// @param expectedTokenAmounts the amount of tokens we expect after rebalance\n    /// @param domainPositionParams current position and pool state combined with predictions from the oracle\n    /// @return tokenAmounts extra token amounts on UniV3Vault\n    function calculateExtraTokenAmountsForUniV3Vault(\n        HStrategy.TokenAmounts memory expectedTokenAmounts,\n        HStrategy.DomainPositionParams memory domainPositionParams\n    ) external pure returns (uint256[] memory tokenAmounts) {\n        tokenAmounts = new uint256[](2);\n        (tokenAmounts[0], tokenAmounts[1]) = LiquidityAmounts.getAmountsForLiquidity(\n            domainPositionParams.intervalPriceSqrtX96,\n            domainPositionParams.lowerPriceSqrtX96,\n            domainPositionParams.upperPriceSqrtX96,\n            domainPositionParams.liquidity\n        );\n\n        if (tokenAmounts[0] > expectedTokenAmounts.uniV3Token0) {\n            tokenAmounts[0] -= expectedTokenAmounts.uniV3Token0;\n        } else {\n            tokenAmounts[0] = 0;\n        }\n\n        if (tokenAmounts[1] > expectedTokenAmounts.uniV3Token1) {\n            tokenAmounts[1] -= expectedTokenAmounts.uniV3Token1;\n        } else {\n            tokenAmounts[1] = 0;\n        }\n    }\n\n    /// @notice calculates extra tokens on money vault\n    /// @param moneyVault the strategy money vault\n    /// @param expectedTokenAmounts the amount of tokens we expect after rebalance\n    /// @return tokenAmounts extra token amounts on MoneyVault\n    function calculateExtraTokenAmountsForMoneyVault(\n        IIntegrationVault moneyVault,\n        HStrategy.TokenAmounts memory expectedTokenAmounts\n    ) external view returns (uint256[] memory tokenAmounts) {\n        (tokenAmounts, ) = moneyVault.tvl();\n\n        if (tokenAmounts[0] > expectedTokenAmounts.moneyToken0) {\n            tokenAmounts[0] -= expectedTokenAmounts.moneyToken0;\n        } else {\n            tokenAmounts[0] = 0;\n        }\n\n        if (tokenAmounts[1] > expectedTokenAmounts.moneyToken1) {\n            tokenAmounts[1] -= expectedTokenAmounts.moneyToken1;\n        } else {\n            tokenAmounts[1] = 0;\n        }\n    }\n\n    /// @notice calculates expected amounts of tokens after rebalance\n    /// @param expectedRatios ratios of the capital on different assets\n    /// @param expectedTokenAmountsInToken0 expected capitals (in token0) on the strategy vaults\n    /// @param domainPositionParams current position and pool state combined with predictions from the oracle\n    /// @param uniV3Helper helper for uniswap V3 calculations\n    /// @return amounts amounts of tokens expected after rebalance on the strategy vaults\n    function calculateExpectedTokenAmountsByExpectedRatios(\n        HStrategy.ExpectedRatios memory expectedRatios,\n        HStrategy.TokenAmountsInToken0 memory expectedTokenAmountsInToken0,\n        HStrategy.DomainPositionParams memory domainPositionParams,\n        UniV3Helper uniV3Helper\n    ) external pure returns (HStrategy.TokenAmounts memory amounts) {\n        amounts.erc20Token0 = FullMath.mulDiv(\n            expectedRatios.token0RatioD,\n            expectedTokenAmountsInToken0.erc20TokensAmountInToken0,\n            expectedRatios.token0RatioD + expectedRatios.token1RatioD\n        );\n        amounts.erc20Token1 = FullMath.mulDiv(\n            expectedTokenAmountsInToken0.erc20TokensAmountInToken0 - amounts.erc20Token0,\n            domainPositionParams.spotPriceX96,\n            CommonLibrary.Q96\n        );\n\n        amounts.moneyToken0 = FullMath.mulDiv(\n            expectedRatios.token0RatioD,\n            expectedTokenAmountsInToken0.moneyTokensAmountInToken0,\n            expectedRatios.token0RatioD + expectedRatios.token1RatioD\n        );\n        amounts.moneyToken1 = FullMath.mulDiv(\n            expectedTokenAmountsInToken0.moneyTokensAmountInToken0 - amounts.moneyToken0,\n            domainPositionParams.spotPriceX96,\n            CommonLibrary.Q96\n        );\n\n        (amounts.uniV3Token0, amounts.uniV3Token1) = uniV3Helper.getPositionTokenAmountsByCapitalOfToken0(\n            domainPositionParams.lowerPriceSqrtX96,\n            domainPositionParams.upperPriceSqrtX96,\n            domainPositionParams.intervalPriceSqrtX96,\n            domainPositionParams.spotPriceX96,\n            expectedTokenAmountsInToken0.uniV3TokensAmountInToken0\n        );\n    }\n\n    /// @notice calculates current amounts of tokens\n    /// @param erc20Vault the erc20 vault of the strategy\n    /// @param moneyVault the money vault of the strategy\n    /// @param params current position and pool state combined with predictions from the oracle\n    /// @return amounts amounts of tokens\n    function calculateCurrentTokenAmounts(\n        IIntegrationVault erc20Vault,\n        IIntegrationVault moneyVault,\n        HStrategy.DomainPositionParams memory params\n    ) external returns (HStrategy.TokenAmounts memory amounts) {\n        (amounts.uniV3Token0, amounts.uniV3Token1) = LiquidityAmounts.getAmountsForLiquidity(\n            params.intervalPriceSqrtX96,\n            params.lowerPriceSqrtX96,\n            params.upperPriceSqrtX96,\n            params.liquidity\n        );\n\n        {\n            if (moneyVault.supportsInterface(type(IAaveVault).interfaceId)) {\n                IAaveVault(address(moneyVault)).updateTvls();\n            }\n            (uint256[] memory minMoneyTvl, ) = moneyVault.tvl();\n            amounts.moneyToken0 = minMoneyTvl[0];\n            amounts.moneyToken1 = minMoneyTvl[1];\n        }\n        {\n            (uint256[] memory erc20Tvl, ) = erc20Vault.tvl();\n            amounts.erc20Token0 = erc20Tvl[0];\n            amounts.erc20Token1 = erc20Tvl[1];\n        }\n    }\n\n    /// @notice calculates current capital of the strategy in token0\n    /// @param params current position and pool state combined with predictions from the oracle\n    /// @param currentTokenAmounts amounts of the tokens on the erc20 and money vaults\n    /// @return capital total capital measured in token0\n    function calculateCurrentCapitalInToken0(\n        HStrategy.DomainPositionParams memory params,\n        HStrategy.TokenAmounts memory currentTokenAmounts\n    ) external pure returns (uint256 capital) {\n        capital =\n            currentTokenAmounts.erc20Token0 +\n            FullMath.mulDiv(currentTokenAmounts.erc20Token1, CommonLibrary.Q96, params.spotPriceX96) +\n            currentTokenAmounts.uniV3Token0 +\n            FullMath.mulDiv(currentTokenAmounts.uniV3Token1, CommonLibrary.Q96, params.spotPriceX96) +\n            currentTokenAmounts.moneyToken0 +\n            FullMath.mulDiv(currentTokenAmounts.moneyToken1, CommonLibrary.Q96, params.spotPriceX96);\n    }\n\n    /// @notice calculates expected capitals on the vaults after rebalance\n    /// @param totalCapitalInToken0 total capital in token0\n    /// @param expectedRatios ratios of the capitals on the vaults expected after rebalance\n    /// @param ratioParams_ ratio of the tokens between erc20 and money vault combined with needed deviations for rebalance to be called\n    /// @return amounts capitals expected after rebalance measured in token0\n    function calculateExpectedTokenAmountsInToken0(\n        uint256 totalCapitalInToken0,\n        HStrategy.ExpectedRatios memory expectedRatios,\n        HStrategy.RatioParams memory ratioParams_\n    ) external pure returns (HStrategy.TokenAmountsInToken0 memory amounts) {\n        amounts.erc20TokensAmountInToken0 = FullMath.mulDiv(\n            totalCapitalInToken0,\n            ratioParams_.erc20CapitalRatioD,\n            DENOMINATOR\n        );\n        amounts.uniV3TokensAmountInToken0 = FullMath.mulDiv(\n            totalCapitalInToken0 - amounts.erc20TokensAmountInToken0,\n            expectedRatios.uniV3RatioD,\n            DENOMINATOR\n        );\n        amounts.moneyTokensAmountInToken0 =\n            totalCapitalInToken0 -\n            amounts.erc20TokensAmountInToken0 -\n            amounts.uniV3TokensAmountInToken0;\n        amounts.totalTokensInToken0 = totalCapitalInToken0;\n    }\n\n    /// @notice return true if the token swap is needed. It is needed if we cannot mint a new position without it\n    /// @param currentTokenAmounts the amounts of tokens on the vaults\n    /// @param expectedTokenAmounts the amounts of tokens expected after rebalancing\n    /// @param ratioParams ratio of the tokens between erc20 and money vault combined with needed deviations for rebalance to be called\n    /// @param domainPositionParams the current state of the position, pool and oracle prediction\n    /// @return needed true if the token swap is needed\n    function swapNeeded(\n        HStrategy.TokenAmounts memory currentTokenAmounts,\n        HStrategy.TokenAmounts memory expectedTokenAmounts,\n        HStrategy.RatioParams memory ratioParams,\n        HStrategy.DomainPositionParams memory domainPositionParams\n    ) external pure returns (bool needed) {\n        uint256 expectedTotalToken0Amount = expectedTokenAmounts.erc20Token0 +\n            expectedTokenAmounts.moneyToken0 +\n            expectedTokenAmounts.uniV3Token0;\n        uint256 expectedTotalToken1Amount = expectedTokenAmounts.erc20Token1 +\n            expectedTokenAmounts.moneyToken1 +\n            expectedTokenAmounts.uniV3Token1;\n\n        uint256 currentTotalToken0Amount = currentTokenAmounts.erc20Token0 +\n            currentTokenAmounts.moneyToken0 +\n            currentTokenAmounts.uniV3Token0;\n        int256 token0Delta = int256(currentTotalToken0Amount) - int256(expectedTotalToken0Amount);\n        if (token0Delta < 0) {\n            token0Delta = -token0Delta;\n        }\n        int256 minDeviation = int256(\n            FullMath.mulDiv(\n                expectedTotalToken0Amount +\n                    FullMath.mulDiv(expectedTotalToken1Amount, CommonLibrary.Q96, domainPositionParams.spotPriceX96),\n                ratioParams.minRebalanceDeviationD,\n                DENOMINATOR\n            )\n        );\n        return token0Delta >= minDeviation;\n    }\n\n    /// @notice returns true if the rebalance between assets on different vaults is needed\n    /// @param currentTokenAmounts the current amounts of tokens on the vaults\n    /// @param expectedTokenAmounts the amounts of tokens expected after rebalance\n    /// @param ratioParams ratio of the tokens between erc20 and money vault combined with needed deviations for rebalance to be called\n    /// @return needed true if the rebalance is needed\n    function tokenRebalanceNeeded(\n        HStrategy.TokenAmounts memory currentTokenAmounts,\n        HStrategy.TokenAmounts memory expectedTokenAmounts,\n        HStrategy.RatioParams memory ratioParams\n    ) external pure returns (bool needed) {\n        uint256 totalToken0Amount = expectedTokenAmounts.erc20Token0 +\n            expectedTokenAmounts.moneyToken0 +\n            expectedTokenAmounts.uniV3Token0;\n        uint256 totalToken1Amount = expectedTokenAmounts.erc20Token1 +\n            expectedTokenAmounts.moneyToken1 +\n            expectedTokenAmounts.uniV3Token1;\n\n        uint256 minToken0Deviation = FullMath.mulDiv(ratioParams.minCapitalDeviationD, totalToken0Amount, DENOMINATOR);\n        uint256 minToken1Deviation = FullMath.mulDiv(ratioParams.minCapitalDeviationD, totalToken1Amount, DENOMINATOR);\n\n        {\n            if (\n                currentTokenAmounts.erc20Token0 + minToken0Deviation < expectedTokenAmounts.erc20Token0 ||\n                currentTokenAmounts.erc20Token0 > expectedTokenAmounts.erc20Token0 + minToken0Deviation ||\n                currentTokenAmounts.erc20Token1 + minToken1Deviation < expectedTokenAmounts.erc20Token1 ||\n                currentTokenAmounts.erc20Token1 > expectedTokenAmounts.erc20Token1 + minToken1Deviation\n            ) {\n                return true;\n            }\n        }\n\n        {\n            if (\n                currentTokenAmounts.moneyToken0 + minToken0Deviation < expectedTokenAmounts.moneyToken0 ||\n                currentTokenAmounts.moneyToken0 > expectedTokenAmounts.moneyToken0 + minToken0Deviation ||\n                currentTokenAmounts.moneyToken1 + minToken1Deviation < expectedTokenAmounts.moneyToken1 ||\n                currentTokenAmounts.moneyToken1 > expectedTokenAmounts.moneyToken1 + minToken1Deviation\n            ) {\n                return true;\n            }\n        }\n\n        {\n            if (\n                currentTokenAmounts.uniV3Token0 + minToken0Deviation < expectedTokenAmounts.uniV3Token0 ||\n                currentTokenAmounts.uniV3Token0 > expectedTokenAmounts.uniV3Token0 + minToken0Deviation ||\n                currentTokenAmounts.uniV3Token1 + minToken1Deviation < expectedTokenAmounts.uniV3Token1 ||\n                currentTokenAmounts.uniV3Token1 > expectedTokenAmounts.uniV3Token1 + minToken1Deviation\n            ) {\n                return true;\n            }\n        }\n    }\n\n    /// @param tick current price tick\n    /// @param strategyParams_ the current parameters of the strategy\n    /// @param uniV3Nft the nft of the position from position manager\n    /// @param positionManager_ the position manager for uniV3\n    function calculateAndCheckDomainPositionParams(\n        int24 tick,\n        HStrategy.StrategyParams memory strategyParams_,\n        uint256 uniV3Nft,\n        INonfungiblePositionManager positionManager_\n    ) external view returns (HStrategy.DomainPositionParams memory params) {\n        (, , , , , int24 lowerTick, int24 upperTick, uint128 liquidity, , , , ) = positionManager_.positions(uniV3Nft);\n\n        params = HStrategy.DomainPositionParams({\n            nft: uniV3Nft,\n            liquidity: liquidity,\n            lowerTick: lowerTick,\n            upperTick: upperTick,\n            domainLowerTick: strategyParams_.domainLowerTick,\n            domainUpperTick: strategyParams_.domainUpperTick,\n            lowerPriceSqrtX96: TickMath.getSqrtRatioAtTick(lowerTick),\n            upperPriceSqrtX96: TickMath.getSqrtRatioAtTick(upperTick),\n            domainLowerPriceSqrtX96: TickMath.getSqrtRatioAtTick(strategyParams_.domainLowerTick),\n            domainUpperPriceSqrtX96: TickMath.getSqrtRatioAtTick(strategyParams_.domainUpperTick),\n            intervalPriceSqrtX96: TickMath.getSqrtRatioAtTick(tick),\n            spotPriceX96: 0\n        });\n        params.spotPriceX96 = FullMath.mulDiv(\n            params.intervalPriceSqrtX96,\n            params.intervalPriceSqrtX96,\n            CommonLibrary.Q96\n        );\n        if (params.intervalPriceSqrtX96 < params.lowerPriceSqrtX96) {\n            params.intervalPriceSqrtX96 = params.lowerPriceSqrtX96;\n        } else if (params.intervalPriceSqrtX96 > params.upperPriceSqrtX96) {\n            params.intervalPriceSqrtX96 = params.upperPriceSqrtX96;\n        }\n    }\n\n    /// @param tick current price tick\n    /// @param pool_ address of uniV3 pool\n    /// @param oracleParams_ oracle parameters\n    /// @param uniV3Helper helper for uniswap V3 calculations\n    function checkSpotTickDeviationFromAverage(\n        int24 tick,\n        address pool_,\n        HStrategy.OracleParams memory oracleParams_,\n        UniV3Helper uniV3Helper\n    ) external view {\n        (bool withFail, int24 deviation) = uniV3Helper.getTickDeviationForTimeSpan(\n            tick,\n            pool_,\n            oracleParams_.averagePriceTimeSpan\n        );\n        require(!withFail, ExceptionsLibrary.INVALID_STATE);\n        if (deviation < 0) {\n            deviation = -deviation;\n        }\n        require(uint24(deviation) <= oracleParams_.maxTickDeviation, ExceptionsLibrary.LIMIT_OVERFLOW);\n    }\n\n    /// @param spotTick current price tick\n    /// @param strategyParams_ parameters of strategy\n    /// @return lowerTick lower tick of new position\n    /// @return upperTick upper tick of new position\n    function calculateNewPositionTicks(int24 spotTick, HStrategy.StrategyParams memory strategyParams_)\n        external\n        pure\n        returns (int24 lowerTick, int24 upperTick)\n    {\n        if (spotTick < strategyParams_.domainLowerTick) {\n            spotTick = strategyParams_.domainLowerTick;\n        } else if (spotTick > strategyParams_.domainUpperTick) {\n            spotTick = strategyParams_.domainUpperTick;\n        }\n\n        int24 deltaToLowerTick = spotTick - strategyParams_.domainLowerTick;\n        deltaToLowerTick -= (deltaToLowerTick % strategyParams_.halfOfShortInterval);\n        int24 lowerEstimationCentralTick = strategyParams_.domainLowerTick + deltaToLowerTick;\n        int24 upperEstimationCentralTick = lowerEstimationCentralTick + strategyParams_.halfOfShortInterval;\n        int24 centralTick = 0;\n        if (spotTick - lowerEstimationCentralTick <= upperEstimationCentralTick - spotTick) {\n            centralTick = lowerEstimationCentralTick;\n        } else {\n            centralTick = upperEstimationCentralTick;\n        }\n\n        lowerTick = centralTick - strategyParams_.halfOfShortInterval;\n        upperTick = centralTick + strategyParams_.halfOfShortInterval;\n\n        if (lowerTick < strategyParams_.domainLowerTick) {\n            lowerTick = strategyParams_.domainLowerTick;\n            upperTick = lowerTick + (strategyParams_.halfOfShortInterval << 1);\n        } else if (upperTick > strategyParams_.domainUpperTick) {\n            upperTick = strategyParams_.domainUpperTick;\n            lowerTick = upperTick - (strategyParams_.halfOfShortInterval << 1);\n        }\n    }\n\n    /// @param currentTokenAmounts current token amounts on vaults in both tokens\n    /// @param domainPositionParams the current state of the position, pool and oracle prediction\n    /// @param hStrategyHelper_ address of HStrategyHelper\n    /// @param uniV3Helper helper for uniswap V3 calculations\n    /// @param ratioParams ratio parameters\n    /// @return expectedTokenAmounts expected amounts of tokens after rebalance on vaults\n    function calculateExpectedTokenAmounts(\n        HStrategy.TokenAmounts memory currentTokenAmounts,\n        HStrategy.DomainPositionParams memory domainPositionParams,\n        HStrategyHelper hStrategyHelper_,\n        UniV3Helper uniV3Helper,\n        HStrategy.RatioParams memory ratioParams\n    ) external pure returns (HStrategy.TokenAmounts memory expectedTokenAmounts) {\n        HStrategy.ExpectedRatios memory expectedRatios = hStrategyHelper_.calculateExpectedRatios(domainPositionParams);\n        uint256 currentCapitalInToken0 = hStrategyHelper_.calculateCurrentCapitalInToken0(\n            domainPositionParams,\n            currentTokenAmounts\n        );\n        HStrategy.TokenAmountsInToken0 memory expectedTokenAmountsInToken0 = hStrategyHelper_\n            .calculateExpectedTokenAmountsInToken0(currentCapitalInToken0, expectedRatios, ratioParams);\n        return\n            hStrategyHelper_.calculateExpectedTokenAmountsByExpectedRatios(\n                expectedRatios,\n                expectedTokenAmountsInToken0,\n                domainPositionParams,\n                uniV3Helper\n            );\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IAaveVault.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\nimport \"../external/aave/ILendingPool.sol\";\nimport \"./IIntegrationVault.sol\";\n\ninterface IAaveVault is IIntegrationVault {\n    /// @notice Reference to Aave protocol lending pool.\n    function lendingPool() external view returns (ILendingPool);\n\n    /// @notice Update all tvls to current aToken balances.\n    function updateTvls() external;\n\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external;\n}\n"
    },
    "contracts/strategies/HStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/external/univ3/ISwapRouter.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../interfaces/vaults/IUniV3Vault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../utils/DefaultAccessControlLateInit.sol\";\nimport \"../utils/HStrategyHelper.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"../utils/UniV3Helper.sol\";\n\ncontract HStrategy is ContractMeta, Multicall, DefaultAccessControlLateInit {\n    using SafeERC20 for IERC20;\n\n    // IMMUTABLES\n    uint32 public constant DENOMINATOR = 10**9;\n    bytes4 public constant APPROVE_SELECTOR = 0x095ea7b3;\n    bytes4 public constant EXACT_INPUT_SINGLE_SELECTOR = ISwapRouter.exactInputSingle.selector;\n    ISwapRouter public immutable router;\n\n    IERC20Vault public erc20Vault;\n    IIntegrationVault public moneyVault;\n    IUniV3Vault public uniV3Vault;\n    address[] public tokens;\n\n    INonfungiblePositionManager private immutable _positionManager;\n    IUniswapV3Pool public pool;\n    uint24 public swapFees;\n    UniV3Helper private immutable _uniV3Helper;\n    HStrategyHelper private immutable _hStrategyHelper;\n    Interval private shortInterval;\n    bool private needPositionRebalance;\n    bool private newPositionMinted;\n\n    // MUTABLE PARAMS\n\n    /// @notice general params of the strategy - responsible for emulating interval and rebalance conditions\n    /// @param halfOfShortInterval half of width of the uniV3 position measured in the strategy in ticks\n    /// @param tickNeighborhood width of the neighbourhood of the current position border, in which rebalance can be called.\n    /// Example: if the upperTick=10, tickNeighbourhood=5, rebalance can be called for all ticks greater than 10 - 5 = 5\n    /// @param domainLowerTick the lower tick of the domain uniV3 position\n    /// @param domainUpperTick the upper tick of the domain uniV3 position\n    struct StrategyParams {\n        int24 halfOfShortInterval;\n        int24 tickNeighborhood;\n        int24 domainLowerTick;\n        int24 domainUpperTick;\n    }\n\n    /// @notice params of the actual minted position\n    /// @param minToken0ForOpening the amount of token0 are tried to be depositted on the new position\n    /// @param minToken1ForOpening the amount of token1 are tried to be depositted on the new position\n    struct MintingParams {\n        uint256 minToken0ForOpening;\n        uint256 minToken1ForOpening;\n    }\n\n    /// @notice params of the interaction with oracle\n    /// @param averagePriceTimeSpan delta in seconds, passed to oracle to get the price averagePriceTimeSpan seconds ago\n    /// @param maxTickDeviation the upper bound for an absolute deviation between the spot price and the price for given number seconds ago\n    struct OracleParams {\n        uint32 averagePriceTimeSpan;\n        uint24 maxTickDeviation;\n    }\n\n    /// @param erc20CapitalRatioD the ratio of tokens kept in money vault instead of erc20. The ratio is maintained for each token\n    /// @param minCapitalDeviationD the needed deviation from target amount of capital in some vault to call rebalance or swap tokens\n    /// @param minRebalanceDeviationD the needed deviation from expected amounts to call swap of tokens\n    struct RatioParams {\n        uint256 erc20CapitalRatioD;\n        uint256 minCapitalDeviationD;\n        uint256 minRebalanceDeviationD;\n    }\n\n    StrategyParams public strategyParams;\n    MintingParams public mintingParams;\n    OracleParams public oracleParams;\n    RatioParams public ratioParams;\n\n    // INTERNAL STRUCTURES\n\n    /// @notice parameters of the current position\n    /// @param lowerTick lower tick of interval\n    /// @param upperTick upper tick of interval\n    struct Interval {\n        int24 lowerTick;\n        int24 upperTick;\n    }\n\n    /// @notice rebalance parameters restricting the tokens transfer\n    struct RebalanceTokenAmounts {\n        uint256[] pulledToUniV3Vault;\n        uint256[] pulledFromUniV3Vault;\n        int256[] swappedAmounts;\n        uint256[] burnedAmounts;\n        uint256 deadline;\n    }\n\n    /// @notice structure for keeping information about capital in different vaults\n    /// @param erc20TokensAmountInToken0 the capital of erc20 vault calculated in token0\n    /// @param moneyTokensAmountInToken0 the capital of money vault calculated in token0\n    /// @param uniV3TokensAmountInToken0 the capital of uniV3 vault calculated in token0\n    /// @param totalTokensInToken0 the total capital calculated in token0\n    struct TokenAmountsInToken0 {\n        uint256 erc20TokensAmountInToken0;\n        uint256 moneyTokensAmountInToken0;\n        uint256 uniV3TokensAmountInToken0;\n        uint256 totalTokensInToken0;\n    }\n\n    /// @notice structure for calculation of the current and expected amounts of tokens on all vaults\n    /// @param erc20Token0 the current amount of token0 on erc20 vault\n    /// @param erc20Token1 the current amount of token1 on erc20 vault\n    /// @param moneyToken0 the current amount of token0 on money vault\n    /// @param moneyToken1 the current amount of token1 on money vault\n    /// @param uniV3Token0 the current amount of token0 on uniV3 vault\n    /// @param uniV3Token1 the current amount of token1 on uniV3 vault\n    struct TokenAmounts {\n        uint256 erc20Token0;\n        uint256 erc20Token1;\n        uint256 moneyToken0;\n        uint256 moneyToken1;\n        uint256 uniV3Token0;\n        uint256 uniV3Token1;\n    }\n\n    /// @notice structure for the calculation of expected ratios between capitals in different assets\n    /// @param token0RatioD the ratio of the capital in token0 / totalCapital\n    /// @param token1RatioD the ratio of the capital in token1 / totalCapital\n    /// @param uniV3RatioD the ratio of the capital in uniV3 / totalCapital\n    struct ExpectedRatios {\n        uint32 token0RatioD;\n        uint32 token1RatioD;\n        uint32 uniV3RatioD;\n    }\n\n    /// @notice structure for keeping information about the current position, pool state and oracle price\n    /// @param nft the nft of the position in positionManager\n    /// @param liquidity the total liquidity of the position\n    /// @param lowerTick the lower tick of the position\n    /// @param upperTick the upper tick of the position\n    /// @param domainLowerTick the lower tick of the domain position\n    /// @param domainUpperTick the upper tick of the domain position\n    /// @param lowerPriceSqrtX96 the square root of the price at lower tick of the position\n    /// @param upperPriceSqrtX96 the square root of the price at upper tick of the position\n    /// @param domainLowerPriceSqrtX96 the square root of the price at lower tick of the domain position\n    /// @param domainUpperPriceSqrtX96 the square root of the price at upper tick of the domain position\n    /// @param intervalPriceSqrtX96 the square root of the spot price limited by the boundaries of the domain interval\n    /// @param spotPriceX96 the spot price\n    struct DomainPositionParams {\n        uint256 nft;\n        uint128 liquidity;\n        int24 lowerTick;\n        int24 upperTick;\n        int24 domainLowerTick;\n        int24 domainUpperTick;\n        uint160 lowerPriceSqrtX96;\n        uint160 upperPriceSqrtX96;\n        uint160 domainLowerPriceSqrtX96;\n        uint160 domainUpperPriceSqrtX96;\n        uint160 intervalPriceSqrtX96;\n        uint256 spotPriceX96;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice constructs a strategy\n    /// @param positionManager_ the position manager for uniV3\n    /// @param router_ the uniV3 router for swapping tokens\n    /// @param uniV3Helper_ the address of the helper contract for uniV3\n    /// @param hStrategyHelper_ the address of the strategy helper contract\n    constructor(\n        INonfungiblePositionManager positionManager_,\n        ISwapRouter router_,\n        address uniV3Helper_,\n        address hStrategyHelper_\n    ) {\n        require(address(positionManager_) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(router_) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(uniV3Helper_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(hStrategyHelper_ != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _positionManager = positionManager_;\n        router = router_;\n        _uniV3Helper = UniV3Helper(uniV3Helper_);\n        _hStrategyHelper = HStrategyHelper(hStrategyHelper_);\n        DefaultAccessControlLateInit.init(address(this));\n    }\n\n    /// @notice initializes the strategy\n    /// @param tokens_ the addresses of the tokens managed by the strategy\n    /// @param erc20Vault_ the address of the erc20 vault\n    /// @param moneyVault_ the address of the moneyVault. It is expected to be yEarn or AAVE\n    /// @param uniV3Vault_ the address of uniV3Vault. It is expected to not hold the position\n    /// @param fee_ the fee of the uniV3 pool on which the vault operates\n    /// @param admin_ the addres of the admin of the strategy\n    function initialize(\n        address[] memory tokens_,\n        IERC20Vault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        IUniV3Vault uniV3Vault_,\n        uint24 fee_,\n        address admin_\n    ) external {\n        DefaultAccessControlLateInit.init(admin_); // call once is checked here\n        address[] memory erc20Tokens = erc20Vault_.vaultTokens();\n        address[] memory moneyTokens = moneyVault_.vaultTokens();\n        address[] memory uniV3Tokens = uniV3Vault_.vaultTokens();\n        require(tokens_.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        require(erc20Tokens.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        require(moneyTokens.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        require(uniV3Tokens.length == 2, ExceptionsLibrary.INVALID_LENGTH);\n        for (uint256 i = 0; i < 2; i++) {\n            require(erc20Tokens[i] == tokens_[i], ExceptionsLibrary.INVARIANT);\n            require(moneyTokens[i] == tokens_[i], ExceptionsLibrary.INVARIANT);\n            require(uniV3Tokens[i] == tokens_[i], ExceptionsLibrary.INVARIANT);\n        }\n        erc20Vault = erc20Vault_;\n        moneyVault = moneyVault_;\n        uniV3Vault = uniV3Vault_;\n        tokens = tokens_;\n        IUniswapV3Factory factory = IUniswapV3Factory(_positionManager.factory());\n        pool = IUniswapV3Pool(factory.getPool(tokens_[0], tokens_[1], fee_));\n        require(address(pool) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n    }\n\n    /// @notice creates the clone of the strategy\n    /// @param tokens_ the addresses of the tokens managed by the strategy\n    /// @param erc20Vault_ the address of the erc20 vault\n    /// @param moneyVault_ the address of the moneyVault. It is expected to be yEarn or AAVE\n    /// @param uniV3Vault_ the address of uniV3Vault. It is expected to not hold the position\n    /// @param fee_ the fee of the uniV3 pool on which the vault operates\n    /// @param admin_ the addres of the admin of the strategy\n    /// @return strategy the address of new strategy\n    function createStrategy(\n        address[] memory tokens_,\n        IERC20Vault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        IUniV3Vault uniV3Vault_,\n        uint24 fee_,\n        address admin_\n    ) external returns (HStrategy strategy) {\n        strategy = HStrategy(Clones.clone(address(this)));\n        strategy.initialize(tokens_, erc20Vault_, moneyVault_, uniV3Vault_, fee_, admin_);\n    }\n\n    /// @notice updates parameters of the strategy. Can be called only by admin\n    /// @param newStrategyParams the new parameters\n    function updateStrategyParams(StrategyParams calldata newStrategyParams) external {\n        _requireAdmin();\n        int24 tickSpacing = pool.tickSpacing();\n        require(\n            newStrategyParams.halfOfShortInterval > 0 &&\n                (newStrategyParams.halfOfShortInterval % tickSpacing == 0) &&\n                newStrategyParams.tickNeighborhood <= newStrategyParams.halfOfShortInterval &&\n                newStrategyParams.tickNeighborhood >= TickMath.MIN_TICK,\n            ExceptionsLibrary.INVARIANT\n        );\n\n        int24 globalIntervalWidth = newStrategyParams.domainUpperTick - newStrategyParams.domainLowerTick;\n        require(\n            (newStrategyParams.domainLowerTick % tickSpacing == 0) &&\n                (newStrategyParams.domainUpperTick % tickSpacing == 0) &&\n                globalIntervalWidth > newStrategyParams.halfOfShortInterval &&\n                (globalIntervalWidth % newStrategyParams.halfOfShortInterval == 0),\n            ExceptionsLibrary.INVARIANT\n        );\n        StrategyParams memory strategyParams_ = strategyParams;\n        if (\n            newStrategyParams.halfOfShortInterval != strategyParams_.halfOfShortInterval ||\n            newStrategyParams.domainLowerTick != strategyParams_.domainLowerTick ||\n            newStrategyParams.domainUpperTick != strategyParams_.domainUpperTick\n        ) {\n            needPositionRebalance = true;\n        }\n        strategyParams = newStrategyParams;\n        emit UpdateStrategyParams(tx.origin, msg.sender, newStrategyParams);\n    }\n\n    /// @notice updates parameters for minting position. Can be called only by admin\n    /// @param newMintingParams the new parameters\n    function updateMintingParams(MintingParams calldata newMintingParams) external {\n        _requireAdmin();\n        require(\n            newMintingParams.minToken0ForOpening > 0 &&\n                newMintingParams.minToken1ForOpening > 0 &&\n                (newMintingParams.minToken0ForOpening <= 1000000000) &&\n                (newMintingParams.minToken1ForOpening <= 1000000000),\n            ExceptionsLibrary.INVARIANT\n        );\n        mintingParams = newMintingParams;\n        emit UpdateMintingParams(tx.origin, msg.sender, newMintingParams);\n    }\n\n    /// @notice updates oracle parameters. Can be called only by admin\n    /// @param newOracleParams the new parameters\n    function updateOracleParams(OracleParams calldata newOracleParams) external {\n        _requireAdmin();\n        require(\n            newOracleParams.averagePriceTimeSpan > 0 && newOracleParams.maxTickDeviation <= uint24(TickMath.MAX_TICK),\n            ExceptionsLibrary.INVARIANT\n        );\n        oracleParams = newOracleParams;\n        emit UpdateOracleParams(tx.origin, msg.sender, newOracleParams);\n    }\n\n    /// @notice updates parameters of the capital ratios and deviation. Can be called only by admin\n    /// @param newRatioParams the new parameters\n    function updateRatioParams(RatioParams calldata newRatioParams) external {\n        _requireAdmin();\n        require(\n            newRatioParams.erc20CapitalRatioD <= DENOMINATOR &&\n                newRatioParams.minCapitalDeviationD <= newRatioParams.erc20CapitalRatioD &&\n                newRatioParams.minRebalanceDeviationD > 0 &&\n                newRatioParams.minRebalanceDeviationD <= DENOMINATOR,\n            ExceptionsLibrary.INVARIANT\n        );\n        ratioParams = newRatioParams;\n        emit UpdateRatioParams(tx.origin, msg.sender, newRatioParams);\n    }\n\n    /// @notice updates swap fees for uniswapV3Pool swaps\n    /// @param newSwapFees the new parameters\n    function updateSwapFees(uint24 newSwapFees) external {\n        _requireAdmin();\n        address poolForSwaps = IUniswapV3Factory(_positionManager.factory()).getPool(tokens[0], tokens[1], newSwapFees);\n        require(poolForSwaps != address(0), ExceptionsLibrary.INVARIANT);\n        swapFees = newSwapFees;\n        emit UpdateSwapFees(tx.origin, msg.sender, newSwapFees);\n    }\n\n    /// @notice manual pulling tokens from vault. Can be called only by admin\n    /// @param fromVault the address of the vault to pull tokens from\n    /// @param toVault the address of the vault to pull tokens to\n    /// @param tokenAmounts the amount of tokens to be pulled\n    /// @param vaultOptions additional options for `pull` method\n    function manualPull(\n        IIntegrationVault fromVault,\n        IIntegrationVault toVault,\n        uint256[] memory tokenAmounts,\n        bytes memory vaultOptions\n    ) external {\n        _requireAdmin();\n        fromVault.pull(address(toVault), tokens, tokenAmounts, vaultOptions);\n    }\n\n    /// @notice rebalance method. Need to be called if the new position is needed\n    /// @param restrictions the restrictions of the amount of tokens to be transferred\n    /// @param moneyVaultOptions additional parameters for pulling for `pull` method for money vault\n    /// @return actualPulledAmounts actual transferred amounts\n    /// @return burnedAmounts actual burned amounts from uniV3 position\n    function rebalance(RebalanceTokenAmounts memory restrictions, bytes memory moneyVaultOptions)\n        external\n        returns (RebalanceTokenAmounts memory actualPulledAmounts, uint256[] memory burnedAmounts)\n    {\n        _requireAtLeastOperator();\n        IUniswapV3Pool pool_ = pool;\n        (, int24 tick, , , , , ) = pool_.slot0();\n        _hStrategyHelper.checkSpotTickDeviationFromAverage(tick, address(pool_), oracleParams, _uniV3Helper);\n        burnedAmounts = _partialRebalanceOfUniV3Position(restrictions, tick);\n        actualPulledAmounts = _capitalRebalance(restrictions, moneyVaultOptions, tick);\n    }\n\n    /// @notice rebalance, that if needed burns old univ3 position and mints new\n    /// @param restrictions the restrictions of the amount of tokens to be transferred\n    /// @param tick current price tick\n    /// @return burnedAmounts actual transferred amounts of tokens from position while burn\n    function _partialRebalanceOfUniV3Position(RebalanceTokenAmounts memory restrictions, int24 tick)\n        internal\n        returns (uint256[] memory burnedAmounts)\n    {\n        IIntegrationVault erc20Vault_ = erc20Vault;\n        IUniV3Vault uniV3Vault_ = uniV3Vault;\n        uint256 uniV3Nft = uniV3Vault_.uniV3Nft();\n        StrategyParams memory strategyParams_ = strategyParams;\n        IUniswapV3Pool pool_ = pool;\n        address[] memory tokens_ = tokens;\n        burnedAmounts = new uint256[](2);\n        burnedAmounts[0] = type(uint256).max;\n        burnedAmounts[1] = type(uint256).max;\n        newPositionMinted = false;\n        {\n            Interval memory shortInterval_ = shortInterval;\n            int24 tickNeighborhood = strategyParams_.tickNeighborhood;\n\n            if (\n                shortInterval_.lowerTick + tickNeighborhood <= tick &&\n                shortInterval_.upperTick - tickNeighborhood >= tick &&\n                !needPositionRebalance\n            ) {\n                return burnedAmounts;\n            }\n            needPositionRebalance = false;\n\n            (int24 newLowerTick, int24 newUpperTick) = _hStrategyHelper.calculateNewPositionTicks(\n                tick,\n                strategyParams_\n            );\n\n            if (newLowerTick == shortInterval_.lowerTick && shortInterval_.upperTick == newUpperTick) {\n                return burnedAmounts;\n            }\n\n            shortInterval = Interval({lowerTick: newLowerTick, upperTick: newUpperTick});\n        }\n\n        if (uniV3Nft != 0) {\n            // cannot burn only if it is first call of the rebalance function\n            // and we dont have any position\n            burnedAmounts = _drainPosition(restrictions, erc20Vault_, uniV3Vault_, uniV3Nft, tokens_);\n        }\n\n        _mintPosition(pool_, restrictions.deadline, _positionManager, uniV3Vault_, uniV3Nft, tokens_);\n    }\n\n    /// @notice rebalance amount of tokens between vaults. Need to be called when no new position is needed\n    /// @param restrictions the restrictions of the amount of tokens to be transferred\n    /// @param moneyVaultOptions additional parameters for pulling for `pull` method for money vault\n    /// @param tick spot tick for calculations\n    /// @return actualPulledAmounts actual transferred amounts\n    function _capitalRebalance(\n        RebalanceTokenAmounts memory restrictions,\n        bytes memory moneyVaultOptions,\n        int24 tick\n    ) internal returns (RebalanceTokenAmounts memory actualPulledAmounts) {\n        HStrategyHelper hStrategyHelper_ = _hStrategyHelper;\n        IUniV3Vault uniV3Vault_ = uniV3Vault;\n        DomainPositionParams memory domainPositionParams;\n        {\n            uint256 uniV3Nft = uniV3Vault_.uniV3Nft();\n            require(uniV3Nft != 0, ExceptionsLibrary.INVARIANT);\n            domainPositionParams = hStrategyHelper_.calculateAndCheckDomainPositionParams(\n                tick,\n                strategyParams,\n                uniV3Nft,\n                _positionManager\n            );\n        }\n        IIntegrationVault moneyVault_ = moneyVault;\n        IIntegrationVault erc20Vault_ = erc20Vault;\n        TokenAmounts memory currentTokenAmounts = hStrategyHelper_.calculateCurrentTokenAmounts(\n            erc20Vault_,\n            moneyVault_,\n            domainPositionParams\n        );\n        TokenAmounts memory expectedTokenAmounts = hStrategyHelper_.calculateExpectedTokenAmounts(\n            currentTokenAmounts,\n            domainPositionParams,\n            hStrategyHelper_,\n            _uniV3Helper,\n            ratioParams\n        );\n\n        if (!hStrategyHelper_.tokenRebalanceNeeded(currentTokenAmounts, expectedTokenAmounts, ratioParams)) {\n            return actualPulledAmounts;\n        }\n\n        address[] memory tokens_ = tokens;\n        actualPulledAmounts.pulledFromUniV3Vault = _pullExtraTokens(\n            hStrategyHelper_,\n            expectedTokenAmounts,\n            restrictions,\n            moneyVaultOptions,\n            domainPositionParams,\n            erc20Vault_,\n            moneyVault_,\n            uniV3Vault_,\n            tokens_\n        );\n\n        if (hStrategyHelper_.swapNeeded(currentTokenAmounts, expectedTokenAmounts, ratioParams, domainPositionParams)) {\n            actualPulledAmounts.swappedAmounts = _swapTokens(\n                currentTokenAmounts,\n                expectedTokenAmounts,\n                restrictions,\n                erc20Vault_,\n                tokens_\n            );\n        }\n\n        TokenAmounts memory missingTokenAmounts;\n        {\n            (, , , , , , , uint128 liquidity, , , , ) = _positionManager.positions(uniV3Vault_.uniV3Nft());\n            missingTokenAmounts = hStrategyHelper_.calculateMissingTokenAmounts(\n                moneyVault_,\n                expectedTokenAmounts,\n                domainPositionParams,\n                liquidity\n            );\n        }\n        actualPulledAmounts.pulledToUniV3Vault = _pullMissingTokens(\n            missingTokenAmounts,\n            restrictions,\n            moneyVaultOptions,\n            erc20Vault_,\n            moneyVault_,\n            uniV3Vault_,\n            tokens_\n        );\n    }\n\n    // -------------------  INTERNAL, MUTABLE  -------------------\n\n    /// @notice determining the amount of tokens to be swapped and swapping it\n    /// @param currentTokenAmounts the current amount of tokens\n    /// @param expectedTokenAmounts the amount of tokens we expect to have after rebalance\n    /// @param restrictions the restrictions of the amount of tokens to be transferred\n    /// @param erc20Vault_ ERC20 vault of the strategy\n    /// @param tokens_ the addresses of the tokens managed by the strategy\n    /// @return swappedAmounts acutal amount of swapped tokens\n    function _swapTokens(\n        TokenAmounts memory currentTokenAmounts,\n        TokenAmounts memory expectedTokenAmounts,\n        RebalanceTokenAmounts memory restrictions,\n        IIntegrationVault erc20Vault_,\n        address[] memory tokens_\n    ) internal returns (int256[] memory swappedAmounts) {\n        (uint256 expectedToken0Amount, uint256 expectedToken1Amount) = _accumulateTokens(expectedTokenAmounts);\n        (uint256 currentToken0Amount, uint256 currentToken1Amount) = _accumulateTokens(currentTokenAmounts);\n\n        if (currentToken0Amount >= expectedToken0Amount && currentToken1Amount <= expectedToken1Amount) {\n            swappedAmounts = _swapTokensOnERC20Vault(\n                currentToken0Amount - expectedToken0Amount,\n                0,\n                restrictions,\n                erc20Vault_,\n                tokens_\n            );\n        } else if (currentToken0Amount <= expectedToken0Amount && currentToken1Amount >= expectedToken1Amount) {\n            swappedAmounts = _swapTokensOnERC20Vault(\n                currentToken1Amount - expectedToken1Amount,\n                1,\n                restrictions,\n                erc20Vault_,\n                tokens_\n            );\n        } else {\n            revert(ExceptionsLibrary.INVALID_STATE);\n        }\n    }\n\n    /// @notice pulling extra tokens from money and uniV3 vaults on erc20\n    /// @param hStrategyHelper_ the helper of the strategy\n    /// @param expectedTokenAmounts the amount of tokens we expect to have after rebalance\n    /// @param restrictions the restrictions of the amount of tokens to be transferred\n    /// @param moneyVaultOptions additional parameters for pulling for `pull` method for money vault\n    /// @param domainPositionParams the current state of the pool and position\n    /// @param erc20Vault_ ERC20 vault of the strategy\n    /// @param moneyVault_ Money vault of the strategy\n    /// @param uniV3Vault_ UniswapV3 vault of the strategy\n    /// @param tokens_ the addresses of the tokens managed by the strategy\n    /// @return pulledFromUniV3Vault the actual amount of tokens pulled from UniV3Vault\n    function _pullExtraTokens(\n        HStrategyHelper hStrategyHelper_,\n        TokenAmounts memory expectedTokenAmounts,\n        RebalanceTokenAmounts memory restrictions,\n        bytes memory moneyVaultOptions,\n        DomainPositionParams memory domainPositionParams,\n        IIntegrationVault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        IUniV3Vault uniV3Vault_,\n        address[] memory tokens_\n    ) internal returns (uint256[] memory pulledFromUniV3Vault) {\n        pulledFromUniV3Vault = new uint256[](2);\n        if (!newPositionMinted) {\n            uint256[] memory extraTokenAmountsForPull = hStrategyHelper_.calculateExtraTokenAmountsForUniV3Vault(\n                expectedTokenAmounts,\n                domainPositionParams\n            );\n\n            if (extraTokenAmountsForPull[0] > 0 || extraTokenAmountsForPull[1] > 0) {\n                pulledFromUniV3Vault = uniV3Vault_.pull(address(erc20Vault_), tokens_, extraTokenAmountsForPull, \"\");\n                _compareAmounts(restrictions.pulledFromUniV3Vault, pulledFromUniV3Vault);\n            }\n        }\n\n        {\n            uint256[] memory extraTokenAmountsForPull = hStrategyHelper_.calculateExtraTokenAmountsForMoneyVault(\n                moneyVault_,\n                expectedTokenAmounts\n            );\n\n            if (extraTokenAmountsForPull[0] > 0 || extraTokenAmountsForPull[1] > 0) {\n                moneyVault_.pull(address(erc20Vault_), tokens_, extraTokenAmountsForPull, moneyVaultOptions);\n            }\n        }\n    }\n\n    /// @notice pulling missing tokens from erc20 vault on money and uniV3 vaults\n    /// @param missingTokenAmounts the amount of missing tokens\n    /// @param restrictions the restrictions of the amount of tokens to be transferred\n    /// @param moneyVaultOptions additional parameters for pulling for `pull` method for money vault\n    /// @param erc20Vault_ ERC20 vault of the strategy\n    /// @param moneyVault_ Money vault of the strategy\n    /// @param uniV3Vault_ UniswapV3 vault of the strategy\n    /// @param tokens_ the addresses of the tokens managed by the strategy\n    /// @return pulledToUniV3Vault the actual amount of tokens pulled into UniV3Vault\n    function _pullMissingTokens(\n        TokenAmounts memory missingTokenAmounts,\n        RebalanceTokenAmounts memory restrictions,\n        bytes memory moneyVaultOptions,\n        IIntegrationVault erc20Vault_,\n        IIntegrationVault moneyVault_,\n        IUniV3Vault uniV3Vault_,\n        address[] memory tokens_\n    ) internal returns (uint256[] memory pulledToUniV3Vault) {\n        pulledToUniV3Vault = new uint256[](2);\n        uint256[] memory extraTokenAmountsForPull = new uint256[](2);\n        {\n            if (missingTokenAmounts.uniV3Token0 > 0 || missingTokenAmounts.uniV3Token1 > 0) {\n                extraTokenAmountsForPull[0] = missingTokenAmounts.uniV3Token0;\n                extraTokenAmountsForPull[1] = missingTokenAmounts.uniV3Token1;\n                pulledToUniV3Vault = erc20Vault_.pull(address(uniV3Vault_), tokens_, extraTokenAmountsForPull, \"\");\n                _compareAmounts(restrictions.pulledToUniV3Vault, pulledToUniV3Vault);\n            }\n        }\n        {\n            if (missingTokenAmounts.moneyToken0 > 0 || missingTokenAmounts.moneyToken1 > 0) {\n                extraTokenAmountsForPull[0] = missingTokenAmounts.moneyToken0;\n                extraTokenAmountsForPull[1] = missingTokenAmounts.moneyToken1;\n                erc20Vault_.pull(address(moneyVault_), tokens_, extraTokenAmountsForPull, moneyVaultOptions);\n            }\n        }\n    }\n\n    /// @notice minting new position inside the domain interval\n    /// @param pool_ address of uniV3 pool\n    /// @param deadline maximal duration of swap offer on uniV3\n    /// @param positionManager_ uniV3 position manager\n    /// @param uniV3Vault_ UniswapV3 vault of the strategy\n    /// @param oldNft the nft of the burning position\n    /// @param tokens_ addresses of tokens of strategy\n    /// @param tokens_ the addresses of the tokens managed by the strategy\n    function _mintPosition(\n        IUniswapV3Pool pool_,\n        uint256 deadline,\n        INonfungiblePositionManager positionManager_,\n        IUniV3Vault uniV3Vault_,\n        uint256 oldNft,\n        address[] memory tokens_\n    ) internal {\n        uint256 minToken0ForOpening;\n        uint256 minToken1ForOpening;\n        {\n            MintingParams memory mintingParams_ = mintingParams;\n            minToken0ForOpening = mintingParams_.minToken0ForOpening;\n            minToken1ForOpening = mintingParams_.minToken1ForOpening;\n        }\n        IERC20(tokens_[0]).safeApprove(address(positionManager_), minToken0ForOpening);\n        IERC20(tokens_[1]).safeApprove(address(positionManager_), minToken1ForOpening);\n        Interval memory shortInterval_ = shortInterval;\n        (uint256 newNft, , , ) = positionManager_.mint(\n            INonfungiblePositionManager.MintParams({\n                token0: tokens_[0],\n                token1: tokens_[1],\n                fee: pool_.fee(),\n                tickLower: shortInterval_.lowerTick,\n                tickUpper: shortInterval_.upperTick,\n                amount0Desired: minToken0ForOpening,\n                amount1Desired: minToken1ForOpening,\n                amount0Min: 0,\n                amount1Min: 0,\n                recipient: address(this),\n                deadline: deadline\n            })\n        );\n        IERC20(tokens_[0]).safeApprove(address(positionManager_), 0);\n        IERC20(tokens_[1]).safeApprove(address(positionManager_), 0);\n\n        positionManager_.safeTransferFrom(address(this), address(uniV3Vault_), newNft);\n        if (oldNft != 0) {\n            positionManager_.burn(oldNft);\n        }\n        newPositionMinted = true;\n        emit MintUniV3Position(newNft, shortInterval_.lowerTick, shortInterval_.upperTick);\n    }\n\n    /// @notice draining all assets from uniV3\n    /// @param restrictions the restrictions of the amount of tokens to be transferred\n    /// @param erc20Vault_ ERC20 vault of the strategy\n    /// @param uniV3Vault_ UniswapV3 vault of the strategy\n    /// @param uniV3Nft the nft of the position from position manager\n    /// @param tokens_ the addresses of the tokens managed by the strategy\n    /// @return drainedTokens actual amount of tokens got from draining position\n    function _drainPosition(\n        RebalanceTokenAmounts memory restrictions,\n        IIntegrationVault erc20Vault_,\n        IUniV3Vault uniV3Vault_,\n        uint256 uniV3Nft,\n        address[] memory tokens_\n    ) internal returns (uint256[] memory drainedTokens) {\n        drainedTokens = uniV3Vault_.liquidityToTokenAmounts(type(uint128).max);\n        drainedTokens = uniV3Vault_.pull(address(erc20Vault_), tokens_, drainedTokens, \"\");\n        _compareAmounts(restrictions.burnedAmounts, drainedTokens);\n        emit BurnUniV3Position(uniV3Nft);\n    }\n\n    /// @notice swapping tokens\n    /// @param amountIn amount of tokens to be swapped\n    /// @param tokenInIndex the index of token to be swapped (0 or 1)\n    /// @param restrictions the restrictions of the amount of tokens to be transferred\n    /// @param erc20Vault_ ERC20 vault of the strategy\n    /// @param tokens_ the addresses of the tokens managed by the strategy\n    /// @return amountsOut actual amount of tokens got from swap\n    function _swapTokensOnERC20Vault(\n        uint256 amountIn,\n        uint256 tokenInIndex,\n        RebalanceTokenAmounts memory restrictions,\n        IIntegrationVault erc20Vault_,\n        address[] memory tokens_\n    ) internal returns (int256[] memory amountsOut) {\n        {\n            (uint256[] memory tvl, ) = erc20Vault_.tvl();\n            if (tvl[tokenInIndex] < amountIn) {\n                amountIn = tvl[tokenInIndex];\n            }\n        }\n\n        bytes memory routerResult;\n        if (amountIn > 0) {\n            ISwapRouter.ExactInputSingleParams memory swapParams = ISwapRouter.ExactInputSingleParams({\n                tokenIn: tokens_[tokenInIndex],\n                tokenOut: tokens_[tokenInIndex ^ 1],\n                fee: swapFees,\n                recipient: address(erc20Vault_),\n                deadline: restrictions.deadline,\n                amountIn: amountIn,\n                amountOutMinimum: 0,\n                sqrtPriceLimitX96: 0\n            });\n            bytes memory data = abi.encode(swapParams);\n            erc20Vault_.externalCall(tokens_[tokenInIndex], APPROVE_SELECTOR, abi.encode(address(router), amountIn)); // approve\n            routerResult = erc20Vault_.externalCall(address(router), EXACT_INPUT_SINGLE_SELECTOR, data); // swap\n            erc20Vault_.externalCall(tokens_[tokenInIndex], APPROVE_SELECTOR, abi.encode(address(router), 0)); // reset allowance\n            uint256 amountOut = abi.decode(routerResult, (uint256));\n\n            require(\n                restrictions.swappedAmounts[tokenInIndex ^ 1] >= 0 && restrictions.swappedAmounts[tokenInIndex] <= 0,\n                ExceptionsLibrary.INVARIANT\n            );\n            require(\n                restrictions.swappedAmounts[tokenInIndex ^ 1] <= int256(amountOut),\n                ExceptionsLibrary.LIMIT_UNDERFLOW\n            );\n            require(restrictions.swappedAmounts[tokenInIndex] >= -int256(amountIn), ExceptionsLibrary.LIMIT_OVERFLOW);\n\n            amountsOut = new int256[](2);\n            amountsOut[tokenInIndex ^ 1] = int256(amountOut);\n            amountsOut[tokenInIndex] = -int256(amountIn);\n\n            emit SwapTokensOnERC20Vault(tx.origin, swapParams);\n        } else {\n            require(restrictions.swappedAmounts[tokenInIndex ^ 1] == 0, ExceptionsLibrary.LIMIT_OVERFLOW);\n            require(restrictions.swappedAmounts[tokenInIndex] == 0, ExceptionsLibrary.LIMIT_UNDERFLOW);\n            return new int256[](2);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    /// @notice method comparing needed amount of tokens and actual. Reverts in for any elent holds needed[i] > actual[i]\n    /// @param needed the needed amount of tokens from some action\n    /// @param actual actual amount of tokens from the action\n    function _compareAmounts(uint256[] memory needed, uint256[] memory actual) internal pure {\n        for (uint256 i = 0; i < 2; i++) {\n            require(needed[i] <= actual[i], ExceptionsLibrary.LIMIT_UNDERFLOW);\n        }\n    }\n\n    /// @notice method calculates sums for both tokens along all vaults\n    /// @param tokenAmouts given token amounts\n    /// @return token0 amount of token 0 over all vaults for given tokenAmouts\n    /// @return token1 amount of token 1 over all vaults for given tokenAmouts\n    function _accumulateTokens(TokenAmounts memory tokenAmouts) internal pure returns (uint256 token0, uint256 token1) {\n        token0 = tokenAmouts.erc20Token0 + tokenAmouts.moneyToken0 + tokenAmouts.uniV3Token0;\n        token1 = tokenAmouts.erc20Token1 + tokenAmouts.moneyToken1 + tokenAmouts.uniV3Token1;\n    }\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"HStrategy\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    /// @notice Emitted when new position in UniV3Pool has been minted.\n    /// @param uniV3Nft nft of new minted position\n    /// @param lowerTick lowerTick of that position\n    /// @param upperTick upperTick of that position\n    event MintUniV3Position(uint256 uniV3Nft, int24 lowerTick, int24 upperTick);\n\n    /// @notice Emitted when position in UniV3Pool has been burnt.\n    /// @param uniV3Nft nft of new minted position\n    event BurnUniV3Position(uint256 uniV3Nft);\n\n    /// @notice Emitted when swap is initiated.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param swapParams Swap domainPositionParams\n    event SwapTokensOnERC20Vault(address indexed origin, ISwapRouter.ExactInputSingleParams swapParams);\n\n    /// @notice Emitted when Strategy strategyParams are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param strategyParams Updated strategyParams\n    event UpdateStrategyParams(address indexed origin, address indexed sender, StrategyParams strategyParams);\n\n    /// @notice Emitted when Strategy mintingParams are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param mintingParams Updated mintingParams\n    event UpdateMintingParams(address indexed origin, address indexed sender, MintingParams mintingParams);\n\n    /// @notice Emitted when Strategy oracleParams are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param oracleParams Updated oracleParams\n    event UpdateOracleParams(address indexed origin, address indexed sender, OracleParams oracleParams);\n\n    /// @notice Emitted when Strategy ratioParams are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param ratioParams Updated ratioParams\n    event UpdateRatioParams(address indexed origin, address indexed sender, RatioParams ratioParams);\n\n    /// @notice Emitted when new swap fees for UniV3Pool swaps are set.\n    /// @param newSwapFees new swap fee\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    event UpdateSwapFees(address indexed origin, address indexed sender, uint24 newSwapFees);\n}\n"
    },
    "contracts/interfaces/external/aave/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\npragma experimental ABIEncoderV2;\n\nimport {ILendingPoolAddressesProvider} from \"./ILendingPoolAddressesProvider.sol\";\nimport {DataTypes} from \"./DataTypes.sol\";\n\ninterface ILendingPool {\n    /**\n     * @dev Emitted on deposit()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the deposit\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n     * @param amount The amount deposited\n     * @param referral The referral code used\n     **/\n    event Deposit(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlyng asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to Address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed\n     * @param referral The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint256 borrowRateMode,\n        uint256 borrowRate,\n        uint16 indexed referral\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     **/\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address indexed initiator,\n        address indexed asset,\n        uint256 amount,\n        uint256 premium,\n        uint16 referralCode\n    );\n\n    /**\n     * @dev Emitted when the pause is triggered.\n     */\n    event Paused();\n\n    /**\n     * @dev Emitted when the pause is lifted.\n     */\n    event Unpaused();\n\n    /**\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n     * LendingPoolCollateral manager using a DELEGATECALL\n     * This allows to have the events in the generated ABI for LendingPool.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n     * gets added to the LendingPool ABI\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The new liquidity rate\n     * @param stableBorrowRate The new stable borrow rate\n     * @param variableBorrowRate The new variable borrow rate\n     * @param liquidityIndex The new liquidity index\n     * @param variableBorrowIndex The new variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to deposit\n     * @param amount The amount to be deposited\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to Address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 rateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n     * @param asset The address of the underlying asset borrowed\n     * @param rateMode The rate mode that the user wants to swap to\n     **/\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n\n    /**\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n     *        borrowed at a stable rate and depositors are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n     * @param asset The address of the underlying asset deposited\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n    /**\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n     * For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts amounts being flash-borrowed\n     * @param modes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralETH the total collateral in ETH of the user\n     * @return totalDebtETH the total debt in ETH of the user\n     * @return availableBorrowsETH the borrowing power left of the user\n     * @return currentLiquidationThreshold the liquidation threshold of the user\n     * @return ltv the loan to value of the user\n     * @return healthFactor the current health factor of the user\n     **/\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    function initReserve(\n        address reserve,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n\n    function setConfiguration(address reserve, uint256 configuration) external;\n\n    /**\n     * @dev Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @dev Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @dev Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n    /**\n     * @dev Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state of the reserve\n     **/\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromAfter,\n        uint256 balanceToBefore\n    ) external;\n\n    function getReservesList() external view returns (address[] memory);\n\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n\n    function setPause(bool val) external;\n\n    function paused() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/external/aave/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\n/**\n * @title LendingPoolAddressesProvider contract\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n * - Owned by the Aave Governance\n * @author Aave\n **/\ninterface ILendingPoolAddressesProvider {\n    event MarketIdSet(string newMarketId);\n    event LendingPoolUpdated(address indexed newAddress);\n    event ConfigurationAdminUpdated(address indexed newAddress);\n    event EmergencyAdminUpdated(address indexed newAddress);\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n    event PriceOracleUpdated(address indexed newAddress);\n    event LendingRateOracleUpdated(address indexed newAddress);\n    event ProxyCreated(bytes32 id, address indexed newAddress);\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n    function getMarketId() external view returns (string memory);\n\n    function setMarketId(string calldata marketId) external;\n\n    function setAddress(bytes32 id, address newAddress) external;\n\n    function setAddressAsProxy(bytes32 id, address impl) external;\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getLendingPool() external view returns (address);\n\n    function setLendingPoolImpl(address pool) external;\n\n    function getLendingPoolConfigurator() external view returns (address);\n\n    function setLendingPoolConfiguratorImpl(address configurator) external;\n\n    function getLendingPoolCollateralManager() external view returns (address);\n\n    function setLendingPoolCollateralManager(address manager) external;\n\n    function getPoolAdmin() external view returns (address);\n\n    function setPoolAdmin(address admin) external;\n\n    function getEmergencyAdmin() external view returns (address);\n\n    function setEmergencyAdmin(address admin) external;\n\n    function getPriceOracle() external view returns (address);\n\n    function setPriceOracle(address priceOracle) external;\n\n    function getLendingRateOracle() external view returns (address);\n\n    function setLendingRateOracle(address lendingRateOracle) external;\n}\n"
    },
    "contracts/interfaces/external/aave/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\nlibrary DataTypes {\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        uint256 data;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n}\n"
    },
    "contracts/utils/LStrategyHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/cowswap/ICowswapSettlement.sol\";\nimport \"../interfaces/utils/ILStrategyHelper.sol\";\nimport \"../libraries/external/GPv2Order.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/external/TickMath.sol\";\n\ncontract LStrategyHelper is ILStrategyHelper {\n    // IMMUTABLES\n    address public immutable cowswap;\n\n    constructor(address cowswap_) {\n        cowswap = cowswap_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    function checkOrder(\n        GPv2Order.Data memory order,\n        bytes calldata uuid,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        uint256 deadline,\n        address erc20Vault,\n        uint256 fee\n    ) external view {\n        require(deadline >= block.timestamp, ExceptionsLibrary.TIMESTAMP);\n        (bytes32 orderHashFromUid, , ) = GPv2Order.extractOrderUidParams(uuid);\n        bytes32 domainSeparator = ICowswapSettlement(cowswap).domainSeparator();\n        bytes32 orderHash = GPv2Order.hash(order, domainSeparator);\n        require(orderHash == orderHashFromUid, ExceptionsLibrary.INVARIANT);\n        require(address(order.sellToken) == tokenIn, ExceptionsLibrary.INVALID_TOKEN);\n        require(address(order.buyToken) == tokenOut, ExceptionsLibrary.INVALID_TOKEN);\n        require(order.sellAmount == amountIn, ExceptionsLibrary.INVALID_VALUE);\n        require(order.buyAmount >= minAmountOut, ExceptionsLibrary.LIMIT_UNDERFLOW);\n        require(order.validTo <= deadline, ExceptionsLibrary.TIMESTAMP);\n        require(order.receiver == erc20Vault, ExceptionsLibrary.FORBIDDEN);\n        require(order.kind == GPv2Order.KIND_SELL, ExceptionsLibrary.INVALID_VALUE);\n        require(order.sellTokenBalance == GPv2Order.BALANCE_ERC20, ExceptionsLibrary.INVALID_VALUE);\n        require(order.buyTokenBalance == GPv2Order.BALANCE_ERC20, ExceptionsLibrary.INVALID_VALUE);\n        require(order.feeAmount <= fee, ExceptionsLibrary.INVALID_VALUE);\n    }\n\n    function tickFromPriceX96(uint256 priceX96) external pure returns (int24) {\n        uint256 sqrtPriceX96 = CommonLibrary.sqrtX96(priceX96);\n        return TickMath.getTickAtSqrtRatio(uint160(sqrtPriceX96));\n    }\n}\n"
    },
    "contracts/interfaces/external/cowswap/ICowswapSettlement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICowswapSettlement {\n    function domainSeparator() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/utils/ILStrategyHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../../libraries/external/GPv2Order.sol\";\n\ninterface ILStrategyHelper {\n    function checkOrder(\n        GPv2Order.Data memory order,\n        bytes calldata uuid,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        uint256 deadline,\n        address erc20Vault,\n        uint256 fee\n    ) external;\n\n    function tickFromPriceX96(uint256 priceX96) external pure returns (int24);\n}\n"
    },
    "contracts/libraries/external/GPv2Order.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Gnosis Protocol v2 Order Library\n/// @author Gnosis Developers\nlibrary GPv2Order {\n    /// @dev The complete data for a Gnosis Protocol order. This struct contains\n    /// all order parameters that are signed for submitting to GP.\n    struct Data {\n        IERC20 sellToken;\n        IERC20 buyToken;\n        address receiver;\n        uint256 sellAmount;\n        uint256 buyAmount;\n        uint32 validTo;\n        bytes32 appData;\n        uint256 feeAmount;\n        bytes32 kind;\n        bool partiallyFillable;\n        bytes32 sellTokenBalance;\n        bytes32 buyTokenBalance;\n    }\n\n    /// @dev The order EIP-712 type hash for the [`GPv2Order.Data`] struct.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\n    ///     \"Order(\" +\n    ///         \"address sellToken,\" +\n    ///         \"address buyToken,\" +\n    ///         \"address receiver,\" +\n    ///         \"uint256 sellAmount,\" +\n    ///         \"uint256 buyAmount,\" +\n    ///         \"uint32 validTo,\" +\n    ///         \"bytes32 appData,\" +\n    ///         \"uint256 feeAmount,\" +\n    ///         \"string kind,\" +\n    ///         \"bool partiallyFillable\" +\n    ///         \"string sellTokenBalance\" +\n    ///         \"string buyTokenBalance\" +\n    ///     \")\"\n    /// )\n    /// ```\n    bytes32 internal constant TYPE_HASH = hex\"d5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489\";\n\n    /// @dev The marker value for a sell order for computing the order struct\n    /// hash. This allows the EIP-712 compatible wallets to display a\n    /// descriptive string for the order kind (instead of 0 or 1).\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"sell\")\n    /// ```\n    bytes32 internal constant KIND_SELL = hex\"f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee346775\";\n\n    /// @dev The OrderKind marker value for a buy order for computing the order\n    /// struct hash.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"buy\")\n    /// ```\n    bytes32 internal constant KIND_BUY = hex\"6ed88e868af0a1983e3886d5f3e95a2fafbd6c3450bc229e27342283dc429ccc\";\n\n    /// @dev The TokenBalance marker value for using direct ERC20 balances for\n    /// computing the order struct hash.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"erc20\")\n    /// ```\n    bytes32 internal constant BALANCE_ERC20 = hex\"5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc9\";\n\n    /// @dev The TokenBalance marker value for using Balancer Vault external\n    /// balances (in order to re-use Vault ERC20 approvals) for computing the\n    /// order struct hash.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"external\")\n    /// ```\n    bytes32 internal constant BALANCE_EXTERNAL = hex\"abee3b73373acd583a130924aad6dc38cfdc44ba0555ba94ce2ff63980ea0632\";\n\n    /// @dev The TokenBalance marker value for using Balancer Vault internal\n    /// balances for computing the order struct hash.\n    ///\n    /// This value is pre-computed from the following expression:\n    /// ```\n    /// keccak256(\"internal\")\n    /// ```\n    bytes32 internal constant BALANCE_INTERNAL = hex\"4ac99ace14ee0a5ef932dc609df0943ab7ac16b7583634612f8dc35a4289a6ce\";\n\n    /// @dev Marker address used to indicate that the receiver of the trade\n    /// proceeds should the owner of the order.\n    ///\n    /// This is chosen to be `address(0)` for gas efficiency as it is expected\n    /// to be the most common case.\n    address internal constant RECEIVER_SAME_AS_OWNER = address(0);\n\n    /// @dev The byte length of an order unique identifier.\n    uint256 internal constant UID_LENGTH = 56;\n\n    /// @dev Returns the actual receiver for an order. This function checks\n    /// whether or not the [`receiver`] field uses the marker value to indicate\n    /// it is the same as the order owner.\n    ///\n    /// @return receiver The actual receiver of trade proceeds.\n    function actualReceiver(Data memory order, address owner) internal pure returns (address receiver) {\n        if (order.receiver == RECEIVER_SAME_AS_OWNER) {\n            receiver = owner;\n        } else {\n            receiver = order.receiver;\n        }\n    }\n\n    /// @dev Return the EIP-712 signing hash for the specified order.\n    ///\n    /// @param order The order to compute the EIP-712 signing hash for.\n    /// @param domainSeparator The EIP-712 domain separator to use.\n    /// @return orderDigest The 32 byte EIP-712 struct hash.\n    function hash(Data memory order, bytes32 domainSeparator) internal pure returns (bytes32 orderDigest) {\n        bytes32 structHash;\n\n        // NOTE: Compute the EIP-712 order struct hash in place. As suggested\n        // in the EIP proposal, noting that the order struct has 10 fields, and\n        // including the type hash `(12 + 1) * 32 = 416` bytes to hash.\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-encodedata>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let dataStart := sub(order, 32)\n            let temp := mload(dataStart)\n            mstore(dataStart, TYPE_HASH)\n            structHash := keccak256(dataStart, 416)\n            mstore(dataStart, temp)\n        }\n\n        // NOTE: Now that we have the struct hash, compute the EIP-712 signing\n        // hash using scratch memory past the free memory pointer. The signing\n        // hash is computed from `\"\\x19\\x01\" || domainSeparator || structHash`.\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory>\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            mstore(freeMemoryPointer, \"\\x19\\x01\")\n            mstore(add(freeMemoryPointer, 2), domainSeparator)\n            mstore(add(freeMemoryPointer, 34), structHash)\n            orderDigest := keccak256(freeMemoryPointer, 66)\n        }\n    }\n\n    /// @dev Packs order UID parameters into the specified memory location. The\n    /// result is equivalent to `abi.encodePacked(...)` with the difference that\n    /// it allows re-using the memory for packing the order UID.\n    ///\n    /// This function reverts if the order UID buffer is not the correct size.\n    ///\n    /// @param orderUid The buffer pack the order UID parameters into.\n    /// @param orderDigest The EIP-712 struct digest derived from the order\n    /// parameters.\n    /// @param owner The address of the user who owns this order.\n    /// @param validTo The epoch time at which the order will stop being valid.\n    function packOrderUidParams(\n        bytes memory orderUid,\n        bytes32 orderDigest,\n        address owner,\n        uint32 validTo\n    ) internal pure {\n        require(orderUid.length == UID_LENGTH, \"GPv2: uid buffer overflow\");\n\n        // NOTE: Write the order UID to the allocated memory buffer. The order\n        // parameters are written to memory in **reverse order** as memory\n        // operations write 32-bytes at a time and we want to use a packed\n        // encoding. This means, for example, that after writing the value of\n        // `owner` to bytes `20:52`, writing the `orderDigest` to bytes `0:32`\n        // will **overwrite** bytes `20:32`. This is desirable as addresses are\n        // only 20 bytes and `20:32` should be `0`s:\n        //\n        //        |           1111111111222222222233333333334444444444555555\n        //   byte | 01234567890123456789012345678901234567890123456789012345\n        // -------+---------------------------------------------------------\n        //  field | [.........orderDigest..........][......owner.......][vT]\n        // -------+---------------------------------------------------------\n        // mstore |                         [000000000000000000000000000.vT]\n        //        |                     [00000000000.......owner.......]\n        //        | [.........orderDigest..........]\n        //\n        // Additionally, since Solidity `bytes memory` are length prefixed,\n        // 32 needs to be added to all the offsets.\n        //\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(add(orderUid, 56), validTo)\n            mstore(add(orderUid, 52), owner)\n            mstore(add(orderUid, 32), orderDigest)\n        }\n    }\n\n    /// @dev Extracts specific order information from the standardized unique\n    /// order id of the protocol.\n    ///\n    /// @param orderUid The unique identifier used to represent an order in\n    /// the protocol. This uid is the packed concatenation of the order digest,\n    /// the validTo order parameter and the address of the user who created the\n    /// order. It is used by the user to interface with the contract directly,\n    /// and not by calls that are triggered by the solvers.\n    /// @return orderDigest The EIP-712 signing digest derived from the order\n    /// parameters.\n    /// @return owner The address of the user who owns this order.\n    /// @return validTo The epoch time at which the order will stop being valid.\n    function extractOrderUidParams(bytes calldata orderUid)\n        internal\n        pure\n        returns (\n            bytes32 orderDigest,\n            address owner,\n            uint32 validTo\n        )\n    {\n        require(orderUid.length == UID_LENGTH, \"GPv2: invalid uid\");\n\n        // Use assembly to efficiently decode packed calldata.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            orderDigest := calldataload(orderUid.offset)\n            owner := shr(96, calldataload(add(orderUid.offset, 32)))\n            validTo := shr(224, calldataload(add(orderUid.offset, 52)))\n        }\n    }\n}\n"
    },
    "contracts/vaults/UniV3VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IUniV3VaultGovernance.sol\";\nimport \"../interfaces/vaults/IUniV3Vault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Governance that manages all UniV3 Vaults params and can deploy a new UniV3 Vault.\ncontract UniV3VaultGovernance is ContractMeta, IUniV3VaultGovernance, VaultGovernance {\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    /// @param delayedProtocolParams_ Initial Protocol Params\n    constructor(InternalParams memory internalParams_, DelayedProtocolParams memory delayedProtocolParams_)\n        VaultGovernance(internalParams_)\n    {\n        require(address(delayedProtocolParams_.positionManager) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(delayedProtocolParams_.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        // params are initialized in constructor, so cannot be 0\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return\n                DelayedProtocolParams({\n                    positionManager: INonfungiblePositionManager(address(0)),\n                    oracle: IOracle(address(0))\n                });\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IUniV3VaultGovernance).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\n        require(address(params.positionManager) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(params.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    /// @inheritdoc IUniV3VaultGovernance\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        uint24 fee_,\n        address uniV3Helper_\n    ) external returns (IUniV3Vault vault, uint256 nft) {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IUniV3Vault(vaddr);\n        vault.initialize(nft, vaultTokens_, fee_, uniV3Helper_);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, abi.encode(fee_), owner_, vaddr, nft);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV3VaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/strategies/LStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../interfaces/vaults/IUniV3Vault.sol\";\nimport \"../interfaces/oracles/IOracle.sol\";\nimport \"../interfaces/utils/ILStrategyHelper.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/external/GPv2Order.sol\";\nimport \"../utils/DefaultAccessControl.sol\";\n\ncontract LStrategy is DefaultAccessControl {\n    using SafeERC20 for IERC20;\n\n    // IMMUTABLES\n    uint256 public constant DENOMINATOR = 10**9;\n    bytes4 public constant SET_PRESIGNATURE_SELECTOR = 0xec6cb13f;\n    bytes4 public constant APPROVE_SELECTOR = 0x095ea7b3;\n    address[] public tokens;\n    IERC20Vault public immutable erc20Vault;\n    INonfungiblePositionManager public immutable positionManager;\n    ILStrategyHelper public immutable orderHelper;\n    uint24 public immutable poolFee;\n    address public immutable cowswapSettlement;\n    address public immutable cowswapVaultRelayer;\n    uint16 public immutable intervalWidthInTicks;\n\n    // INTERNAL STATE\n\n    IUniV3Vault public lowerVault;\n    IUniV3Vault public upperVault;\n    uint256 public lastRebalanceERC20UniV3VaultsTimestamp;\n    uint256 public lastRebalanceUniV3VaultsTimestamp;\n    uint256 public orderDeadline;\n    uint256[] internal _pullExistentials;\n\n    // MUTABLE PARAMS\n\n    struct TradingParams {\n        IOracle oracle;\n        uint32 maxSlippageD;\n        uint32 orderDeadline;\n        uint256 oracleSafetyMask;\n        uint256 maxFee0;\n        uint256 maxFee1;\n    }\n\n    struct RatioParams {\n        uint32 erc20UniV3CapitalRatioD;\n        uint32 erc20TokenRatioD;\n        uint32 minErc20UniV3CapitalRatioDeviationD;\n        uint32 minErc20TokenRatioDeviationD;\n        uint32 minUniV3LiquidityRatioDeviationD;\n    }\n\n    struct OtherParams {\n        uint256 minToken0ForOpening;\n        uint256 minToken1ForOpening;\n        uint256 secondsBetweenRebalances;\n    }\n\n    struct PreOrder {\n        address tokenIn;\n        address tokenOut;\n        uint64 deadline;\n        uint256 amountIn;\n        uint256 minAmountOut;\n    }\n\n    struct LiquidityParams {\n        uint128 targetUniV3LiquidityRatioD;\n        bool isNegativeLiquidityRatio;\n    }\n\n    TradingParams public tradingParams;\n    RatioParams public ratioParams;\n    OtherParams public otherParams;\n    PreOrder public preOrder;\n\n    // @notice Constructor for a new contract\n    // @param positionManager_ Reference to UniswapV3 positionManager\n    // @param erc20vault_ Reference to ERC20 Vault\n    // @param vault1_ Reference to Uniswap V3 Vault 1\n    // @param vault2_ Reference to Uniswap V3 Vault 2\n    constructor(\n        INonfungiblePositionManager positionManager_,\n        address cowswapSettlement_,\n        address cowswapVaultRelayer_,\n        IERC20Vault erc20vault_,\n        IUniV3Vault vault1_,\n        IUniV3Vault vault2_,\n        ILStrategyHelper orderHelper_,\n        address admin_,\n        uint16 intervalWidthInTicks_\n    ) DefaultAccessControl(admin_) {\n        require(\n            (address(positionManager_) != address(0)) &&\n                (address(orderHelper_) != address(0)) &&\n                (address(vault1_) != address(0)) &&\n                (address(vault2_) != address(0)) &&\n                (address(erc20vault_) != address(0)) &&\n                (cowswapVaultRelayer_ != address(0)) &&\n                (cowswapSettlement_ != address(0)),\n            ExceptionsLibrary.ADDRESS_ZERO\n        );\n\n        require(intervalWidthInTicks_ > 0, ExceptionsLibrary.VALUE_ZERO);\n\n        positionManager = positionManager_;\n        erc20Vault = erc20vault_;\n        lowerVault = vault1_;\n        upperVault = vault2_;\n        tokens = vault1_.vaultTokens();\n        poolFee = vault1_.pool().fee();\n        _pullExistentials = vault1_.pullExistentials();\n        cowswapSettlement = cowswapSettlement_;\n        cowswapVaultRelayer = cowswapVaultRelayer_;\n        orderHelper = orderHelper_;\n        intervalWidthInTicks = intervalWidthInTicks_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Target price based on mutable params, as a Q64.96 value\n    function getTargetPriceX96(\n        address token0,\n        address token1,\n        TradingParams memory tradingParams_\n    ) public view returns (uint256 priceX96) {\n        (uint256[] memory pricesX96, ) = tradingParams_.oracle.priceX96(\n            token0,\n            token1,\n            tradingParams_.oracleSafetyMask\n        );\n        require(pricesX96.length > 0, ExceptionsLibrary.INVALID_LENGTH);\n        for (uint256 i = 0; i < pricesX96.length; i++) {\n            priceX96 += pricesX96[i];\n        }\n        priceX96 /= pricesX96.length;\n    }\n\n    /// @notice Target liquidity ratio for UniV3 vaults\n    function targetUniV3LiquidityRatio(int24 targetTick_)\n        public\n        view\n        returns (uint128 liquidityRatioD, bool isNegative)\n    {\n        (int24 tickLower, int24 tickUpper, ) = _getVaultStats(lowerVault);\n        int24 midTick = (tickUpper + tickLower) / 2;\n        isNegative = midTick > targetTick_;\n        if (isNegative) {\n            liquidityRatioD = uint128(uint24(midTick - targetTick_));\n        } else {\n            liquidityRatioD = uint128(uint24(targetTick_ - midTick));\n        }\n        liquidityRatioD = uint128(liquidityRatioD * DENOMINATOR) / uint128(uint24(tickUpper - tickLower) / 2);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Make a rebalance between ERC20 and UniV3 Vaults\n    /// @param minLowerVaultTokens Min accepted tokenAmounts for lower vault\n    /// @param minUpperVaultTokens Min accepted tokenAmounts for upper vault\n    /// @param deadline Timestamp after which the transaction reverts\n    /// @return totalPulledAmounts total amounts pulled from erc20 vault or Uni vaults\n    /// @return isNegativeCapitalDelta `true` if rebalance if from UniVaults, false otherwise\n    /// @return percentageIncreaseD the percentage of capital change of UniV3 vaults\n    function rebalanceERC20UniV3Vaults(\n        uint256[] memory minLowerVaultTokens,\n        uint256[] memory minUpperVaultTokens,\n        uint256 deadline\n    )\n        public\n        returns (\n            uint256[] memory totalPulledAmounts,\n            bool isNegativeCapitalDelta,\n            uint256 percentageIncreaseD\n        )\n    {\n        _requireAtLeastOperator();\n        require(\n            block.timestamp >= lastRebalanceERC20UniV3VaultsTimestamp + otherParams.secondsBetweenRebalances,\n            ExceptionsLibrary.TIMESTAMP\n        );\n        lastRebalanceERC20UniV3VaultsTimestamp = block.timestamp;\n        uint256[] memory lowerTokenAmounts;\n        uint256[] memory upperTokenAmounts;\n        uint128 lowerVaultLiquidity;\n        uint128 upperVaultLiquidity;\n\n        totalPulledAmounts = new uint256[](2);\n\n        {\n            uint256 priceX96 = getTargetPriceX96(tokens[0], tokens[1], tradingParams);\n            uint256 sumUniV3Capital = _getCapital(priceX96, lowerVault) + _getCapital(priceX96, upperVault);\n\n            if (sumUniV3Capital == 0) {\n                bytes memory options = _makeUniswapVaultOptions(new uint256[](2), deadline);\n\n                erc20Vault.pull(address(lowerVault), tokens, _pullExistentials, options);\n\n                erc20Vault.pull(address(upperVault), tokens, _pullExistentials, options);\n\n                sumUniV3Capital = _getCapital(priceX96, lowerVault) + _getCapital(priceX96, upperVault);\n            }\n\n            uint256 erc20VaultCapital = _getCapital(priceX96, erc20Vault);\n            uint256 capitalDelta;\n\n            (capitalDelta, isNegativeCapitalDelta) = _liquidityDelta(\n                erc20VaultCapital,\n                sumUniV3Capital,\n                ratioParams.erc20UniV3CapitalRatioD,\n                ratioParams.minErc20UniV3CapitalRatioDeviationD\n            );\n            if (capitalDelta == 0) {\n                return (new uint256[](2), false, 0);\n            }\n\n            percentageIncreaseD = FullMath.mulDiv(DENOMINATOR, capitalDelta, sumUniV3Capital);\n            (, , lowerVaultLiquidity) = _getVaultStats(lowerVault);\n            (, , upperVaultLiquidity) = _getVaultStats(upperVault);\n            lowerTokenAmounts = lowerVault.liquidityToTokenAmounts(\n                uint128(FullMath.mulDiv(percentageIncreaseD, lowerVaultLiquidity, DENOMINATOR))\n            );\n            upperTokenAmounts = upperVault.liquidityToTokenAmounts(\n                uint128(FullMath.mulDiv(percentageIncreaseD, upperVaultLiquidity, DENOMINATOR))\n            );\n        }\n\n        if (!isNegativeCapitalDelta) {\n            if (lowerVaultLiquidity > 0) {\n                totalPulledAmounts = erc20Vault.pull(\n                    address(lowerVault),\n                    tokens,\n                    lowerTokenAmounts,\n                    _makeUniswapVaultOptions(minLowerVaultTokens, deadline)\n                );\n            }\n            if (upperVaultLiquidity > 0) {\n                uint256[] memory pulledAmounts = erc20Vault.pull(\n                    address(upperVault),\n                    tokens,\n                    upperTokenAmounts,\n                    _makeUniswapVaultOptions(minUpperVaultTokens, deadline)\n                );\n                for (uint256 i = 0; i < 2; i++) {\n                    totalPulledAmounts[i] += pulledAmounts[i];\n                }\n            }\n        } else {\n            totalPulledAmounts = lowerVault.pull(\n                address(erc20Vault),\n                tokens,\n                lowerTokenAmounts,\n                _makeUniswapVaultOptions(minLowerVaultTokens, deadline)\n            );\n            uint256[] memory pulledAmounts = upperVault.pull(\n                address(erc20Vault),\n                tokens,\n                upperTokenAmounts,\n                _makeUniswapVaultOptions(minUpperVaultTokens, deadline)\n            );\n            for (uint256 i = 0; i < 2; i++) {\n                totalPulledAmounts[i] += pulledAmounts[i];\n            }\n        }\n        emit RebalancedErc20UniV3(tx.origin, msg.sender, !isNegativeCapitalDelta, totalPulledAmounts);\n    }\n\n    /// @notice Make a rebalance of UniV3 vaults\n    /// @param minWithdrawTokens Min accepted tokenAmounts for withdrawal\n    /// @param minDepositTokens Min accepted tokenAmounts for deposit\n    /// @param deadline Timestamp after which the transaction reverts\n    /// @return pulledAmounts Amounts pulled from one vault\n    /// @return pushedAmounts Amounts pushed to the other vault\n    /// @return depositLiquidity Amount of liquidity deposited to vault\n    /// @return withdrawLiquidity Amount of liquidity withdrawn from vault\n    /// @return lowerToUpper true if liquidity is moved from lower vault to upper\n    function rebalanceUniV3Vaults(\n        uint256[] memory minWithdrawTokens,\n        uint256[] memory minDepositTokens,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256[] memory pulledAmounts,\n            uint256[] memory pushedAmounts,\n            uint128 depositLiquidity,\n            uint128 withdrawLiquidity,\n            bool lowerToUpper\n        )\n    {\n        _requireAtLeastOperator();\n        require(\n            block.timestamp >= lastRebalanceUniV3VaultsTimestamp + otherParams.secondsBetweenRebalances,\n            ExceptionsLibrary.TIMESTAMP\n        );\n        lastRebalanceUniV3VaultsTimestamp = block.timestamp;\n        LiquidityParams memory liquidityParams;\n\n        {\n            uint256 targetPriceX96 = getTargetPriceX96(tokens[0], tokens[1], tradingParams);\n            int24 targetTick = _tickFromPriceX96(targetPriceX96);\n            (\n                liquidityParams.targetUniV3LiquidityRatioD,\n                liquidityParams.isNegativeLiquidityRatio\n            ) = targetUniV3LiquidityRatio(targetTick);\n            // we crossed the interval right to left\n            if (liquidityParams.isNegativeLiquidityRatio) {\n                (, , uint128 liquidity) = _getVaultStats(upperVault);\n                if (liquidity > 0) {\n                    // pull all liquidity to other vault\n                    (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity) = _rebalanceUniV3Liquidity(\n                        upperVault,\n                        lowerVault,\n                        type(uint128).max,\n                        minWithdrawTokens,\n                        minDepositTokens,\n                        deadline\n                    );\n                    return (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity, lowerToUpper);\n                } else {\n                    _swapVaults(false, deadline);\n                    return (new uint256[](2), new uint256[](2), 0, 0, false);\n                }\n            }\n            // we crossed the interval left to right\n            if (liquidityParams.targetUniV3LiquidityRatioD > DENOMINATOR) {\n                lowerToUpper = true;\n                (, , uint128 liquidity) = _getVaultStats(lowerVault);\n                if (liquidity > 0) {\n                    (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity) = _rebalanceUniV3Liquidity(\n                        lowerVault,\n                        upperVault,\n                        type(uint128).max,\n                        minWithdrawTokens,\n                        minDepositTokens,\n                        deadline\n                    );\n                    return (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity, lowerToUpper);\n                } else {\n                    _swapVaults(true, deadline);\n                    return (new uint256[](2), new uint256[](2), 0, 0, true);\n                }\n            }\n        }\n        uint256 liquidityDelta;\n        IUniV3Vault fromVault;\n        IUniV3Vault toVault;\n\n        {\n            bool isNegativeLiquidityDelta;\n            (, , uint128 lowerLiquidity) = _getVaultStats(lowerVault);\n            (, , uint128 upperLiquidity) = _getVaultStats(upperVault);\n            (liquidityDelta, isNegativeLiquidityDelta) = _liquidityDelta(\n                lowerLiquidity,\n                upperLiquidity,\n                DENOMINATOR - liquidityParams.targetUniV3LiquidityRatioD,\n                ratioParams.minUniV3LiquidityRatioDeviationD\n            );\n            if (isNegativeLiquidityDelta) {\n                fromVault = upperVault;\n                toVault = lowerVault;\n            } else {\n                lowerToUpper = true;\n                fromVault = lowerVault;\n                toVault = upperVault;\n            }\n        }\n        (pulledAmounts, pushedAmounts, depositLiquidity, withdrawLiquidity) = _rebalanceUniV3Liquidity(\n            fromVault,\n            toVault,\n            uint128(liquidityDelta),\n            minWithdrawTokens,\n            minDepositTokens,\n            deadline\n        );\n    }\n\n    /// @notice Post preorder for ERC20 vault rebalance.\n    /// @param minAmountOut minimum amount out of tokens to swap\n    /// @return preOrder_ Posted preorder\n    function postPreOrder(uint256 minAmountOut) external returns (PreOrder memory preOrder_) {\n        _requireAtLeastOperator();\n        require(block.timestamp > orderDeadline, ExceptionsLibrary.TIMESTAMP);\n        (uint256[] memory tvl, ) = erc20Vault.tvl();\n        uint256 priceX96 = getTargetPriceX96(tokens[0], tokens[1], tradingParams);\n        (uint256 tokenDelta, bool isNegative) = _liquidityDelta(\n            FullMath.mulDiv(tvl[0], priceX96, CommonLibrary.Q96),\n            tvl[1],\n            ratioParams.erc20TokenRatioD,\n            ratioParams.minErc20TokenRatioDeviationD\n        );\n        TradingParams memory tradingParams_ = tradingParams;\n\n        uint256 isNegativeInt = isNegative ? 1 : 0;\n        uint256[2] memory tokenValuesToTransfer = [\n            FullMath.mulDiv(tokenDelta, CommonLibrary.Q96, priceX96),\n            tokenDelta\n        ];\n        uint256 amountOut = FullMath.mulDiv(\n            tokenValuesToTransfer[1 ^ isNegativeInt],\n            DENOMINATOR - tradingParams_.maxSlippageD,\n            DENOMINATOR\n        );\n        amountOut = amountOut > minAmountOut ? amountOut : minAmountOut;\n        preOrder_ = PreOrder({\n            tokenIn: tokens[isNegativeInt],\n            tokenOut: tokens[1 ^ isNegativeInt],\n            deadline: uint64(block.timestamp + tradingParams_.orderDeadline),\n            amountIn: tokenValuesToTransfer[isNegativeInt],\n            minAmountOut: amountOut\n        });\n\n        preOrder = preOrder_;\n        emit PreOrderPosted(tx.origin, msg.sender, preOrder_);\n    }\n\n    /// @notice Sign offchain cowswap order onchain\n    /// @param order Cowswap order data\n    /// @param uuid Cowswap order id\n    /// @param signed To sign order set to `true`\n    function signOrder(\n        GPv2Order.Data memory order,\n        bytes calldata uuid,\n        bool signed\n    ) external {\n        _requireAtLeastOperator();\n        if (signed) {\n            address sellToken = address(order.sellToken);\n            orderHelper.checkOrder(\n                order,\n                uuid,\n                preOrder.tokenIn,\n                preOrder.tokenOut,\n                preOrder.amountIn,\n                preOrder.minAmountOut,\n                preOrder.deadline,\n                address(erc20Vault),\n                (sellToken == tokens[0] ? tradingParams.maxFee0 : tradingParams.maxFee1)\n            );\n            erc20Vault.externalCall(\n                address(order.sellToken),\n                APPROVE_SELECTOR,\n                abi.encode(cowswapVaultRelayer, order.sellAmount + order.feeAmount)\n            );\n            erc20Vault.externalCall(cowswapSettlement, SET_PRESIGNATURE_SELECTOR, abi.encode(uuid, signed));\n            orderDeadline = order.validTo;\n            delete preOrder;\n            emit OrderSigned(tx.origin, msg.sender, uuid, order, preOrder, signed);\n        } else {\n            erc20Vault.externalCall(cowswapSettlement, SET_PRESIGNATURE_SELECTOR, abi.encode(uuid, false));\n        }\n    }\n\n    /// @notice Reset cowswap allowance to 0\n    /// @param tokenNumber The number of token in LStrategy\n    function resetCowswapAllowance(uint8 tokenNumber) external {\n        _requireAtLeastOperator();\n        bytes memory approveData = abi.encode(cowswapVaultRelayer, uint256(0));\n        erc20Vault.externalCall(tokens[tokenNumber], APPROVE_SELECTOR, approveData);\n        emit CowswapAllowanceReset(tx.origin, msg.sender);\n    }\n\n    /// @notice Collect Uniswap pool fees to erc20 vault\n    /// @return totalCollectedEarnings Total collected fees\n    function collectUniFees() external returns (uint256[] memory totalCollectedEarnings) {\n        _requireAtLeastOperator();\n        totalCollectedEarnings = new uint256[](2);\n        uint256[] memory collectedEarnings = new uint256[](2);\n        totalCollectedEarnings = lowerVault.collectEarnings();\n        collectedEarnings = upperVault.collectEarnings();\n        for (uint256 i = 0; i < 2; i++) {\n            totalCollectedEarnings[i] += collectedEarnings[i];\n        }\n        emit FeesCollected(tx.origin, msg.sender, totalCollectedEarnings);\n    }\n\n    /// @notice Manually pull tokens from fromVault to toVault\n    /// @param fromVault Pull tokens from this vault\n    /// @param toVault Pull tokens to this vault\n    /// @param tokenAmounts Token amounts to pull\n    /// @param minTokensAmounts Minimal token amounts to pull\n    /// @param deadline Timestamp after which the transaction is invalid\n    function manualPull(\n        IIntegrationVault fromVault,\n        IIntegrationVault toVault,\n        uint256[] memory tokenAmounts,\n        uint256[] memory minTokensAmounts,\n        uint256 deadline\n    ) external returns (uint256[] memory actualTokenAmounts) {\n        _requireAdmin();\n        actualTokenAmounts = fromVault.pull(\n            address(toVault),\n            tokens,\n            tokenAmounts,\n            _makeUniswapVaultOptions(minTokensAmounts, deadline)\n        );\n        emit ManualPull(tx.origin, msg.sender, tokenAmounts, actualTokenAmounts);\n    }\n\n    /// @notice Sets new trading params\n    /// @param newTradingParams New trading parameters to set\n    function updateTradingParams(TradingParams calldata newTradingParams) external {\n        _requireAdmin();\n        require(\n            (newTradingParams.maxSlippageD <= DENOMINATOR) &&\n                (newTradingParams.orderDeadline <= 86400 * 30) &&\n                (newTradingParams.oracleSafetyMask > 3),\n            ExceptionsLibrary.INVARIANT\n        );\n        require(address(newTradingParams.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        tradingParams = newTradingParams;\n        emit TradingParamsUpdated(tx.origin, msg.sender, tradingParams);\n    }\n\n    /// @notice Sets new ratio params\n    /// @param newRatioParams New ratio parameters to set\n    function updateRatioParams(RatioParams calldata newRatioParams) external {\n        _requireAdmin();\n        require(\n            (newRatioParams.erc20UniV3CapitalRatioD <= DENOMINATOR) &&\n                (newRatioParams.erc20TokenRatioD <= DENOMINATOR) &&\n                (newRatioParams.minErc20UniV3CapitalRatioDeviationD <= DENOMINATOR) &&\n                (newRatioParams.minErc20TokenRatioDeviationD <= DENOMINATOR) &&\n                (newRatioParams.minUniV3LiquidityRatioDeviationD <= DENOMINATOR),\n            ExceptionsLibrary.INVARIANT\n        );\n        ratioParams = newRatioParams;\n        emit RatioParamsUpdated(tx.origin, msg.sender, ratioParams);\n    }\n\n    /// @notice Sets new other params\n    /// @param newOtherParams New other parameters to set\n    function updateOtherParams(OtherParams calldata newOtherParams) external {\n        _requireAdmin();\n        require(\n            (newOtherParams.minToken0ForOpening > 0) &&\n                (newOtherParams.minToken1ForOpening > 0) &&\n                (newOtherParams.minToken0ForOpening <= 1000000000) &&\n                (newOtherParams.minToken1ForOpening <= 1000000000) &&\n                (newOtherParams.secondsBetweenRebalances <= 86400 * 30),\n            ExceptionsLibrary.INVARIANT\n        );\n        otherParams = newOtherParams;\n        emit OtherParamsUpdated(tx.origin, msg.sender, otherParams);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    /// @notice Calculate a pure (not Uniswap) liquidity\n    /// @param priceX96 Current price y / x\n    /// @param vault Vault for liquidity calculation\n    /// @return Capital = x * p + y\n    function _getCapital(uint256 priceX96, IVault vault) internal view returns (uint256) {\n        (uint256[] memory minTvl, uint256[] memory maxTvl) = vault.tvl();\n        return FullMath.mulDiv((minTvl[0] + maxTvl[0]) / 2, priceX96, CommonLibrary.Q96) + (minTvl[1] + maxTvl[1]) / 2;\n    }\n\n    /// @notice Target tick based on mutable params\n    function _tickFromPriceX96(uint256 priceX96) internal view returns (int24) {\n        return orderHelper.tickFromPriceX96(priceX96);\n    }\n\n    /// @notice The vault to get stats from\n    /// @return tickLower Lower tick for the uniV3 poistion inside the vault\n    /// @return tickUpper Upper tick for the uniV3 poistion inside the vault\n    /// @return liquidity Vault liquidity\n    function _getVaultStats(IUniV3Vault vault)\n        internal\n        view\n        returns (\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity\n        )\n    {\n        (, , , , , tickLower, tickUpper, liquidity, , , , ) = positionManager.positions(vault.uniV3Nft());\n    }\n\n    /// @notice Liquidity required to be sold to reach targetLiquidityRatioD\n    /// @param lowerLiquidity Lower vault liquidity\n    /// @param upperLiquidity Upper vault liquidity\n    /// @param targetLiquidityRatioD Target liquidity ratio (multiplied by DENOMINATOR)\n    /// @param minDeviation Minimum allowed deviation between current and target liquidities (if the real is less, zero liquidity delta returned)\n    /// @return delta Liquidity required to be sold from LowerVault (if isNegative is true) of to be bought to LowerVault (if isNegative is false) to reach targetLiquidityRatioD\n    /// @return isNegative If `true` then delta needs to be bought to reach targetLiquidityRatioD, o/w needs to be sold\n    function _liquidityDelta(\n        uint256 lowerLiquidity,\n        uint256 upperLiquidity,\n        uint256 targetLiquidityRatioD,\n        uint256 minDeviation\n    ) internal pure returns (uint256 delta, bool isNegative) {\n        uint256 targetLowerLiquidity = FullMath.mulDiv(\n            targetLiquidityRatioD,\n            lowerLiquidity + upperLiquidity,\n            DENOMINATOR\n        );\n        if (minDeviation > 0) {\n            uint256 liquidityRatioD = FullMath.mulDiv(lowerLiquidity, DENOMINATOR, lowerLiquidity + upperLiquidity);\n            uint256 deviation = targetLiquidityRatioD > liquidityRatioD\n                ? targetLiquidityRatioD - liquidityRatioD\n                : liquidityRatioD - targetLiquidityRatioD;\n            if (deviation < minDeviation) {\n                return (0, false);\n            }\n        }\n        if (targetLowerLiquidity > lowerLiquidity) {\n            isNegative = true;\n            delta = targetLowerLiquidity - lowerLiquidity;\n        } else {\n            isNegative = false;\n            delta = lowerLiquidity - targetLowerLiquidity;\n        }\n    }\n\n    /// @notice Covert token amounts and deadline to byte options\n    /// @dev Empty tokenAmounts are equivalent to zero tokenAmounts\n    function _makeUniswapVaultOptions(uint256[] memory tokenAmounts, uint256 deadline)\n        internal\n        pure\n        returns (bytes memory options)\n    {\n        options = new bytes(0x60);\n        assembly {\n            mstore(add(options, 0x60), deadline)\n        }\n        if (tokenAmounts.length == 2) {\n            uint256 tokenAmount0 = tokenAmounts[0];\n            uint256 tokenAmount1 = tokenAmounts[1];\n            assembly {\n                mstore(add(options, 0x20), tokenAmount0)\n                mstore(add(options, 0x40), tokenAmount1)\n            }\n        }\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    /// @notice Pull liquidity from `fromVault` and put into `toVault`\n    /// @param fromVault The vault to pull liquidity from\n    /// @param toVault The vault to pull liquidity to\n    /// @param desiredLiquidity The amount of liquidity desired for rebalance. This could be cut to available erc20 vault balance and available uniV3 vault liquidity.\n    /// @param minWithdrawTokens Min accepted tokenAmounts for withdrawal\n    /// @param minDepositTokens Min accepted tokenAmounts for deposit\n    /// @param deadline Timestamp after which the transaction reverts\n    /// @return pulledAmounts amounts pulled from fromVault\n    /// @return pushedAmounts amounts pushed to toVault\n    function _rebalanceUniV3Liquidity(\n        IUniV3Vault fromVault,\n        IUniV3Vault toVault,\n        uint128 desiredLiquidity,\n        uint256[] memory minWithdrawTokens,\n        uint256[] memory minDepositTokens,\n        uint256 deadline\n    )\n        internal\n        returns (\n            uint256[] memory pulledAmounts,\n            uint256[] memory pushedAmounts,\n            uint128 liquidity,\n            uint128 withdrawLiquidity\n        )\n    {\n        if (desiredLiquidity == 0) {\n            return (new uint256[](2), new uint256[](2), 0, 0);\n        }\n        liquidity = desiredLiquidity;\n\n        // Cut for available liquidity in the vault\n        {\n            (, , uint128 fromVaultLiquidity) = _getVaultStats(fromVault);\n            liquidity = fromVaultLiquidity > liquidity ? liquidity : fromVaultLiquidity;\n        }\n\n        //--- Cut rebalance to available token balances on ERC20 Vault\n        // The rough idea is to translate one unit of liquituty into tokens for each interval shouldDepositTokenAmountsD, shouldWithdrawTokenAmountsD\n        // Then the actual tokens in the vault are shouldDepositTokenAmountsD * l, shouldWithdrawTokenAmountsD * l\n        // So the equation could be built: erc20 balances + l * shouldWithdrawTokenAmountsD >= l * shouldDepositTokenAmountsD and l tweaked so this inequality holds\n        {\n            (uint256[] memory availableBalances, ) = erc20Vault.tvl();\n            uint256[] memory shouldDepositTokenAmountsD = toVault.liquidityToTokenAmounts(uint128(DENOMINATOR));\n            uint256[] memory shouldWithdrawTokenAmountsD = fromVault.liquidityToTokenAmounts(uint128(DENOMINATOR));\n            for (uint256 i = 0; i < 2; i++) {\n                uint256 availableBalance = availableBalances[i] +\n                    FullMath.mulDiv(shouldWithdrawTokenAmountsD[i], liquidity, DENOMINATOR);\n                uint256 requiredBalance = FullMath.mulDiv(shouldDepositTokenAmountsD[i], liquidity, DENOMINATOR);\n                if (availableBalance < requiredBalance) {\n                    // since balances >= 0, this case means that shouldWithdrawTokenAmountsD < shouldDepositTokenAmountsD\n                    // this also means that liquidity on the line below will decrease compared to the liqiduity above\n                    uint128 potentialLiquidity = uint128(\n                        FullMath.mulDiv(\n                            availableBalances[i],\n                            DENOMINATOR,\n                            shouldDepositTokenAmountsD[i] - shouldWithdrawTokenAmountsD[i]\n                        )\n                    );\n                    liquidity = potentialLiquidity < liquidity ? potentialLiquidity : liquidity;\n                }\n            }\n        }\n        //--- End cut\n        {\n            withdrawLiquidity = desiredLiquidity == type(uint128).max ? desiredLiquidity : liquidity;\n            uint256[] memory depositTokenAmounts = toVault.liquidityToTokenAmounts(liquidity);\n            uint256[] memory withdrawTokenAmounts = fromVault.liquidityToTokenAmounts(withdrawLiquidity);\n            pulledAmounts = fromVault.pull(\n                address(erc20Vault),\n                tokens,\n                withdrawTokenAmounts,\n                _makeUniswapVaultOptions(minWithdrawTokens, deadline)\n            );\n            // The pull is on best effort so we don't worry on overflow\n            pushedAmounts = erc20Vault.pull(\n                address(toVault),\n                tokens,\n                depositTokenAmounts,\n                _makeUniswapVaultOptions(minDepositTokens, deadline)\n            );\n        }\n        emit RebalancedUniV3(\n            tx.origin,\n            msg.sender,\n            address(fromVault),\n            address(toVault),\n            pulledAmounts,\n            pushedAmounts,\n            desiredLiquidity,\n            liquidity\n        );\n    }\n\n    /// @notice Closes position with zero liquidity and creates a new one.\n    /// @dev This happens when the price croses \"zero\" point and a new interval must be created while old one is close\n    /// @param positiveTickGrowth `true` if price tick increased\n    /// @param deadline Deadline for Uniswap V3 operations\n    function _swapVaults(bool positiveTickGrowth, uint256 deadline) internal {\n        IUniV3Vault fromVault;\n        IUniV3Vault toVault;\n        if (!positiveTickGrowth) {\n            (fromVault, toVault) = (upperVault, lowerVault);\n        } else {\n            (fromVault, toVault) = (lowerVault, upperVault);\n        }\n        uint256 fromNft = fromVault.uniV3Nft();\n        uint256 toNft = toVault.uniV3Nft();\n\n        {\n            fromVault.collectEarnings();\n            (, , , , , , , uint128 fromLiquidity, , , , ) = positionManager.positions(fromNft);\n            require(fromLiquidity == 0, ExceptionsLibrary.INVARIANT);\n        }\n\n        (, , , , , int24 toTickLower, int24 toTickUpper, , , , , ) = positionManager.positions(toNft);\n        int24 newTickLower;\n        int24 newTickUpper;\n        if (positiveTickGrowth) {\n            newTickLower = (toTickLower + toTickUpper) / 2;\n            newTickUpper = newTickLower + int24(uint24(intervalWidthInTicks));\n        } else {\n            newTickUpper = (toTickLower + toTickUpper) / 2;\n            newTickLower = newTickUpper - int24(uint24(intervalWidthInTicks));\n        }\n\n        uint256 newNft = _mintNewNft(newTickLower, newTickUpper, deadline);\n        positionManager.safeTransferFrom(address(this), address(fromVault), newNft);\n        positionManager.burn(fromNft);\n\n        (lowerVault, upperVault) = (upperVault, lowerVault);\n\n        emit SwapVault(fromNft, newNft, newTickLower, newTickUpper);\n    }\n\n    /// @notice Mints new Nft in Uniswap V3 positionManager\n    /// @param lowerTick Lower tick of the Uni interval\n    /// @param upperTick Upper tick of the Uni interval\n    /// @param deadline Timestamp after which the transaction will be reverted\n    function _mintNewNft(\n        int24 lowerTick,\n        int24 upperTick,\n        uint256 deadline\n    ) internal returns (uint256 newNft) {\n        uint256 minToken0ForOpening = otherParams.minToken0ForOpening;\n        uint256 minToken1ForOpening = otherParams.minToken1ForOpening;\n        IERC20(tokens[0]).safeApprove(address(positionManager), minToken0ForOpening);\n        IERC20(tokens[1]).safeApprove(address(positionManager), minToken1ForOpening);\n        (newNft, , , ) = positionManager.mint(\n            INonfungiblePositionManager.MintParams({\n                token0: tokens[0],\n                token1: tokens[1],\n                fee: poolFee,\n                tickLower: lowerTick,\n                tickUpper: upperTick,\n                amount0Desired: minToken0ForOpening,\n                amount1Desired: minToken1ForOpening,\n                amount0Min: 0,\n                amount1Min: 0,\n                recipient: address(this),\n                deadline: deadline\n            })\n        );\n        IERC20(tokens[0]).safeApprove(address(positionManager), 0);\n        IERC20(tokens[1]).safeApprove(address(positionManager), 0);\n    }\n\n    /// @notice Emitted when a new cowswap preOrder is posted.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param preOrder Preorder that was posted\n    event PreOrderPosted(address indexed origin, address indexed sender, PreOrder preOrder);\n\n    /// @notice Emitted when cowswap preOrder was signed onchain.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param order Cowswap order\n    /// @param preOrder PreOrder that the order fulfills\n    /// @param signed Singned or unsigned\n    event OrderSigned(\n        address indexed origin,\n        address indexed sender,\n        bytes uuid,\n        GPv2Order.Data order,\n        PreOrder preOrder,\n        bool signed\n    );\n\n    /// @notice Emitted when manual pull from vault is executed.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param tokenAmounts The amounts of tokens that were\n    event ManualPull(\n        address indexed origin,\n        address indexed sender,\n        uint256[] tokenAmounts,\n        uint256[] actualTokenAmounts\n    );\n\n    /// @notice Emitted when vault is swapped.\n    /// @param oldNft UniV3 nft that was burned\n    /// @param newNft UniV3 nft that was created\n    /// @param newTickLower Lower tick for created UniV3 nft\n    /// @param newTickUpper Upper tick for created UniV3 nft\n    event SwapVault(uint256 oldNft, uint256 newNft, int24 newTickLower, int24 newTickUpper);\n\n    /// @notice Emitted when rebalance from UniV3 to ERC20 or vice versa happens\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param fromErc20 `true` if the rebalance is made\n    /// @param pulledAmounts amounts pulled from fromVault\n    event RebalancedErc20UniV3(address indexed origin, address indexed sender, bool fromErc20, uint256[] pulledAmounts);\n\n    /// @param fromVault The vault to pull liquidity from\n    /// @param toVault The vault to pull liquidity to\n    /// @param pulledAmounts amounts pulled from fromVault\n    /// @param pushedAmounts amounts pushed to toVault\n    /// @param desiredLiquidity The amount of liquidity desired for rebalance. This could be cut to available erc20 vault balance and available uniV3 vault liquidity.\n    /// @param liquidity The actual amount of liquidity rebalanced.\n    event RebalancedUniV3(\n        address indexed origin,\n        address indexed sender,\n        address fromVault,\n        address toVault,\n        uint256[] pulledAmounts,\n        uint256[] pushedAmounts,\n        uint128 desiredLiquidity,\n        uint128 liquidity\n    );\n\n    /// @notice Emitted when trading params were updated\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param tradingParams New trading parameters\n    event TradingParamsUpdated(address indexed origin, address indexed sender, TradingParams tradingParams);\n\n    /// @notice Emitted when ratio params were updated\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param ratioParams New ratio parameters\n    event RatioParamsUpdated(address indexed origin, address indexed sender, RatioParams ratioParams);\n\n    /// @notice Emitted when other params were updated\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param otherParams New trading parameters\n    event OtherParamsUpdated(address indexed origin, address indexed sender, OtherParams otherParams);\n\n    event CowswapAllowanceReset(address indexed origin, address indexed sender);\n    event FeesCollected(address indexed origin, address indexed sender, uint256[] collectedEarnings);\n}\n"
    },
    "contracts/utils/DefaultAccessControl.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"../interfaces/utils/IDefaultAccessControl.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\n/// @notice This is a default access control with 3 roles:\n///\n/// - ADMIN: allowed to do anything\n/// - ADMIN_DELEGATE: allowed to do anything except assigning ADMIN and ADMIN_DELEGATE roles\n/// - OPERATOR: low-privileged role, generally keeper or some other bot\ncontract DefaultAccessControl is IDefaultAccessControl, AccessControlEnumerable {\n    bytes32 public constant OPERATOR = keccak256(\"operator\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"admin\");\n    bytes32 public constant ADMIN_DELEGATE_ROLE = keccak256(\"admin_delegate\");\n\n    /// @notice Creates a new contract.\n    /// @param admin Admin of the contract\n    constructor(address admin) {\n        require(admin != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n\n        _setupRole(OPERATOR, admin);\n        _setupRole(ADMIN_ROLE, admin);\n\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(ADMIN_DELEGATE_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(OPERATOR, ADMIN_DELEGATE_ROLE);\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @notice Checks if the address is ADMIN or ADMIN_DELEGATE.\n    /// @param sender Adddress to check\n    /// @return `true` if sender is an admin, `false` otherwise\n    function isAdmin(address sender) public view returns (bool) {\n        return hasRole(ADMIN_ROLE, sender) || hasRole(ADMIN_DELEGATE_ROLE, sender);\n    }\n\n    /// @notice Checks if the address is OPERATOR.\n    /// @param sender Adddress to check\n    /// @return `true` if sender is an admin, `false` otherwise\n    function isOperator(address sender) public view returns (bool) {\n        return hasRole(OPERATOR, sender);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _requireAdmin() internal view {\n        require(isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n\n    function _requireAtLeastOperator() internal view {\n        require(isAdmin(msg.sender) || isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\n    }\n}\n"
    },
    "contracts/utils/WhiteList.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/vaults/IERC20RootVault.sol\";\nimport \"./DefaultAccessControl.sol\";\n\ncontract WhiteList is DefaultAccessControl {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20RootVault;\n\n    bytes32 public root;\n\n    constructor(address admin) DefaultAccessControl(admin) {}\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    function deposit(\n        IERC20RootVault vault,\n        uint256[] calldata tokenAmounts,\n        uint256 minLpTokens,\n        bytes calldata vaultOptions,\n        bytes32[] calldata proof\n    ) external returns (uint256[] memory actualTokenAmounts) {\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n        require(MerkleProof.verify(proof, root, leaf), ExceptionsLibrary.FORBIDDEN);\n\n        address[] memory tokens = vault.vaultTokens();\n        require(tokens.length == tokenAmounts.length, ExceptionsLibrary.INVALID_LENGTH);\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20(tokens[i]).safeTransferFrom(msg.sender, address(this), tokenAmounts[i]);\n            IERC20(tokens[i]).safeIncreaseAllowance(address(vault), tokenAmounts[i]);\n        }\n\n        actualTokenAmounts = vault.deposit(tokenAmounts, minLpTokens, vaultOptions);\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20(tokens[i]).safeApprove(address(vault), 0);\n            IERC20(tokens[i]).safeTransfer(msg.sender, IERC20(tokens[i]).balanceOf(address(this)));\n        }\n\n        uint256 lpTokenMinted = vault.balanceOf(address(this));\n        vault.safeTransfer(msg.sender, lpTokenMinted);\n\n        emit Deposit(msg.sender, address(vault), tokens, actualTokenAmounts, lpTokenMinted);\n    }\n\n    function updateRoot(bytes32 root_) external {\n        _requireAdmin();\n        root = root_;\n    }\n\n    /// @notice Emitted when liquidity is deposited\n    /// @param from The source address for the liquidity\n    /// @param tokens ERC20 tokens deposited\n    /// @param actualTokenAmounts Token amounts deposited\n    /// @param lpTokenMinted LP tokens received by the liquidity provider\n    event Deposit(\n        address indexed from,\n        address indexed to,\n        address[] tokens,\n        uint256[] actualTokenAmounts,\n        uint256 lpTokenMinted\n    );\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IERC20RootVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IAggregateVault.sol\";\nimport \"../utils/IERC20RootVaultHelper.sol\";\n\ninterface IERC20RootVault is IAggregateVault, IERC20 {\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param strategy_ The address that will have approvals for subvaultNfts\n    /// @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        IERC20RootVaultHelper helper_\n    ) external;\n\n    /// @notice The timestamp of last charging of fees\n    function lastFeeCharge() external view returns (uint64);\n\n    /// @notice The timestamp of last updating totalWithdrawnAmounts array\n    function totalWithdrawnAmountsTimestamp() external view returns (uint64);\n\n    /// @notice Returns value from totalWithdrawnAmounts array by _index\n    /// @param _index The index at which the value will be returned\n    function totalWithdrawnAmounts(uint256 _index) external view returns (uint256);\n\n    /// @notice LP parameter that controls the charge in performance fees\n    function lpPriceHighWaterMarkD18() external view returns (uint256);\n\n    /// @notice List of addresses of depositors from which interaction with private vaults is allowed\n    function depositorsAllowlist() external view returns (address[] memory);\n\n    /// @notice Add new depositors in the depositorsAllowlist\n    /// @param depositors Array of new depositors\n    /// @dev The action can be done only by user with admins, owners or by approved rights\n    function addDepositorsToAllowlist(address[] calldata depositors) external;\n\n    /// @notice Remove depositors from the depositorsAllowlist\n    /// @param depositors Array of depositors for remove\n    /// @dev The action can be done only by user with admins, owners or by approved rights\n    function removeDepositorsFromAllowlist(address[] calldata depositors) external;\n\n    /// @notice The function of depositing the amount of tokens in exchange\n    /// @param tokenAmounts Array of amounts of tokens for deposit\n    /// @param minLpTokens Minimal value of LP tokens\n    /// @param vaultOptions Options of vaults\n    /// @return actualTokenAmounts Arrays of actual token amounts after deposit\n    function deposit(\n        uint256[] memory tokenAmounts,\n        uint256 minLpTokens,\n        bytes memory vaultOptions\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice The function of withdrawing the amount of tokens in exchange\n    /// @param to Address to which the withdrawal will be sent\n    /// @param lpTokenAmount LP token amount, that requested for withdraw\n    /// @param minTokenAmounts Array of minmal remining wtoken amounts after withdrawal\n    /// @param vaultsOptions Options of vaults\n    /// @return actualTokenAmounts Arrays of actual token amounts after withdrawal\n    function withdraw(\n        address to,\n        uint256 lpTokenAmount,\n        uint256[] memory minTokenAmounts,\n        bytes[] memory vaultsOptions\n    ) external returns (uint256[] memory actualTokenAmounts);\n}\n"
    },
    "contracts/interfaces/vaults/IAggregateVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IVault.sol\";\nimport \"./IVaultRoot.sol\";\n\ninterface IAggregateVault is IVault, IVaultRoot {}\n"
    },
    "contracts/interfaces/utils/IERC20RootVaultHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../oracles/IOracle.sol\";\n\ninterface IERC20RootVaultHelper {\n    function getTvlToken0(\n        uint256[] calldata tvls,\n        address[] calldata tokens,\n        IOracle oracle\n    ) external view returns (uint256 tvl0);\n}\n"
    },
    "contracts/vaults/MellowVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.8.9;\n\nimport \"../interfaces/vaults/IMellowVault.sol\";\nimport \"../interfaces/vaults/IERC20RootVault.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"./IntegrationVault.sol\";\n\n/// @notice Vault that stores ERC20 tokens.\ncontract MellowVault is IMellowVault, IntegrationVault {\n    using SafeERC20 for IERC20;\n\n    /// @inheritdoc IMellowVault\n    IERC20RootVault public vault;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        IERC20RootVault vault_ = vault;\n        uint256 balance = vault_.balanceOf(address(this));\n        uint256 supply = vault_.totalSupply();\n        (minTokenAmounts, maxTokenAmounts) = vault_.tvl();\n        for (uint256 i = 0; i < minTokenAmounts.length; i++) {\n            minTokenAmounts[i] = FullMath.mulDiv(balance, minTokenAmounts[i], supply);\n            maxTokenAmounts[i] = FullMath.mulDiv(balance, maxTokenAmounts[i], supply);\n        }\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IMellowVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        IERC20RootVault vault_\n    ) external {\n        _initialize(vaultTokens_, nft_);\n        address[] memory mTokens = vault_.vaultTokens();\n        for (uint256 i = 0; i < vaultTokens_.length; i++) {\n            require(mTokens[i] == vaultTokens_[i], ExceptionsLibrary.INVALID_TOKEN);\n        }\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        require(registry.nftForVault(address(vault)) > 0, ExceptionsLibrary.INVALID_INTERFACE);\n        vault = vault_;\n    }\n\n    // -------------------  INTERNAL, VIEW  -----------------------\n    function _isReclaimForbidden(address token) internal view override returns (bool) {\n        address[] memory mTokens = vault.vaultTokens();\n        for (uint256 i = 0; i < mTokens.length; ++i) {\n            if (mTokens[i] == token) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _push(uint256[] memory tokenAmounts, bytes memory options)\n        internal\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        uint256 minLpTokens;\n        assembly {\n            minLpTokens := mload(add(options, 0x20))\n        }\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\n            IERC20(_vaultTokens[i]).safeIncreaseAllowance(address(vault), tokenAmounts[i]);\n        }\n        actualTokenAmounts = vault.deposit(tokenAmounts, minLpTokens, \"\");\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\n            IERC20(_vaultTokens[i]).safeApprove(address(vault), 0);\n        }\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        IERC20RootVault vault_ = vault;\n        uint256[] memory minTokenAmounts = abi.decode(options, (uint256[]));\n        (uint256[] memory minTvl, ) = tvl();\n        uint256 totalLpTokens = vault.balanceOf(address(this));\n        uint256 lpTokenAmount = type(uint256).max;\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\n            uint256 newAmount = FullMath.mulDiv(totalLpTokens, tokenAmounts[i], minTvl[i]);\n            if (newAmount < lpTokenAmount) {\n                lpTokenAmount = newAmount;\n            }\n        }\n        if (lpTokenAmount > totalLpTokens) {\n            lpTokenAmount = totalLpTokens;\n        }\n\n        bytes[] memory emptyOptions = new bytes[](vault.subvaultNfts().length);\n        for (uint256 i = 0; i < emptyOptions.length; ++i) {\n            emptyOptions[i] = \"\";\n        }\n        actualTokenAmounts = vault_.withdraw(to, lpTokenAmount, minTokenAmounts, emptyOptions);\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IMellowVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IERC20RootVault.sol\";\nimport \"./IIntegrationVault.sol\";\n\ninterface IMellowVault is IIntegrationVault {\n    /// @notice Reference to mellow root vault\n    function vault() external view returns (IERC20RootVault);\n\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param rootVault_ Reference to mellow root vault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        IERC20RootVault rootVault_\n    ) external;\n}\n"
    },
    "contracts/vaults/MellowVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IMellowVault.sol\";\nimport \"../interfaces/vaults/IMellowVaultGovernance.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Governance that manages all Mellow Vaults params and can deploy a new Mellow Vault.\ncontract MellowVaultGovernance is ContractMeta, IMellowVaultGovernance, VaultGovernance {\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    constructor(InternalParams memory internalParams_) VaultGovernance(internalParams_) {}\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"MellowVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IMellowVaultGovernance\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        IERC20RootVault underlyingVault\n    ) external returns (IMellowVault vault, uint256 nft) {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IMellowVault(vaddr);\n        vault.initialize(nft, vaultTokens_, underlyingVault);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, \"\", owner_, vaddr, nft);\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IMellowVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IMellowVault.sol\";\nimport \"./IVaultGovernance.sol\";\n\ninterface IMellowVaultGovernance is IVaultGovernance {\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    /// @param underlyingVault Underlying mellow vault\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        IERC20RootVault underlyingVault\n    ) external returns (IMellowVault vault, uint256 nft);\n}\n"
    },
    "contracts/vaults/ERC20RootVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IERC20RootVaultGovernance.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../interfaces/vaults/IIntegrationVault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\nimport \"../interfaces/utils/IERC20RootVaultHelper.sol\";\n\n/// @notice Governance that manages all Lp Issuers params and can deploy a new LpIssuer Vault.\ncontract ERC20RootVaultGovernance is ContractMeta, IERC20RootVaultGovernance, VaultGovernance {\n    /// @inheritdoc IERC20RootVaultGovernance\n    uint256 public constant MAX_PROTOCOL_FEE = 5 * 10**7; // 5%\n    /// @inheritdoc IERC20RootVaultGovernance\n    uint256 public constant MAX_MANAGEMENT_FEE = 10 * 10**7; // 10%\n    /// @inheritdoc IERC20RootVaultGovernance\n    uint256 public constant MAX_PERFORMANCE_FEE = 50 * 10**7; // 50%\n\n    IERC20RootVaultHelper public immutable helper;\n\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    /// @param delayedProtocolParams_ Initial Protocol Params\n    constructor(\n        InternalParams memory internalParams_,\n        DelayedProtocolParams memory delayedProtocolParams_,\n        IERC20RootVaultHelper helper_\n    ) VaultGovernance(internalParams_) {\n        require(address(delayedProtocolParams_.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(address(helper_) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        helper = helper_;\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        // params are initialized in constructor, so cannot be 0\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return DelayedProtocolParams({managementFeeChargeDelay: 0, oracle: IOracle(address(0))});\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function delayedProtocolPerVaultParams(uint256 nft) external view returns (DelayedProtocolPerVaultParams memory) {\n        if (_delayedProtocolPerVaultParams[nft].length == 0) {\n            return DelayedProtocolPerVaultParams({protocolFee: 0});\n        }\n        return abi.decode(_delayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stagedDelayedProtocolPerVaultParams(uint256 nft)\n        external\n        view\n        returns (DelayedProtocolPerVaultParams memory)\n    {\n        if (_stagedDelayedProtocolPerVaultParams[nft].length == 0) {\n            return DelayedProtocolPerVaultParams({protocolFee: 0});\n        }\n        return abi.decode(_stagedDelayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stagedDelayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory) {\n        if (_stagedDelayedStrategyParams[nft].length == 0) {\n            return\n                DelayedStrategyParams({\n                    strategyTreasury: address(0),\n                    strategyPerformanceTreasury: address(0),\n                    privateVault: false,\n                    managementFee: 0,\n                    performanceFee: 0,\n                    depositCallbackAddress: address(0),\n                    withdrawCallbackAddress: address(0)\n                });\n        }\n        return abi.decode(_stagedDelayedStrategyParams[nft], (DelayedStrategyParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function operatorParams() external view returns (OperatorParams memory) {\n        if (_operatorParams.length == 0) {\n            return OperatorParams({disableDeposit: false});\n        }\n        return abi.decode(_operatorParams, (OperatorParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function delayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory) {\n        if (_delayedStrategyParams[nft].length == 0) {\n            return\n                DelayedStrategyParams({\n                    strategyTreasury: address(0),\n                    strategyPerformanceTreasury: address(0),\n                    privateVault: false,\n                    managementFee: 0,\n                    performanceFee: 0,\n                    depositCallbackAddress: address(0),\n                    withdrawCallbackAddress: address(0)\n                });\n        }\n        return abi.decode(_delayedStrategyParams[nft], (DelayedStrategyParams));\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function strategyParams(uint256 nft) external view returns (StrategyParams memory) {\n        if (_strategyParams[nft].length == 0) {\n            return StrategyParams({tokenLimitPerAddress: 0, tokenLimit: 0});\n        }\n        return abi.decode(_strategyParams[nft], (StrategyParams));\n    }\n\n    // @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IERC20RootVaultGovernance).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stageDelayedStrategyParams(uint256 nft, DelayedStrategyParams calldata params) external {\n        require(params.managementFee <= MAX_MANAGEMENT_FEE, ExceptionsLibrary.LIMIT_OVERFLOW);\n        require(params.performanceFee <= MAX_PERFORMANCE_FEE, ExceptionsLibrary.LIMIT_OVERFLOW);\n        _stageDelayedStrategyParams(nft, abi.encode(params));\n        emit StageDelayedStrategyParams(tx.origin, msg.sender, nft, params, _delayedStrategyParamsTimestamp[nft]);\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function commitDelayedStrategyParams(uint256 nft) external {\n        _commitDelayedStrategyParams(nft);\n        emit CommitDelayedStrategyParams(\n            tx.origin,\n            msg.sender,\n            nft,\n            abi.decode(_delayedStrategyParams[nft], (DelayedStrategyParams))\n        );\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stageDelayedProtocolPerVaultParams(uint256 nft, DelayedProtocolPerVaultParams calldata params) external {\n        require(params.protocolFee <= MAX_PROTOCOL_FEE, ExceptionsLibrary.LIMIT_OVERFLOW);\n        _stageDelayedProtocolPerVaultParams(nft, abi.encode(params));\n        emit StageDelayedProtocolPerVaultParams(\n            tx.origin,\n            msg.sender,\n            nft,\n            params,\n            _delayedStrategyParamsTimestamp[nft]\n        );\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function commitDelayedProtocolPerVaultParams(uint256 nft) external {\n        _commitDelayedProtocolPerVaultParams(nft);\n        emit CommitDelayedProtocolPerVaultParams(\n            tx.origin,\n            msg.sender,\n            nft,\n            abi.decode(_delayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams))\n        );\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function setStrategyParams(uint256 nft, StrategyParams calldata params) external {\n        _setStrategyParams(nft, abi.encode(params));\n        emit SetStrategyParams(tx.origin, msg.sender, nft, params);\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function setOperatorParams(OperatorParams calldata params) external {\n        _setOperatorParams(abi.encode(params));\n        emit SetOperatorParams(tx.origin, msg.sender, params);\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\n        require(address(params.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    /// @inheritdoc IERC20RootVaultGovernance\n    function createVault(\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        address owner_\n    ) external returns (IERC20RootVault vault, uint256 nft) {\n        address vaddr;\n        IVaultRegistry registry = _internalParams.registry;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IERC20RootVault(vaddr);\n        require(subvaultNfts_.length > 0, ExceptionsLibrary.EMPTY_LIST);\n        for (uint256 i = 0; i < subvaultNfts_.length; i++) {\n            uint256 subvaultNft = subvaultNfts_[i];\n            require(subvaultNft > 0, ExceptionsLibrary.VALUE_ZERO);\n            address subvault = registry.vaultForNft(subvaultNft);\n            require(subvault != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n            require(\n                IIntegrationVault(subvault).supportsInterface(type(IIntegrationVault).interfaceId),\n                ExceptionsLibrary.INVALID_INTERFACE\n            );\n            address[] memory subvaultTokens = IIntegrationVault(subvault).vaultTokens();\n            if (i == 0) {\n                // The zero-vault must have the same tokens as ERC20RootVault\n                require(vaultTokens_.length == subvaultTokens.length, ExceptionsLibrary.INVALID_LENGTH);\n                require(\n                    IERC165(subvault).supportsInterface(type(IERC20Vault).interfaceId),\n                    ExceptionsLibrary.INVALID_INTERFACE\n                );\n            }\n            uint256 subvaultTokenId = 0;\n            for (\n                uint256 tokenId = 0;\n                tokenId < vaultTokens_.length && subvaultTokenId < subvaultTokens.length;\n                ++tokenId\n            ) {\n                if (subvaultTokens[subvaultTokenId] == vaultTokens_[tokenId]) {\n                    subvaultTokenId++;\n                }\n            }\n            require(subvaultTokenId == subvaultTokens.length, ExceptionsLibrary.INVALID_TOKEN);\n\n            // RootVault is not yet initialized so we cannot use safeTransferFrom here\n            registry.transferFrom(msg.sender, vaddr, subvaultNfts_[i]);\n        }\n        vault.initialize(nft, vaultTokens_, strategy_, subvaultNfts_, helper);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ERC20RootVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new DelayedProtocolPerVaultParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolPerVaultParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedProtocolPerVaultParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedProtocolPerVaultParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that are committed\n    event CommitDelayedProtocolPerVaultParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedProtocolPerVaultParams params\n    );\n\n    /// @notice Emitted when new DelayedStrategyParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedStrategyParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedStrategyParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedStrategyParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that are committed\n    event CommitDelayedStrategyParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedStrategyParams params\n    );\n\n    /// @notice Emitted when new StrategyParams are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that are set\n    event SetStrategyParams(address indexed origin, address indexed sender, uint256 indexed nft, StrategyParams params);\n\n    /// @notice Emitted when new OperatorParams are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are set\n    event SetOperatorParams(address indexed origin, address indexed sender, OperatorParams params);\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/interfaces/vaults/IERC20RootVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../oracles/IOracle.sol\";\nimport \"./IERC20RootVault.sol\";\nimport \"./IVaultGovernance.sol\";\n\ninterface IERC20RootVaultGovernance is IVaultGovernance {\n    /// @notice Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\n    /// @param strategyTreasury Reference to address that will collect strategy management fees\n    /// @param strategyPerformanceTreasury Reference to address that will collect strategy performance fees\n    /// @param privateVault If true, only whitlisted depositors can deposit into the vault\n    /// @param managementFee Management fee for Strategist denominated in 10 ** 9\n    /// @param performanceFee Performance fee for Strategist denominated in 10 ** 9\n    /// @param depositCallbackAddress Address of callback function after deposit\n    /// @param withdrawCallbackAddress Address of callback function after withdraw\n    struct DelayedStrategyParams {\n        address strategyTreasury;\n        address strategyPerformanceTreasury;\n        bool privateVault;\n        uint256 managementFee;\n        uint256 performanceFee;\n        address depositCallbackAddress;\n        address withdrawCallbackAddress;\n    }\n\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param managementFeeChargeDelay The minimal interval between management fee charges\n    /// @param oracle Oracle for getting token prices\n    struct DelayedProtocolParams {\n        uint256 managementFeeChargeDelay;\n        IOracle oracle;\n    }\n\n    /// @notice Params that could be changed by Strategy or Protocol Governance.\n    /// @param tokenLimitPerAddress Max LP token limit per address\n    /// @param tokenLimit Max LP token for the vault\n    struct StrategyParams {\n        uint256 tokenLimitPerAddress;\n        uint256 tokenLimit;\n    }\n\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param protocolFee Management fee for Protocol denominated in 10 ** 9\n    struct DelayedProtocolPerVaultParams {\n        uint256 protocolFee;\n    }\n\n    /// @notice Params that could be changed by Operator role of Protocol Governance.\n    /// @param disableDeposit Disable deposit for all ERC20 vaults\n    struct OperatorParams {\n        bool disableDeposit;\n    }\n\n    /// @notice Number of maximum protocol fee\n    function MAX_PROTOCOL_FEE() external view returns (uint256);\n\n    /// @notice Number of maximum management fee\n    function MAX_MANAGEMENT_FEE() external view returns (uint256);\n\n    /// @notice Number of maximum performance fee\n    function MAX_PERFORMANCE_FEE() external view returns (uint256);\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param nft VaultRegistry NFT of the vault\n    function delayedProtocolPerVaultParams(uint256 nft) external view returns (DelayedProtocolPerVaultParams memory);\n\n    /// @notice Delayed Protocol Per Vault Params staged for commit after delay.\n    /// @param nft VaultRegistry NFT of the vault\n    function stagedDelayedProtocolPerVaultParams(uint256 nft)\n        external\n        view\n        returns (DelayedProtocolPerVaultParams memory);\n\n    /// @notice Strategy Params.\n    /// @param nft VaultRegistry NFT of the vault\n    function strategyParams(uint256 nft) external view returns (StrategyParams memory);\n\n    /// @notice Operator Params.\n    function operatorParams() external view returns (OperatorParams memory);\n\n    /// @notice Delayed Strategy Params\n    /// @param nft VaultRegistry NFT of the vault\n    function delayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory);\n\n    /// @notice Delayed Strategy Params staged for commit after delay.\n    /// @param nft VaultRegistry NFT of the vault\n    function stagedDelayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory);\n\n    /// @notice Set Strategy params, i.e. Params that could be changed by Strategy or Protocol Governance immediately.\n    /// @param nft Nft of the vault\n    /// @param params New params\n    function setStrategyParams(uint256 nft, StrategyParams calldata params) external;\n\n    /// @notice Set Operator params, i.e. Params that could be changed by Operator or Protocol Governance immediately.\n    /// @param params New params\n    function setOperatorParams(OperatorParams calldata params) external;\n\n    /// @notice Stage Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params\n    function stageDelayedProtocolPerVaultParams(uint256 nft, DelayedProtocolPerVaultParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolPerVaultParamsTimestamp\n    /// @param nft VaultRegistry NFT of the vault\n    function commitDelayedProtocolPerVaultParams(uint256 nft) external;\n\n    /// @notice Stage Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params\n    function stageDelayedStrategyParams(uint256 nft, DelayedStrategyParams calldata params) external;\n\n    /// @notice Commit Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedStrategyParamsTimestamp\n    /// @param nft VaultRegistry NFT of the vault\n    function commitDelayedStrategyParams(uint256 nft) external;\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolParamsTimestamp.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param strategy_ The address that will have approvals for subvaultNfts\n    /// @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault\n    /// @param owner_ Owner of the vault NFT\n    function createVault(\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        address owner_\n    ) external returns (IERC20RootVault vault, uint256 nft);\n}\n"
    },
    "contracts/vaults/ERC20RootVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/vaults/IERC20RootVaultGovernance.sol\";\nimport \"../interfaces/vaults/IERC20RootVault.sol\";\nimport \"../interfaces/utils/ILpCallback.sol\";\nimport \"../utils/ERC20Token.sol\";\nimport \"./AggregateVault.sol\";\nimport \"../interfaces/utils/IERC20RootVaultHelper.sol\";\n\n/// @notice Contract that mints and burns LP tokens in exchange for ERC20 liquidity.\ncontract ERC20RootVault is IERC20RootVault, ERC20Token, ReentrancyGuard, AggregateVault {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @inheritdoc IERC20RootVault\n    uint64 public lastFeeCharge;\n    /// @inheritdoc IERC20RootVault\n    uint64 public totalWithdrawnAmountsTimestamp;\n    /// @inheritdoc IERC20RootVault\n    uint256[] public totalWithdrawnAmounts;\n    /// @inheritdoc IERC20RootVault\n    uint256 public lpPriceHighWaterMarkD18;\n    EnumerableSet.AddressSet private _depositorsAllowlist;\n    IERC20RootVaultHelper public helper;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n    /// @inheritdoc IERC20RootVault\n    function depositorsAllowlist() external view returns (address[] memory) {\n        return _depositorsAllowlist.values();\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, AggregateVault)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId) || type(IERC20RootVault).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n    /// @inheritdoc IERC20RootVault\n    function addDepositorsToAllowlist(address[] calldata depositors) external {\n        _requireAtLeastStrategy();\n        for (uint256 i = 0; i < depositors.length; i++) {\n            _depositorsAllowlist.add(depositors[i]);\n        }\n    }\n\n    /// @inheritdoc IERC20RootVault\n    function removeDepositorsFromAllowlist(address[] calldata depositors) external {\n        _requireAtLeastStrategy();\n        for (uint256 i = 0; i < depositors.length; i++) {\n            _depositorsAllowlist.remove(depositors[i]);\n        }\n    }\n\n    /// @inheritdoc IERC20RootVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        IERC20RootVaultHelper helper_\n    ) external {\n        _initialize(vaultTokens_, nft_, strategy_, subvaultNfts_);\n        _initERC20(_getTokenName(bytes(\"Mellow Lp Token \"), nft_), _getTokenName(bytes(\"MLP\"), nft_));\n        uint256 len = vaultTokens_.length;\n        totalWithdrawnAmounts = new uint256[](len);\n        lastFeeCharge = uint64(block.timestamp);\n        helper = helper_;\n    }\n\n    /// @inheritdoc IERC20RootVault\n    function deposit(\n        uint256[] memory tokenAmounts,\n        uint256 minLpTokens,\n        bytes memory vaultOptions\n    ) external nonReentrant returns (uint256[] memory actualTokenAmounts) {\n        require(\n            !IERC20RootVaultGovernance(address(_vaultGovernance)).operatorParams().disableDeposit,\n            ExceptionsLibrary.FORBIDDEN\n        );\n        address[] memory tokens = _vaultTokens;\n        uint256 supply = totalSupply;\n        if (supply == 0) {\n            for (uint256 i = 0; i < tokens.length; ++i) {\n                require(tokenAmounts[i] >= 10 * _pullExistentials[i], ExceptionsLibrary.LIMIT_UNDERFLOW);\n                require(\n                    tokenAmounts[i] <= _pullExistentials[i] * _pullExistentials[i],\n                    ExceptionsLibrary.LIMIT_OVERFLOW\n                );\n            }\n        }\n        (uint256[] memory minTvl, uint256[] memory maxTvl) = tvl();\n        uint256 thisNft = _nft;\n        _chargeFees(thisNft, minTvl, supply, tokens);\n        supply = totalSupply;\n        IERC20RootVaultGovernance.DelayedStrategyParams memory delayedStrategyParams = IERC20RootVaultGovernance(\n            address(_vaultGovernance)\n        ).delayedStrategyParams(thisNft);\n        require(\n            !delayedStrategyParams.privateVault || _depositorsAllowlist.contains(msg.sender),\n            ExceptionsLibrary.FORBIDDEN\n        );\n        uint256 preLpAmount;\n        uint256[] memory normalizedAmounts = new uint256[](tokenAmounts.length);\n        {\n            bool isSignificantTvl;\n            (preLpAmount, isSignificantTvl) = _getLpAmount(maxTvl, tokenAmounts, supply);\n            for (uint256 i = 0; i < tokens.length; ++i) {\n                normalizedAmounts[i] = _getNormalizedAmount(\n                    maxTvl[i],\n                    tokenAmounts[i],\n                    preLpAmount,\n                    supply,\n                    isSignificantTvl,\n                    _pullExistentials[i]\n                );\n                IERC20(tokens[i]).safeTransferFrom(msg.sender, address(this), normalizedAmounts[i]);\n            }\n        }\n        actualTokenAmounts = _push(normalizedAmounts, vaultOptions);\n        (uint256 lpAmount, ) = _getLpAmount(maxTvl, actualTokenAmounts, supply);\n        require(lpAmount >= minLpTokens, ExceptionsLibrary.LIMIT_UNDERFLOW);\n        require(lpAmount != 0, ExceptionsLibrary.VALUE_ZERO);\n        IERC20RootVaultGovernance.StrategyParams memory params = IERC20RootVaultGovernance(address(_vaultGovernance))\n            .strategyParams(thisNft);\n        require(lpAmount + balanceOf[msg.sender] <= params.tokenLimitPerAddress, ExceptionsLibrary.LIMIT_OVERFLOW);\n        require(lpAmount + supply <= params.tokenLimit, ExceptionsLibrary.LIMIT_OVERFLOW);\n        // lock tokens on first deposit\n        if (supply == 0) {\n            _mint(address(0), lpAmount);\n        } else {\n            _mint(msg.sender, lpAmount);\n        }\n\n        for (uint256 i = 0; i < _vaultTokens.length; ++i) {\n            if (normalizedAmounts[i] > actualTokenAmounts[i]) {\n                IERC20(_vaultTokens[i]).safeTransfer(msg.sender, normalizedAmounts[i] - actualTokenAmounts[i]);\n            }\n        }\n\n        if (delayedStrategyParams.depositCallbackAddress != address(0)) {\n            try ILpCallback(delayedStrategyParams.depositCallbackAddress).depositCallback() {} catch Error(\n                string memory reason\n            ) {\n                emit DepositCallbackLog(reason);\n            } catch {\n                emit DepositCallbackLog(\"callback failed without reason\");\n            }\n        }\n\n        emit Deposit(msg.sender, _vaultTokens, actualTokenAmounts, lpAmount);\n    }\n\n    /// @inheritdoc IERC20RootVault\n    function withdraw(\n        address to,\n        uint256 lpTokenAmount,\n        uint256[] memory minTokenAmounts,\n        bytes[] memory vaultsOptions\n    ) external nonReentrant returns (uint256[] memory actualTokenAmounts) {\n        uint256 supply = totalSupply;\n        require(supply > 0, ExceptionsLibrary.VALUE_ZERO);\n        address[] memory tokens = _vaultTokens;\n        uint256[] memory tokenAmounts = new uint256[](_vaultTokens.length);\n        (uint256[] memory minTvl, ) = tvl();\n        _chargeFees(_nft, minTvl, supply, tokens);\n        supply = totalSupply;\n        uint256 balance = balanceOf[msg.sender];\n        if (lpTokenAmount > balance) {\n            lpTokenAmount = balance;\n        }\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            tokenAmounts[i] = FullMath.mulDiv(lpTokenAmount, minTvl[i], supply);\n        }\n        actualTokenAmounts = _pull(address(this), tokenAmounts, vaultsOptions);\n        // we are draining balance\n        // if no sufficent amounts rest\n        bool sufficientAmountRest = false;\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            require(actualTokenAmounts[i] >= minTokenAmounts[i], ExceptionsLibrary.LIMIT_UNDERFLOW);\n            if (FullMath.mulDiv(balance, minTvl[i], supply) >= _pullExistentials[i] + actualTokenAmounts[i]) {\n                sufficientAmountRest = true;\n            }\n            if (actualTokenAmounts[i] != 0) {\n                IERC20(tokens[i]).safeTransfer(to, actualTokenAmounts[i]);\n            }\n        }\n        _updateWithdrawnAmounts(actualTokenAmounts);\n        if (sufficientAmountRest) {\n            _burn(msg.sender, lpTokenAmount);\n        } else {\n            _burn(msg.sender, balance);\n        }\n\n        uint256 thisNft = _nft;\n        IERC20RootVaultGovernance.DelayedStrategyParams memory delayedStrategyParams = IERC20RootVaultGovernance(\n            address(_vaultGovernance)\n        ).delayedStrategyParams(thisNft);\n\n        if (delayedStrategyParams.withdrawCallbackAddress != address(0)) {\n            try ILpCallback(delayedStrategyParams.withdrawCallbackAddress).withdrawCallback() {} catch Error(\n                string memory reason\n            ) {\n                emit WithdrawCallbackLog(reason);\n            } catch {\n                emit WithdrawCallbackLog(\"callback failed without reason\");\n            }\n        }\n\n        emit Withdraw(msg.sender, _vaultTokens, actualTokenAmounts, lpTokenAmount);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _getLpAmount(\n        uint256[] memory tvl_,\n        uint256[] memory amounts,\n        uint256 supply\n    ) internal view returns (uint256 lpAmount, bool isSignificantTvl) {\n        if (supply == 0) {\n            // On init lpToken = max(tokenAmounts)\n            for (uint256 i = 0; i < tvl_.length; ++i) {\n                if (amounts[i] > lpAmount) {\n                    lpAmount = amounts[i];\n                }\n            }\n            return (lpAmount, false);\n        }\n        uint256 tvlsLength = tvl_.length;\n        bool isLpAmountUpdated = false;\n        uint256[] memory pullExistentials = _pullExistentials;\n        for (uint256 i = 0; i < tvlsLength; ++i) {\n            if (tvl_[i] < pullExistentials[i]) {\n                continue;\n            }\n\n            uint256 tokenLpAmount = FullMath.mulDiv(amounts[i], supply, tvl_[i]);\n            // take min of meaningful tokenLp amounts\n            if ((tokenLpAmount < lpAmount) || (isLpAmountUpdated == false)) {\n                isLpAmountUpdated = true;\n                lpAmount = tokenLpAmount;\n            }\n        }\n        isSignificantTvl = isLpAmountUpdated;\n        // in case of almost zero tvl for all tokens -> do the same with supply == 0\n        if (!isSignificantTvl) {\n            for (uint256 i = 0; i < tvl_.length; ++i) {\n                if (amounts[i] > lpAmount) {\n                    lpAmount = amounts[i];\n                }\n            }\n        }\n    }\n\n    function _getNormalizedAmount(\n        uint256 tvl_,\n        uint256 amount,\n        uint256 lpAmount,\n        uint256 supply,\n        bool isSignificantTvl,\n        uint256 existentialsAmount\n    ) internal pure returns (uint256) {\n        if (supply == 0 || !isSignificantTvl) {\n            // skip normalization on init\n            return amount;\n        }\n\n        if (tvl_ < existentialsAmount) {\n            // use zero-normalization when all tvls are dust-like\n            return 0;\n        }\n\n        // normalize amount\n        uint256 res = FullMath.mulDiv(tvl_, lpAmount, supply);\n        if (res > amount) {\n            res = amount;\n        }\n\n        return res;\n    }\n\n    function _requireAtLeastStrategy() internal view {\n        uint256 nft_ = _nft;\n        IVaultGovernance.InternalParams memory internalParams = _vaultGovernance.internalParams();\n        require(\n            (internalParams.protocolGovernance.isAdmin(msg.sender) ||\n                internalParams.registry.getApproved(nft_) == msg.sender ||\n                (internalParams.registry.ownerOf(nft_) == msg.sender)),\n            ExceptionsLibrary.FORBIDDEN\n        );\n    }\n\n    function _getTokenName(bytes memory prefix, uint256 nft_) internal pure returns (string memory) {\n        bytes memory number = bytes(Strings.toString(nft_));\n        return string(abi.encodePacked(prefix, number));\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    /// @dev we are charging fees on the deposit / withdrawal\n    /// fees are charged before the tokens transfer and change the balance of the lp tokens\n    function _chargeFees(\n        uint256 thisNft,\n        uint256[] memory tvls,\n        uint256 supply,\n        address[] memory tokens\n    ) internal {\n        IERC20RootVaultGovernance vg = IERC20RootVaultGovernance(address(_vaultGovernance));\n        uint256 elapsed = block.timestamp - uint256(lastFeeCharge);\n        IERC20RootVaultGovernance.DelayedProtocolParams memory delayedProtocolParams = vg.delayedProtocolParams();\n        if (elapsed < delayedProtocolParams.managementFeeChargeDelay) {\n            return;\n        }\n        lastFeeCharge = uint64(block.timestamp);\n        // don't charge on initial deposit\n        if (supply == 0) {\n            return;\n        }\n        {\n            bool needSkip = true;\n            uint256[] memory pullExistentials = _pullExistentials;\n            for (uint256 i = 0; i < pullExistentials.length; ++i) {\n                if (tvls[i] >= pullExistentials[i]) {\n                    needSkip = false;\n                    break;\n                }\n            }\n            if (needSkip) {\n                return;\n            }\n        }\n        IERC20RootVaultGovernance.DelayedStrategyParams memory strategyParams = vg.delayedStrategyParams(thisNft);\n        uint256 protocolFee = vg.delayedProtocolPerVaultParams(thisNft).protocolFee;\n        address protocolTreasury = vg.internalParams().protocolGovernance.protocolTreasury();\n        _chargeManagementFees(\n            strategyParams.managementFee,\n            protocolFee,\n            strategyParams.strategyTreasury,\n            protocolTreasury,\n            elapsed,\n            supply\n        );\n\n        _chargePerformanceFees(\n            supply,\n            tvls,\n            strategyParams.performanceFee,\n            strategyParams.strategyPerformanceTreasury,\n            tokens,\n            delayedProtocolParams.oracle\n        );\n    }\n\n    function _chargeManagementFees(\n        uint256 managementFee,\n        uint256 protocolFee,\n        address strategyTreasury,\n        address protocolTreasury,\n        uint256 elapsed,\n        uint256 lpSupply\n    ) internal {\n        if (managementFee > 0) {\n            uint256 toMint = FullMath.mulDiv(\n                managementFee * elapsed,\n                lpSupply,\n                CommonLibrary.YEAR * CommonLibrary.DENOMINATOR\n            );\n            _mint(strategyTreasury, toMint);\n            emit ManagementFeesCharged(strategyTreasury, managementFee, toMint);\n        }\n        if (protocolFee > 0) {\n            uint256 toMint = FullMath.mulDiv(\n                protocolFee * elapsed,\n                lpSupply,\n                CommonLibrary.YEAR * CommonLibrary.DENOMINATOR\n            );\n            _mint(protocolTreasury, toMint);\n            emit ProtocolFeesCharged(protocolTreasury, protocolFee, toMint);\n        }\n    }\n\n    function _chargePerformanceFees(\n        uint256 baseSupply,\n        uint256[] memory baseTvls,\n        uint256 performanceFee,\n        address treasury,\n        address[] memory tokens,\n        IOracle oracle\n    ) internal {\n        if ((performanceFee == 0) || (baseSupply == 0)) {\n            return;\n        }\n        uint256 tvlToken0 = helper.getTvlToken0(baseTvls, tokens, oracle);\n        uint256 lpPriceD18 = FullMath.mulDiv(tvlToken0, CommonLibrary.D18, baseSupply);\n        uint256 hwmsD18 = lpPriceHighWaterMarkD18;\n        if (lpPriceD18 <= hwmsD18) {\n            return;\n        }\n        uint256 toMint;\n        if (hwmsD18 > 0) {\n            toMint = FullMath.mulDiv(baseSupply, lpPriceD18 - hwmsD18, hwmsD18);\n            toMint = FullMath.mulDiv(toMint, performanceFee, CommonLibrary.DENOMINATOR);\n            _mint(treasury, toMint);\n        }\n        lpPriceHighWaterMarkD18 = lpPriceD18;\n        emit PerformanceFeesCharged(treasury, performanceFee, toMint);\n    }\n\n    function _updateWithdrawnAmounts(uint256[] memory tokenAmounts) internal {\n        uint256[] memory withdrawn = new uint256[](tokenAmounts.length);\n        uint64 timestamp = uint64(block.timestamp);\n        IProtocolGovernance protocolGovernance = _vaultGovernance.internalParams().protocolGovernance;\n        if (timestamp != totalWithdrawnAmountsTimestamp) {\n            totalWithdrawnAmountsTimestamp = timestamp;\n        } else {\n            for (uint256 i = 0; i < tokenAmounts.length; i++) {\n                withdrawn[i] = totalWithdrawnAmounts[i];\n            }\n        }\n        for (uint256 i = 0; i < tokenAmounts.length; i++) {\n            withdrawn[i] += tokenAmounts[i];\n            require(\n                withdrawn[i] <= protocolGovernance.withdrawLimit(_vaultTokens[i]),\n                ExceptionsLibrary.LIMIT_OVERFLOW\n            );\n            totalWithdrawnAmounts[i] = withdrawn[i];\n        }\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when management fees are charged\n    /// @param treasury Treasury receiver of the fee\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\n    /// @param amount Amount of lp token minted\n    event ManagementFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\n\n    /// @notice Emitted when protocol fees are charged\n    /// @param treasury Treasury receiver of the fee\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\n    /// @param amount Amount of lp token minted\n    event ProtocolFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\n\n    /// @notice Emitted when performance fees are charged\n    /// @param treasury Treasury receiver of the fee\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\n    /// @param amount Amount of lp token minted\n    event PerformanceFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\n\n    /// @notice Emitted when liquidity is deposited\n    /// @param from The source address for the liquidity\n    /// @param tokens ERC20 tokens deposited\n    /// @param actualTokenAmounts Token amounts deposited\n    /// @param lpTokenMinted LP tokens received by the liquidity provider\n    event Deposit(address indexed from, address[] tokens, uint256[] actualTokenAmounts, uint256 lpTokenMinted);\n\n    /// @notice Emitted when liquidity is withdrawn\n    /// @param from The source address for the liquidity\n    /// @param tokens ERC20 tokens withdrawn\n    /// @param actualTokenAmounts Token amounts withdrawn\n    /// @param lpTokenBurned LP tokens burned from the liquidity provider\n    event Withdraw(address indexed from, address[] tokens, uint256[] actualTokenAmounts, uint256 lpTokenBurned);\n\n    /// @notice Emitted when callback in deposit failed\n    /// @param reason Error reason\n    event DepositCallbackLog(string reason);\n\n    /// @notice Emitted when callback in withdraw failed\n    /// @param reason Error reason\n    event WithdrawCallbackLog(string reason);\n}\n"
    },
    "contracts/utils/ERC20Token.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\ncontract ERC20Token is IERC20 {\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    uint8 public constant decimals = 18;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n\n    uint256 private immutable _chainId;\n    bytes32 private _cachedDomainSeparator;\n    mapping(address => uint256) public nonces;\n\n    constructor() {\n        _chainId = block.chainid;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == _chainId ? _cachedDomainSeparator : calculateDomainSeparator();\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender];\n\n        if (allowed != type(uint256).max) {\n            allowance[from][msg.sender] = allowed - amount;\n        }\n\n        balanceOf[from] -= amount;\n\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, ExceptionsLibrary.TIMESTAMP);\n\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner], deadline))\n                )\n            );\n            nonces[owner] += 1;\n            address recoveredAddress = ecrecover(digest, v, r, s);\n            require(recoveredAddress != address(0) && recoveredAddress == owner, ExceptionsLibrary.FORBIDDEN);\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function calculateDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _initERC20(string memory _name, string memory _symbol) internal {\n        name = _name;\n        symbol = _symbol;\n        _cachedDomainSeparator = calculateDomainSeparator();\n    }\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "contracts/vaults/AggregateVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/vaults/IIntegrationVault.sol\";\nimport \"../interfaces/vaults/IVaultRoot.sol\";\nimport \"../interfaces/vaults/IAggregateVault.sol\";\nimport \"./Vault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\n/// @notice Vault that combines several integration layer Vaults into one Vault.\ncontract AggregateVault is IAggregateVault, Vault {\n    using SafeERC20 for IERC20;\n    uint256[] private _subvaultNfts;\n    mapping(uint256 => uint256) private _subvaultNftsIndex;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVaultRoot\n    function subvaultNfts() external view returns (uint256[] memory) {\n        return _subvaultNfts;\n    }\n\n    /// @inheritdoc IVaultRoot\n    function subvaultOneBasedIndex(uint256 nft_) external view returns (uint256) {\n        return _subvaultNftsIndex[nft_];\n    }\n\n    /// @inheritdoc IVaultRoot\n    function hasSubvault(uint256 nft_) external view returns (bool) {\n        return (_subvaultNftsIndex[nft_] > 0);\n    }\n\n    /// @inheritdoc IVaultRoot\n    function subvaultAt(uint256 index) external view returns (address) {\n        uint256 subvaultNft = _subvaultNfts[index];\n        return _vaultGovernance.internalParams().registry.vaultForNft(subvaultNft);\n    }\n\n    /// @inheritdoc IVault\n    function tvl()\n        public\n        view\n        override(IVault, Vault)\n        returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts)\n    {\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        address[] memory vaultTokens = _vaultTokens;\n        minTokenAmounts = new uint256[](vaultTokens.length);\n        maxTokenAmounts = new uint256[](vaultTokens.length);\n        for (uint256 i = 0; i < _subvaultNfts.length; ++i) {\n            IIntegrationVault vault = IIntegrationVault(registry.vaultForNft(_subvaultNfts[i]));\n            (uint256[] memory sMinTokenAmounts, uint256[] memory sMaxTokenAmounts) = vault.tvl();\n            address[] memory subvaultTokens = vault.vaultTokens();\n            uint256 subvaultTokenId = 0;\n            for (\n                uint256 tokenId = 0;\n                tokenId < vaultTokens.length && subvaultTokenId < subvaultTokens.length;\n                ++tokenId\n            ) {\n                if (subvaultTokens[subvaultTokenId] == vaultTokens[tokenId]) {\n                    minTokenAmounts[tokenId] += sMinTokenAmounts[subvaultTokenId];\n                    maxTokenAmounts[tokenId] += sMaxTokenAmounts[subvaultTokenId];\n                    ++subvaultTokenId;\n                }\n            }\n        }\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Vault) returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IAggregateVault).interfaceId == interfaceId;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _initialize(\n        address[] memory vaultTokens_,\n        uint256 nft_,\n        address strategy_,\n        uint256[] memory subvaultNfts_\n    ) internal virtual {\n        IVaultRegistry vaultRegistry = IVaultGovernance(msg.sender).internalParams().registry;\n        for (uint256 i = 0; i < subvaultNfts_.length; i++) {\n            // Significant amount of checks has been done in ERC20RootVaultGovernance in the createVault function to reduce contract size\n            uint256 subvaultNft = subvaultNfts_[i];\n            require(vaultRegistry.ownerOf(subvaultNft) == address(this), ExceptionsLibrary.FORBIDDEN);\n            require(_subvaultNftsIndex[subvaultNft] == 0, ExceptionsLibrary.DUPLICATE);\n            vaultRegistry.approve(strategy_, subvaultNft);\n            vaultRegistry.lockNft(subvaultNft);\n            _subvaultNftsIndex[subvaultNft] = i + 1;\n        }\n        _subvaultNfts = subvaultNfts_;\n        _initialize(vaultTokens_, nft_);\n    }\n\n    function _push(uint256[] memory tokenAmounts, bytes memory vaultOptions)\n        internal\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        require(_nft != 0, ExceptionsLibrary.INIT);\n        IVaultGovernance.InternalParams memory params = _vaultGovernance.internalParams();\n        uint256 destNft = _subvaultNfts[0];\n        IVaultRegistry registry = params.registry;\n        IIntegrationVault destVault = IIntegrationVault(registry.vaultForNft(destNft));\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\n            if (tokenAmounts[i] > 0) {\n                IERC20(_vaultTokens[i]).safeIncreaseAllowance(address(destVault), tokenAmounts[i]);\n            }\n        }\n\n        actualTokenAmounts = destVault.transferAndPush(address(this), _vaultTokens, tokenAmounts, vaultOptions);\n\n        for (uint256 i = 0; i < _vaultTokens.length; i++) {\n            if (tokenAmounts[i] > 0) {\n                IERC20(_vaultTokens[i]).safeApprove(address(destVault), 0);\n            }\n        }\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes[] memory vaultsOptions\n    ) internal returns (uint256[] memory actualTokenAmounts) {\n        require(_nft != 0, ExceptionsLibrary.INIT);\n        require(vaultsOptions.length == _subvaultNfts.length, ExceptionsLibrary.INVALID_LENGTH);\n        IVaultRegistry vaultRegistry = _vaultGovernance.internalParams().registry;\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\n        address[] memory tokens = _vaultTokens;\n        uint256[] memory existentials = _pullExistentials;\n        uint256[] memory leftToPull = new uint256[](tokenAmounts.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            leftToPull[i] = tokenAmounts[i];\n        }\n        for (uint256 i = 0; i < _subvaultNfts.length; i++) {\n            uint256 subvaultNft = _subvaultNfts[i];\n            IIntegrationVault subvault = IIntegrationVault(vaultRegistry.vaultForNft(subvaultNft));\n            uint256[] memory pulledAmounts = subvault.pull(address(this), tokens, leftToPull, vaultsOptions[i]);\n            bool shouldStop = true;\n            for (uint256 j = 0; j < tokens.length; j++) {\n                if (leftToPull[j] > pulledAmounts[j] + existentials[j]) {\n                    shouldStop = false;\n                    leftToPull[j] -= pulledAmounts[j];\n                } else {\n                    leftToPull[j] = 0;\n                }\n            }\n            if (shouldStop) {\n                break;\n            }\n        }\n        address subvault0 = vaultRegistry.vaultForNft(_subvaultNfts[0]);\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint256 balance = IERC20(tokens[i]).balanceOf(address(this));\n            if (tokenAmounts[i] < balance) {\n                actualTokenAmounts[i] = tokenAmounts[i];\n                IERC20(tokens[i]).safeTransfer(to, tokenAmounts[i]);\n                IERC20(tokens[i]).safeTransfer(subvault0, balance - tokenAmounts[i]);\n            } else {\n                actualTokenAmounts[i] = balance;\n                IERC20(tokens[i]).safeTransfer(to, balance);\n            }\n        }\n    }\n}\n"
    },
    "contracts/vaults/GearboxRootVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/vaults/IERC20RootVaultGovernance.sol\";\nimport \"../interfaces/vaults/IGearboxRootVault.sol\";\nimport \"../interfaces/vaults/IGearboxVaultGovernance.sol\";\nimport \"../utils/ERC20Token.sol\";\nimport \"./AggregateVault.sol\";\n\n/// @notice Contract that mints and burns LP tokens in exchange for ERC20 liquidity.\ncontract GearboxRootVault is IGearboxRootVault, ERC20Token, ReentrancyGuard, AggregateVault {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 public constant D18 = 10**18;\n\n    /// @inheritdoc IGearboxRootVault\n    uint64 public lastFeeCharge;\n    /// @inheritdoc IGearboxRootVault\n    uint256 public lpPriceHighWaterMarkD18;\n\n    EnumerableSet.AddressSet private _depositorsAllowlist;\n\n    /// @inheritdoc IGearboxRootVault\n    IIntegrationVault public gearboxVault;\n    /// @inheritdoc IGearboxRootVault\n    IIntegrationVault public erc20Vault;\n    /// @inheritdoc IGearboxRootVault\n    address public primaryToken;\n\n    /// @inheritdoc IGearboxRootVault\n    bool public isClosed;\n\n    /// @inheritdoc IGearboxRootVault\n    uint256 public currentEpoch;\n\n    /// @inheritdoc IGearboxRootVault\n    mapping(address => uint256) public primaryTokensToClaim;\n    /// @inheritdoc IGearboxRootVault\n    mapping(address => uint256) public lpTokensWaitingForClaim;\n    /// @inheritdoc IGearboxRootVault\n    mapping(address => uint256) public withdrawalRequests;\n    /// @inheritdoc IGearboxRootVault\n    mapping(address => uint256) public latestRequestEpoch;\n\n    /// @inheritdoc IGearboxRootVault\n    mapping(uint256 => uint256) public epochToPriceForLpTokenD18;\n\n    /// @inheritdoc IGearboxRootVault\n    uint256 public totalCurrentEpochLpWitdrawalRequests;\n    /// @inheritdoc IGearboxRootVault\n    uint256 public totalLpTokensWaitingWithdrawal;\n    /// @inheritdoc IGearboxRootVault\n    uint256 public lastEpochChangeTimestamp;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n    /// @inheritdoc IGearboxRootVault\n    function depositorsAllowlist() external view returns (address[] memory) {\n        return _depositorsAllowlist.values();\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, AggregateVault)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId) || type(IGearboxRootVault).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n    /// @inheritdoc IGearboxRootVault\n    function addDepositorsToAllowlist(address[] calldata depositors) external {\n        _requireAtLeastStrategy();\n        for (uint256 i = 0; i < depositors.length; i++) {\n            _depositorsAllowlist.add(depositors[i]);\n        }\n    }\n\n    /// @inheritdoc IGearboxRootVault\n    function removeDepositorsFromAllowlist(address[] calldata depositors) external {\n        _requireAtLeastStrategy();\n        for (uint256 i = 0; i < depositors.length; i++) {\n            _depositorsAllowlist.remove(depositors[i]);\n        }\n    }\n\n    /// @inheritdoc IGearboxRootVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        address\n    ) external {\n        require(vaultTokens_.length == 1, ExceptionsLibrary.INVALID_LENGTH);\n        _initialize(vaultTokens_, nft_, strategy_, subvaultNfts_);\n        _initERC20(_getTokenName(bytes(\"Mellow Lp Token \"), nft_), _getTokenName(bytes(\"MLP\"), nft_));\n\n        erc20Vault = IIntegrationVault(IAggregateVault(address(this)).subvaultAt(0));\n        gearboxVault = IIntegrationVault(IAggregateVault(address(this)).subvaultAt(1));\n        primaryToken = vaultTokens_[0];\n\n        currentEpoch = 1;\n\n        lastFeeCharge = uint64(block.timestamp);\n    }\n\n    /// @inheritdoc IGearboxRootVault\n    function deposit(\n        uint256[] memory tokenAmounts,\n        uint256 minLpTokens,\n        bytes memory vaultOptions\n    ) external virtual nonReentrant returns (uint256[] memory actualTokenAmounts) {\n        address vaultGovernance = address(_vaultGovernance);\n        require(tokenAmounts.length == 1, ExceptionsLibrary.INVALID_LENGTH);\n        require(\n            !IERC20RootVaultGovernance(vaultGovernance).operatorParams().disableDeposit,\n            ExceptionsLibrary.FORBIDDEN\n        );\n        require(!isClosed, ExceptionsLibrary.FORBIDDEN);\n\n        uint256 thisNft = _nft;\n\n        if (totalSupply == 0) {\n            uint256 pullExistentialsForToken = _pullExistentials[0];\n            require(tokenAmounts[0] >= 10 * pullExistentialsForToken, ExceptionsLibrary.LIMIT_UNDERFLOW);\n            require(\n                tokenAmounts[0] <= pullExistentialsForToken * pullExistentialsForToken,\n                ExceptionsLibrary.LIMIT_OVERFLOW\n            );\n        }\n\n        IERC20RootVaultGovernance.DelayedStrategyParams memory delayedStrategyParams = IERC20RootVaultGovernance(\n            vaultGovernance\n        ).delayedStrategyParams(thisNft);\n        require(\n            !delayedStrategyParams.privateVault || _depositorsAllowlist.contains(msg.sender),\n            ExceptionsLibrary.FORBIDDEN\n        );\n\n        (uint256[] memory minTvl, ) = gearboxVault.tvl();\n        _chargeFees(thisNft, minTvl[0], totalSupply - totalLpTokensWaitingWithdrawal);\n\n        uint256 supply = totalSupply - totalLpTokensWaitingWithdrawal;\n        uint256 lpAmount;\n\n        if (supply == 0) {\n            lpAmount = tokenAmounts[0];\n        } else {\n            uint256 tvl = minTvl[0];\n            lpAmount = FullMath.mulDiv(supply, tokenAmounts[0], tvl);\n            tokenAmounts[0] = FullMath.mulDiv(tvl, lpAmount, supply);\n        }\n\n        require(lpAmount >= minLpTokens, ExceptionsLibrary.LIMIT_UNDERFLOW);\n        require(lpAmount != 0, ExceptionsLibrary.VALUE_ZERO);\n        IERC20RootVaultGovernance.StrategyParams memory params = IERC20RootVaultGovernance(vaultGovernance)\n            .strategyParams(thisNft);\n        require(lpAmount + balanceOf[msg.sender] <= params.tokenLimitPerAddress, ExceptionsLibrary.LIMIT_OVERFLOW);\n        require(lpAmount + supply <= params.tokenLimit, ExceptionsLibrary.LIMIT_OVERFLOW);\n\n        IERC20(primaryToken).safeTransferFrom(msg.sender, address(this), tokenAmounts[0]);\n\n        if (supply == 0) {\n            _mint(address(0), lpAmount);\n        } else {\n            _mint(msg.sender, lpAmount);\n        }\n\n        actualTokenAmounts = _pushIntoGearbox(tokenAmounts[0], vaultOptions);\n\n        emit Deposit(msg.sender, _vaultTokens, actualTokenAmounts, lpAmount);\n    }\n\n    /// @inheritdoc IGearboxRootVault\n    function registerWithdrawal(uint256 lpTokenAmount) external returns (uint256 amountRegistered) {\n        uint256 userLatestRequestEpoch = latestRequestEpoch[msg.sender];\n\n        if (currentEpoch == userLatestRequestEpoch || userLatestRequestEpoch == 0) {\n            uint256 senderBalance = balanceOf[msg.sender] -\n                lpTokensWaitingForClaim[msg.sender] -\n                withdrawalRequests[msg.sender];\n            if (lpTokenAmount > senderBalance) {\n                lpTokenAmount = senderBalance;\n            }\n\n            withdrawalRequests[msg.sender] += lpTokenAmount;\n            latestRequestEpoch[msg.sender] = currentEpoch;\n        } else {\n            _processHangingWithdrawal(msg.sender, false);\n\n            uint256 senderBalance = balanceOf[msg.sender] - lpTokensWaitingForClaim[msg.sender];\n            if (lpTokenAmount > senderBalance) {\n                lpTokenAmount = senderBalance;\n            }\n\n            withdrawalRequests[msg.sender] = lpTokenAmount;\n            latestRequestEpoch[msg.sender] = currentEpoch;\n        }\n\n        totalCurrentEpochLpWitdrawalRequests += lpTokenAmount;\n        emit WithdrawalRegistered(msg.sender, lpTokenAmount);\n        return lpTokenAmount;\n    }\n\n    /// @inheritdoc IGearboxRootVault\n    function cancelWithdrawal(uint256 lpTokenAmount) external returns (uint256 amountRemained) {\n        require(latestRequestEpoch[msg.sender] == currentEpoch, ExceptionsLibrary.DISABLED);\n\n        uint256 currentWithdrawalRequests = withdrawalRequests[msg.sender];\n\n        if (currentWithdrawalRequests > lpTokenAmount) {\n            withdrawalRequests[msg.sender] -= lpTokenAmount;\n            totalCurrentEpochLpWitdrawalRequests -= lpTokenAmount;\n            emit WithdrawalCancelled(msg.sender, lpTokenAmount);\n        } else {\n            totalCurrentEpochLpWitdrawalRequests -= currentWithdrawalRequests;\n            emit WithdrawalCancelled(msg.sender, currentWithdrawalRequests);\n            withdrawalRequests[msg.sender] = 0;\n        }\n\n        return withdrawalRequests[msg.sender];\n    }\n\n    /// @inheritdoc IGearboxRootVault\n    function invokeExecution() public {\n        _requireAtLeastStrategy();\n\n        IIntegrationVault gearboxVault_ = gearboxVault;\n\n        IGearboxVaultGovernance governance = IGearboxVaultGovernance(address(IVault(gearboxVault_).vaultGovernance()));\n        uint256 withdrawDelay = governance.delayedProtocolParams().withdrawDelay;\n\n        require(lastEpochChangeTimestamp + withdrawDelay <= block.timestamp || isClosed, ExceptionsLibrary.INVARIANT);\n        lastEpochChangeTimestamp = block.timestamp;\n\n        (uint256[] memory minTokenAmounts, ) = gearboxVault_.tvl();\n        _chargeFees(_nft, minTokenAmounts[0], totalSupply - totalLpTokensWaitingWithdrawal);\n\n        uint256 totalCurrentEpochLpWitdrawalRequests_ = totalCurrentEpochLpWitdrawalRequests;\n\n        uint256 totalAmount = FullMath.mulDiv(\n            totalCurrentEpochLpWitdrawalRequests_,\n            minTokenAmounts[0],\n            totalSupply - totalLpTokensWaitingWithdrawal\n        );\n\n        uint256[] memory tokenAmounts = new uint256[](1);\n        tokenAmounts[0] = totalAmount;\n        uint256[] memory pulledAmounts = gearboxVault_.pull(address(erc20Vault), _vaultTokens, tokenAmounts, \"\");\n        totalAmount = pulledAmounts[0];\n\n        if (totalCurrentEpochLpWitdrawalRequests_ > 0) {\n            totalLpTokensWaitingWithdrawal += totalCurrentEpochLpWitdrawalRequests_;\n            epochToPriceForLpTokenD18[currentEpoch] = FullMath.mulDiv(\n                totalAmount,\n                D18,\n                totalCurrentEpochLpWitdrawalRequests_\n            );\n            totalCurrentEpochLpWitdrawalRequests = 0;\n        }\n\n        currentEpoch += 1;\n        emit ExecutionInvoked(msg.sender, totalAmount);\n    }\n\n    /// @inheritdoc IGearboxRootVault\n    function withdraw(address to, bytes[] memory vaultsOptions)\n        external\n        nonReentrant\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        uint256 userLatestRequestEpoch = latestRequestEpoch[msg.sender];\n        if (currentEpoch != userLatestRequestEpoch && userLatestRequestEpoch != 0) {\n            _processHangingWithdrawal(msg.sender, true);\n        }\n\n        uint256 lpTokensToBurn = lpTokensWaitingForClaim[msg.sender];\n        uint256 primaryTokensToPull = primaryTokensToClaim[msg.sender];\n\n        uint256[] memory tokenAmounts = new uint256[](1);\n        tokenAmounts[0] = primaryTokensToPull;\n\n        _burn(msg.sender, lpTokensToBurn);\n        actualTokenAmounts = _pull(address(this), tokenAmounts, vaultsOptions);\n        lpTokensWaitingForClaim[msg.sender] = 0;\n        primaryTokensToClaim[msg.sender] = 0;\n\n        totalLpTokensWaitingWithdrawal -= lpTokensToBurn;\n\n        IERC20(primaryToken).safeTransfer(to, actualTokenAmounts[0]);\n\n        emit Withdraw(msg.sender, actualTokenAmounts, lpTokensToBurn);\n    }\n\n    /// @inheritdoc IGearboxRootVault\n    function shutdown() external {\n        _requireAtLeastStrategy();\n        require(!isClosed, ExceptionsLibrary.DUPLICATE);\n        isClosed = true;\n        invokeExecution();\n    }\n\n    /// @inheritdoc IGearboxRootVault\n    function reopen() external {\n        _requireAtLeastStrategy();\n        isClosed = false;\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _requireAtLeastStrategy() internal view {\n        uint256 nft_ = _nft;\n        IVaultGovernance.InternalParams memory internalParams = _vaultGovernance.internalParams();\n        require(\n            (internalParams.protocolGovernance.isAdmin(msg.sender) ||\n                internalParams.registry.getApproved(nft_) == msg.sender ||\n                (internalParams.registry.ownerOf(nft_) == msg.sender)),\n            ExceptionsLibrary.FORBIDDEN\n        );\n    }\n\n    function _getTokenName(bytes memory prefix, uint256 nft_) internal pure returns (string memory) {\n        bytes memory number = bytes(Strings.toString(nft_));\n        return string(abi.encodePacked(prefix, number));\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    /// @dev we are charging fees on the deposit / withdrawal\n    /// fees are charged before the tokens transfer and change the balance of the lp tokens\n    function _chargeFees(\n        uint256 thisNft,\n        uint256 tvl,\n        uint256 supply\n    ) internal {\n        IERC20RootVaultGovernance vg = IERC20RootVaultGovernance(address(_vaultGovernance));\n        uint256 elapsed = block.timestamp - uint256(lastFeeCharge);\n        IERC20RootVaultGovernance.DelayedProtocolParams memory delayedProtocolParams = vg.delayedProtocolParams();\n        if (elapsed < delayedProtocolParams.managementFeeChargeDelay || supply == 0) {\n            return;\n        }\n\n        lastFeeCharge = uint64(block.timestamp);\n        IERC20RootVaultGovernance.DelayedStrategyParams memory strategyParams = vg.delayedStrategyParams(thisNft);\n        uint256 protocolFee = vg.delayedProtocolPerVaultParams(thisNft).protocolFee;\n        address protocolTreasury = vg.internalParams().protocolGovernance.protocolTreasury();\n\n        _chargeManagementFees(\n            strategyParams.managementFee,\n            protocolFee,\n            strategyParams.strategyTreasury,\n            protocolTreasury,\n            elapsed,\n            supply\n        );\n\n        _chargePerformanceFees(supply, tvl, strategyParams.performanceFee, strategyParams.strategyPerformanceTreasury);\n    }\n\n    function _chargeManagementFees(\n        uint256 managementFee,\n        uint256 protocolFee,\n        address strategyTreasury,\n        address protocolTreasury,\n        uint256 elapsed,\n        uint256 lpSupply\n    ) internal {\n        if (managementFee > 0) {\n            uint256 toMint = FullMath.mulDiv(\n                managementFee * elapsed,\n                lpSupply,\n                CommonLibrary.YEAR * CommonLibrary.DENOMINATOR\n            );\n            _mint(strategyTreasury, toMint);\n            emit ManagementFeesCharged(strategyTreasury, managementFee, toMint);\n        }\n        if (protocolFee > 0) {\n            uint256 toMint = FullMath.mulDiv(\n                protocolFee * elapsed,\n                lpSupply,\n                CommonLibrary.YEAR * CommonLibrary.DENOMINATOR\n            );\n            _mint(protocolTreasury, toMint);\n            emit ProtocolFeesCharged(protocolTreasury, protocolFee, toMint);\n        }\n    }\n\n    function _chargePerformanceFees(\n        uint256 baseSupply,\n        uint256 tvl,\n        uint256 performanceFee,\n        address treasury\n    ) internal {\n        if ((performanceFee == 0) || (baseSupply == 0)) {\n            return;\n        }\n\n        uint256 lpPriceD18 = FullMath.mulDiv(tvl, CommonLibrary.D18, baseSupply);\n        uint256 hwmsD18 = lpPriceHighWaterMarkD18;\n        if (lpPriceD18 <= hwmsD18) {\n            return;\n        }\n\n        uint256 toMint;\n        if (hwmsD18 > 0) {\n            toMint = FullMath.mulDiv(baseSupply, lpPriceD18 - hwmsD18, hwmsD18);\n            toMint = FullMath.mulDiv(toMint, performanceFee, CommonLibrary.DENOMINATOR);\n            _mint(treasury, toMint);\n        }\n\n        lpPriceHighWaterMarkD18 = lpPriceD18;\n        emit PerformanceFeesCharged(treasury, performanceFee, toMint);\n    }\n\n    function _processHangingWithdrawal(address addr, bool nullifyRequest) internal {\n        uint256 pendingRequest = withdrawalRequests[addr];\n        uint256 userLatestRequestEpoch = latestRequestEpoch[addr];\n        uint256 tokenAmount = FullMath.mulDiv(pendingRequest, epochToPriceForLpTokenD18[userLatestRequestEpoch], D18);\n        primaryTokensToClaim[addr] += tokenAmount;\n        lpTokensWaitingForClaim[addr] += pendingRequest;\n\n        if (nullifyRequest) {\n            withdrawalRequests[addr] = 0;\n            latestRequestEpoch[addr] = 0;\n        }\n    }\n\n    function _pushIntoGearbox(uint256 amount, bytes memory vaultOptions)\n        internal\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        require(_nft != 0, ExceptionsLibrary.INIT);\n        IIntegrationVault gearboxVault_ = gearboxVault;\n        address primaryToken_ = primaryToken;\n\n        uint256[] memory tokenAmounts = new uint256[](1);\n        tokenAmounts[0] = amount;\n\n        IERC20(primaryToken_).safeIncreaseAllowance(address(gearboxVault_), amount);\n        actualTokenAmounts = gearboxVault_.transferAndPush(address(this), _vaultTokens, tokenAmounts, vaultOptions);\n        IERC20(primaryToken_).safeApprove(address(gearboxVault_), 0);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when management fees are charged\n    /// @param treasury Treasury receiver of the fee\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\n    /// @param amount Amount of lp token minted\n    event ManagementFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\n\n    /// @notice Emitted when a witdrawal request registered\n    /// @param sender Sender of the call (msg.sender)\n    /// @param lpAmountRegistered Amount of lp tokens registered for the withdrawal\n    event WithdrawalRegistered(address indexed sender, uint256 lpAmountRegistered);\n\n    /// @notice Emitted when some piece of the witdrawal request cancelled\n    /// @param sender Sender of the call (msg.sender)\n    /// @param lpAmountCancelled Amount of lp tokens for which the withdrawal is cancelled\n    event WithdrawalCancelled(address indexed sender, uint256 lpAmountCancelled);\n\n    /// @notice Emitted when the withdrawal orderd execution completed\n    /// @param sender Sender of the call (msg.sender)\n    /// @param amountWithdrawnToERC20 Amount of vault tokens withdrawn from Gearbox to the ERC20 vault\n    event ExecutionInvoked(address indexed sender, uint256 amountWithdrawnToERC20);\n\n    /// @notice Emitted when protocol fees are charged\n    /// @param treasury Treasury receiver of the fee\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\n    /// @param amount Amount of lp token minted\n    event ProtocolFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\n\n    /// @notice Emitted when performance fees are charged\n    /// @param treasury Treasury receiver of the fee\n    /// @param feeRate Fee percent applied denominated in 10 ** 9\n    /// @param amount Amount of lp token minted\n    event PerformanceFeesCharged(address indexed treasury, uint256 feeRate, uint256 amount);\n\n    /// @notice Emitted when liquidity is deposited\n    /// @param from The source address for the liquidity\n    /// @param tokens ERC20 tokens deposited\n    /// @param actualTokenAmounts Token amounts deposited\n    /// @param lpTokenMinted LP tokens received by the liquidity provider\n    event Deposit(address indexed from, address[] tokens, uint256[] actualTokenAmounts, uint256 lpTokenMinted);\n\n    /// @notice Emitted when liquidity is withdrawn\n    /// @param from The source address for the liquidity\n    /// @param actualTokenAmounts Token amounts withdrawn\n    /// @param lpTokenBurned LP tokens burned from the liquidity provider\n    event Withdraw(address indexed from, uint256[] actualTokenAmounts, uint256 lpTokenBurned);\n\n    /// @notice Emitted when callback in deposit failed\n    /// @param reason Error reason\n    event DepositCallbackLog(string reason);\n\n    /// @notice Emitted when callback in withdraw failed\n    /// @param reason Error reason\n    event WithdrawCallbackLog(string reason);\n}\n"
    },
    "contracts/interfaces/vaults/IGearboxRootVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IAggregateVault.sol\";\nimport \"./IIntegrationVault.sol\";\n\ninterface IGearboxRootVault is IAggregateVault, IERC20 {\n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param strategy_ The address that will have approvals for subvaultNfts\n    /// @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        address strategy_,\n        uint256[] memory subvaultNfts_,\n        address\n    ) external;\n\n    /// @notice The timestamp of last charging of fees\n    function lastFeeCharge() external view returns (uint64);\n\n    /// @notice Gearbox vault that is the second subvault of the system\n    function gearboxVault() external view returns (IIntegrationVault);\n\n    /// @notice ERC20 vault that is the first subvault of the system\n    function erc20Vault() external view returns (IIntegrationVault);\n\n    /// @notice The only token that the vault accepts for deposits/withdrawals\n    function primaryToken() external view returns (address);\n\n    /// @notice The flag of whether the vault is closed for deposits\n    function isClosed() external view returns (bool);\n\n    /// @notice LP parameter that controls the charge in performance fees\n    function lpPriceHighWaterMarkD18() external view returns (uint256);\n\n    /// @notice List of addresses of depositors from which interaction with private vaults is allowed\n    function depositorsAllowlist() external view returns (address[] memory);\n\n    /// @notice Add new depositors in the depositorsAllowlist\n    /// @param depositors Array of new depositors\n    /// @dev The action can be done only by user with admins, owners or by approved rights\n    function addDepositorsToAllowlist(address[] calldata depositors) external;\n\n    /// @notice Remove depositors from the depositorsAllowlist\n    /// @param depositors Array of depositors for remove\n    /// @dev The action can be done only by user with admins, owners or by approved rights\n    function removeDepositorsFromAllowlist(address[] calldata depositors) external;\n\n    /// @notice The function of depositing the amount of tokens in exchange\n    /// @param tokenAmounts Array of amounts of tokens for deposit\n    /// @param minLpTokens Minimal value of LP tokens\n    /// @param vaultOptions Options of vaults\n    /// @return actualTokenAmounts Arrays of actual token amounts after deposit\n    function deposit(\n        uint256[] memory tokenAmounts,\n        uint256 minLpTokens,\n        bytes memory vaultOptions\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice Current epoch, where the epoch means the number of completed withdrawal executions plus 1\n    function currentEpoch() external view returns (uint256);\n\n    /// @notice Total value of lp tokens withdrawal requests during the current epoch\n    function totalCurrentEpochLpWitdrawalRequests() external view returns (uint256);\n\n    /// @notice Total value of lp tokens whose corresponding vault tokens are awaiting on the ERC20 vault to be claimed \n    function totalLpTokensWaitingWithdrawal() external view returns (uint256);\n\n    /// @notice Timestamp of the latest epoch change \n    function lastEpochChangeTimestamp() external view returns (uint256);\n\n    /// @notice Total value of vault tokens awaiting on the ERC20 vault to be claimed for a specific address\n    /// @param addr Address for which the request is made\n    function primaryTokensToClaim(address addr) external view returns (uint256);\n\n    /// @notice Total value of lp tokens whose corresponding vault tokens are awaiting on the ERC20 vault to be claimed for a specific address\n    /// @param addr Address for which the request is made\n    function lpTokensWaitingForClaim(address addr) external view returns (uint256);\n\n    /// @notice Total value of lp tokens withdrawal requests during the current epoch for a specific address\n    /// @param addr Address for which the request is made\n    function withdrawalRequests(address addr) external view returns (uint256);\n\n    /// @notice The latest epoch in which a request was made for a specific address\n    /// @param addr Address for which the request is made\n    function latestRequestEpoch(address addr) external view returns (uint256);\n\n    /// @notice The lp token price for a specific epoch end\n    /// @param epoch Epoch for which the request is made\n    function epochToPriceForLpTokenD18(uint256 epoch) external view returns (uint256);\n\n    /// @notice The function of withdrawing the amount of tokens in exchange\n    /// @param to Address to which the withdrawal will be sent\n    /// @param vaultsOptions Options of vaults\n    /// @return actualTokenAmounts Arrays of actual token amounts after withdrawal\n    function withdraw(\n        address to,\n        bytes[] memory vaultsOptions\n    ) external returns (uint256[] memory actualTokenAmounts);\n\n    /// @notice The function of registering withdrawal of lp tokens amount\n    /// @param lpTokenAmount Amount the sender wants to withdraw \n    /// @return amountRegistered Amount which was actually registered\n    function registerWithdrawal(uint256 lpTokenAmount) external returns (uint256 amountRegistered);\n\n    /// @notice The function of cancelling withdrawal of lp tokens amount\n    /// @param lpTokenAmount Amount the sender wants to cancel \n    /// @return amountRemained Amount for which the withdrawal request remains\n    function cancelWithdrawal(uint256 lpTokenAmount) external returns (uint256 amountRemained);\n\n    /// @notice The function of invoking the execution of withdrawal orders and transfers corresponding funds to ERC20 vault\n    function invokeExecution() external;\n\n    /// @notice The function of invoking the emergency execution of withdrawal orders, transfers corresponding funds to ERC20 vault and stops deposits\n    function shutdown() external;\n\n    /// @notice The function of opening deposits back in case of a previous shutdown\n    function reopen() external;\n}\n"
    },
    "contracts/interfaces/vaults/IGearboxVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IGearboxVault.sol\";\nimport \"./IVaultGovernance.sol\";\n\ninterface IGearboxVaultGovernance is IVaultGovernance {\n\n    /// @notice Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\n    /// @param withdrawDelay The minimal time to pass between two consecutive withdrawal orders execution\n    /// @param referralCode The referral code to be used when depositing to Gearbox\n    /// @param univ3Adapter Address of the Uniswap V3 Adapter by Gearbox used by the system\n    /// @param crv CRV token address\n    /// @param cvx CVX token address\n    /// @param maxSlippageD9 Maximal admissible slippage for swaps between primary/deposit tokes\n    /// @param maxSmallPoolsSlippageD9 Maximal admissible slippage for swaps crv-weth and cvx-weth\n    /// @param maxCurveSlippageD9 Maximal admissible slippage for add/remove liquidity in Curve pool\n    /// @param uniswapRouter Address of the Uniswap V3 router\n    struct DelayedProtocolParams {\n        uint256 withdrawDelay;\n        uint16 referralCode;\n        address univ3Adapter;\n        address crv;\n        address cvx;\n        uint256 maxSlippageD9;\n        uint256 maxSmallPoolsSlippageD9;\n        uint256 maxCurveSlippageD9;\n        address uniswapRouter;\n    }\n\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param primaryToken Primary token of the vault (i.e. the token of the Gearbox Credit Account)\n    /// @param curveAdapter Address of the specific Curve pool Adapter by Gearbox used by the vault\n    /// @param convexAdapter Address of the specific Convex Base Reward pool Adapter by Gearbox used by the vault\n    /// @param facade Address of the Gearbox CreditFacade contract used by the vault\n    /// @param initialMarginalValueD9 Initial value of marginal factor of the vault\n    struct DelayedProtocolPerVaultParams {\n        address primaryToken;\n        address curveAdapter;\n        address convexAdapter;\n        address facade;\n        uint256 initialMarginalValueD9;\n    }\n\n    /// @notice Params that could be changed by Strategy or Protocol Governance.\n    /// @param largePoolFeeUsed Fee for the primary/deposit pool we want to use\n    struct StrategyParams {\n        uint24 largePoolFeeUsed;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Per Vault Params staged for commit after delay.\n    /// @param nft VaultRegistry NFT of the vault\n    function stagedDelayedProtocolPerVaultParams(uint256 nft)\n        external\n        view\n        returns (DelayedProtocolPerVaultParams memory);\n\n    /// @notice Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param nft VaultRegistry NFT of the vault\n    function delayedProtocolPerVaultParams(uint256 nft) external view returns (DelayedProtocolPerVaultParams memory);\n\n    /// @notice Strategy Params.\n    function strategyParams(uint256 nft) external view returns (StrategyParams memory);\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolParamsTimestamp.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams memory params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Stage Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params\n    function stageDelayedProtocolPerVaultParams(uint256 nft, DelayedProtocolPerVaultParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolPerVaultParamsTimestamp\n    /// @param nft VaultRegistry NFT of the vault\n    function commitDelayedProtocolPerVaultParams(uint256 nft) external;\n\n    /// @notice Set Strategy params, i.e. Params that could be changed by Strategy or Protocol Governance immediately.\n    /// @param params New params\n    function setStrategyParams(uint256 nft, StrategyParams calldata params) external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    /// @param helper_ Gearbox helper contract address\n    function createVault(address[] memory vaultTokens_, address owner_, address helper_)\n        external\n        returns (IGearboxVault vault, uint256 nft);\n}"
    },
    "contracts/interfaces/vaults/IGearboxVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IIntegrationVault.sol\";\nimport \"../external/gearbox/ICreditFacade.sol\";\nimport \"../external/gearbox/IUniswapV3Adapter.sol\";\n\ninterface IGearboxVault is IIntegrationVault {\n\n    /// @notice Reference to the Gearbox creditFacade contract for the primary token of this vault.\n    function creditFacade() external view returns (ICreditFacade);\n\n    /// @notice Reference to the Gearbox creditManager contract for the primary token of this vault.\n    function creditManager() external view returns (ICreditManagerV2);\n\n    /// @notice Primary token of the vault, for this token a credit account is opened in Gearbox.\n    function primaryToken() external view returns (address);\n\n    /// @notice Deposit token of the vault, deposits/withdawals are made in this token (might be the same or different with primaryToken)\n    function depositToken() external view returns (address);\n\n    /// @notice The leverage factor of the vault, multiplied by 10^9\n    /// For a vault with X usd of collateral and marginal factor T >= 1, total assets (collateral + debt) should be equal to X * T \n    function marginalFactorD9() external view returns (uint256);\n\n    /// @notice Index used for claiming in Gearbox V2 Degen contract\n    function merkleIndex() external view returns (uint256);\n\n    /// @notice NFTs amount used for claiming in Gearbox V2 Degen contract\n    function merkleTotalAmount() external view returns (uint256);\n\n    /// @notice Proof used for claiming in Gearbox V2 Degen contract\n    function getMerkleProof() external view returns (bytes32[] memory);\n\n    /// @notice The index of the curve pool the vault invests into\n    function poolId() external view returns (uint256);\n\n    /// @notice The index of the primary token in the used curve pool\n    function primaryIndex() external view returns (int128);\n\n    /// @notice The address of the convex token we receive after staking Convex LPs\n    function convexOutputToken() external view returns (address);\n    \n    /// @notice Initialized a new contract.\n    /// @dev Can only be initialized by vault governance\n    /// @param nft_ NFT of the vault in the VaultRegistry\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param helper_ address of helper\n    function initialize(uint256 nft_, address[] memory vaultTokens_, address helper_) external;\n\n    /// @notice Updates marginalFactorD9 (can be successfully called only by an admin or a strategist)\n    /// @param marginalFactorD_ New marginalFactorD9\n    function updateTargetMarginalFactor(uint256 marginalFactorD_) external;\n\n    /// @notice Sets merkle tree parameters for claiming Gearbox V2 Degen NFT (can be successfully called only by an admin or a strategist)\n    /// @param merkleIndex_ Required index\n    /// @param merkleTotalAmount_ Total amount of NFTs we have in Gearbox Degen Contract\n    /// @param merkleProof_ Proof in Merkle tree\n    function setMerkleParameters(uint256 merkleIndex_, uint256 merkleTotalAmount_, bytes32[] memory merkleProof_) external;\n\n    /// @notice Adjust a position (takes more debt or repays some, depending on the past performance) to achieve the required marginalFactorD9\n    function adjustPosition() external;\n\n    /// @notice Opens a new credit account on the address of the vault\n    function openCreditAccount() external;\n\n    /// @notice A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault\n    /// Can be successfully called only by the helper\n    function openCreditAccountInManager(uint256 currentPrimaryTokenAmount, uint16 referralCode) external;\n\n    /// @notice Returns an address of the credit account connected to the address of the vault\n    function getCreditAccount() external view returns (address);\n\n    /// @notice Returns value of all assets located on the vault, including taken with leverage (nominated in primary tokens)\n    function getAllAssetsOnCreditAccountValue() external view returns (uint256 currentAllAssetsValue);\n\n    /// @notice Returns value of rewards (CRV, CVX) we can obtain from Convex (nominated in primary tokens)\n    function getClaimableRewardsValue() external view returns (uint256);\n\n    /// @notice A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault\n    /// Can be successfully called only by the helper\n    function multicall(MultiCall[] memory calls) external;\n\n    /// @notice A helper function to be able to call Gearbox multicalls from the helper, but on behalf of the vault\n    /// Can be successfully called only by the helper\n    function swap(ISwapRouter router, ISwapRouter.ExactOutputParams memory uniParams, address token, uint256 amount) external;\n}"
    },
    "contracts/interfaces/external/gearbox/ICreditFacade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\n\nimport { IVersion } from \"./helpers/IVersion.sol\";\nimport { ICreditManagerV2, ICreditManagerV2Exceptions } from \"./helpers/ICreditManagerV2.sol\";\nimport { Balance } from \"./helpers/libraries/Balances.sol\";\nimport { MultiCall } from \"./helpers/libraries/MultiCall.sol\";\n\ninterface ICreditFacadeExtended {\n    /// @dev Stores expected balances (computed as current balance + passed delta)\n    ///      and compare with actual balances at the end of a multicall, reverts\n    ///      if at least one is less than expected\n    /// @param expected Array of expected balance changes\n    /// @notice This is an extenstion function that does not exist in the Credit Facade\n    ///         itself and can only be used within a multicall\n    function revertIfReceivedLessThan(Balance[] memory expected) external;\n\n    /// @dev Disables a token on the caller's Credit Account\n    /// @param token Token to disable\n    /// @notice This is an extenstion function that does not exist in the Credit Facade\n    ///         itself and can only be used within a multicall\n    function disableToken(address token) external;\n}\n\ninterface ICreditFacadeEvents {\n    /// @dev Emits when a new Credit Account is opened through the\n    ///      Credit Facade\n    event OpenCreditAccount(\n        address indexed onBehalfOf,\n        address indexed creditAccount,\n        uint256 borrowAmount,\n        uint16 referralCode\n    );\n\n    /// @dev Emits when the account owner closes their CA normally\n    event CloseCreditAccount(address indexed owner, address indexed to);\n\n    /// @dev Emits when a Credit Account is liquidated due to low health factor\n    event LiquidateCreditAccount(\n        address indexed owner,\n        address indexed liquidator,\n        address indexed to,\n        uint256 remainingFunds\n    );\n\n    /// @dev Emits when a Credit Account is liquidated due to expiry\n    event LiquidateExpiredCreditAccount(\n        address indexed owner,\n        address indexed liquidator,\n        address indexed to,\n        uint256 remainingFunds\n    );\n\n    /// @dev Emits when the account owner increases CA's debt\n    event IncreaseBorrowedAmount(address indexed borrower, uint256 amount);\n\n    /// @dev Emits when the account owner reduces CA's debt\n    event DecreaseBorrowedAmount(address indexed borrower, uint256 amount);\n\n    /// @dev Emits when the account owner add new collateral to a CA\n    event AddCollateral(\n        address indexed onBehalfOf,\n        address indexed token,\n        uint256 value\n    );\n\n    /// @dev Emits when a multicall is started\n    event MultiCallStarted(address indexed borrower);\n\n    /// @dev Emits when a multicall is finished\n    event MultiCallFinished();\n\n    /// @dev Emits when Credit Account ownership is transferred\n    event TransferAccount(address indexed oldOwner, address indexed newOwner);\n\n    /// @dev Emits when the user changes approval for account transfers to itself from another address\n    event TransferAccountAllowed(\n        address indexed from,\n        address indexed to,\n        bool state\n    );\n\n    /// @dev Emits when the account owner enables a token on their CA\n    event TokenEnabled(address creditAccount, address token);\n\n    /// @dev Emits when the account owner disables a token on their CA\n    event TokenDisabled(address creditAccount, address token);\n}\n\ninterface ICreditFacadeExceptions is ICreditManagerV2Exceptions {\n    /// @dev Thrown if the CreditFacade is not expirable, and an aciton is attempted that\n    ///      requires expirability\n    error NotAllowedWhenNotExpirableException();\n\n    /// @dev Thrown if whitelisted mode is enabled, and an action is attempted that is\n    ///      not allowed in whitelisted mode\n    error NotAllowedInWhitelistedMode();\n\n    /// @dev Thrown if a user attempts to transfer a CA to an address that didn't allow it\n    error AccountTransferNotAllowedException();\n\n    /// @dev Thrown if a liquidator tries to liquidate an account with a health factor above 1\n    error CantLiquidateWithSuchHealthFactorException();\n\n    /// @dev Thrown if a liquidator tries to liquidate an account by expiry while a Credit Facade is not expired\n    error CantLiquidateNonExpiredException();\n\n    /// @dev Thrown if call data passed to a multicall is too short\n    error IncorrectCallDataException();\n\n    /// @dev Thrown inside account closure multicall if the borrower attempts an action that is forbidden on closing\n    ///      an account\n    error ForbiddenDuringClosureException();\n\n    /// @dev Thrown if debt increase and decrease are subsequently attempted in one multicall\n    error IncreaseAndDecreaseForbiddenInOneCallException();\n\n    /// @dev Thrown if a selector that doesn't match any allowed function is passed to the Credit Facade\n    ///      during a multicall\n    error UnknownMethodException();\n\n    /// @dev Thrown if a user tries to open an account or increase debt with increaseDebtForbidden mode on\n    error IncreaseDebtForbiddenException();\n\n    /// @dev Thrown if the account owner tries to transfer an unhealthy account\n    error CantTransferLiquidatableAccountException();\n\n    /// @dev Thrown if too much new debt was taken within a single block\n    error BorrowedBlockLimitException();\n\n    /// @dev Thrown if the new debt principal for a CA falls outside of borrowing limits\n    error BorrowAmountOutOfLimitsException();\n\n    /// @dev Thrown if one of the balances on a Credit Account is less than expected\n    ///      at the end of a multicall, if revertIfReceivedLessThan was called\n    error BalanceLessThanMinimumDesiredException(address);\n\n    /// @dev Thrown if a user attempts to open an account on a Credit Facade that has expired\n    error OpenAccountNotAllowedAfterExpirationException();\n\n    /// @dev Thrown if expected balances are attempted to be set through revertIfReceivedLessThan twice\n    error ExpectedBalancesAlreadySetException();\n\n    /// @dev Thrown if a Credit Account has enabled forbidden tokens and the owner attempts to perform an action\n    ///      that is not allowed with any forbidden tokens enabled\n    error ActionProhibitedWithForbiddenTokensException();\n}\n\ninterface ICreditFacade is\n    ICreditFacadeEvents,\n    ICreditFacadeExceptions,\n    IVersion\n{\n    //\n    // CREDIT ACCOUNT MANAGEMENT\n    //\n\n    /// @dev Opens credit account, borrows funds from the pool and pulls collateral\n    /// without any additional action.\n    /// @param amount The amount of collateral provided by the borrower\n    /// @param onBehalfOf The address to open an account for. Transfers to it have to be allowed if\n    /// msg.sender != obBehalfOf\n    /// @param leverageFactor Percentage of the user's own funds to borrow. 100 is equal to 100% - borrows the same amount\n    /// as the user's own collateral, equivalent to 2x leverage.\n    /// @param referralCode Referral code that is used for potential rewards. 0 if no referral code provided.\n    function openCreditAccount(\n        uint256 amount,\n        address onBehalfOf,\n        uint16 leverageFactor,\n        uint16 referralCode\n    ) external payable;\n\n    /// @dev Opens a Credit Account and runs a batch of operations in a multicall\n    /// @param borrowedAmount Debt size\n    /// @param onBehalfOf The address to open an account for. Transfers to it have to be allowed if\n    /// msg.sender != obBehalfOf\n    /// @param calls The array of MultiCall structs encoding the required operations. Generally must have\n    /// at least a call to addCollateral, as otherwise the health check at the end will fail.\n    /// @param referralCode Referral code which is used for potential rewards. 0 if no referral code provided\n    function openCreditAccountMulticall(\n        uint256 borrowedAmount,\n        address onBehalfOf,\n        MultiCall[] calldata calls,\n        uint16 referralCode\n    ) external payable;\n\n    /// @dev Runs a batch of transactions within a multicall and closes the account\n    /// - Wraps ETH to WETH and sends it msg.sender if value > 0\n    /// - Executes the multicall - the main purpose of a multicall when closing is to convert all assets to underlying\n    /// in order to pay the debt.\n    /// - Closes credit account:\n    ///    + Checks the underlying balance: if it is greater than the amount paid to the pool, transfers the underlying\n    ///      from the Credit Account and proceeds. If not, tries to transfer the shortfall from msg.sender.\n    ///    + Transfers all enabled assets with non-zero balances to the \"to\" address, unless they are marked\n    ///      to be skipped in skipTokenMask\n    ///    + If convertWETH is true, converts WETH into ETH before sending to the recipient\n    /// - Emits a CloseCreditAccount event\n    ///\n    /// @param to Address to send funds to during account closing\n    /// @param skipTokenMask Uint-encoded bit mask where 1's mark tokens that shouldn't be transferred\n    /// @param convertWETH If true, converts WETH into ETH before sending to \"to\"\n    /// @param calls The array of MultiCall structs encoding the operations to execute before closing the account.\n    function closeCreditAccount(\n        address to,\n        uint256 skipTokenMask,\n        bool convertWETH,\n        MultiCall[] calldata calls\n    ) external payable;\n\n    /// @dev Runs a batch of transactions within a multicall and liquidates the account\n    /// - Computes the total value and checks that hf < 1. An account can't be liquidated when hf >= 1.\n    ///   Total value has to be computed before the multicall, otherwise the liquidator would be able\n    ///   to manipulate it.\n    /// - Wraps ETH to WETH and sends it to msg.sender (liquidator) if value > 0\n    /// - Executes the multicall - the main purpose of a multicall when liquidating is to convert all assets to underlying\n    ///   in order to pay the debt.\n    /// - Liquidate credit account:\n    ///    + Computes the amount that needs to be paid to the pool. If totalValue * liquidationDiscount < borrow + interest + fees,\n    ///      only totalValue * liquidationDiscount has to be paid. Since liquidationDiscount < 1, the liquidator can take\n    ///      totalValue * (1 - liquidationDiscount) as premium. Also computes the remaining funds to be sent to borrower\n    ///      as totalValue * liquidationDiscount - amountToPool.\n    ///    + Checks the underlying balance: if it is greater than amountToPool + remainingFunds, transfers the underlying\n    ///      from the Credit Account and proceeds. If not, tries to transfer the shortfall from the liquidator.\n    ///    + Transfers all enabled assets with non-zero balances to the \"to\" address, unless they are marked\n    ///      to be skipped in skipTokenMask. If the liquidator is confident that all assets were converted\n    ///      during the multicall, they can set the mask to uint256.max - 1, to only transfer the underlying\n    ///    + If convertWETH is true, converts WETH into ETH before sending\n    /// - Emits LiquidateCreditAccount event\n    ///\n    /// @param to Address to send funds to after liquidation\n    /// @param skipTokenMask Uint-encoded bit mask where 1's mark tokens that shouldn't be transferred\n    /// @param convertWETH If true, converts WETH into ETH before sending to \"to\"\n    /// @param calls The array of MultiCall structs encoding the operations to execute before liquidating the account.\n    function liquidateCreditAccount(\n        address borrower,\n        address to,\n        uint256 skipTokenMask,\n        bool convertWETH,\n        MultiCall[] calldata calls\n    ) external payable;\n\n    /// @dev Runs a batch of transactions within a multicall and liquidates the account when\n    /// this Credit Facade is expired\n    /// The general flow of liquidation is nearly the same as normal liquidations, with two main differences:\n    ///     - An account can be liquidated on an expired Credit Facade even with hf > 1. However,\n    ///       no accounts can be liquidated through this function if the Credit Facade is not expired.\n    ///     - Liquidation premiums and fees for liquidating expired accounts are reduced.\n    /// It is still possible to normally liquidate an underwater Credit Account, even when the Credit Facade\n    /// is expired.\n    /// @param to Address to send funds to after liquidation\n    /// @param skipTokenMask Uint-encoded bit mask where 1's mark tokens that shouldn't be transferred\n    /// @param convertWETH If true, converts WETH into ETH before sending to \"to\"\n    /// @param calls The array of MultiCall structs encoding the operations to execute before liquidating the account.\n    /// @notice See more at https://dev.gearbox.fi/docs/documentation/credit/liquidation#liquidating-accounts-by-expiration\n    function liquidateExpiredCreditAccount(\n        address borrower,\n        address to,\n        uint256 skipTokenMask,\n        bool convertWETH,\n        MultiCall[] calldata calls\n    ) external payable;\n\n    /// @dev Increases debt for msg.sender's Credit Account\n    /// - Borrows the requested amount from the pool\n    /// - Updates the CA's borrowAmount / cumulativeIndexOpen\n    ///   to correctly compute interest going forward\n    /// - Performs a full collateral check\n    ///\n    /// @param amount Amount to borrow\n    function increaseDebt(uint256 amount) external;\n\n    /// @dev Decrease debt\n    /// - Decreases the debt by paying the requested amount + accrued interest + fees back to the pool\n    /// - It's also include to this payment interest accrued at the moment and fees\n    /// - Updates cunulativeIndex to cumulativeIndex now\n    ///\n    /// @param amount Amount to increase borrowed amount\n    function decreaseDebt(uint256 amount) external;\n\n    /// @dev Adds collateral to borrower's credit account\n    /// @param onBehalfOf Address of the borrower whose account is funded\n    /// @param token Address of a collateral token\n    /// @param amount Amount to add\n    function addCollateral(\n        address onBehalfOf,\n        address token,\n        uint256 amount\n    ) external payable;\n\n    /// @dev Executes a batch of transactions within a Multicall, to manage an existing account\n    ///  - Wraps ETH and sends it back to msg.sender, if value > 0\n    ///  - Executes the Multicall\n    ///  - Performs a fullCollateralCheck to verify that hf > 1 after all actions\n    /// @param calls The array of MultiCall structs encoding the operations to execute.\n    function multicall(MultiCall[] calldata calls) external payable;\n\n    /// @dev Returns true if the borrower has an open Credit Account\n    /// @param borrower Borrower address\n    function hasOpenedCreditAccount(address borrower)\n        external\n        view\n        returns (bool);\n\n    /// @dev Sets token allowance from msg.sender's Credit Account to a connected target contract\n    /// @param targetContract Contract to set allowance to. Cannot be in the list of upgradeable contracts\n    /// @param token Token address\n    /// @param amount Allowance amount\n    function approve(\n        address targetContract,\n        address token,\n        uint256 amount\n    ) external;\n\n    /// @dev Approves account transfer from another user to msg.sender\n    /// @param from Address for which account transfers are allowed/forbidden\n    /// @param state True is transfer is allowed, false if forbidden\n    function approveAccountTransfer(address from, bool state) external;\n\n    /// @dev Enables token in enabledTokenMask for the Credit Account of msg.sender\n    /// @param token Address of token to enable\n    function enableToken(address token) external;\n\n    /// @dev Transfers credit account to another user\n    /// By default, this action is forbidden, and the user has to approve transfers from sender to itself\n    /// by calling approveAccountTransfer.\n    /// This is done to prevent malicious actors from transferring compromised accounts to other users.\n    /// @param to Address to transfer the account to\n    function transferAccountOwnership(address to) external;\n\n    //\n    // GETTERS\n    //\n\n    /// @dev Calculates total value for provided Credit Account in underlying\n    ///\n    /// @param creditAccount Credit Account address\n    /// @return total Total value in underlying\n    /// @return twv Total weighted (discounted by liquidation thresholds) value in underlying\n    function calcTotalValue(address creditAccount)\n        external\n        view\n        returns (uint256 total, uint256 twv);\n\n    /**\n     * @dev Calculates health factor for the credit account\n     *\n     *          sum(asset[i] * liquidation threshold[i])\n     *   Hf = --------------------------------------------\n     *         borrowed amount + interest accrued + fees\n     *\n     *\n     * More info: https://dev.gearbox.fi/developers/credit/economy#health-factor\n     *\n     * @param creditAccount Credit account address\n     * @return hf = Health factor in bp (see PERCENTAGE FACTOR in PercentageMath.sol)\n     */\n    function calcCreditAccountHealthFactor(address creditAccount)\n        external\n        view\n        returns (uint256 hf);\n\n    /// @dev Returns true if token is a collateral token and is not forbidden,\n    /// otherwise returns false\n    /// @param token Token to check\n    function isTokenAllowed(address token) external view returns (bool);\n\n    /// @dev Returns the CreditManager connected to this Credit Facade\n    function creditManager() external view returns (ICreditManagerV2);\n\n    /// @dev Returns true if 'from' is allowed to transfer Credit Accounts to 'to'\n    /// @param from Sender address to check allowance for\n    /// @param to Receiver address to check allowance for\n    function transfersAllowed(address from, address to)\n        external\n        view\n        returns (bool);\n\n    /// @return maxBorrowedAmountPerBlock Maximal amount of new debt that can be taken per block\n    /// @return isIncreaseDebtForbidden True if increasing debt is forbidden\n    /// @return expirationDate Timestamp of the next expiration (for expirable Credit Facades only)\n    function params()\n        external\n        view\n        returns (\n            uint128 maxBorrowedAmountPerBlock,\n            bool isIncreaseDebtForbidden,\n            uint40 expirationDate\n        );\n\n    /// @return minBorrowedAmount Minimal borrowed amount per credit account\n    /// @return maxBorrowedAmount Maximal borrowed amount per credit account\n    function limits()\n        external\n        view\n        returns (uint128 minBorrowedAmount, uint128 maxBorrowedAmount);\n\n    /// @dev Address of the DegenNFT that gatekeeps account openings in whitelisted mode\n    function degenNFT() external view returns (address);\n}"
    },
    "contracts/interfaces/external/gearbox/IUniswapV3Adapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\n\nimport { IAdapter } from \"./helpers/IAdapter.sol\";\nimport { ISwapRouter } from \"./helpers/uniswap/IUniswapV3.sol\";\n\ninterface IUniswapV3AdapterExceptions {\n    error IncorrectPathLengthException();\n}\n\ninterface IUniswapV3Adapter is\n    IAdapter,\n    ISwapRouter,\n    IUniswapV3AdapterExceptions\n{\n    /// @dev A struct encoding parameters for exactAllInputSingle,\n    ///      which is unique to the Gearbox adapter\n    /// @param tokenIn Token that is spent by the swap\n    /// @param tokenOut Token that is received from the swap\n    /// @param fee The fee category to use\n    /// @param deadline The timestamp, after which the swap will revert\n    /// @param rateMinRAY The minimal exhange rate between tokenIn and tokenOut\n    ///                   used to calculate amountOutMin on the spot, since the input amount\n    ///                   may not always be known in advance\n    /// @param sqrtPriceLimitX96 The max execution price. Will be ignored if set to 0.\n    struct ExactAllInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        uint256 deadline;\n        uint256 rateMinRAY;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Sends an order to swap the entire balance of one token for as much as possible of another token\n    /// - Fills the `ExactInputSingleParams` struct\n    /// - Makes a max allowance fast check call, passing the new struct as params\n    /// @param params The parameters necessary for the swap, encoded as `ExactAllInputSingleParams` in calldata\n    function exactAllInputSingle(ExactAllInputSingleParams calldata params)\n        external\n        returns (uint256 amountOut);\n\n    /// @dev A struct encoding parameters for exactAllInput,\n    ///      which is unique to the Gearbox adapter\n    /// @param path Bytes array encoding the sequence of swaps to perform,\n    ///             in the format TOKEN_FEE_TOKEN_FEE_TOKEN...\n    /// @param deadline The timestamp, after which the swap will revert\n    /// @param rateMinRAY The minimal exhange rate between tokenIn and tokenOut\n    ///                   used to calculate amountOutMin on the spot, since the input amount\n    ///                   may not always be known in advance\n    struct ExactAllInputParams {\n        bytes path;\n        uint256 deadline;\n        uint256 rateMinRAY;\n    }\n\n    /// @notice Swaps the entire balance of one token for as much as possible of another along the specified path\n    /// - Fills the `ExactAllInputParams` struct\n    /// - Makes a max allowance fast check call, passing the new struct as `params`\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactAllInputParams` in calldata\n    function exactAllInput(ExactAllInputParams calldata params)\n        external\n        returns (uint256 amountOut);\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/IVersion.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\n\n/// @title IVersion\n/// @dev Declares a version function which returns the contract's version\ninterface IVersion {\n    /// @dev Returns contract version\n    function version() external view returns (uint256);\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/ICreditManagerV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\n\nimport { IPriceOracleV2 } from \"./IPriceOracle.sol\";\nimport { IVersion } from \"./IVersion.sol\";\n\nenum ClosureAction {\n    CLOSE_ACCOUNT,\n    LIQUIDATE_ACCOUNT,\n    LIQUIDATE_EXPIRED_ACCOUNT,\n    LIQUIDATE_PAUSED\n}\n\ninterface ICreditManagerV2Events {\n    /// @dev Emits when a call to an external contract is made through the Credit Manager\n    event ExecuteOrder(address indexed borrower, address indexed target);\n\n    /// @dev Emits when a configurator is upgraded\n    event NewConfigurator(address indexed newConfigurator);\n}\n\ninterface ICreditManagerV2Exceptions {\n    /// @dev Thrown if an access-restricted function is called by an address that is not\n    ///      the connected Credit Facade, or an allowed adapter\n    error AdaptersOrCreditFacadeOnlyException();\n\n    /// @dev Thrown if an access-restricted function is called by an address that is not\n    ///      the connected Credit Facade\n    error CreditFacadeOnlyException();\n\n    /// @dev Thrown if an access-restricted function is called by an address that is not\n    ///      the connected Credit Configurator\n    error CreditConfiguratorOnlyException();\n\n    /// @dev Thrown on attempting to open a Credit Account for or transfer a Credit Account\n    ///      to the zero address or an address that already owns a Credit Account\n    error ZeroAddressOrUserAlreadyHasAccountException();\n\n    /// @dev Thrown on attempting to execute an order to an address that is not an allowed\n    ///      target contract\n    error TargetContractNotAllowedException();\n\n    /// @dev Thrown on failing a full collateral check after an operation\n    error NotEnoughCollateralException();\n\n    /// @dev Thrown on attempting to receive a token that is not a collateral token\n    ///      or was forbidden\n    error TokenNotAllowedException();\n\n    /// @dev Thrown if an attempt to approve a collateral token to a target contract failed\n    error AllowanceFailedException();\n\n    /// @dev Thrown on attempting to perform an action for an address that owns no Credit Account\n    error HasNoOpenedAccountException();\n\n    /// @dev Thrown on attempting to add a token that is already in a collateral list\n    error TokenAlreadyAddedException();\n\n    /// @dev Thrown on configurator attempting to add more than 256 collateral tokens\n    error TooManyTokensException();\n\n    /// @dev Thrown if more than the maximal number of tokens were enabled on a Credit Account,\n    ///      and there are not enough unused token to disable\n    error TooManyEnabledTokensException();\n\n    /// @dev Thrown when a reentrancy into the contract is attempted\n    error ReentrancyLockException();\n}\n\n/// @notice All Credit Manager functions are access-restricted and can only be called\n///         by the Credit Facade or allowed adapters. Users are not allowed to\n///         interact with the Credit Manager directly\ninterface ICreditManagerV2 is\n    ICreditManagerV2Events,\n    ICreditManagerV2Exceptions,\n    IVersion\n{\n    //\n    // CREDIT ACCOUNT MANAGEMENT\n    //\n\n    ///  @dev Opens credit account and borrows funds from the pool.\n    /// - Takes Credit Account from the factory;\n    /// - Requests the pool to lend underlying to the Credit Account\n    ///\n    /// @param borrowedAmount Amount to be borrowed by the Credit Account\n    /// @param onBehalfOf The owner of the newly opened Credit Account\n    function openCreditAccount(uint256 borrowedAmount, address onBehalfOf)\n        external\n        returns (address);\n\n    ///  @dev Closes a Credit Account - covers both normal closure and liquidation\n    /// - Checks whether the contract is paused, and, if so, if the payer is an emergency liquidator.\n    ///   Only emergency liquidators are able to liquidate account while the CM is paused.\n    ///   Emergency liquidations do not pay a liquidator premium or liquidation fees.\n    /// - Calculates payments to various recipients on closure:\n    ///    + Computes amountToPool, which is the amount to be sent back to the pool.\n    ///      This includes the principal, interest and fees, but can't be more than\n    ///      total position value\n    ///    + Computes remainingFunds during liquidations - these are leftover funds\n    ///      after paying the pool and the liquidator, and are sent to the borrower\n    ///    + Computes protocol profit, which includes interest and liquidation fees\n    ///    + Computes loss if the totalValue is less than borrow amount + interest\n    /// - Checks the underlying token balance:\n    ///    + if it is larger than amountToPool, then the pool is paid fully from funds on the Credit Account\n    ///    + else tries to transfer the shortfall from the payer - either the borrower during closure, or liquidator during liquidation\n    /// - Send assets to the \"to\" address, as long as they are not included into skipTokenMask\n    /// - If convertWETH is true, the function converts WETH into ETH before sending\n    /// - Returns the Credit Account back to factory\n    ///\n    /// @param borrower Borrower address\n    /// @param closureActionType Whether the account is closed, liquidated or liquidated due to expiry\n    /// @param totalValue Portfolio value for liqution, 0 for ordinary closure\n    /// @param payer Address which would be charged if credit account has not enough funds to cover amountToPool\n    /// @param to Address to which the leftover funds will be sent\n    /// @param skipTokenMask Tokenmask contains 1 for tokens which needed to be skipped for sending\n    /// @param convertWETH If true converts WETH to ETH\n    function closeCreditAccount(\n        address borrower,\n        ClosureAction closureActionType,\n        uint256 totalValue,\n        address payer,\n        address to,\n        uint256 skipTokenMask,\n        bool convertWETH\n    ) external returns (uint256 remainingFunds);\n\n    /// @dev Manages debt size for borrower:\n    ///\n    /// - Increase debt:\n    ///   + Increases debt by transferring funds from the pool to the credit account\n    ///   + Updates the cumulative index to keep interest the same. Since interest\n    ///     is always computed dynamically as borrowedAmount * (cumulativeIndexNew / cumulativeIndexOpen - 1),\n    ///     cumulativeIndexOpen needs to be updated, as the borrow amount has changed\n    ///\n    /// - Decrease debt:\n    ///   + Repays debt partially + all interest and fees accrued thus far\n    ///   + Updates cunulativeIndex to cumulativeIndex now\n    ///\n    /// @param creditAccount Address of the Credit Account to change debt for\n    /// @param amount Amount to increase / decrease the principal by\n    /// @param increase True to increase principal, false to decrease\n    /// @return newBorrowedAmount The new debt principal\n    function manageDebt(\n        address creditAccount,\n        uint256 amount,\n        bool increase\n    ) external returns (uint256 newBorrowedAmount);\n\n    /// @dev Adds collateral to borrower's credit account\n    /// @param payer Address of the account which will be charged to provide additional collateral\n    /// @param creditAccount Address of the Credit Account\n    /// @param token Collateral token to add\n    /// @param amount Amount to add\n    function addCollateral(\n        address payer,\n        address creditAccount,\n        address token,\n        uint256 amount\n    ) external;\n\n    /// @dev Transfers Credit Account ownership to another address\n    /// @param from Address of previous owner\n    /// @param to Address of new owner\n    function transferAccountOwnership(address from, address to) external;\n\n    /// @dev Requests the Credit Account to approve a collateral token to another contract.\n    /// @param borrower Borrower's address\n    /// @param targetContract Spender to change allowance for\n    /// @param token Collateral token to approve\n    /// @param amount New allowance amount\n    function approveCreditAccount(\n        address borrower,\n        address targetContract,\n        address token,\n        uint256 amount\n    ) external;\n\n    /// @dev Requests a Credit Account to make a low-level call with provided data\n    /// This is the intended pathway for state-changing interactions with 3rd-party protocols\n    /// @param borrower Borrower's address\n    /// @param targetContract Contract to be called\n    /// @param data Data to pass with the call\n    function executeOrder(\n        address borrower,\n        address targetContract,\n        bytes memory data\n    ) external returns (bytes memory);\n\n    //\n    // COLLATERAL VALIDITY AND ACCOUNT HEALTH CHECKS\n    //\n\n    /// @dev Enables a token on a Credit Account, including it\n    /// into account health and total value calculations\n    /// @param creditAccount Address of a Credit Account to enable the token for\n    /// @param token Address of the token to be enabled\n    function checkAndEnableToken(address creditAccount, address token) external;\n\n    /// @dev Optimized health check for individual swap-like operations.\n    /// @notice Fast health check assumes that only two tokens (input and output)\n    ///         participate in the operation and computes a % change in weighted value between\n    ///         inbound and outbound collateral. The cumulative negative change across several\n    ///         swaps in sequence cannot be larger than feeLiquidation (a fee that the\n    ///         protocol is ready to waive if needed). Since this records a % change\n    ///         between just two tokens, the corresponding % change in TWV will always be smaller,\n    ///         which makes this check safe.\n    ///         More details at https://dev.gearbox.fi/docs/documentation/risk/fast-collateral-check#fast-check-protection\n    /// @param creditAccount Address of the Credit Account\n    /// @param tokenIn Address of the token spent by the swap\n    /// @param tokenOut Address of the token received from the swap\n    /// @param balanceInBefore Balance of tokenIn before the operation\n    /// @param balanceOutBefore Balance of tokenOut before the operation\n    function fastCollateralCheck(\n        address creditAccount,\n        address tokenIn,\n        address tokenOut,\n        uint256 balanceInBefore,\n        uint256 balanceOutBefore\n    ) external;\n\n    /// @dev Performs a full health check on an account, summing up\n    /// value of all enabled collateral tokens\n    /// @param creditAccount Address of the Credit Account to check\n    function fullCollateralCheck(address creditAccount) external;\n\n    /// @dev Checks that the number of enabled tokens on a Credit Account\n    ///      does not violate the maximal enabled token limit and tries\n    ///      to disable unused tokens if it does\n    /// @param creditAccount Account to check enabled tokens for\n    function checkAndOptimizeEnabledTokens(address creditAccount) external;\n\n    /// @dev Disables a token on a credit account\n    /// @notice Usually called by adapters to disable spent tokens during a multicall,\n    ///         but can also be called separately from the Credit Facade to remove\n    ///         unwanted tokens\n    function disableToken(address creditAccount, address token) external;\n\n    //\n    // GETTERS\n    //\n\n    /// @dev Returns the address of a borrower's Credit Account, or reverts if there is none.\n    /// @param borrower Borrower's address\n    function getCreditAccountOrRevert(address borrower)\n        external\n        view\n        returns (address);\n\n    /// @dev Computes amounts that must be sent to various addresses before closing an account\n    /// @param totalValue Credit Accounts total value in underlying\n    /// @param closureActionType Type of account closure\n    ///        * CLOSE_ACCOUNT: The account is healthy and is closed normally\n    ///        * LIQUIDATE_ACCOUNT: The account is unhealthy and is being liquidated to avoid bad debt\n    ///        * LIQUIDATE_EXPIRED_ACCOUNT: The account has expired and is being liquidated (lowered liquidation premium)\n    ///        * LIQUIDATE_PAUSED: The account is liquidated while the system is paused due to emergency (no liquidation premium)\n    /// @param borrowedAmount Credit Account's debt principal\n    /// @param borrowedAmountWithInterest Credit Account's debt principal + interest\n    /// @return amountToPool Amount of underlying to be sent to the pool\n    /// @return remainingFunds Amount of underlying to be sent to the borrower (only applicable to liquidations)\n    /// @return profit Protocol's profit from fees (if any)\n    /// @return loss Protocol's loss from bad debt (if any)\n    function calcClosePayments(\n        uint256 totalValue,\n        ClosureAction closureActionType,\n        uint256 borrowedAmount,\n        uint256 borrowedAmountWithInterest\n    )\n        external\n        view\n        returns (\n            uint256 amountToPool,\n            uint256 remainingFunds,\n            uint256 profit,\n            uint256 loss\n        );\n\n    /// @dev Calculates the debt accrued by a Credit Account\n    /// @param creditAccount Address of the Credit Account\n    /// @return borrowedAmount The debt principal\n    /// @return borrowedAmountWithInterest The debt principal + accrued interest\n    /// @return borrowedAmountWithInterestAndFees The debt principal + accrued interest and protocol fees\n    function calcCreditAccountAccruedInterest(address creditAccount)\n        external\n        view\n        returns (\n            uint256 borrowedAmount,\n            uint256 borrowedAmountWithInterest,\n            uint256 borrowedAmountWithInterestAndFees\n        );\n\n    /// @dev Maps Credit Accounts to bit masks encoding their enabled token sets\n    /// Only enabled tokens are counted as collateral for the Credit Account\n    /// @notice An enabled token mask encodes an enabled token by setting\n    ///         the bit at the position equal to token's index to 1\n    function enabledTokensMap(address creditAccount)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Maps the Credit Account to its current percentage drop across all swaps since\n    ///      the last full check, in RAY format\n    function cumulativeDropAtFastCheckRAY(address creditAccount)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the collateral token at requested index and its liquidation threshold\n    /// @param id The index of token to return\n    function collateralTokens(uint256 id)\n        external\n        view\n        returns (address token, uint16 liquidationThreshold);\n\n    /// @dev Returns the collateral token with requested mask and its liquidationThreshold\n    /// @param tokenMask Token mask corresponding to the token\n    function collateralTokensByMask(uint256 tokenMask)\n        external\n        view\n        returns (address token, uint16 liquidationThreshold);\n\n    /// @dev Total number of known collateral tokens.\n    function collateralTokensCount() external view returns (uint256);\n\n    /// @dev Returns the mask for the provided token\n    /// @param token Token to returns the mask for\n    function tokenMasksMap(address token) external view returns (uint256);\n\n    /// @dev Bit mask encoding a set of forbidden tokens\n    function forbiddenTokenMask() external view returns (uint256);\n\n    /// @dev Maps allowed adapters to their respective target contracts.\n    function adapterToContract(address adapter) external view returns (address);\n\n    /// @dev Maps 3rd party contracts to their respective adapters\n    function contractToAdapter(address targetContract)\n        external\n        view\n        returns (address);\n\n    /// @dev Address of the underlying asset\n    function underlying() external view returns (address);\n\n    /// @dev Address of the connected pool\n    function pool() external view returns (address);\n\n    /// @dev Address of the connected pool\n    /// @notice [DEPRECATED]: use pool() instead.\n    function poolService() external view returns (address);\n\n    /// @dev A map from borrower addresses to Credit Account addresses\n    function creditAccounts(address borrower) external view returns (address);\n\n    /// @dev Address of the connected Credit Configurator\n    function creditConfigurator() external view returns (address);\n\n    /// @dev Address of WETH\n    function wethAddress() external view returns (address);\n\n    /// @dev Returns the liquidation threshold for the provided token\n    /// @param token Token to retrieve the LT for\n    function liquidationThresholds(address token)\n        external\n        view\n        returns (uint16);\n\n    /// @dev The maximal number of enabled tokens on a single Credit Account\n    function maxAllowedEnabledTokenLength() external view returns (uint8);\n\n    /// @dev Maps addresses to their status as emergency liquidator.\n    /// @notice Emergency liquidators are trusted addresses\n    /// that are able to liquidate positions while the contracts are paused,\n    /// e.g. when there is a risk of bad debt while an exploit is being patched.\n    /// In the interest of fairness, emergency liquidators do not receive a premium\n    /// And are compensated by the Gearbox DAO separately.\n    function canLiquidateWhilePaused(address) external view returns (bool);\n\n    /// @dev Returns the fee parameters of the Credit Manager\n    /// @return feeInterest Percentage of interest taken by the protocol as profit\n    /// @return feeLiquidation Percentage of account value taken by the protocol as profit\n    ///         during unhealthy account liquidations\n    /// @return liquidationDiscount Multiplier that reduces the effective totalValue during unhealthy account liquidations,\n    ///         allowing the liquidator to take the unaccounted for remainder as premium. Equal to (1 - liquidationPremium)\n    /// @return feeLiquidationExpired Percentage of account value taken by the protocol as profit\n    ///         during expired account liquidations\n    /// @return liquidationDiscountExpired Multiplier that reduces the effective totalValue during expired account liquidations,\n    ///         allowing the liquidator to take the unaccounted for remainder as premium. Equal to (1 - liquidationPremiumExpired)\n    function fees()\n        external\n        view\n        returns (\n            uint16 feeInterest,\n            uint16 feeLiquidation,\n            uint16 liquidationDiscount,\n            uint16 feeLiquidationExpired,\n            uint16 liquidationDiscountExpired\n        );\n\n    /// @dev Address of the connected Credit Facade\n    function creditFacade() external view returns (address);\n\n    /// @dev Address of the connected Price Oracle\n    function priceOracle() external view returns (IPriceOracleV2);\n\n    /// @dev Address of the universal adapter\n    function universalAdapter() external view returns (address);\n\n    /// @dev Contract's version\n    function version() external view returns (uint256);\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/libraries/Balances.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\n\nstruct Balance {\n    address token;\n    uint256 balance;\n}\n\nlibrary BalanceOps {\n    error UnknownToken(address);\n\n    function copyBalance(Balance memory b)\n        internal\n        pure\n        returns (Balance memory)\n    {\n        return Balance({ token: b.token, balance: b.balance });\n    }\n\n    function addBalance(\n        Balance[] memory b,\n        address token,\n        uint256 amount\n    ) internal pure {\n        b[getIndex(b, token)].balance += amount;\n    }\n\n    function subBalance(\n        Balance[] memory b,\n        address token,\n        uint256 amount\n    ) internal pure {\n        b[getIndex(b, token)].balance -= amount;\n    }\n\n    function getBalance(Balance[] memory b, address token)\n        internal\n        pure\n        returns (uint256 amount)\n    {\n        return b[getIndex(b, token)].balance;\n    }\n\n    function setBalance(\n        Balance[] memory b,\n        address token,\n        uint256 amount\n    ) internal pure {\n        b[getIndex(b, token)].balance = amount;\n    }\n\n    function getIndex(Balance[] memory b, address token)\n        internal\n        pure\n        returns (uint256 index)\n    {\n        for (uint256 i; i < b.length; ) {\n            if (b[i].token == token) {\n                return i;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        revert UnknownToken(token);\n    }\n\n    function copy(Balance[] memory b, uint256 len)\n        internal\n        pure\n        returns (Balance[] memory res)\n    {\n        res = new Balance[](len);\n        for (uint256 i; i < len; ) {\n            res[i] = copyBalance(b[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function clone(Balance[] memory b)\n        internal\n        pure\n        returns (Balance[] memory)\n    {\n        return copy(b, b.length);\n    }\n\n    function getModifiedAfterSwap(\n        Balance[] memory b,\n        address tokenFrom,\n        uint256 amountFrom,\n        address tokenTo,\n        uint256 amountTo\n    ) internal pure returns (Balance[] memory res) {\n        res = copy(b, b.length);\n        setBalance(res, tokenFrom, getBalance(b, tokenFrom) - amountFrom);\n        setBalance(res, tokenTo, getBalance(b, tokenTo) + amountTo);\n    }\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/libraries/MultiCall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nstruct MultiCall {\n    address target;\n    bytes callData;\n}\n\nlibrary MultiCallOps {\n    function copyMulticall(MultiCall memory call)\n        internal\n        pure\n        returns (MultiCall memory)\n    {\n        return MultiCall({ target: call.target, callData: call.callData });\n    }\n\n    function trim(MultiCall[] memory calls)\n        internal\n        pure\n        returns (MultiCall[] memory trimmed)\n    {\n        uint256 len = calls.length;\n\n        if (len == 0) return calls;\n\n        uint256 foundLen;\n        while (calls[foundLen].target != address(0)) {\n            unchecked {\n                ++foundLen;\n                if (foundLen == len) return calls;\n            }\n        }\n\n        if (foundLen > 0) return copy(calls, foundLen);\n    }\n\n    function copy(MultiCall[] memory calls, uint256 len)\n        internal\n        pure\n        returns (MultiCall[] memory res)\n    {\n        res = new MultiCall[](len);\n        for (uint256 i; i < len; ) {\n            res[i] = copyMulticall(calls[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function clone(MultiCall[] memory calls)\n        internal\n        pure\n        returns (MultiCall[] memory res)\n    {\n        return copy(calls, calls.length);\n    }\n\n    function append(MultiCall[] memory calls, MultiCall memory newCall)\n        internal\n        pure\n        returns (MultiCall[] memory res)\n    {\n        uint256 len = calls.length;\n        res = new MultiCall[](len + 1);\n        for (uint256 i; i < len; ) {\n            res[i] = copyMulticall(calls[i]);\n            unchecked {\n                ++i;\n            }\n        }\n        res[len] = copyMulticall(newCall);\n    }\n\n    function prepend(MultiCall[] memory calls, MultiCall memory newCall)\n        internal\n        pure\n        returns (MultiCall[] memory res)\n    {\n        uint256 len = calls.length;\n        res = new MultiCall[](len + 1);\n        res[0] = copyMulticall(newCall);\n\n        for (uint256 i = 1; i < len + 1; ) {\n            res[i] = copyMulticall(calls[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function concat(MultiCall[] memory calls1, MultiCall[] memory calls2)\n        internal\n        pure\n        returns (MultiCall[] memory res)\n    {\n        uint256 len1 = calls1.length;\n        uint256 lenTotal = len1 + calls2.length;\n\n        if (lenTotal == calls1.length) return clone(calls1);\n        if (lenTotal == calls2.length) return clone(calls2);\n\n        res = new MultiCall[](lenTotal);\n\n        for (uint256 i; i < lenTotal; ) {\n            res[i] = (i < len1)\n                ? copyMulticall(calls1[i])\n                : copyMulticall(calls2[i - len1]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\n\nimport { IVersion } from \"./IVersion.sol\";\n\ninterface IPriceOracleV2Events {\n    /// @dev Emits when a new price feed is added\n    event NewPriceFeed(address indexed token, address indexed priceFeed);\n}\n\ninterface IPriceOracleV2Exceptions {\n    /// @dev Thrown if a price feed returns 0\n    error ZeroPriceException();\n\n    /// @dev Thrown if the last recorded result was not updated in the last round\n    error ChainPriceStaleException();\n\n    /// @dev Thrown on attempting to get a result for a token that does not have a price feed\n    error PriceOracleNotExistsException();\n}\n\n/// @title Price oracle interface\ninterface IPriceOracleV2 is\n    IPriceOracleV2Events,\n    IPriceOracleV2Exceptions,\n    IVersion\n{\n    /// @dev Converts a quantity of an asset to USD (decimals = 8).\n    /// @param amount Amount to convert\n    /// @param token Address of the token to be converted\n    function convertToUSD(uint256 amount, address token)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Converts a quantity of USD (decimals = 8) to an equivalent amount of an asset\n    /// @param amount Amount to convert\n    /// @param token Address of the token converted to\n    function convertFromUSD(uint256 amount, address token)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Converts one asset into another\n    ///\n    /// @param amount Amount to convert\n    /// @param tokenFrom Address of the token to convert from\n    /// @param tokenTo Address of the token to convert to\n    function convert(\n        uint256 amount,\n        address tokenFrom,\n        address tokenTo\n    ) external view returns (uint256);\n\n    /// @dev Returns collateral values for two tokens, required for a fast check\n    /// @param amountFrom Amount of the outbound token\n    /// @param tokenFrom Address of the outbound token\n    /// @param amountTo Amount of the inbound token\n    /// @param tokenTo Address of the inbound token\n    /// @return collateralFrom Value of the outbound token amount in USD\n    /// @return collateralTo Value of the inbound token amount in USD\n    function fastCheck(\n        uint256 amountFrom,\n        address tokenFrom,\n        uint256 amountTo,\n        address tokenTo\n    ) external view returns (uint256 collateralFrom, uint256 collateralTo);\n\n    /// @dev Returns token's price in USD (8 decimals)\n    /// @param token The token to compute the price for\n    function getPrice(address token) external view returns (uint256);\n\n    /// @dev Returns the price feed address for the passed token\n    /// @param token Token to get the price feed for\n    function priceFeeds(address token)\n        external\n        view\n        returns (address priceFeed);\n\n    /// @dev Returns the price feed for the passed token,\n    ///      with additional parameters\n    /// @param token Token to get the price feed for\n    function priceFeedsWithFlags(address token)\n        external\n        view\n        returns (\n            address priceFeed,\n            bool skipCheck,\n            uint256 decimals\n        );\n}\n\ninterface IPriceOracleV2Ext is IPriceOracleV2 {\n    /// @dev Sets a price feed if it doesn't exist, or updates an existing one\n    /// @param token Address of the token to set the price feed for\n    /// @param priceFeed Address of a USD price feed adhering to Chainlink's interface\n    function addPriceFeed(address token, address priceFeed) external;\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\nimport { ICreditManagerV2 } from \"./ICreditManagerV2.sol\";\n\nenum AdapterType {\n    ABSTRACT,\n    UNISWAP_V2_ROUTER,\n    UNISWAP_V3_ROUTER,\n    CURVE_V1_EXCHANGE_ONLY,\n    YEARN_V2,\n    CURVE_V1_2ASSETS,\n    CURVE_V1_3ASSETS,\n    CURVE_V1_4ASSETS,\n    CURVE_V1_STECRV_POOL,\n    CURVE_V1_WRAPPER,\n    CONVEX_V1_BASE_REWARD_POOL,\n    CONVEX_V1_BOOSTER,\n    CONVEX_V1_CLAIM_ZAP,\n    LIDO_V1,\n    UNIVERSAL\n}\n\ninterface IAdapterExceptions {\n    /// @dev Thrown when the adapter attempts to use a token\n    ///      that is not recognized as collateral in the connected\n    ///      Credit Manager\n    error TokenIsNotInAllowedList(address);\n}\n\ninterface IAdapter is IAdapterExceptions {\n    /// @dev Returns the Credit Manager connected to the adapter\n    function creditManager() external view returns (ICreditManagerV2);\n\n    /// @dev Returns the Credit Facade connected to the adapter's Credit Manager\n    function creditFacade() external view returns (address);\n\n    /// @dev Returns the address of the contract the adapter is interacting with\n    function targetContract() external view returns (address);\n\n    /// @dev Returns the adapter type\n    function _gearboxAdapterType() external pure returns (AdapterType);\n\n    /// @dev Returns the adapter version\n    function _gearboxAdapterVersion() external pure returns (uint16);\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/uniswap/IUniswapV3.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params)\n        external\n        payable\n        returns (uint256 amountIn);\n}"
    },
    "contracts/vaults/ERC20Vault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"./IntegrationVault.sol\";\n\n/// @notice Vault that stores ERC20 tokens.\ncontract ERC20Vault is IERC20Vault, IntegrationVault {\n    using SafeERC20 for IERC20;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        address[] memory tokens = _vaultTokens;\n        uint256 len = tokens.length;\n        minTokenAmounts = new uint256[](len);\n        for (uint256 i = 0; i < len; ++i) {\n            minTokenAmounts[i] = IERC20(tokens[i]).balanceOf(address(this));\n        }\n        maxTokenAmounts = minTokenAmounts;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n    /// @inheritdoc IERC20Vault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external {\n        _initialize(vaultTokens_, nft_);\n    }\n\n    // -------------------  INTERNAL, VIEW  -----------------------\n    function _isReclaimForbidden(address token) internal view override returns (bool) {\n        uint256 len = _vaultTokens.length;\n        for (uint256 i = 0; i < len; ++i) {\n            if (token == _vaultTokens[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _push(uint256[] memory tokenAmounts, bytes memory)\n        internal\n        pure\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        // no-op, tokens are already on balance\n        return tokenAmounts;\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory options\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\n        uint256[] memory pushTokenAmounts = new uint256[](tokenAmounts.length);\n        address[] memory tokens = _vaultTokens;\n        IVaultRegistry registry = _vaultGovernance.internalParams().registry;\n        address owner = registry.ownerOf(_nft);\n\n        for (uint256 i = 0; i < tokenAmounts.length; ++i) {\n            IERC20 vaultToken = IERC20(tokens[i]);\n            uint256 balance = vaultToken.balanceOf(address(this));\n            uint256 amount = tokenAmounts[i] < balance ? tokenAmounts[i] : balance;\n            IERC20(tokens[i]).safeTransfer(to, amount);\n            actualTokenAmounts[i] = amount;\n            if (owner != to) {\n                // this will equal to amounts pulled + any accidental prior balances on `to`;\n                pushTokenAmounts[i] = IERC20(tokens[i]).balanceOf(to);\n            }\n        }\n        if (owner != to) {\n            // if we pull as a strategy, make sure everything is pushed\n            IIntegrationVault(to).push(tokens, pushTokenAmounts, options);\n            // any accidental prior balances + push leftovers\n            uint256[] memory reclaimed = IIntegrationVault(to).reclaimTokens(tokens);\n            for (uint256 i = 0; i < tokenAmounts.length; i++) {\n                // equals to exactly how much is pushed\n                actualTokenAmounts[i] = actualTokenAmounts[i] >= reclaimed[i]\n                    ? actualTokenAmounts[i] - reclaimed[i]\n                    : 0;\n            }\n        }\n    }\n\n    /// @inheritdoc IntegrationVault\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, IntegrationVault) returns (bool) {\n        return super.supportsInterface(interfaceId) || (interfaceId == type(IERC20Vault).interfaceId);\n    }\n}\n"
    },
    "contracts/vaults/ERC20VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IERC20VaultGovernance.sol\";\nimport \"../interfaces/vaults/IERC20Vault.sol\";\nimport \"../interfaces/vaults/IERC20VaultGovernance.sol\";\nimport \"./VaultGovernance.sol\";\nimport \"../utils/ContractMeta.sol\";\n\n/// @notice Governance that manages all ERC20 Vaults params and can deploy a new ERC20 Vault.\ncontract ERC20VaultGovernance is ContractMeta, IERC20VaultGovernance, VaultGovernance {\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    constructor(InternalParams memory internalParams_) VaultGovernance(internalParams_) {}\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ERC20VaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IERC20VaultGovernance\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IERC20Vault vault, uint256 nft)\n    {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IERC20Vault(vaddr);\n        vault.initialize(nft, vaultTokens_);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, \"\", owner_, vaddr, nft);\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IERC20VaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IERC20Vault.sol\";\nimport \"./IVaultGovernance.sol\";\n\ninterface IERC20VaultGovernance is IVaultGovernance {\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IERC20Vault vault, uint256 nft);\n}\n"
    },
    "contracts/test/MockHStrategy.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../strategies/HStrategy.sol\";\n\ncontract MockHStrategy is HStrategy {\n    constructor(\n        INonfungiblePositionManager positionManager_,\n        ISwapRouter router_,\n        address uniV3Helper_,\n        address hStrategyHelper_\n    ) HStrategy(positionManager_, router_, uniV3Helper_, hStrategyHelper_) {}\n\n    function swapTokens(\n        TokenAmounts memory expectedTokenAmounts,\n        TokenAmounts memory currentTokenAmounts,\n        RebalanceTokenAmounts memory restrictions\n    ) external returns (int256[] memory swappedAmounts) {\n        swappedAmounts = _swapTokens(currentTokenAmounts, expectedTokenAmounts, restrictions, erc20Vault, tokens);\n    }\n}\n"
    },
    "contracts/validators/UniV3Validator.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ3/ISwapRouter.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract UniV3Validator is ContractMeta, Validator {\n    bytes4 public constant EXACT_INPUT_SINGLE_SELECTOR = ISwapRouter.exactInputSingle.selector;\n    bytes4 public constant EXACT_INPUT_SELECTOR = ISwapRouter.exactInput.selector;\n    bytes4 public constant EXACT_OUTPUT_SINGLE_SELECTOR = ISwapRouter.exactOutputSingle.selector;\n    bytes4 public constant EXACT_OUTPUT_SELECTOR = ISwapRouter.exactOutput.selector;\n    address public immutable swapRouter;\n    IUniswapV3Factory public immutable factory;\n\n    constructor(\n        IProtocolGovernance protocolGovernance_,\n        address swapRouter_,\n        IUniswapV3Factory factory_\n    ) BaseValidator(protocolGovernance_) {\n        swapRouter = swapRouter_;\n        factory = factory_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {\n        require(address(swapRouter) == addr, ExceptionsLibrary.INVALID_TARGET);\n        require(value == 0, ExceptionsLibrary.INVALID_VALUE);\n        IVault vault = IVault(msg.sender);\n        if (selector == EXACT_INPUT_SINGLE_SELECTOR) {\n            ISwapRouter.ExactInputSingleParams memory params = abi.decode(data, (ISwapRouter.ExactInputSingleParams));\n            _verifySingleCall(vault, params.recipient, params.tokenIn, params.tokenOut, params.fee);\n        } else if (selector == EXACT_OUTPUT_SINGLE_SELECTOR) {\n            ISwapRouter.ExactOutputSingleParams memory params = abi.decode(data, (ISwapRouter.ExactOutputSingleParams));\n            _verifySingleCall(vault, params.recipient, params.tokenIn, params.tokenOut, params.fee);\n        } else if (selector == EXACT_INPUT_SELECTOR) {\n            ISwapRouter.ExactInputParams memory params = abi.decode(data, (ISwapRouter.ExactInputParams));\n            _verifyMultiCall(vault, params.recipient, params.path);\n        } else if (selector == EXACT_OUTPUT_SELECTOR) {\n            ISwapRouter.ExactOutputParams memory params = abi.decode(data, (ISwapRouter.ExactOutputParams));\n            _verifyMultiCall(vault, params.recipient, params.path);\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV3Validator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _verifyMultiCall(\n        IVault vault,\n        address recipient,\n        bytes memory path\n    ) private view {\n        uint256 i;\n        address token0;\n        address token1;\n        uint24 fee;\n        uint256 feeMask = (1 << 24) - 1;\n        uint256 tokenMask = (1 << 160) - 1;\n        require(recipient == address(vault), ExceptionsLibrary.INVALID_TARGET);\n        // the sample UniV3 path structure is (DAI address,DAI-USDC fee, USDC, USDC-WETH fee, WETH)\n        // addresses are 20 bytes, fees are 3 bytes\n        require(((path.length + 3) % 23 == 0) && (path.length >= 43), ExceptionsLibrary.INVALID_LENGTH);\n        while (path.length - i > 20) {\n            assembly {\n                let o := add(add(path, 0x20), i)\n                let d := mload(o)\n                d := shr(72, d)\n                fee := and(d, feeMask)\n                token0 := shr(24, d)\n                d := mload(add(o, 11))\n                token1 := and(d, tokenMask)\n            }\n            _verifyPathItem(token0, token1, fee);\n            i += 23;\n        }\n        require(vault.isVaultToken(token1), ExceptionsLibrary.INVALID_TOKEN);\n    }\n\n    function _verifySingleCall(\n        IVault vault,\n        address recipient,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) private view {\n        require(recipient == address(vault), ExceptionsLibrary.INVALID_TARGET);\n        require(vault.isVaultToken(tokenOut), ExceptionsLibrary.INVALID_TOKEN);\n        _verifyPathItem(tokenIn, tokenOut, fee);\n    }\n\n    function _verifyPathItem(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) private view {\n        require(tokenIn != tokenOut, ExceptionsLibrary.INVALID_TOKEN);\n        IProtocolGovernance protocolGovernance = _validatorParams.protocolGovernance;\n        address pool = factory.getPool(tokenIn, tokenOut, fee);\n        require(\n            protocolGovernance.hasPermission(pool, PermissionIdsLibrary.ERC20_APPROVE),\n            ExceptionsLibrary.FORBIDDEN\n        );\n    }\n}\n"
    },
    "contracts/validators/Validator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/validators/IValidator.sol\";\nimport \"./BaseValidator.sol\";\n\nabstract contract Validator is IValidator, ERC165, BaseValidator {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return (interfaceId == type(IValidator).interfaceId) || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/validators/BaseValidator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/validators/IBaseValidator.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\ncontract BaseValidator is IBaseValidator {\n    IBaseValidator.ValidatorParams internal _validatorParams;\n    IBaseValidator.ValidatorParams internal _stagedValidatorParams;\n    uint256 internal _stagedValidatorParamsTimestamp;\n\n    constructor(IProtocolGovernance protocolGovernance) {\n        _validatorParams = IBaseValidator.ValidatorParams({protocolGovernance: protocolGovernance});\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IBaseValidator\n    function stagedValidatorParams() external view returns (ValidatorParams memory) {\n        return _stagedValidatorParams;\n    }\n\n    /// @inheritdoc IBaseValidator\n    function stagedValidatorParamsTimestamp() external view returns (uint256) {\n        return _stagedValidatorParamsTimestamp;\n    }\n\n    /// @inheritdoc IBaseValidator\n    function validatorParams() external view returns (ValidatorParams memory) {\n        return _validatorParams;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Stages params that could have been committed after governance delay expires.\n    /// @param newParams Params to stage\n    function stageValidatorParams(IBaseValidator.ValidatorParams calldata newParams) external {\n        IProtocolGovernance governance = _validatorParams.protocolGovernance;\n        require(governance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        _stagedValidatorParams = newParams;\n        _stagedValidatorParamsTimestamp = block.timestamp + governance.governanceDelay();\n        emit StagedValidatorParams(tx.origin, msg.sender, newParams, _stagedValidatorParamsTimestamp);\n    }\n\n    /// @notice Commits staged params\n    function commitValidatorParams() external {\n        require(_stagedValidatorParamsTimestamp != 0, ExceptionsLibrary.INVALID_STATE);\n        IProtocolGovernance governance = _validatorParams.protocolGovernance;\n        require(governance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        require(block.timestamp >= _stagedValidatorParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _validatorParams = _stagedValidatorParams;\n        delete _stagedValidatorParams;\n        delete _stagedValidatorParamsTimestamp;\n        emit CommittedValidatorParams(tx.origin, msg.sender, _validatorParams);\n    }\n\n    /// @notice Emitted when new params are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param newParams New params that were staged for commit\n    /// @param when When the params could be committed\n    event StagedValidatorParams(\n        address indexed origin,\n        address indexed sender,\n        IBaseValidator.ValidatorParams newParams,\n        uint256 when\n    );\n\n    /// @notice Emitted when new params are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    event CommittedValidatorParams(\n        address indexed origin,\n        address indexed sender,\n        IBaseValidator.ValidatorParams params\n    );\n}\n"
    },
    "contracts/validators/UniV2Validator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ2/IUniswapV2Factory.sol\";\nimport \"../interfaces/external/univ2/IUniswapV2Router01.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract UniV2Validator is ContractMeta, Validator {\n    struct TokenInput {\n        uint256 amount;\n        uint256 amountMax;\n        address[] path;\n        address to;\n        uint256 deadline;\n    }\n    struct EthInput {\n        uint256 amountMax;\n        address[] path;\n        address to;\n        uint256 deadline;\n    }\n    bytes4 public constant EXACT_INPUT_SELECTOR = IUniswapV2Router01.swapExactTokensForTokens.selector;\n    bytes4 public constant EXACT_OUTPUT_SELECTOR = IUniswapV2Router01.swapTokensForExactTokens.selector;\n    bytes4 public constant EXACT_ETH_INPUT_SELECTOR = IUniswapV2Router01.swapExactETHForTokens.selector;\n    bytes4 public constant EXACT_ETH_OUTPUT_SELECTOR = IUniswapV2Router01.swapTokensForExactETH.selector;\n    bytes4 public constant EXACT_TOKENS_INPUT_SELECTOR = IUniswapV2Router01.swapExactTokensForETH.selector;\n    bytes4 public constant EXACT_TOKENS_OUTPUT_SELECTOR = IUniswapV2Router01.swapETHForExactTokens.selector;\n\n    address public immutable swapRouter;\n    IUniswapV2Factory public immutable factory;\n\n    constructor(\n        IProtocolGovernance protocolGovernance_,\n        address swapRouter_,\n        IUniswapV2Factory factory_\n    ) BaseValidator(protocolGovernance_) {\n        swapRouter = swapRouter_;\n        factory = factory_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {\n        require(address(swapRouter) == addr, ExceptionsLibrary.INVALID_TARGET);\n        IVault vault = IVault(msg.sender);\n\n        address[] memory path;\n        address to;\n\n        if ((selector == EXACT_ETH_INPUT_SELECTOR) || (selector == EXACT_TOKENS_OUTPUT_SELECTOR)) {\n            (, path, to, ) = abi.decode(data, (uint256, address[], address, uint256));\n        } else if (\n            (selector == EXACT_ETH_OUTPUT_SELECTOR) ||\n            (selector == EXACT_TOKENS_INPUT_SELECTOR) ||\n            (selector == EXACT_INPUT_SELECTOR) ||\n            (selector == EXACT_OUTPUT_SELECTOR)\n        ) {\n            require(value == 0, ExceptionsLibrary.INVALID_VALUE);\n            (, , path, to, ) = abi.decode(data, (uint256, uint256, address[], address, uint256));\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n\n        require(to == msg.sender);\n        _verifyPath(vault, path);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV2Validator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _verifyPath(IVault vault, address[] memory path) private view {\n        require(path.length > 1, ExceptionsLibrary.INVALID_LENGTH);\n        require(vault.isVaultToken(path[path.length - 1]), ExceptionsLibrary.INVALID_TOKEN);\n        IProtocolGovernance protocolGovernance = _validatorParams.protocolGovernance;\n        for (uint256 i = 0; i < path.length - 1; i++) {\n            address token0 = path[i];\n            address token1 = path[i + 1];\n            require(token0 != token1, ExceptionsLibrary.INVALID_TOKEN);\n            address pool = factory.getPair(token0, token1);\n            require(\n                protocolGovernance.hasPermission(pool, PermissionIdsLibrary.ERC20_APPROVE),\n                ExceptionsLibrary.FORBIDDEN\n            );\n        }\n    }\n}\n"
    },
    "contracts/interfaces/external/univ2/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniswapV2Factory {\n    function getPair(address token0, address token1) external view returns (address);\n}\n"
    },
    "contracts/interfaces/external/univ2/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/VaultRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./interfaces/IProtocolGovernance.sol\";\nimport \"./interfaces/vaults/IVault.sol\";\nimport \"./interfaces/IVaultRegistry.sol\";\nimport \"./libraries/ExceptionsLibrary.sol\";\nimport \"./libraries/PermissionIdsLibrary.sol\";\nimport \"./utils/ContractMeta.sol\";\n\n/// @notice This contract is used to manage ERC721 NFT for all Vaults.\ncontract VaultRegistry is ContractMeta, IVaultRegistry, ERC721 {\n    uint256 private _stagedProtocolGovernanceTimestamp;\n    IProtocolGovernance private _protocolGovernance;\n    IProtocolGovernance private _stagedProtocolGovernance;\n\n    address[] private _vaults;\n    mapping(address => uint256) private _nftIndex;\n    mapping(uint256 => address) private _vaultIndex;\n    mapping(uint256 => bool) private _locks;\n    uint256 private _topNft = 1;\n\n    /// @notice Creates a new contract.\n    /// @param name ERC721 token name\n    /// @param symbol ERC721 token symbol\n    /// @param protocolGovernance_ Reference to ProtocolGovernance\n    constructor(\n        string memory name,\n        string memory symbol,\n        IProtocolGovernance protocolGovernance_\n    ) ERC721(name, symbol) {\n        _protocolGovernance = protocolGovernance_;\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    function vaults() external view returns (address[] memory) {\n        return _vaults;\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function vaultForNft(uint256 nft) external view returns (address) {\n        return _vaultIndex[nft];\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function nftForVault(address vault) external view returns (uint256) {\n        return _nftIndex[vault];\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function isLocked(uint256 nft) external view returns (bool) {\n        return _locks[nft];\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function protocolGovernance() external view returns (IProtocolGovernance) {\n        return _protocolGovernance;\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function stagedProtocolGovernance() external view returns (IProtocolGovernance) {\n        return _stagedProtocolGovernance;\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function stagedProtocolGovernanceTimestamp() external view returns (uint256) {\n        return _stagedProtocolGovernanceTimestamp;\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function vaultsCount() external view returns (uint256) {\n        return _vaults.length;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IVaultRegistry).interfaceId == interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IVaultRegistry\n    function registerVault(address vault, address owner) external returns (uint256 nft) {\n        require(address(owner) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(ERC165(vault).supportsInterface(type(IVault).interfaceId), ExceptionsLibrary.INVALID_INTERFACE);\n        require(\n            _protocolGovernance.hasPermission(msg.sender, PermissionIdsLibrary.REGISTER_VAULT),\n            ExceptionsLibrary.FORBIDDEN\n        );\n        require(_nftIndex[vault] == 0, ExceptionsLibrary.DUPLICATE);\n        nft = _topNft;\n        _vaultIndex[nft] = vault;\n        _nftIndex[vault] = nft;\n        _vaults.push(vault);\n        _topNft += 1;\n        _safeMint(owner, nft);\n        emit VaultRegistered(tx.origin, msg.sender, nft, vault, owner);\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function stageProtocolGovernance(IProtocolGovernance newProtocolGovernance) external {\n        require(_isProtocolAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        require(address(newProtocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _stagedProtocolGovernance = newProtocolGovernance;\n        _stagedProtocolGovernanceTimestamp = (block.timestamp + _protocolGovernance.governanceDelay());\n        emit StagedProtocolGovernance(tx.origin, msg.sender, newProtocolGovernance, _stagedProtocolGovernanceTimestamp);\n    }\n\n    /// @inheritdoc IVaultRegistry\n    function commitStagedProtocolGovernance() external {\n        require(_isProtocolAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        require(_stagedProtocolGovernanceTimestamp != 0, ExceptionsLibrary.INIT);\n        require(block.timestamp >= _stagedProtocolGovernanceTimestamp, ExceptionsLibrary.TIMESTAMP);\n        _protocolGovernance = _stagedProtocolGovernance;\n        delete _stagedProtocolGovernanceTimestamp;\n        delete _stagedProtocolGovernance;\n        emit CommitedProtocolGovernance(tx.origin, msg.sender, _protocolGovernance);\n    }\n\n    function lockNft(uint256 nft) external {\n        require(ownerOf(nft) == msg.sender, ExceptionsLibrary.FORBIDDEN);\n        _locks[nft] = true;\n        emit TokenLocked(tx.origin, msg.sender, nft);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"VaultRegistry\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _isProtocolAdmin(address sender) internal view returns (bool) {\n        return _protocolGovernance.isAdmin(sender);\n    }\n\n    function _beforeTokenTransfer(\n        address,\n        address,\n        uint256 tokenId\n    ) internal view override {\n        require(!_locks[tokenId], ExceptionsLibrary.LOCK);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when token is locked for transfers\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft NFT to be locked\n    event TokenLocked(address indexed origin, address indexed sender, uint256 indexed nft);\n\n    /// @notice Emitted when new Vault is registered in VaultRegistry\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param vault Address of the Vault contract\n    /// @param owner Owner of the VaultRegistry NFT\n    event VaultRegistered(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        address vault,\n        address owner\n    );\n\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param newProtocolGovernance Address of the new ProtocolGovernance\n    /// @param start Timestamp of the start of the new ProtocolGovernance\n    event StagedProtocolGovernance(\n        address indexed origin,\n        address indexed sender,\n        IProtocolGovernance newProtocolGovernance,\n        uint256 start\n    );\n\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param newProtocolGovernance Address of the new ProtocolGovernance that has been committed\n    event CommitedProtocolGovernance(\n        address indexed origin,\n        address indexed sender,\n        IProtocolGovernance newProtocolGovernance\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/validators/ERC20Validator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/validators/IValidator.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract ERC20Validator is ContractMeta, Validator {\n    bytes4 public constant APPROVE_SELECTOR = IERC20.approve.selector;\n\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address sender,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {\n        require(value == 0, ExceptionsLibrary.INVALID_VALUE);\n        if (selector == APPROVE_SELECTOR) {\n            address spender;\n            assembly {\n                spender := calldataload(data.offset)\n            }\n            _verifyApprove(sender, addr, spender);\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ERC20Validator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _verifyApprove(\n        address sender,\n        address token,\n        address spender\n    ) private view {\n        IProtocolGovernance protocolGovernance = _validatorParams.protocolGovernance;\n        if (!protocolGovernance.hasPermission(token, PermissionIdsLibrary.ERC20_TRANSFER)) {\n            revert(ExceptionsLibrary.FORBIDDEN);\n        }\n        if (protocolGovernance.hasPermission(spender, PermissionIdsLibrary.ERC20_APPROVE)) {\n            return;\n        }\n        if (\n            protocolGovernance.hasPermission(spender, PermissionIdsLibrary.ERC20_APPROVE_RESTRICTED) &&\n            protocolGovernance.hasPermission(sender, PermissionIdsLibrary.TRUSTED_STRATEGY)\n        ) {\n            return;\n        }\n        revert(ExceptionsLibrary.FORBIDDEN);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/utils/BatchCall.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\n\ncontract BatchCall {\n    function batchcall(address[] calldata targets, bytes[] calldata data) external returns (bytes[] memory results) {\n        require(targets.length == data.length, ExceptionsLibrary.INVALID_LENGTH);\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(targets[i], data[i]);\n        }\n        return results;\n    }\n}\n"
    },
    "contracts/validators/CurveValidator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/curve/I3Pool.sol\";\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/PermissionIdsLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract CurveValidator is ContractMeta, Validator {\n    bytes4 public constant EXCHANGE_SELECTOR = 0x3df02124;\n\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address,\n        address addr,\n        uint256,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {\n        IVault vault = IVault(msg.sender);\n        if (selector == EXCHANGE_SELECTOR) {\n            (int128 i, int128 j, , ) = abi.decode(data, (int128, int128, uint256, uint256));\n            require(i != j, ExceptionsLibrary.INVALID_VALUE);\n            address to = I3Pool(addr).coins(uint256(uint128(j)));\n            require(vault.isVaultToken(to), ExceptionsLibrary.INVALID_TOKEN);\n            IProtocolGovernance protocolGovernance = _validatorParams.protocolGovernance;\n            require(\n                protocolGovernance.hasPermission(addr, PermissionIdsLibrary.ERC20_APPROVE),\n                ExceptionsLibrary.FORBIDDEN\n            );\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"CurveValidator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n}\n"
    },
    "contracts/interfaces/external/curve/I3Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface I3Pool {\n    function coins(uint256 id) external view returns (address);\n\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n}\n"
    },
    "contracts/test/MockValidator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IVault.sol\";\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../validators/Validator.sol\";\n\ncontract MockValidator is Validator {\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inhericdoc IValidator\n    function validate(\n        address,\n        address addr,\n        uint256 value,\n        bytes4 selector,\n        bytes calldata data\n    ) external view {}\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _verifyMultiCall(\n        IVault vault,\n        address recipient,\n        bytes memory path\n    ) private view {}\n\n    function _verifySingleCall(\n        IVault,\n        address,\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) private view {}\n\n    function _verifyPathItem(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee\n    ) private view {}\n}\n"
    },
    "contracts/utils/ERC20RootVaultHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/utils/IERC20RootVaultHelper.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../libraries/external/FullMath.sol\";\n\ncontract ERC20RootVaultHelper is IERC20RootVaultHelper {\n    function getTvlToken0(\n        uint256[] calldata tvls,\n        address[] calldata tokens,\n        IOracle oracle\n    ) external view returns (uint256 tvl0) {\n        tvl0 = tvls[0];\n        for (uint256 i = 1; i < tvls.length; i++) {\n            (uint256[] memory pricesX96, ) = oracle.priceX96(tokens[0], tokens[i], 0x30);\n            require(pricesX96.length > 0, ExceptionsLibrary.VALUE_ZERO);\n            uint256 priceX96 = 0;\n            for (uint256 j = 0; j < pricesX96.length; j++) {\n                priceX96 += pricesX96[j];\n            }\n            priceX96 /= pricesX96.length;\n            tvl0 += FullMath.mulDiv(tvls[i], CommonLibrary.Q96, priceX96);\n        }\n    }\n}\n"
    },
    "contracts/test/MockERC1271.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/external/erc/IERC1271.sol\";\nimport \"../libraries/CommonLibrary.sol\";\n\ncontract MockERC1271 is ERC165, IERC1271 {\n    address public signer;\n\n    function setSigner(address newSigner) public {\n        signer = newSigner;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\n        return (interfaceId == type(IERC165).interfaceId) || (interfaceId == type(IERC1271).interfaceId);\n    }\n\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue) {\n        if (CommonLibrary.recoverSigner(_hash, _signature) == signer) {\n            return 0x1626ba7e;\n        } else {\n            return 0xffffffff;\n        }\n    }\n}\n"
    },
    "contracts/test/libraries/CommonTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../../libraries/CommonLibrary.sol\";\n\ncontract CommonTest {\n    function sortUint(uint256[] memory arr) external pure returns (uint256[] memory) {\n        CommonLibrary.sortUint(arr);\n        return arr;\n    }\n\n    function isSortedAndUnique(address[] memory tokens) external pure returns (bool) {\n        return CommonLibrary.isSortedAndUnique(tokens);\n    }\n\n    function projectTokenAmounts(\n        address[] memory tokens,\n        address[] memory tokensToProject,\n        uint256[] memory tokenAmountsToProject\n    ) external pure returns (uint256[] memory) {\n        return CommonLibrary.projectTokenAmounts(tokens, tokensToProject, tokenAmountsToProject);\n    }\n\n    function sqrtX96(uint256 xX96) external pure returns (uint256) {\n        return CommonLibrary.sqrtX96(xX96);\n    }\n\n    function sqrt(uint256 x) external pure returns (uint256) {\n        return CommonLibrary.sqrt(x);\n    }\n\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) external pure returns (address) {\n        return CommonLibrary.recoverSigner(_ethSignedMessageHash, _signature);\n    }\n\n    function splitSignature(bytes memory sig)\n        external\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        ) \n    {  \n        return CommonLibrary.splitSignature(sig);\n    }\n}\n"
    },
    "contracts/oracles/UniV3Oracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"../interfaces/oracles/IUniV3Oracle.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/external/TickMath.sol\";\nimport \"../libraries/external/OracleLibrary.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../utils/DefaultAccessControl.sol\";\nimport \"../utils/ContractMeta.sol\";\n\ncontract UniV3Oracle is ContractMeta, IUniV3Oracle, DefaultAccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @inheritdoc IUniV3Oracle\n    uint32 public constant LOW_OBS_DELTA = 150; // 2.5 min\n    /// @inheritdoc IUniV3Oracle\n    uint32 public constant MID_OBS_DELTA = 450; // 7.5 min\n    /// @inheritdoc IUniV3Oracle\n    uint32 public constant HIGH_OBS_DELTA = 1800; // 30 min\n\n    /// @inheritdoc IUniV3Oracle\n    IUniswapV3Factory public immutable factory;\n    /// @inheritdoc IUniV3Oracle\n    mapping(address => mapping(address => IUniswapV3Pool)) public poolsIndex;\n    EnumerableSet.AddressSet private _pools;\n\n    constructor(\n        IUniswapV3Factory factory_,\n        IUniswapV3Pool[] memory pools,\n        address admin\n    ) DefaultAccessControl(admin) {\n        factory = factory_;\n        _addUniV3Pools(pools);\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @dev Logic of this function is next:\n    /// If there is no initialized pool for the passed tokens, empty arrays will be returned.\n    /// Depending on safetyIndicesSet if the 1st bit in safetyIndicesSet is non-zero, then the response will contain the spot price.\n    /// If there is a non-zero 2nd bit in the safetyIndicesSet and the corresponding position in the pool was created no later than LOW_OBS_DELTA seconds ago,\n    /// then the average price for the last LOW_OBS_DELTA seconds will be returned. The same logic exists for the 3rd and MID_OBS_DELTA, and 4th index and HIGH_OBS_DELTA.\n    /// @inheritdoc IOracle\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        bool isSwapped = false;\n        if (token0 > token1) {\n            (token0, token1) = (token1, token0);\n            isSwapped = true;\n        }\n        IUniswapV3Pool pool = poolsIndex[token0][token1];\n        if (address(pool) == address(0)) {\n            return (pricesX96, safetyIndices);\n        }\n        uint256[] memory sqrtPricesX96 = new uint256[](4);\n        pricesX96 = new uint256[](4);\n        safetyIndices = new uint256[](4);\n        uint256 len = 0;\n        if (safetyIndicesSet & 0x2 > 0) {\n            (uint256 spotSqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool).slot0();\n            sqrtPricesX96[len] = spotSqrtPriceX96;\n            safetyIndices[len] = 1;\n            len += 1;\n        }\n        for (uint256 i = 2; i < 5; i++) {\n            if (safetyIndicesSet & (1 << i) > 0) {\n                uint32 observationTimeDelta = _obsTimeForSafety(i);\n                (int24 tickAverage, , bool withFail) = OracleLibrary.consult(address(pool), observationTimeDelta);\n                if (withFail) {\n                    break;\n                }\n                sqrtPricesX96[len] = TickMath.getSqrtRatioAtTick(tickAverage);\n                safetyIndices[len] = i;\n                len += 1;\n            }\n        }\n        assembly {\n            mstore(pricesX96, len)\n            mstore(safetyIndices, len)\n        }\n        for (uint256 i = 0; i < len; i++) {\n            pricesX96[i] = FullMath.mulDiv(sqrtPricesX96[i], sqrtPricesX96[i], CommonLibrary.Q96);\n            if (isSwapped) {\n                pricesX96[i] = FullMath.mulDiv(CommonLibrary.Q96, CommonLibrary.Q96, pricesX96[i]);\n            }\n        }\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IUniV3Oracle).interfaceId == interfaceId;\n    }\n\n    // -------------------------  EXTERNAL, MUTATING  ------------------------------\n\n    /// @inheritdoc IUniV3Oracle\n    function addUniV3Pools(IUniswapV3Pool[] memory pools) external {\n        _requireAdmin();\n        _addUniV3Pools(pools);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV3Oracle\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _obsTimeForSafety(uint256 safety) internal pure returns (uint32) {\n        if (safety == 2) {\n            return LOW_OBS_DELTA;\n        } else if (safety == 3) {\n            return MID_OBS_DELTA;\n        } else {\n            require(safety == 4, ExceptionsLibrary.INVALID_VALUE);\n            return HIGH_OBS_DELTA;\n        }\n    }\n\n    function _addUniV3Pools(IUniswapV3Pool[] memory pools) internal {\n        IUniswapV3Pool[] memory replaced = new IUniswapV3Pool[](pools.length);\n        IUniswapV3Pool[] memory added = new IUniswapV3Pool[](pools.length);\n        uint256 j;\n        uint256 k;\n        for (uint256 i = 0; i < pools.length; i++) {\n            IUniswapV3Pool pool = pools[i];\n            address token0 = pool.token0();\n            address token1 = pool.token1();\n            _pools.add(address(pool));\n            IUniswapV3Pool currentPool = poolsIndex[token0][token1];\n            if (address(currentPool) != address(0)) {\n                replaced[j] = currentPool;\n                j += 1;\n            } else {\n                added[k] = pool;\n                k += 1;\n            }\n            poolsIndex[token0][token1] = pool;\n        }\n        assembly {\n            mstore(replaced, j)\n            mstore(added, k)\n        }\n        emit PoolsUpdated(tx.origin, msg.sender, added, replaced);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new pool is added or updated and become available for oracle prices\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param pools UniV3 pools added\n    /// @param replacedPools UniV3 pools updated\n    event PoolsUpdated(\n        address indexed origin,\n        address indexed sender,\n        IUniswapV3Pool[] pools,\n        IUniswapV3Pool[] replacedPools\n    );\n}\n"
    },
    "contracts/interfaces/oracles/IUniV3Oracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../external/univ3/IUniswapV3Factory.sol\";\nimport \"../external/univ3/IUniswapV3Pool.sol\";\nimport \"./IOracle.sol\";\n\ninterface IUniV3Oracle is IOracle {\n    /// @notice Reference to UniV3 factory\n    function factory() external view returns (IUniswapV3Factory);\n\n    /// @notice The number of seconds for time delta between observations for oracle safety index 2 twap\n    function LOW_OBS_DELTA() external view returns (uint32);\n\n    /// @notice The number of seconds for time delta between observations for oracle safety index 3 twap\n    function MID_OBS_DELTA() external view returns (uint32);\n\n    /// @notice The number of seconds for time delta between observations for oracle safety index 4 twap\n    function HIGH_OBS_DELTA() external view returns (uint32);\n\n    /// @notice Available UniV3 pools for tokens\n    /// @param token0 First ERC20 token\n    /// @param token1 Second ERC20 token\n    /// @return UniV3 pool or 0 if the pool is not available for oracle\n    function poolsIndex(address token0, address token1) external view returns (IUniswapV3Pool);\n\n    /// @notice Add UniV3 pools for prices.\n    /// @param pools Pools to add\n    function addUniV3Pools(IUniswapV3Pool[] memory pools) external;\n}\n"
    },
    "contracts/oracles/MellowOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/oracles/IChainlinkOracle.sol\";\nimport \"../interfaces/oracles/IUniV3Oracle.sol\";\nimport \"../interfaces/oracles/IUniV2Oracle.sol\";\nimport \"../interfaces/oracles/IMellowOracle.sol\";\nimport \"../utils/ContractMeta.sol\";\n\ncontract MellowOracle is ContractMeta, IMellowOracle, ERC165 {\n    /// @inheritdoc IMellowOracle\n    IUniV2Oracle public immutable univ2Oracle;\n    /// @inheritdoc IMellowOracle\n    IUniV3Oracle public immutable univ3Oracle;\n    /// @inheritdoc IMellowOracle\n    IChainlinkOracle public immutable chainlinkOracle;\n\n    constructor(\n        IUniV2Oracle univ2Oracle_,\n        IUniV3Oracle univ3Oracle_,\n        IChainlinkOracle chainlinkOracle_\n    ) {\n        univ2Oracle = univ2Oracle_;\n        univ3Oracle = univ3Oracle_;\n        chainlinkOracle = chainlinkOracle_;\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        IOracle[] memory oracles = _oracles();\n        pricesX96 = new uint256[](6);\n        safetyIndices = new uint256[](6);\n        uint256 len;\n        for (uint256 i = 0; i < oracles.length; i++) {\n            IOracle oracle = oracles[i];\n            (uint256[] memory oPrices, uint256[] memory oSafetyIndixes) = oracle.priceX96(\n                token0,\n                token1,\n                safetyIndicesSet\n            );\n            for (uint256 j = 0; j < oPrices.length; j++) {\n                pricesX96[len] = oPrices[j];\n                safetyIndices[len] = oSafetyIndixes[j];\n                len += 1;\n            }\n        }\n        assembly {\n            mstore(pricesX96, len)\n            mstore(safetyIndices, len)\n        }\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IOracle).interfaceId == interfaceId;\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"MellowOracle\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _oracles() internal view returns (IOracle[] memory oracles) {\n        oracles = new IOracle[](3);\n        uint256 len;\n        if (address(univ2Oracle) != address(0)) {\n            oracles[len] = univ2Oracle;\n            len += 1;\n        }\n        if (address(univ3Oracle) != address(0)) {\n            oracles[len] = univ3Oracle;\n            len += 1;\n        }\n        if (address(chainlinkOracle) != address(0)) {\n            oracles[len] = chainlinkOracle;\n            len += 1;\n        }\n        assembly {\n            mstore(oracles, len)\n        }\n    }\n}\n"
    },
    "contracts/interfaces/oracles/IChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IOracle.sol\";\n\ninterface IChainlinkOracle is IOracle {\n    /// @notice Index of safety bit\n    function safetyIndex() external view returns (uint8);\n\n    /// @notice Checks if token has chainlink oracle\n    /// @param token token address\n    /// @return `true` if token is allowed, `false` o/w\n    function hasOracle(address token) external view returns (bool);\n\n    /// @notice A list of supported tokens\n    function supportedTokens() external view returns (address[] memory);\n\n    /// @notice Chainlink oracle for a ERC20 token\n    /// @param token The address of the ERC20 token\n    /// @return Address of the chainlink oracle\n    function oraclesIndex(address token) external view returns (address);\n\n    /// @notice Negative sum of decimals of token and chainlink oracle data for this token\n    /// @param token The address of the ERC20 token\n    /// @return Negative sum of decimals of token and chainlink oracle data for this token\n    function decimalsIndex(address token) external view returns (int256);\n\n    /// Add a Chainlink price feed for a token\n    /// @param tokens ERC20 tokens for the feed\n    /// @param oracles Chainlink oracle price feeds (token / USD)\n    function addChainlinkOracles(address[] memory tokens, address[] memory oracles) external;\n}\n"
    },
    "contracts/interfaces/oracles/IUniV2Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../external/univ2/IUniswapV2Factory.sol\";\nimport \"./IOracle.sol\";\n\ninterface IUniV2Oracle is IOracle {\n    /// @notice Reference to UniV2 factory\n    function factory() external returns (IUniswapV2Factory);\n\n    /// @notice Index of safety bit\n    function safetyIndex() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/oracles/IMellowOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"./IOracle.sol\";\nimport \"./IUniV2Oracle.sol\";\nimport \"./IUniV3Oracle.sol\";\nimport \"./IChainlinkOracle.sol\";\n\ninterface IMellowOracle is IOracle {\n    /// @notice Reference to UniV2 oracle\n    function univ2Oracle() external view returns (IUniV2Oracle);\n\n    /// @notice Reference to UniV3 oracle\n    function univ3Oracle() external view returns (IUniV3Oracle);\n\n    /// @notice Reference to Chainlink oracle\n    function chainlinkOracle() external view returns (IChainlinkOracle);\n}\n"
    },
    "contracts/oracles/ChainlinkOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/external/chainlink/IAggregatorV3.sol\";\nimport \"../interfaces/oracles/IChainlinkOracle.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../utils/DefaultAccessControl.sol\";\nimport \"../utils/ContractMeta.sol\";\n\n/// @notice Contract for getting chainlink data\ncontract ChainlinkOracle is ContractMeta, IChainlinkOracle, DefaultAccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @inheritdoc IChainlinkOracle\n    uint8 public constant safetyIndex = 5;\n    /// @inheritdoc IChainlinkOracle\n    mapping(address => address) public oraclesIndex;\n    /// @inheritdoc IChainlinkOracle\n    mapping(address => int256) public decimalsIndex;\n    EnumerableSet.AddressSet private _tokens;\n\n    constructor(\n        address[] memory tokens,\n        address[] memory oracles,\n        address admin\n    ) DefaultAccessControl(admin) {\n        _addChainlinkOracles(tokens, oracles);\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @inheritdoc IChainlinkOracle\n    function hasOracle(address token) external view returns (bool) {\n        return _tokens.contains(token);\n    }\n\n    /// @inheritdoc IChainlinkOracle\n    function supportedTokens() external view returns (address[] memory) {\n        return _tokens.values();\n    }\n\n    /// @inheritdoc IOracle\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        if (((safetyIndicesSet >> safetyIndex) & 1) != 1) {\n            return (pricesX96, safetyIndices);\n        }\n        IAggregatorV3 chainlinkOracle0 = IAggregatorV3(oraclesIndex[token0]);\n        IAggregatorV3 chainlinkOracle1 = IAggregatorV3(oraclesIndex[token1]);\n        if ((address(chainlinkOracle0) == address(0)) || (address(chainlinkOracle1) == address(0))) {\n            return (pricesX96, safetyIndices);\n        }\n        uint256 price0;\n        uint256 price1;\n        bool success;\n        (success, price0) = _queryChainlinkOracle(chainlinkOracle0);\n        if (!success) {\n            return (pricesX96, safetyIndices);\n        }\n        (success, price1) = _queryChainlinkOracle(chainlinkOracle1);\n        if (!success) {\n            return (pricesX96, safetyIndices);\n        }\n\n        int256 decimals0 = decimalsIndex[token0];\n        int256 decimals1 = decimalsIndex[token1];\n        if (decimals1 > decimals0) {\n            price1 *= 10**(uint256(decimals1 - decimals0));\n        } else if (decimals0 > decimals1) {\n            price0 *= 10**(uint256(decimals0 - decimals1));\n        }\n        pricesX96 = new uint256[](1);\n        safetyIndices = new uint256[](1);\n        pricesX96[0] = FullMath.mulDiv(price0, CommonLibrary.Q96, price1);\n        safetyIndices[0] = safetyIndex;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || interfaceId == type(IChainlinkOracle).interfaceId;\n    }\n\n    // -------------------------  EXTERNAL, MUTATING  ------------------------------\n\n    /// @inheritdoc IChainlinkOracle\n    function addChainlinkOracles(address[] memory tokens, address[] memory oracles) external {\n        _requireAdmin();\n        _addChainlinkOracles(tokens, oracles);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _queryChainlinkOracle(IAggregatorV3 oracle) internal view returns (bool success, uint256 answer) {\n        try oracle.latestRoundData() returns (uint80, int256 ans, uint256, uint256, uint80) {\n            return (true, uint256(ans));\n        } catch (bytes memory) {\n            return (false, 0);\n        }\n    }\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ChainlinkOracle\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // -------------------------  INTERNAL, MUTATING  ------------------------------\n\n    function _addChainlinkOracles(address[] memory tokens, address[] memory oracles) internal {\n        require(tokens.length == oracles.length, ExceptionsLibrary.INVALID_VALUE);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            address oracle = oracles[i];\n            _tokens.add(token);\n            oraclesIndex[token] = oracle;\n            decimalsIndex[token] = int256(\n                -int8(IERC20Metadata(token).decimals()) - int8(IAggregatorV3(oracle).decimals())\n            );\n        }\n        emit OraclesAdded(tx.origin, msg.sender, tokens, oracles);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new Chainlink oracle is added\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param tokens Tokens added\n    /// @param oracles Orecles added for the tokens\n    event OraclesAdded(address indexed origin, address indexed sender, address[] tokens, address[] oracles);\n}\n"
    },
    "contracts/interfaces/external/chainlink/IAggregatorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAggregatorV3 {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    },
    "contracts/ProtocolGovernance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/Multicall.sol\";\nimport \"./interfaces/IProtocolGovernance.sol\";\nimport \"./libraries/ExceptionsLibrary.sol\";\nimport \"./UnitPricesGovernance.sol\";\nimport \"./utils/ContractMeta.sol\";\n\n/// @notice Governance that manages all params common for Mellow Permissionless Vaults protocol.\ncontract ProtocolGovernance is ContractMeta, IProtocolGovernance, ERC165, UnitPricesGovernance, Multicall {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 public constant MAX_GOVERNANCE_DELAY = 7 days;\n    uint256 public constant MIN_WITHDRAW_LIMIT = 200_000;\n\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => uint256) public stagedPermissionGrantsTimestamps;\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => uint256) public stagedPermissionGrantsMasks;\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => uint256) public permissionMasks;\n\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => uint256) public stagedValidatorsTimestamps;\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => address) public stagedValidators;\n    /// @inheritdoc IProtocolGovernance\n    mapping(address => address) public validators;\n\n    /// @inheritdoc IProtocolGovernance\n    uint256 public stagedParamsTimestamp;\n\n    EnumerableSet.AddressSet private _stagedPermissionGrantsAddresses;\n    EnumerableSet.AddressSet private _permissionAddresses;\n    EnumerableSet.AddressSet private _validatorsAddresses;\n    EnumerableSet.AddressSet private _stagedValidatorsAddresses;\n\n    Params private _stagedParams;\n    Params private _params;\n\n    /// @notice Creates a new contract\n    /// @param admin Initial admin of the contract\n    constructor(address admin) UnitPricesGovernance(admin) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IProtocolGovernance\n    function stagedParams() public view returns (Params memory) {\n        return _stagedParams;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function params() public view returns (Params memory) {\n        return _params;\n    }\n\n    function stagedValidatorsAddresses() external view returns (address[] memory) {\n        return _stagedValidatorsAddresses.values();\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function validatorsAddresses() external view returns (address[] memory) {\n        return _validatorsAddresses.values();\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function validatorsAddress(uint256 i) external view returns (address) {\n        return _validatorsAddresses.at(i);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function permissionAddresses() external view returns (address[] memory) {\n        return _permissionAddresses.values();\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory) {\n        return _stagedPermissionGrantsAddresses.values();\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory addresses) {\n        uint256 length = _permissionAddresses.length();\n        addresses = new address[](length);\n        uint256 addressesLength = 0;\n        uint256 mask = 1 << permissionId;\n        for (uint256 i = 0; i < length; i++) {\n            address addr = _permissionAddresses.at(i);\n            if (permissionMasks[addr] & mask != 0) {\n                addresses[addressesLength] = addr;\n                addressesLength++;\n            }\n        }\n        // shrink to fit\n        assembly {\n            mstore(addresses, addressesLength)\n        }\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function hasPermission(address target, uint8 permissionId) external view returns (bool) {\n        return ((permissionMasks[target] | _params.forceAllowMask) & (1 << (permissionId))) != 0;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool) {\n        uint256 submask = _permissionIdsToMask(permissionIds);\n        uint256 mask = permissionMasks[target] | _params.forceAllowMask;\n        return mask & submask == submask;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function maxTokensPerVault() external view returns (uint256) {\n        return _params.maxTokensPerVault;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function governanceDelay() external view returns (uint256) {\n        return _params.governanceDelay;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function protocolTreasury() external view returns (address) {\n        return _params.protocolTreasury;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function forceAllowMask() external view returns (uint256) {\n        return _params.forceAllowMask;\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function withdrawLimit(address token) external view returns (uint256) {\n        return _params.withdrawLimit * unitPrices[token];\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(UnitPricesGovernance, IERC165, ERC165)\n        returns (bool)\n    {\n        return (interfaceId == type(IProtocolGovernance).interfaceId) || super.supportsInterface(interfaceId);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IProtocolGovernance\n    function stageValidator(address target, address validator) external {\n        _requireAdmin();\n        require(\n            target != address(0) &&\n            validator != address(0), \n            ExceptionsLibrary.ADDRESS_ZERO\n        );\n        _stagedValidatorsAddresses.add(target);\n        stagedValidators[target] = validator;\n        uint256 at = block.timestamp + _params.governanceDelay;\n        stagedValidatorsTimestamps[target] = at;\n        emit ValidatorStaged(tx.origin, msg.sender, target, validator, at);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function rollbackStagedValidators() external {\n        _requireAdmin();\n        uint256 length = _stagedValidatorsAddresses.length();\n        for (uint256 i; i != length; ++i) {\n            address target = _stagedValidatorsAddresses.at(0);\n            delete stagedValidators[target];\n            delete stagedValidatorsTimestamps[target];\n            _stagedValidatorsAddresses.remove(target);\n        }\n        emit AllStagedValidatorsRolledBack(tx.origin, msg.sender);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitValidator(address stagedAddress) external {\n        _requireAdmin();\n        uint256 stagedToCommitAt = stagedValidatorsTimestamps[stagedAddress];\n        require(block.timestamp >= stagedToCommitAt, ExceptionsLibrary.TIMESTAMP);\n        require(stagedToCommitAt != 0, ExceptionsLibrary.NULL);\n        validators[stagedAddress] = stagedValidators[stagedAddress];\n        _validatorsAddresses.add(stagedAddress);\n        delete stagedValidators[stagedAddress];\n        delete stagedValidatorsTimestamps[stagedAddress];\n        _stagedValidatorsAddresses.remove(stagedAddress);\n        emit ValidatorCommitted(tx.origin, msg.sender, stagedAddress);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory addressesCommitted) {\n        _requireAdmin();\n        uint256 length = _stagedValidatorsAddresses.length();\n        addressesCommitted = new address[](length);\n        uint256 addressesCommittedLength;\n        for (uint256 i; i != length;) {\n            address stagedAddress = _stagedValidatorsAddresses.at(i);\n            if (block.timestamp >= stagedValidatorsTimestamps[stagedAddress]) {\n                validators[stagedAddress] = stagedValidators[stagedAddress];\n                _validatorsAddresses.add(stagedAddress);\n                delete stagedValidators[stagedAddress];\n                delete stagedValidatorsTimestamps[stagedAddress];\n                _stagedValidatorsAddresses.remove(stagedAddress);\n                addressesCommitted[addressesCommittedLength] = stagedAddress;\n                ++addressesCommittedLength;\n                --length;\n                emit ValidatorCommitted(tx.origin, msg.sender, stagedAddress);\n            } else {\n                ++i;\n            }\n        }\n        assembly {\n            mstore(addressesCommitted, addressesCommittedLength)\n        }\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function revokeValidator(address target) external {\n        _requireAdmin();\n        require(target != address(0), ExceptionsLibrary.NULL);\n        delete validators[target];\n        _validatorsAddresses.remove(target);\n        emit ValidatorRevoked(tx.origin, msg.sender, target);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function rollbackStagedPermissionGrants() external {\n        _requireAdmin();\n        uint256 length = _stagedPermissionGrantsAddresses.length();\n        for (uint256 i; i != length; ++i) {\n            address target = _stagedPermissionGrantsAddresses.at(0);\n            delete stagedPermissionGrantsMasks[target];\n            delete stagedPermissionGrantsTimestamps[target];\n            _stagedPermissionGrantsAddresses.remove(target);\n        }\n        emit AllStagedPermissionGrantsRolledBack(tx.origin, msg.sender);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitPermissionGrants(address stagedAddress) external {\n        _requireAdmin();\n        uint256 stagedToCommitAt = stagedPermissionGrantsTimestamps[stagedAddress];\n        require(block.timestamp >= stagedToCommitAt, ExceptionsLibrary.TIMESTAMP);\n        require(stagedToCommitAt != 0, ExceptionsLibrary.NULL);\n        permissionMasks[stagedAddress] |= stagedPermissionGrantsMasks[stagedAddress];\n        _permissionAddresses.add(stagedAddress);\n        delete stagedPermissionGrantsMasks[stagedAddress];\n        delete stagedPermissionGrantsTimestamps[stagedAddress];\n        _stagedPermissionGrantsAddresses.remove(stagedAddress);\n        emit PermissionGrantsCommitted(tx.origin, msg.sender, stagedAddress);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory addresses) {\n        _requireAdmin();\n        uint256 length = _stagedPermissionGrantsAddresses.length();\n        uint256 addressesLeft = length;\n        addresses = new address[](length);\n        for (uint256 i; i != addressesLeft;) {\n            address stagedAddress = _stagedPermissionGrantsAddresses.at(i);\n            if (block.timestamp >= stagedPermissionGrantsTimestamps[stagedAddress]) {\n                permissionMasks[stagedAddress] |= stagedPermissionGrantsMasks[stagedAddress];\n                _permissionAddresses.add(stagedAddress);\n                delete stagedPermissionGrantsMasks[stagedAddress];\n                delete stagedPermissionGrantsTimestamps[stagedAddress];\n                _stagedPermissionGrantsAddresses.remove(stagedAddress);\n                addresses[length - addressesLeft] = stagedAddress;\n                --addressesLeft;\n                emit PermissionGrantsCommitted(tx.origin, msg.sender, stagedAddress);\n            } else {\n                ++i;\n            }\n        }\n        length -= addressesLeft;\n        assembly {\n            mstore(addresses, length)\n        }\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function revokePermissions(address target, uint8[] calldata permissionIds) external {\n        _requireAdmin();\n        require(target != address(0), ExceptionsLibrary.NULL);\n        uint256 diff = _permissionIdsToMask(permissionIds);\n        uint256 currentMask = permissionMasks[target];\n        uint256 newMask = currentMask & (~diff);\n        permissionMasks[target] = newMask;\n        if (newMask == 0) {\n            _permissionAddresses.remove(target);\n        }\n        emit PermissionsRevoked(tx.origin, msg.sender, target, permissionIds);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function commitParams() external {\n        _requireAdmin();\n        require(stagedParamsTimestamp != 0, ExceptionsLibrary.NULL);\n        require(\n            block.timestamp >= stagedParamsTimestamp,\n            ExceptionsLibrary.TIMESTAMP\n        );\n        _params = _stagedParams;\n        delete _stagedParams;\n        delete stagedParamsTimestamp;\n        emit ParamsCommitted(tx.origin, msg.sender, _params);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function stagePermissionGrants(address target, uint8[] calldata permissionIds) external {\n        _requireAdmin();\n        require(target != address(0), ExceptionsLibrary.NULL);\n        _stagedPermissionGrantsAddresses.add(target);\n        stagedPermissionGrantsMasks[target] = _permissionIdsToMask(permissionIds);\n        uint256 stagedToCommitAt = block.timestamp + _params.governanceDelay;\n        stagedPermissionGrantsTimestamps[target] = stagedToCommitAt;\n        emit PermissionGrantsStaged(tx.origin, msg.sender, target, permissionIds, stagedToCommitAt);\n    }\n\n    /// @inheritdoc IProtocolGovernance\n    function stageParams(IProtocolGovernance.Params calldata newParams) external {\n        _requireAdmin();\n        _validateGovernanceParams(newParams);\n        _stagedParams = newParams;\n        stagedParamsTimestamp = block.timestamp + _params.governanceDelay;\n        emit ParamsStaged(tx.origin, msg.sender, stagedParamsTimestamp, _stagedParams);\n    }\n\n    // -------------------------  INTERNAL, VIEW  ------------------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"ProtocolGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    function _validateGovernanceParams(IProtocolGovernance.Params calldata newParams) private pure {\n        require(newParams.maxTokensPerVault != 0 && newParams.governanceDelay != 0, ExceptionsLibrary.NULL);\n        require(newParams.governanceDelay <= MAX_GOVERNANCE_DELAY, ExceptionsLibrary.LIMIT_OVERFLOW);\n        require(newParams.withdrawLimit >= MIN_WITHDRAW_LIMIT, ExceptionsLibrary.LIMIT_OVERFLOW);\n    }\n\n    function _permissionIdsToMask(uint8[] calldata permissionIds) private pure returns (uint256 mask) {\n        for (uint256 i = 0; i < permissionIds.length; ++i) {\n            mask |= 1 << permissionIds[i];\n        }\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when validators are staged to be granted for specific address.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    /// @param validator Staged validator\n    /// @param at Timestamp when the staged permissions could be committed\n    event ValidatorStaged(\n        address indexed origin,\n        address indexed sender,\n        address indexed target,\n        address validator,\n        uint256 at\n    );\n\n    /// @notice Validator revoked\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    event ValidatorRevoked(address indexed origin, address indexed sender, address indexed target);\n\n    /// @notice Emitted when staged validators are rolled back\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    event AllStagedValidatorsRolledBack(address indexed origin, address indexed sender);\n\n    /// @notice Emitted when staged validators are comitted for specific address\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    event ValidatorCommitted(address indexed origin, address indexed sender, address indexed target);\n\n    /// @notice Emitted when new permissions are staged to be granted for specific address.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    /// @param permissionIds Permission IDs to be granted\n    /// @param at Timestamp when the staged permissions could be committed\n    event PermissionGrantsStaged(\n        address indexed origin,\n        address indexed sender,\n        address indexed target,\n        uint8[] permissionIds,\n        uint256 at\n    );\n\n    /// @notice Emitted when permissions are revoked\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    /// @param permissionIds Permission IDs to be revoked\n    event PermissionsRevoked(\n        address indexed origin,\n        address indexed sender,\n        address indexed target,\n        uint8[] permissionIds\n    );\n\n    /// @notice Emitted when staged permissions are rolled back\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    event AllStagedPermissionGrantsRolledBack(address indexed origin, address indexed sender);\n\n    /// @notice Emitted when staged permissions are comitted for specific address\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param target Target address\n    event PermissionGrantsCommitted(address indexed origin, address indexed sender, address indexed target);\n\n    /// @notice Emitted when pending parameters are set\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param at Timestamp when the pending parameters could be committed\n    /// @param params Pending parameters\n    event ParamsStaged(address indexed origin, address indexed sender, uint256 at, Params params);\n\n    /// @notice Emitted when pending parameters are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params Committed parameters\n    event ParamsCommitted(address indexed origin, address indexed sender, Params params);\n}\n"
    },
    "contracts/UnitPricesGovernance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"./interfaces/IUnitPricesGovernance.sol\";\nimport \"./libraries/ExceptionsLibrary.sol\";\nimport \"./utils/DefaultAccessControl.sol\";\n\ncontract UnitPricesGovernance is IUnitPricesGovernance, DefaultAccessControl {\n    uint256 public constant DELAY = 14 days;\n    /// @inheritdoc IUnitPricesGovernance\n    mapping(address => uint256) public unitPrices;\n    /// @inheritdoc IUnitPricesGovernance\n    mapping(address => uint256) public stagedUnitPrices;\n    /// @inheritdoc IUnitPricesGovernance\n    mapping(address => uint256) public stagedUnitPricesTimestamps;\n\n    constructor(address admin) DefaultAccessControl(admin) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, AccessControlEnumerable)\n        returns (bool)\n    {\n        return (interfaceId == type(IUnitPricesGovernance).interfaceId) || super.supportsInterface(interfaceId);\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IUnitPricesGovernance\n    function stageUnitPrice(address token, uint256 value) external {\n        require(token != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        _requireAdmin();\n        stagedUnitPrices[token] = value;\n        stagedUnitPricesTimestamps[token] = unitPrices[token] == 0 ? block.timestamp : block.timestamp + DELAY;\n        emit UnitPriceStaged(tx.origin, msg.sender, token, value);\n    }\n\n    /// @inheritdoc IUnitPricesGovernance\n    function rollbackUnitPrice(address token) external {\n        _requireAdmin();\n        delete stagedUnitPrices[token];\n        delete stagedUnitPricesTimestamps[token];\n        emit UnitPriceRolledBack(tx.origin, msg.sender, token);\n    }\n\n    /// @inheritdoc IUnitPricesGovernance\n    function commitUnitPrice(address token) external {\n        _requireAdmin();\n        uint256 timestamp = stagedUnitPricesTimestamps[token];\n        require(timestamp != 0, ExceptionsLibrary.INVALID_STATE);\n        require(timestamp <= block.timestamp, ExceptionsLibrary.TIMESTAMP);\n\n        uint256 price = stagedUnitPrices[token];\n        unitPrices[token] = price;\n        delete stagedUnitPrices[token];\n        delete stagedUnitPricesTimestamps[token];\n        emit UnitPriceCommitted(tx.origin, msg.sender, token, price);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice UnitPrice staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param token Token address\n    /// @param unitPrice Unit price\n    event UnitPriceStaged(address indexed origin, address indexed sender, address token, uint256 unitPrice);\n\n    /// @notice UnitPrice rolled back\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param token Token address\n    event UnitPriceRolledBack(address indexed origin, address indexed sender, address token);\n\n    /// @notice UnitPrice committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param token Token address\n    /// @param unitPrice Unit price\n    event UnitPriceCommitted(address indexed origin, address indexed sender, address token, uint256 unitPrice);\n}\n"
    },
    "contracts/test/MockOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/oracles/IOracle.sol\";\n\ncontract MockOracle is IOracle {\n    uint256 public currentPriceX96 = 1 << 96;\n    uint256 public safetyIndex = 1;\n\n    function updatePrice(uint256 newPrice) public {\n        currentPriceX96 = newPrice;\n    }\n\n    function updateSafetyIndex(uint256 newSafetyIndex) public {\n        safetyIndex = newSafetyIndex;\n    }\n\n    function priceX96(\n        address,\n        address,\n        uint256\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        pricesX96 = new uint256[](2);\n        safetyIndices = new uint256[](2);\n        for (uint256 i = 0; i < 2; ++i) {\n            pricesX96[i] = currentPriceX96;\n            safetyIndices[i] = safetyIndex;\n        }\n    }\n}\n"
    },
    "contracts/test/MockNonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\nimport \"../interfaces/external/univ3/INonfungiblePositionManager.sol\";\nimport \"./MockUniswapV3Factory.sol\";\n\ncontract MockNonfungiblePositionManager is INonfungiblePositionManager {\n    MockUniswapV3Factory uniV3Factory;\n\n    constructor(MockUniswapV3Factory factory_) {\n        uniV3Factory = factory_;\n    }\n\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        )\n    {}\n\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {}\n\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {}\n\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1)\n    {}\n\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1) {}\n\n    function burn(uint256 tokenId) external payable {}\n\n    function balanceOf(address owner) external view returns (uint256 balance) {}\n\n    function ownerOf(uint256 tokenId) external view returns (address owner) {}\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external {}\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external {}\n\n    function approve(address to, uint256 tokenId) external {}\n\n    function getApproved(uint256 tokenId) external view returns (address operator) {}\n\n    function setApprovalForAll(address operator, bool _approved) external {}\n\n    function isApprovedForAll(address owner, address operator) external view returns (bool) {}\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external {}\n\n    function factory() external view returns (address) {\n        return address(uniV3Factory);\n    }\n\n    function WETH9() external view returns (address) {}\n\n    function supportsInterface(bytes4) external pure returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/test/MockUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.9;\n\nimport \"../interfaces/external/univ3/IUniswapV3Factory.sol\";\nimport \"./MockUniswapV3Pool.sol\";\n\ncontract MockUniswapV3Factory is IUniswapV3Factory {\n    MockUniswapV3Pool uniV3Pool;\n\n    constructor(MockUniswapV3Pool pool_) {\n        uniV3Pool = pool_;\n    }\n\n    function owner() external view returns (address) {}\n\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24) {}\n\n    function getPool(\n        address,\n        address,\n        uint24\n    ) external view returns (address pool) {\n        pool = address(uniV3Pool);\n    }\n\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool) {}\n\n    function setOwner(address _owner) external {}\n\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external {}\n}\n"
    },
    "contracts/test/MockUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/univ3/IUniswapV3Pool.sol\";\n\ncontract MockUniswapV3Pool is IUniswapV3Pool {\n    struct Slot0Params {\n        uint160 sqrtPriceX96;\n        int24 tick;\n        uint16 observationIndex;\n        uint16 observationCardinality;\n        uint16 observationCardinalityNext;\n        uint8 feeProtocol;\n        bool unlocked;\n    }\n\n    struct ObservationsParams {\n        uint32 blockTimestamp;\n        int56 tickCumulative;\n        uint160 secondsPerLiquidityCumulativeX128;\n        bool initialized;\n        uint32 blockTimestampLast;\n        int56 tickCumulativeLast;\n        uint8 observationsCalled;\n    }\n\n    Slot0Params private slotParams;\n    ObservationsParams private observationsParams;\n\n    function initialize(uint160 sqrtPriceX96) external {}\n\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1) {}\n\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1) {}\n\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1) {}\n\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1) {}\n\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external {}\n\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external {}\n\n    function factory() external view returns (address) {}\n\n    function token0() external view returns (address) {}\n\n    function token1() external view returns (address) {}\n\n    function fee() external view returns (uint24) {}\n\n    function tickSpacing() external view returns (int24) {}\n\n    function maxLiquidityPerTick() external view returns (uint128) {}\n\n    function setSlot0Params(\n        uint160 sqrtPriceX96,\n        int24 tick,\n        uint16 observationIndex,\n        uint16 observationCardinality,\n        uint16 observationCardinalityNext,\n        uint8 feeProtocol,\n        bool unlocked\n    ) external {\n        slotParams.sqrtPriceX96 = sqrtPriceX96;\n        slotParams.tick = tick;\n        slotParams.observationIndex = observationIndex;\n        slotParams.observationCardinality = observationCardinality;\n        slotParams.observationCardinalityNext = observationCardinalityNext;\n        slotParams.feeProtocol = feeProtocol;\n        slotParams.unlocked = unlocked;\n    }\n\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        )\n    {\n        sqrtPriceX96 = slotParams.sqrtPriceX96;\n        tick = slotParams.tick;\n        observationIndex = slotParams.observationIndex;\n        observationCardinality = slotParams.observationCardinality;\n        observationCardinalityNext = slotParams.observationCardinalityNext;\n        feeProtocol = slotParams.feeProtocol;\n        unlocked = slotParams.unlocked;\n    }\n\n    function feeGrowthGlobal0X128() external view returns (uint256) {}\n\n    function feeGrowthGlobal1X128() external view returns (uint256) {}\n\n    function protocolPerformanceFees() external view returns (uint128, uint128) {}\n\n    function liquidity() external view returns (uint128) {}\n\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        )\n    {}\n\n    function tickBitmap(int16 wordPosition) external view returns (uint256) {}\n\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        )\n    {}\n\n    function setObservationsParams(\n        uint32 blockTimestamp,\n        int56 tickCumulative,\n        uint160 secondsPerLiquidityCumulativeX128,\n        bool initialized,\n        uint32 blockTimestampLast,\n        int56 tickCumulativeLast\n    ) external {\n        observationsParams.blockTimestamp = blockTimestamp;\n        observationsParams.tickCumulative = tickCumulative;\n        observationsParams.secondsPerLiquidityCumulativeX128 = secondsPerLiquidityCumulativeX128;\n        observationsParams.initialized = initialized;\n        observationsParams.blockTimestampLast = blockTimestampLast;\n        observationsParams.tickCumulativeLast = tickCumulativeLast;\n        observationsParams.observationsCalled = 0;\n    }\n\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        )\n    {\n        if (index == slotParams.observationIndex) {\n            blockTimestamp = observationsParams.blockTimestamp;\n            tickCumulative = observationsParams.tickCumulative;\n        } else {\n            blockTimestamp = observationsParams.blockTimestampLast;\n            tickCumulative = observationsParams.tickCumulativeLast;\n        }\n        secondsPerLiquidityCumulativeX128 = observationsParams.secondsPerLiquidityCumulativeX128;\n        initialized = observationsParams.initialized;\n    }\n\n    int56 observeCumulativeTick_;\n\n    function setObserveTick(int56 tick) external {\n        observeCumulativeTick_ = tick;\n    }\n\n    function observe(uint32[] calldata)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\n    {\n        tickCumulatives = new int56[](2);\n        tickCumulatives[0] = observeCumulativeTick_;\n        tickCumulatives[1] = observeCumulativeTick_ * 2;\n        secondsPerLiquidityCumulativeX128s = new uint160[](2);\n        secondsPerLiquidityCumulativeX128s[1] = 1;\n    }\n}\n"
    },
    "contracts/interfaces/external/gearbox/helpers/IDegenNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2022\npragma solidity ^0.8.9;\nimport { IVersion } from \"./IVersion.sol\";\nimport { IERC721Metadata } from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface IDegenNFTExceptions {\n    /// @dev Thrown if an access-restricted function was called by non-CreditFacade\n    error CreditFacadeOrConfiguratorOnlyException();\n\n    /// @dev Thrown if an access-restricted function was called by non-minter\n    error MinterOnlyException();\n\n    /// @dev Thrown if trying to add a burner address that is not a correct Credit Facade\n    error InvalidCreditFacadeException();\n\n    /// @dev Thrown if the account's balance is not sufficient for an action (usually a burn)\n    error InsufficientBalanceException();\n}\n\ninterface IDegenNFTEvents {\n    /// @dev Minted when new minter set\n    event NewMinterSet(address indexed);\n\n    /// @dev Minted each time when new credit facade added\n    event NewCreditFacadeAdded(address indexed);\n\n    /// @dev Minted each time when new credit facade added\n    event NewCreditFacadeRemoved(address indexed);\n}\n\ninterface IDegenNFT is\n    IDegenNFTExceptions,\n    IDegenNFTEvents,\n    IVersion,\n    IERC721Metadata\n{\n    /// @dev address of the current minter\n    function minter() external view returns (address);\n\n    /// @dev Stores the total number of tokens on holder accounts\n    function totalSupply() external view returns (uint256);\n\n    /// @dev Stores the base URI for NFT metadata\n    function baseURI() external view returns (string memory);\n\n    /// @dev Mints a specified amount of tokens to the address\n    /// @param to Address the tokens are minted to\n    /// @param amount The number of tokens to mint\n    function mint(address to, uint256 amount) external;\n\n    /// @dev Burns a number of tokens from a specified address\n    /// @param from The address a token will be burnt from\n    /// @param amount The number of tokens to burn\n    function burn(address from, uint256 amount) external;\n\n    function setMinter(address minter_)\n        external;\n}"
    },
    "contracts/utils/GearboxHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/external/convex/ICvx.sol\";\nimport \"../interfaces/external/gearbox/helpers/IPriceOracle.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../interfaces/external/gearbox/ICreditFacade.sol\";\nimport \"../interfaces/external/gearbox/ICurveV1Adapter.sol\";\nimport \"../interfaces/external/gearbox/IConvexV1BaseRewardPoolAdapter.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../interfaces/vaults/IGearboxVaultGovernance.sol\";\nimport \"../interfaces/external/gearbox/helpers/convex/IBooster.sol\";\n\ncontract GearboxHelper {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant D9 = 10**9;\n    uint256 public constant D27 = 10**27;\n    bytes4 public constant GET_REWARD_SELECTOR = 0x7050ccd9;\n\n    ICreditFacade public creditFacade;\n    ICreditManagerV2 public creditManager;\n\n    address public curveAdapter;\n    address public convexAdapter;\n    address public primaryToken;\n    address public depositToken;\n\n    bool public parametersSet;\n    IGearboxVault public admin;\n\n    uint256 public vaultNft;\n\n    function setParameters(\n        ICreditFacade creditFacade_,\n        ICreditManagerV2 creditManager_,\n        address curveAdapter_,\n        address convexAdapter_,\n        address primaryToken_,\n        address depositToken_,\n        uint256 nft_\n    ) external {\n        require(!parametersSet, ExceptionsLibrary.FORBIDDEN);\n        creditFacade = creditFacade_;\n        creditManager = creditManager_;\n        curveAdapter = curveAdapter_;\n        convexAdapter = convexAdapter_;\n        primaryToken = primaryToken_;\n        depositToken = depositToken_;\n        vaultNft = nft_;\n\n        parametersSet = true;\n        admin = IGearboxVault(msg.sender);\n    }\n\n    function verifyInstances()\n        external\n        view\n        returns (\n            int128 primaryIndex,\n            address convexOutputToken,\n            uint256 poolId\n        )\n    {\n        ICurveV1Adapter curveAdapter_ = ICurveV1Adapter(curveAdapter);\n        IConvexV1BaseRewardPoolAdapter convexAdapter_ = IConvexV1BaseRewardPoolAdapter(convexAdapter);\n\n        poolId = convexAdapter_.pid();\n\n        require(creditFacade.isTokenAllowed(primaryToken), ExceptionsLibrary.INVALID_TOKEN);\n\n        bool havePrimaryTokenInCurve = false;\n\n        for (uint256 i = 0; i < curveAdapter_.nCoins(); ++i) {\n            address tokenI = curveAdapter_.coins(i);\n            if (tokenI == primaryToken) {\n                primaryIndex = int128(int256(i));\n                havePrimaryTokenInCurve = true;\n            }\n        }\n\n        require(havePrimaryTokenInCurve, ExceptionsLibrary.INVALID_TOKEN);\n\n        address lpToken = curveAdapter_.lp_token();\n        convexOutputToken = address(convexAdapter_.stakedPhantomToken());\n        require(lpToken == convexAdapter_.curveLPtoken(), ExceptionsLibrary.INVALID_TARGET);\n    }\n\n    function calculateEarnedCvxAmountByEarnedCrvAmount(uint256 crvAmount, address cvxTokenAddress)\n        public\n        view\n        returns (uint256)\n    {\n        IConvexToken cvxToken = IConvexToken(cvxTokenAddress);\n\n        unchecked {\n            uint256 supply = cvxToken.totalSupply();\n\n            uint256 cliff = supply / cvxToken.reductionPerCliff();\n            uint256 totalCliffs = cvxToken.totalCliffs();\n\n            if (cliff < totalCliffs) {\n                uint256 reduction = totalCliffs - cliff;\n                uint256 cvxAmount = FullMath.mulDiv(crvAmount, reduction, totalCliffs);\n\n                uint256 amtTillMax = cvxToken.maxSupply() - supply;\n                if (cvxAmount > amtTillMax) {\n                    cvxAmount = amtTillMax;\n                }\n\n                return cvxAmount;\n            }\n\n            return 0;\n        }\n    }\n\n    function calculateClaimableRewards(address creditAccount, address vaultGovernance) public view returns (uint256) {\n        if (creditAccount == address(0)) {\n            return 0;\n        }\n\n        uint256 earnedCrvAmount = IConvexV1BaseRewardPoolAdapter(convexAdapter).earned(creditAccount);\n        IPriceOracleV2 oracle = IPriceOracleV2(creditManager.priceOracle());\n\n        IGearboxVaultGovernance.DelayedProtocolParams memory protocolParams = IGearboxVaultGovernance(vaultGovernance)\n            .delayedProtocolParams();\n\n        uint256 valueCrvToUsd = oracle.convertToUSD(earnedCrvAmount, protocolParams.crv);\n        uint256 valueCvxToUsd = oracle.convertToUSD(\n            calculateEarnedCvxAmountByEarnedCrvAmount(earnedCrvAmount, protocolParams.cvx),\n            protocolParams.cvx\n        );\n\n        return oracle.convertFromUSD(valueCrvToUsd + valueCvxToUsd, primaryToken);\n    }\n\n    function calculateDesiredTotalValue(\n        address creditAccount,\n        address vaultGovernance,\n        uint256 marginalFactorD9\n    ) external view returns (uint256 expectedAllAssetsValue, uint256 currentAllAssetsValue) {\n        (currentAllAssetsValue, ) = creditFacade.calcTotalValue(creditAccount);\n        currentAllAssetsValue += calculateClaimableRewards(creditAccount, vaultGovernance);\n\n        (, , uint256 borrowAmountWithInterestAndFees) = creditManager.calcCreditAccountAccruedInterest(creditAccount);\n\n        uint256 currentTvl = currentAllAssetsValue - borrowAmountWithInterestAndFees;\n        expectedAllAssetsValue = FullMath.mulDiv(currentTvl, marginalFactorD9, D9);\n    }\n\n    function calcConvexTokensToWithdraw(\n        uint256 desiredValueNominatedUnderlying,\n        address creditAccount,\n        address convexOutputToken\n    ) public view returns (uint256) {\n        uint256 currentConvexTokensAmount = IERC20(convexOutputToken).balanceOf(creditAccount);\n\n        IPriceOracleV2 oracle = IPriceOracleV2(creditManager.priceOracle());\n        uint256 valueInConvexNominatedUnderlying = oracle.convert(\n            currentConvexTokensAmount,\n            convexOutputToken,\n            primaryToken\n        );\n\n        if (desiredValueNominatedUnderlying >= valueInConvexNominatedUnderlying) {\n            return currentConvexTokensAmount;\n        }\n\n        return\n            FullMath.mulDiv(\n                currentConvexTokensAmount,\n                desiredValueNominatedUnderlying,\n                valueInConvexNominatedUnderlying\n            );\n    }\n\n    function calcRateRAY(address tokenFrom, address tokenTo) public view returns (uint256) {\n        IPriceOracleV2 oracle = IPriceOracleV2(creditManager.priceOracle());\n        return oracle.convert(D27, tokenFrom, tokenTo);\n    }\n\n    function calculateAmountInMaximum(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        uint256 maxSlippageD9\n    ) public view returns (uint256) {\n        uint256 rateRAY = calcRateRAY(toToken, fromToken);\n        uint256 amountInExpected = FullMath.mulDiv(amount, rateRAY, D27) + 1;\n        return FullMath.mulDiv(amountInExpected, D9 + maxSlippageD9, D9) + 1;\n    }\n\n    function createUniswapMulticall(\n        address tokenFrom,\n        address tokenTo,\n        uint256 fee,\n        address adapter,\n        uint256 slippage\n    ) public view returns (MultiCall memory) {\n        uint256 rateRAY = calcRateRAY(tokenFrom, tokenTo);\n\n        IUniswapV3Adapter.ExactAllInputParams memory params = IUniswapV3Adapter.ExactAllInputParams({\n            path: abi.encodePacked(tokenFrom, uint24(fee), tokenTo),\n            deadline: block.timestamp + 1,\n            rateMinRAY: FullMath.mulDiv(rateRAY, D9 - slippage, D9)\n        });\n\n        return\n            MultiCall({\n                target: adapter,\n                callData: abi.encodeWithSelector(IUniswapV3Adapter.exactAllInput.selector, params)\n            });\n    }\n\n    function checkNecessaryDepositExchange(\n        uint256 expectedMaximalDepositTokenValueNominatedUnderlying,\n        address vaultGovernance,\n        address creditAccount\n    ) public {\n        require(msg.sender == address(admin), ExceptionsLibrary.FORBIDDEN);\n\n        address depositToken_ = depositToken;\n        address primaryToken_ = primaryToken;\n\n        if (depositToken_ == primaryToken_) {\n            return;\n        }\n\n        IGearboxVaultGovernance.DelayedProtocolParams memory protocolParams = IGearboxVaultGovernance(vaultGovernance)\n            .delayedProtocolParams();\n\n        IGearboxVaultGovernance.StrategyParams memory strategyParams = IGearboxVaultGovernance(vaultGovernance)\n            .strategyParams(vaultNft);\n\n        uint256 currentDepositTokenAmount = IERC20(depositToken_).balanceOf(creditAccount);\n        IPriceOracleV2 oracle = IPriceOracleV2(creditManager.priceOracle());\n\n        uint256 currentValueDepositTokenNominatedUnderlying = oracle.convert(\n            currentDepositTokenAmount,\n            depositToken_,\n            primaryToken_\n        );\n\n        if (currentValueDepositTokenNominatedUnderlying > expectedMaximalDepositTokenValueNominatedUnderlying) {\n            uint256 toSwap = FullMath.mulDiv(\n                currentDepositTokenAmount,\n                currentValueDepositTokenNominatedUnderlying - expectedMaximalDepositTokenValueNominatedUnderlying,\n                currentValueDepositTokenNominatedUnderlying\n            );\n            MultiCall[] memory calls = new MultiCall[](1);\n\n            uint256 expectedOutput = oracle.convert(toSwap, depositToken_, primaryToken_);\n\n            ISwapRouter.ExactInputParams memory inputParams = ISwapRouter.ExactInputParams({\n                path: abi.encodePacked(depositToken_, strategyParams.largePoolFeeUsed, primaryToken_),\n                recipient: creditAccount,\n                deadline: block.timestamp + 1,\n                amountIn: toSwap,\n                amountOutMinimum: FullMath.mulDiv(expectedOutput, D9 - protocolParams.maxSlippageD9, D9)\n            });\n\n            calls[0] = MultiCall({ // swap deposit to primary token\n                target: protocolParams.univ3Adapter,\n                callData: abi.encodeWithSelector(ISwapRouter.exactInput.selector, inputParams)\n            });\n\n            admin.multicall(calls);\n        }\n    }\n\n    function claimRewards(\n        address vaultGovernance,\n        address creditAccount,\n        address convexOutputToken\n    ) public {\n        require(msg.sender == address(admin), ExceptionsLibrary.FORBIDDEN);\n\n        uint256 balance = IERC20(convexOutputToken).balanceOf(creditAccount);\n        if (balance == 0) {\n            return;\n        }\n\n        IGearboxVaultGovernance.DelayedProtocolParams memory protocolParams = IGearboxVaultGovernance(vaultGovernance)\n            .delayedProtocolParams();\n\n        IGearboxVaultGovernance.StrategyParams memory strategyParams = IGearboxVaultGovernance(vaultGovernance)\n            .strategyParams(vaultNft);\n\n        MultiCall[] memory calls = new MultiCall[](1);\n\n        address weth = creditManager.wethAddress();\n\n        calls[0] = MultiCall({ // taking crv and cvx\n            target: convexAdapter,\n            callData: abi.encodeWithSelector(GET_REWARD_SELECTOR, creditAccount, true)\n        });\n\n        admin.multicall(calls);\n\n        uint256 callsCount = 3;\n        if (weth == primaryToken) {\n            callsCount = 2;\n        }\n\n        calls = new MultiCall[](callsCount);\n\n        calls[0] = createUniswapMulticall(\n            protocolParams.crv,\n            weth,\n            10000,\n            protocolParams.univ3Adapter,\n            protocolParams.maxSmallPoolsSlippageD9\n        );\n\n        calls[1] = createUniswapMulticall(\n            protocolParams.cvx,\n            weth,\n            10000,\n            protocolParams.univ3Adapter,\n            protocolParams.maxSmallPoolsSlippageD9\n        );\n\n        if (weth != primaryToken) {\n            calls[2] = createUniswapMulticall(\n                weth,\n                primaryToken,\n                strategyParams.largePoolFeeUsed,\n                protocolParams.univ3Adapter,\n                protocolParams.maxSlippageD9\n            );\n        }\n\n        admin.multicall(calls);\n    }\n\n    function withdrawFromConvex(\n        uint256 amount,\n        address vaultGovernance,\n        int128 primaryIndex\n    ) public {\n        if (amount == 0) {\n            return;\n        }\n\n        require(msg.sender == address(admin), ExceptionsLibrary.FORBIDDEN);\n\n        address curveAdapter_ = curveAdapter;\n\n        IGearboxVaultGovernance.DelayedProtocolParams memory protocolParams = IGearboxVaultGovernance(vaultGovernance)\n            .delayedProtocolParams();\n\n        address curveLpToken = ICurveV1Adapter(curveAdapter_).lp_token();\n        uint256 rateRAY = calcRateRAY(curveLpToken, primaryToken);\n\n        MultiCall[] memory calls = new MultiCall[](2);\n\n        calls[0] = MultiCall({\n            target: convexAdapter,\n            callData: abi.encodeWithSelector(IBaseRewardPool.withdrawAndUnwrap.selector, amount, false)\n        });\n\n        calls[1] = MultiCall({\n            target: curveAdapter_,\n            callData: abi.encodeWithSelector(\n                ICurveV1Adapter.remove_all_liquidity_one_coin.selector,\n                primaryIndex,\n                FullMath.mulDiv(rateRAY, D9 - protocolParams.maxCurveSlippageD9, D9)\n            )\n        });\n\n        admin.multicall(calls);\n    }\n\n    function depositToConvex(\n        MultiCall memory debtManagementCall,\n        IGearboxVaultGovernance.DelayedProtocolParams memory protocolParams,\n        uint256 poolId,\n        int128 primaryIndex\n    ) public {\n        require(msg.sender == address(admin), ExceptionsLibrary.FORBIDDEN);\n\n        MultiCall[] memory calls = new MultiCall[](3);\n\n        address curveAdapter_ = curveAdapter;\n\n        address curveLpToken = ICurveV1Adapter(curveAdapter_).lp_token();\n        uint256 rateRAY = calcRateRAY(primaryToken, curveLpToken);\n\n        calls[0] = debtManagementCall;\n\n        calls[1] = MultiCall({\n            target: curveAdapter_,\n            callData: abi.encodeWithSelector(\n                ICurveV1Adapter.add_all_liquidity_one_coin.selector,\n                primaryIndex,\n                FullMath.mulDiv(rateRAY, D9 - protocolParams.maxCurveSlippageD9, D9)\n            )\n        });\n\n        calls[2] = MultiCall({\n            target: creditManager.contractToAdapter(IConvexV1BaseRewardPoolAdapter(convexAdapter).operator()),\n            callData: abi.encodeWithSelector(IBooster.depositAll.selector, poolId, true)\n        });\n\n        admin.multicall(calls);\n    }\n\n    function adjustPosition(\n        uint256 expectedAllAssetsValue,\n        uint256 currentAllAssetsValue,\n        address vaultGovernance,\n        uint256 marginalFactorD9,\n        int128 primaryIndex,\n        uint256 poolId,\n        address convexOutputToken,\n        address creditAccount_\n    ) external {\n        require(msg.sender == address(admin), ExceptionsLibrary.FORBIDDEN);\n\n        claimRewards(vaultGovernance, creditAccount_, convexOutputToken);\n\n        IGearboxVaultGovernance.DelayedProtocolParams memory protocolParams = IGearboxVaultGovernance(vaultGovernance)\n            .delayedProtocolParams();\n        ICreditFacade creditFacade_ = creditFacade;\n\n        checkNecessaryDepositExchange(\n            FullMath.mulDiv(expectedAllAssetsValue, D9, marginalFactorD9),\n            vaultGovernance,\n            creditAccount_\n        );\n\n        if (expectedAllAssetsValue >= currentAllAssetsValue) {\n            uint256 delta = expectedAllAssetsValue - currentAllAssetsValue;\n\n            MultiCall memory increaseDebtCall = MultiCall({\n                target: address(creditFacade_),\n                callData: abi.encodeWithSelector(ICreditFacade.increaseDebt.selector, delta)\n            });\n\n            depositToConvex(increaseDebtCall, protocolParams, poolId, primaryIndex);\n        } else {\n            uint256 delta = currentAllAssetsValue - expectedAllAssetsValue;\n\n            uint256 currentPrimaryTokenAmount = IERC20(primaryToken).balanceOf(creditAccount_);\n\n            if (currentPrimaryTokenAmount >= delta) {\n                MultiCall memory decreaseDebtCall = MultiCall({\n                    target: address(creditFacade_),\n                    callData: abi.encodeWithSelector(ICreditFacade.decreaseDebt.selector, delta)\n                });\n\n                depositToConvex(decreaseDebtCall, protocolParams, poolId, primaryIndex);\n            } else {\n                uint256 convexAmountToWithdraw = calcConvexTokensToWithdraw(\n                    delta - currentPrimaryTokenAmount,\n                    creditAccount_,\n                    convexOutputToken\n                );\n                withdrawFromConvex(convexAmountToWithdraw, vaultGovernance, primaryIndex);\n\n                currentPrimaryTokenAmount = IERC20(primaryToken).balanceOf(creditAccount_);\n                if (currentPrimaryTokenAmount < delta) {\n                    delta = currentPrimaryTokenAmount;\n                }\n\n                MultiCall[] memory decreaseCall = new MultiCall[](1);\n                decreaseCall[0] = MultiCall({\n                    target: address(creditFacade_),\n                    callData: abi.encodeWithSelector(ICreditFacade.decreaseDebt.selector, delta)\n                });\n\n                admin.multicall(decreaseCall);\n            }\n        }\n\n        emit PositionAdjusted(tx.origin, msg.sender, expectedAllAssetsValue);\n    }\n\n    function swapExactOutput(\n        address fromToken,\n        address toToken,\n        uint256 amount,\n        uint256 untouchableSum,\n        address vaultGovernance,\n        address creditAccount\n    ) external {\n        require(msg.sender == address(admin), ExceptionsLibrary.FORBIDDEN);\n\n        IGearboxVaultGovernance.DelayedProtocolParams memory protocolParams = IGearboxVaultGovernance(vaultGovernance)\n            .delayedProtocolParams();\n\n        IGearboxVaultGovernance.StrategyParams memory strategyParams = IGearboxVaultGovernance(vaultGovernance)\n            .strategyParams(vaultNft);\n\n        uint256 allowedToUse = IERC20(fromToken).balanceOf(creditAccount) - untouchableSum;\n        uint256 amountInMaximum = calculateAmountInMaximum(fromToken, toToken, amount, protocolParams.maxSlippageD9);\n\n        if (amountInMaximum > allowedToUse) {\n            amount = FullMath.mulDiv(amount, allowedToUse, amountInMaximum);\n            amountInMaximum = allowedToUse;\n        }\n\n        ISwapRouter.ExactOutputParams memory uniParams = ISwapRouter.ExactOutputParams({\n            path: abi.encodePacked(toToken, strategyParams.largePoolFeeUsed, fromToken), // exactOutput arguments are in reversed order\n            recipient: creditAccount,\n            deadline: block.timestamp + 1,\n            amountOut: amount,\n            amountInMaximum: amountInMaximum\n        });\n\n        MultiCall[] memory calls = new MultiCall[](1);\n\n        calls[0] = MultiCall({\n            target: protocolParams.univ3Adapter,\n            callData: abi.encodeWithSelector(ISwapRouter.exactOutput.selector, uniParams)\n        });\n\n        admin.multicall(calls);\n    }\n\n    function pullFromAddress(uint256 amount, address vaultGovernance)\n        external\n        returns (uint256[] memory actualAmounts)\n    {\n        require(msg.sender == address(admin), ExceptionsLibrary.FORBIDDEN);\n\n        IGearboxVaultGovernance.DelayedProtocolParams memory protocolParams = IGearboxVaultGovernance(vaultGovernance)\n            .delayedProtocolParams();\n\n        IGearboxVaultGovernance.StrategyParams memory strategyParams = IGearboxVaultGovernance(vaultGovernance)\n            .strategyParams(vaultNft);\n\n        address depositToken_ = depositToken;\n        address primaryToken_ = primaryToken;\n\n        IGearboxVault admin_ = admin;\n\n        uint256 depositBalance = IERC20(depositToken_).balanceOf(address(admin_));\n        uint256 primaryBalance = IERC20(primaryToken_).balanceOf(address(admin_));\n\n        if (depositBalance < amount && depositToken_ != primaryToken_ && primaryBalance > 0) {\n            uint256 amountInMaximum = calculateAmountInMaximum(\n                primaryToken_,\n                depositToken_,\n                amount - depositBalance,\n                protocolParams.maxSlippageD9\n            );\n\n            uint256 outputWant = amount - depositBalance;\n\n            if (amountInMaximum > primaryBalance) {\n                outputWant = FullMath.mulDiv(outputWant, primaryBalance, amountInMaximum);\n                amountInMaximum = primaryBalance;\n            }\n\n            ISwapRouter router = ISwapRouter(protocolParams.uniswapRouter);\n            ISwapRouter.ExactOutputParams memory uniParams = ISwapRouter.ExactOutputParams({\n                path: abi.encodePacked(depositToken_, strategyParams.largePoolFeeUsed, primaryToken_), // exactOutput arguments are in reversed order\n                recipient: address(admin_),\n                deadline: block.timestamp + 1,\n                amountOut: outputWant,\n                amountInMaximum: amountInMaximum\n            });\n            admin_.swap(router, uniParams, primaryToken_, amountInMaximum);\n        }\n\n        depositBalance = IERC20(depositToken_).balanceOf(address(admin_));\n        if (amount > depositBalance) {\n            amount = depositBalance;\n        }\n\n        actualAmounts = new uint256[](1);\n        actualAmounts[0] = amount;\n    }\n\n    function openCreditAccount(\n        address creditAccount,\n        address vaultGovernance,\n        uint256 marginalFactorD9\n    ) external {\n        require(msg.sender == address(admin), ExceptionsLibrary.FORBIDDEN);\n        require(creditAccount == address(0), ExceptionsLibrary.DUPLICATE);\n\n        ICreditFacade creditFacade_ = creditFacade;\n        address primaryToken_ = primaryToken;\n        address depositToken_ = depositToken;\n\n        (uint256 minBorrowingLimit, ) = creditFacade_.limits();\n        uint256 minimalNecessaryAmount = FullMath.mulDiv(minBorrowingLimit, D9, (marginalFactorD9 - D9)) + 1;\n\n        uint256 currentPrimaryTokenAmount = IERC20(primaryToken_).balanceOf(address(admin));\n\n        IGearboxVaultGovernance.DelayedProtocolParams memory protocolParams = IGearboxVaultGovernance(vaultGovernance)\n            .delayedProtocolParams();\n        IGearboxVaultGovernance.StrategyParams memory strategyParams = IGearboxVaultGovernance(vaultGovernance)\n            .strategyParams(vaultNft);\n\n        if (depositToken_ != primaryToken_ && currentPrimaryTokenAmount < minimalNecessaryAmount) {\n            ISwapRouter router = ISwapRouter(protocolParams.uniswapRouter);\n            uint256 amountInMaximum = calculateAmountInMaximum(\n                depositToken_,\n                primaryToken_,\n                minimalNecessaryAmount - currentPrimaryTokenAmount,\n                protocolParams.maxSlippageD9\n            );\n            require(IERC20(depositToken_).balanceOf(address(admin)) >= amountInMaximum, ExceptionsLibrary.INVARIANT);\n\n            ISwapRouter.ExactOutputParams memory uniParams = ISwapRouter.ExactOutputParams({\n                path: abi.encodePacked(primaryToken_, strategyParams.largePoolFeeUsed, depositToken_), // exactOutput arguments are in reversed order\n                recipient: address(admin),\n                deadline: block.timestamp + 1,\n                amountOut: minimalNecessaryAmount - currentPrimaryTokenAmount,\n                amountInMaximum: amountInMaximum\n            });\n\n            admin.swap(router, uniParams, depositToken_, amountInMaximum);\n\n            currentPrimaryTokenAmount = IERC20(primaryToken_).balanceOf(address(admin));\n        }\n\n        require(currentPrimaryTokenAmount >= minimalNecessaryAmount, ExceptionsLibrary.LIMIT_UNDERFLOW);\n        admin.openCreditAccountInManager(currentPrimaryTokenAmount, protocolParams.referralCode);\n        emit CreditAccountOpened(tx.origin, msg.sender, creditManager.creditAccounts(address(admin)));\n    }\n\n    /// @notice Emitted when a credit account linked to this vault is opened in Gearbox\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param creditAccount Address of the opened credit account\n    event CreditAccountOpened(address indexed origin, address indexed sender, address creditAccount);\n\n    /// @notice Emitted when an adjusment of the position made in Gearbox\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param newTotalAssetsValue New value of all assets (debt + real assets) of the vault\n    event PositionAdjusted(address indexed origin, address indexed sender, uint256 newTotalAssetsValue);\n}\n"
    },
    "contracts/interfaces/external/convex/ICvx.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IConvexToken {\n    function totalSupply() external view returns (uint256);\n\n    function reductionPerCliff() external view returns (uint256);\n\n    function maxSupply() external view returns (uint256);\n\n    function totalCliffs() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/external/gearbox/ICurveV1Adapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\n\nimport { IAdapter } from \"./helpers/IAdapter.sol\";\nimport { ICurvePool } from \"./helpers/curve/ICurvePool.sol\";\n\ninterface ICurveV1AdapterExceptions {\n    error IncorrectIndexException();\n}\n\ninterface ICurveV1Adapter is IAdapter, ICurvePool, ICurveV1AdapterExceptions {\n    /// @dev Sends an order to exchange the entire balance of one asset to another\n    /// @param i Index for the coin sent\n    /// @param j Index for the coin received\n    /// @param rateMinRAY Minimum exchange rate between coins i and j\n    function exchange_all(\n        int128 i,\n        int128 j,\n        uint256 rateMinRAY\n    ) external;\n\n    /// @dev Sends an order to exchange the entire balance of one underlying asset to another\n    /// @param i Index for the underlying coin sent\n    /// @param j Index for the underlying coin received\n    /// @param rateMinRAY Minimum exchange rate between underlyings i and j\n    function exchange_all_underlying(\n        int128 i,\n        int128 j,\n        uint256 rateMinRAY\n    ) external;\n\n    /// @dev Sends an order to add liquidity with only 1 input asset\n    /// @param amount Amount of asset to deposit\n    /// @param i Index of the asset to deposit\n    /// @param minAmount Minimal number of LP tokens to receive\n    function add_liquidity_one_coin(\n        uint256 amount,\n        int128 i,\n        uint256 minAmount\n    ) external;\n\n    /// @dev Sends an order to add liquidity with only 1 input asset, using the entire balance\n    /// @param i Index of the asset to deposit\n    /// @param rateMinRAY Minimal exchange rate between the deposited asset and the LP token\n    function add_all_liquidity_one_coin(int128 i, uint256 rateMinRAY) external;\n\n    /// @dev Sends an order to remove all liquidity from the pool in a single asset\n    /// @param i Index of the asset to withdraw\n    /// @param minRateRAY Minimal exchange rate between the LP token and the received token\n    function remove_all_liquidity_one_coin(int128 i, uint256 minRateRAY)\n        external;\n\n    //\n    // GETTERS\n    //\n\n    /// @dev The pool LP token\n    function lp_token() external view returns (address);\n\n    /// @dev Address of the base pool (for metapools only)\n    function metapoolBase() external view returns (address);\n\n    /// @dev Number of coins in the pool\n    function nCoins() external view returns (uint256);\n\n    /// @dev Token in the pool under index 0\n    function token0() external view returns (address);\n\n    /// @dev Token in the pool under index 1\n    function token1() external view returns (address);\n\n    /// @dev Token in the pool under index 2\n    function token2() external view returns (address);\n\n    /// @dev Token in the pool under index 3\n    function token3() external view returns (address);\n\n    /// @dev Underlying in the pool under index 0\n    function underlying0() external view returns (address);\n\n    /// @dev Underlying in the pool under index 1\n    function underlying1() external view returns (address);\n\n    /// @dev Underlying in the pool under index 2\n    function underlying2() external view returns (address);\n\n    /// @dev Underlying in the pool under index 3\n    function underlying3() external view returns (address);\n\n    /// @dev Returns the amount of lp token received when adding a single coin to the pool\n    /// @param amount Amount of coin to be deposited\n    /// @param i Index of a coin to be deposited\n    function calc_add_one_coin(uint256 amount, int128 i)\n        external\n        view\n        returns (uint256);\n}"
    },
    "contracts/interfaces/external/gearbox/IConvexV1BaseRewardPoolAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\n\nimport { IAdapter } from \"./helpers/IAdapter.sol\";\nimport { IBaseRewardPool } from \"./helpers/convex/IBaseRewardPool.sol\";\n\ninterface IConvexV1BaseRewardPoolAdapterErrors {\n    /// @dev Thrown when the adapter attempts to use a token not\n    ///      allowed in its corresponding Credit Manager\n    error TokenIsNotAddedToCreditManagerException(address token);\n}\n\ninterface IConvexV1BaseRewardPoolAdapter is\n    IAdapter,\n    IBaseRewardPool,\n    IConvexV1BaseRewardPoolAdapterErrors\n{\n    /// @dev Returns the address of a Curve pool LP token\n    ///      staked in the adapter's targer Convex pool\n    function curveLPtoken() external view returns (address);\n\n    /// @dev Returns the address of a phantom token tracking\n    ///      a Credit Account's staked balance in a Convex\n    ///      pool\n    function stakedPhantomToken() external view returns (address);\n\n    /// @dev Returns the address of the first extra reward token\n    /// @notice address(0) if the Convex pool has no extra reward tokens\n    function extraReward1() external view returns (address);\n\n    /// @dev Returns the address of the second extra reward token\n    /// @notice address(0) if the Convex pool has less than 2 extra reward tokens\n    function extraReward2() external view returns (address);\n\n    /// @dev Returns the address of CVX\n    function cvx() external view returns (address);\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/convex/IBooster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IBooster {\n    struct PoolInfo {\n        address lptoken;\n        address token;\n        address gauge;\n        address crvRewards;\n        address stash;\n        bool shutdown;\n    }\n\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external returns (bool);\n\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\n\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\n\n    function withdrawAll(uint256 _pid) external returns (bool);\n\n    // function earmarkRewards(uint256 _pid) external returns (bool);\n\n    // function earmarkFees() external returns (bool);\n\n    //\n    // GETTERS\n    //\n\n    function poolInfo(uint256 i) external view returns (PoolInfo memory);\n\n    function poolLength() external view returns (uint256);\n\n    function staker() external view returns (address);\n\n    function minter() external view returns (address);\n\n    function crv() external view returns (address);\n\n    function registry() external view returns (address);\n\n    function stakerRewards() external view returns (address);\n\n    function lockRewards() external view returns (address);\n\n    function lockFees() external view returns (address);\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/curve/ICurvePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface ICurvePool {\n    function coins(uint256 i) external view returns (address);\n\n    function underlying_coins(uint256 i) external view returns (address);\n\n    function balances(uint256 i) external view returns (uint256);\n\n    function coins(int128) external view returns (address);\n\n    function nCoins() external view returns (uint256);\n\n    function underlying_coins(int128) external view returns (address);\n\n    function balances(int128) external view returns (uint256);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external;\n\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external;\n\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function token() external view returns (address);\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 min_amount\n    ) external;\n\n    function A() external view returns (uint256);\n\n    function A_precise() external view returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 _burn_amount, int128 i)\n        external\n        view\n        returns (uint256);\n\n    function admin_balances(uint256 i) external view returns (uint256);\n\n    function admin() external view returns (address);\n\n    function fee() external view returns (uint256);\n\n    function admin_fee() external view returns (uint256);\n\n    function block_timestamp_last() external view returns (uint256);\n\n    function initial_A() external view returns (uint256);\n\n    function future_A() external view returns (uint256);\n\n    function initial_A_time() external view returns (uint256);\n\n    function future_A_time() external view returns (uint256);\n\n    // Some pools implement ERC20\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint256);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function allowance(address, address) external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n}"
    },
    "contracts/interfaces/external/gearbox/helpers/convex/IBaseRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IBaseRewardPool {\n    //\n    // STATE CHANGING FUNCTIONS\n    //\n\n    function stake(uint256 _amount) external returns (bool);\n\n    function stakeAll() external returns (bool);\n\n    function stakeFor(address _for, uint256 _amount) external returns (bool);\n\n    function withdraw(uint256 amount, bool claim) external returns (bool);\n\n    function withdrawAll(bool claim) external;\n\n    function withdrawAndUnwrap(uint256 amount, bool claim)\n        external\n        returns (bool);\n\n    function withdrawAllAndUnwrap(bool claim) external;\n\n    function getReward(address _account, bool _claimExtras)\n        external\n        returns (bool);\n\n    function getReward() external returns (bool);\n\n    function donate(uint256 _amount) external returns (bool);\n\n    //\n    // GETTERS\n    //\n\n    function earned(address account) external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function extraRewardsLength() external view returns (uint256);\n\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function rewardToken() external view returns (IERC20);\n\n    function stakingToken() external view returns (IERC20);\n\n    function duration() external view returns (uint256);\n\n    function operator() external view returns (address);\n\n    function rewardManager() external view returns (address);\n\n    function pid() external view returns (uint256);\n\n    function periodFinish() external view returns (uint256);\n\n    function rewardRate() external view returns (uint256);\n\n    function lastUpdateTime() external view returns (uint256);\n\n    function rewardPerTokenStored() external view returns (uint256);\n\n    function queuedRewards() external view returns (uint256);\n\n    function currentRewards() external view returns (uint256);\n\n    function historicalRewards() external view returns (uint256);\n\n    function newRewardRatio() external view returns (uint256);\n\n    function userRewardPerTokenPaid(address account)\n        external\n        view\n        returns (uint256);\n\n    function rewards(address account) external view returns (uint256);\n\n    function extraRewards(uint256 i) external view returns (address);\n}"
    },
    "contracts/vaults/GearboxVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"./IntegrationVault.sol\";\nimport \"../utils/GearboxHelper.sol\";\nimport \"../interfaces/external/gearbox/helpers/IDegenDistributor.sol\";\n\ncontract GearboxVault is IGearboxVault, IntegrationVault {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant D9 = 10**9;\n    uint256 public constant D7 = 10**7;\n\n    GearboxHelper internal _helper;\n\n    bytes32[] private _merkleProof;\n\n    /// @inheritdoc IGearboxVault\n    ICreditFacade public creditFacade;\n\n    /// @inheritdoc IGearboxVault\n    ICreditManagerV2 public creditManager;\n\n    /// @inheritdoc IGearboxVault\n    address public primaryToken;\n    /// @inheritdoc IGearboxVault\n    address public depositToken;\n\n    /// @inheritdoc IGearboxVault\n    int128 public primaryIndex;\n    /// @inheritdoc IGearboxVault\n    uint256 public poolId;\n    /// @inheritdoc IGearboxVault\n    address public convexOutputToken;\n\n    /// @inheritdoc IGearboxVault\n    uint256 public marginalFactorD9;\n\n    /// @inheritdoc IGearboxVault\n    uint256 public merkleIndex;\n\n    /// @inheritdoc IGearboxVault\n    uint256 public merkleTotalAmount;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view override returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        address creditAccount = getCreditAccount();\n\n        address depositToken_ = depositToken;\n        address primaryToken_ = primaryToken;\n        address creditAccount_ = creditAccount;\n\n        uint256 primaryTokenAmount = _helper.calculateClaimableRewards(creditAccount_, address(_vaultGovernance));\n\n        if (primaryToken_ != depositToken_) {\n            primaryTokenAmount += IERC20(primaryToken_).balanceOf(address(this));\n        }\n\n        if (creditAccount_ != address(0)) {\n            (uint256 currentAllAssetsValue, ) = creditFacade.calcTotalValue(creditAccount_);\n            (, , uint256 borrowAmountWithInterestAndFees) = creditManager.calcCreditAccountAccruedInterest(\n                creditAccount_\n            );\n\n            if (currentAllAssetsValue >= borrowAmountWithInterestAndFees) {\n                primaryTokenAmount += currentAllAssetsValue - borrowAmountWithInterestAndFees;\n            }\n        }\n\n        minTokenAmounts = new uint256[](1);\n\n        if (primaryToken_ == depositToken_) {\n            minTokenAmounts[0] = primaryTokenAmount + IERC20(depositToken_).balanceOf(address(this));\n        } else {\n            IPriceOracleV2 oracle = IPriceOracleV2(creditManager.priceOracle());\n            uint256 valueDeposit = oracle.convert(primaryTokenAmount, primaryToken_, depositToken_) +\n                IERC20(depositToken_).balanceOf(address(this));\n\n            minTokenAmounts[0] = valueDeposit;\n        }\n\n        maxTokenAmounts = minTokenAmounts;\n    }\n\n    /// @inheritdoc IntegrationVault\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, IntegrationVault) returns (bool) {\n        return IntegrationVault.supportsInterface(interfaceId) || interfaceId == type(IGearboxVault).interfaceId;\n    }\n\n    /// @inheritdoc IGearboxVault\n    function getCreditAccount() public view returns (address) {\n        return creditManager.creditAccounts(address(this));\n    }\n\n    /// @inheritdoc IGearboxVault\n    function getAllAssetsOnCreditAccountValue() external view returns (uint256 currentAllAssetsValue) {\n        address creditAccount = getCreditAccount();\n        if (creditAccount == address(0)) {\n            return 0;\n        }\n        (currentAllAssetsValue, ) = creditFacade.calcTotalValue(creditAccount);\n    }\n\n    /// @inheritdoc IGearboxVault\n    function getClaimableRewardsValue() external view returns (uint256) {\n        address creditAccount = getCreditAccount();\n        if (creditAccount == address(0)) {\n            return 0;\n        }\n        return _helper.calculateClaimableRewards(creditAccount, address(_vaultGovernance));\n    }\n\n    function getMerkleProof() external view returns (bytes32[] memory) {\n        return _merkleProof;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IGearboxVault\n    function initialize(\n        uint256 nft_,\n        address[] memory vaultTokens_,\n        address helper_\n    ) external {\n        require(vaultTokens_.length == 1, ExceptionsLibrary.INVALID_LENGTH);\n\n        _initialize(vaultTokens_, nft_);\n\n        IGearboxVaultGovernance.DelayedProtocolPerVaultParams memory params = IGearboxVaultGovernance(\n            address(_vaultGovernance)\n        ).delayedProtocolPerVaultParams(nft_);\n        primaryToken = params.primaryToken;\n        depositToken = vaultTokens_[0];\n        marginalFactorD9 = params.initialMarginalValueD9;\n\n        creditFacade = ICreditFacade(params.facade);\n        creditManager = ICreditManagerV2(creditFacade.creditManager());\n\n        _helper = GearboxHelper(helper_);\n        _helper.setParameters(\n            creditFacade,\n            creditManager,\n            params.curveAdapter,\n            params.convexAdapter,\n            params.primaryToken,\n            vaultTokens_[0],\n            _nft\n        );\n\n        (primaryIndex, convexOutputToken, poolId) = _helper.verifyInstances();\n    }\n\n    /// @inheritdoc IGearboxVault\n    function openCreditAccount() external {\n        require(_isApprovedOrOwner(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        address degenNft = creditFacade.degenNFT();\n\n        if (degenNft != address(0)) {\n            IDegenNFT degenContract = IDegenNFT(degenNft);\n            IDegenDistributor distributor = IDegenDistributor(degenContract.minter());\n            if (distributor.claimed(address(this)) < merkleTotalAmount) {\n                distributor.claim(merkleIndex, address(this), merkleTotalAmount, _merkleProof);\n            }\n        }\n\n        address creditAccount = getCreditAccount();\n        _helper.openCreditAccount(creditAccount, address(_vaultGovernance), marginalFactorD9);\n\n        if (depositToken != primaryToken) {\n            creditFacade.enableToken(depositToken);\n            _addDepositTokenAsCollateral();\n        }\n    }\n\n    /// @inheritdoc IGearboxVault\n    function adjustPosition() external {\n        require(_isApprovedOrOwner(msg.sender), ExceptionsLibrary.FORBIDDEN);\n        address creditAccount = getCreditAccount();\n\n        if (creditAccount == address(0)) {\n            return;\n        }\n\n        uint256 marginalFactorD9_ = marginalFactorD9;\n        GearboxHelper helper_ = _helper;\n\n        (uint256 expectedAllAssetsValue, uint256 currentAllAssetsValue) = helper_.calculateDesiredTotalValue(\n            creditAccount,\n            address(_vaultGovernance),\n            marginalFactorD9_\n        );\n        helper_.adjustPosition(\n            expectedAllAssetsValue,\n            currentAllAssetsValue,\n            address(_vaultGovernance),\n            marginalFactorD9_,\n            primaryIndex,\n            poolId,\n            convexOutputToken,\n            creditAccount\n        );\n    }\n\n    /// @inheritdoc IGearboxVault\n    function setMerkleParameters(\n        uint256 merkleIndex_,\n        uint256 merkleTotalAmount_,\n        bytes32[] memory merkleProof_\n    ) public {\n        require(_isApprovedOrOwner(msg.sender));\n        merkleIndex = merkleIndex_;\n        merkleTotalAmount = merkleTotalAmount_;\n        _merkleProof = merkleProof_;\n    }\n\n    /// @inheritdoc IGearboxVault\n    function updateTargetMarginalFactor(uint256 marginalFactorD9_) external {\n        require(_isApprovedOrOwner(msg.sender));\n        require(marginalFactorD9_ > D9, ExceptionsLibrary.INVALID_VALUE);\n\n        address creditAccount_ = getCreditAccount();\n        GearboxHelper helper_ = _helper;\n\n        if (creditAccount_ == address(0)) {\n            marginalFactorD9 = marginalFactorD9_;\n            return;\n        }\n\n        marginalFactorD9 = marginalFactorD9_;\n        (uint256 expectedAllAssetsValue, uint256 currentAllAssetsValue) = helper_.calculateDesiredTotalValue(\n            creditAccount_,\n            address(_vaultGovernance),\n            marginalFactorD9_\n        );\n\n        helper_.adjustPosition(\n            expectedAllAssetsValue,\n            currentAllAssetsValue,\n            address(_vaultGovernance),\n            marginalFactorD9_,\n            primaryIndex,\n            poolId,\n            convexOutputToken,\n            creditAccount_\n        );\n        emit TargetMarginalFactorUpdated(tx.origin, msg.sender, marginalFactorD9_);\n    }\n\n    /// @inheritdoc IGearboxVault\n    function multicall(MultiCall[] memory calls) external {\n        require(msg.sender == address(_helper), ExceptionsLibrary.FORBIDDEN);\n        creditFacade.multicall(calls);\n    }\n\n    /// @inheritdoc IGearboxVault\n    function swap(\n        ISwapRouter router,\n        ISwapRouter.ExactOutputParams memory uniParams,\n        address token,\n        uint256 amount\n    ) external {\n        require(msg.sender == address(_helper), ExceptionsLibrary.FORBIDDEN);\n        IERC20(token).safeIncreaseAllowance(address(router), amount);\n        router.exactOutput(uniParams);\n        IERC20(token).approve(address(router), 0);\n    }\n\n    /// @inheritdoc IGearboxVault\n    function openCreditAccountInManager(uint256 currentPrimaryTokenAmount, uint16 referralCode) external {\n        require(msg.sender == address(_helper), ExceptionsLibrary.FORBIDDEN);\n        IERC20(primaryToken).safeIncreaseAllowance(address(creditManager), currentPrimaryTokenAmount);\n        creditFacade.openCreditAccount(\n            currentPrimaryTokenAmount,\n            address(this),\n            uint16((marginalFactorD9 - D9) / D7),\n            referralCode\n        );\n        IERC20(primaryToken).approve(address(creditManager), 0);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _isReclaimForbidden(address) internal pure override returns (bool) {\n        return false;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _push(uint256[] memory tokenAmounts, bytes memory) internal override returns (uint256[] memory) {\n        require(tokenAmounts.length == 1, ExceptionsLibrary.INVALID_LENGTH);\n        address creditAccount = getCreditAccount();\n\n        if (creditAccount != address(0)) {\n            _addDepositTokenAsCollateral();\n        }\n\n        return tokenAmounts;\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        require(tokenAmounts.length == 1, ExceptionsLibrary.INVALID_LENGTH);\n\n        address depositToken_ = depositToken;\n        address primaryToken_ = primaryToken;\n        address creditAccount_ = getCreditAccount();\n        GearboxHelper helper_ = _helper;\n\n        if (creditAccount_ == address(0)) {\n            actualTokenAmounts = helper_.pullFromAddress(tokenAmounts[0], address(_vaultGovernance));\n            IERC20(depositToken_).safeTransfer(to, actualTokenAmounts[0]);\n            return actualTokenAmounts;\n        }\n        uint256 amountToPull = tokenAmounts[0];\n\n        helper_.claimRewards(address(_vaultGovernance), creditAccount_, convexOutputToken);\n        helper_.withdrawFromConvex(\n            IERC20(convexOutputToken).balanceOf(creditAccount_),\n            address(_vaultGovernance),\n            primaryIndex\n        );\n\n        (, , uint256 debtAmount) = creditManager.calcCreditAccountAccruedInterest(creditAccount_);\n        uint256 underlyingBalance = IERC20(primaryToken_).balanceOf(creditAccount_);\n\n        if (underlyingBalance < debtAmount + 1) {\n            helper_.swapExactOutput(\n                depositToken_,\n                primaryToken_,\n                debtAmount + 1 - underlyingBalance,\n                0,\n                address(_vaultGovernance),\n                creditAccount_\n            );\n        }\n\n        uint256 depositTokenBalance = IERC20(depositToken_).balanceOf(creditAccount_);\n        if (depositTokenBalance < amountToPull && primaryToken_ != depositToken_) {\n            helper_.swapExactOutput(\n                primaryToken_,\n                depositToken_,\n                amountToPull - depositTokenBalance,\n                debtAmount + 1,\n                address(_vaultGovernance),\n                creditAccount_\n            );\n        }\n\n        MultiCall[] memory noCalls = new MultiCall[](0);\n        creditFacade.closeCreditAccount(address(this), 0, false, noCalls);\n\n        depositTokenBalance = IERC20(depositToken_).balanceOf(address(this));\n        if (depositTokenBalance < amountToPull) {\n            amountToPull = depositTokenBalance;\n        }\n\n        IERC20(depositToken_).safeTransfer(to, amountToPull);\n        actualTokenAmounts = new uint256[](1);\n\n        actualTokenAmounts[0] = amountToPull;\n    }\n\n    /// @notice Deposits all deposit tokens which are on the address of the vault into the credit account\n    function _addDepositTokenAsCollateral() internal {\n        ICreditFacade creditFacade_ = creditFacade;\n        MultiCall[] memory calls = new MultiCall[](1);\n        address creditManagerAddress = address(creditManager);\n\n        address token = depositToken;\n        uint256 amount = IERC20(token).balanceOf(address(this));\n\n        IERC20(token).safeIncreaseAllowance(creditManagerAddress, amount);\n\n        calls[0] = MultiCall({\n            target: address(creditFacade_),\n            callData: abi.encodeWithSelector(ICreditFacade.addCollateral.selector, address(this), token, amount)\n        });\n\n        creditFacade_.multicall(calls);\n        IERC20(token).approve(creditManagerAddress, 0);\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when target marginal factor is updated\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param newMarginalFactorD9 New marginal factor\n    event TargetMarginalFactorUpdated(address indexed origin, address indexed sender, uint256 newMarginalFactorD9);\n}\n"
    },
    "contracts/interfaces/external/gearbox/helpers/IDegenDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport { IDegenNFT } from \"./IDegenNFT.sol\";\n\ninterface IDegenDistributorEvents {\n    /// @dev Emits when a user claims tokens\n    event Claimed(\n        address indexed account,\n        uint256 amount\n    );\n\n    /// @dev Emits when the owner replaces the merkle root\n    event RootUpdated(bytes32 oldRoot, bytes32 indexed newRoot);\n}\n\ninterface IDegenDistributor is IDegenDistributorEvents {\n    // Returns the address of the token distributed by this contract.\n    function degenNFT() external view returns (IDegenNFT);\n\n    // Returns the merkle root of the merkle tree containing account balances available to claim.\n    function merkleRoot() external view returns (bytes32);\n\n    /// @dev Returns the total amount of token claimed by the user\n    function claimed(address user) external view returns (uint256);\n\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\n    /// @dev Claims the remaining unclaimed amount of the token for the account. Reverts if the inputs are not a leaf in the tree\n    ///      or the total claimed amount for the account is more than the leaf amount.\n    function claim(\n        uint256 index,\n        address account,\n        uint256 totalAmount,\n        bytes32[] calldata merkleProof\n    ) external;\n}\n\n"
    },
    "contracts/vaults/GearboxVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IGearboxVaultGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\n\ncontract GearboxVaultGovernance is ContractMeta, IGearboxVaultGovernance, VaultGovernance {\n    uint256 public constant D9 = 10**9;\n\n    /// @notice Creates a new contract\n    constructor(InternalParams memory internalParams_, DelayedProtocolParams memory delayedProtocolParams_)\n        VaultGovernance(internalParams_)\n    {\n        require(delayedProtocolParams_.withdrawDelay <= 86400 * 30, ExceptionsLibrary.INVALID_VALUE);\n        require(delayedProtocolParams_.univ3Adapter != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(delayedProtocolParams_.crv != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(delayedProtocolParams_.cvx != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(delayedProtocolParams_.uniswapRouter != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(delayedProtocolParams_.maxSlippageD9 <= D9, ExceptionsLibrary.INVARIANT);\n        require(delayedProtocolParams_.maxSmallPoolsSlippageD9 <= D9, ExceptionsLibrary.INVARIANT);\n        require(delayedProtocolParams_.maxCurveSlippageD9 <= D9, ExceptionsLibrary.INVARIANT);\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        // params are initialized in constructor, so cannot be 0\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || interfaceId == type(IGearboxVaultGovernance).interfaceId;\n    }\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return\n                DelayedProtocolParams({\n                    withdrawDelay: 0,\n                    referralCode: 0,\n                    univ3Adapter: address(0),\n                    crv: address(0),\n                    cvx: address(0),\n                    maxSlippageD9: 0,\n                    maxSmallPoolsSlippageD9: 0,\n                    maxCurveSlippageD9: 0,\n                    uniswapRouter: address(0)\n                });\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function stagedDelayedProtocolPerVaultParams(uint256 nft)\n        external\n        view\n        returns (DelayedProtocolPerVaultParams memory)\n    {\n        if (_stagedDelayedProtocolPerVaultParams[nft].length == 0) {\n            return\n                DelayedProtocolPerVaultParams({\n                    primaryToken: address(0),\n                    curveAdapter: address(0),\n                    convexAdapter: address(0),\n                    facade: address(0),\n                    initialMarginalValueD9: 0\n                });\n        }\n        return abi.decode(_stagedDelayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams));\n    }\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function strategyParams(uint256 nft) external view returns (StrategyParams memory) {\n        if (_strategyParams[nft].length == 0) {\n            return StrategyParams({largePoolFeeUsed: 500});\n        }\n        return abi.decode(_strategyParams[nft], (StrategyParams));\n    }\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function delayedProtocolPerVaultParams(uint256 nft) external view returns (DelayedProtocolPerVaultParams memory) {\n        if (_delayedProtocolPerVaultParams[nft].length == 0) {\n            return\n                DelayedProtocolPerVaultParams({\n                    primaryToken: address(0),\n                    curveAdapter: address(0),\n                    convexAdapter: address(0),\n                    facade: address(0),\n                    initialMarginalValueD9: 0\n                });\n        }\n        return abi.decode(_delayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams));\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams memory params) external {\n        require(params.withdrawDelay <= 86400 * 30, ExceptionsLibrary.INVALID_VALUE);\n        require(params.univ3Adapter != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.crv != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.cvx != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.uniswapRouter != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.maxSlippageD9 <= D9, ExceptionsLibrary.INVARIANT);\n        require(params.maxSmallPoolsSlippageD9 <= D9, ExceptionsLibrary.INVARIANT);\n        require(params.maxCurveSlippageD9 <= D9, ExceptionsLibrary.INVARIANT);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    function stageDelayedProtocolPerVaultParams(uint256 nft, DelayedProtocolPerVaultParams calldata params) external {\n        require(params.primaryToken != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.curveAdapter != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.convexAdapter != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.facade != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.initialMarginalValueD9 > D9, ExceptionsLibrary.INVALID_VALUE);\n        _stageDelayedProtocolPerVaultParams(nft, abi.encode(params));\n        emit StageDelayedProtocolPerVaultParams(\n            tx.origin,\n            msg.sender,\n            nft,\n            params,\n            _delayedStrategyParamsTimestamp[nft]\n        );\n    }\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function commitDelayedProtocolPerVaultParams(uint256 nft) external {\n        _commitDelayedProtocolPerVaultParams(nft);\n        emit CommitDelayedProtocolPerVaultParams(\n            tx.origin,\n            msg.sender,\n            nft,\n            abi.decode(_delayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams))\n        );\n    }\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function setStrategyParams(uint256 nft, StrategyParams calldata params) external {\n        require(\n            params.largePoolFeeUsed == 100 ||\n                params.largePoolFeeUsed == 500 ||\n                params.largePoolFeeUsed == 3000 ||\n                params.largePoolFeeUsed == 10000,\n            ExceptionsLibrary.FORBIDDEN\n        );\n        _setStrategyParams(nft, abi.encode(params));\n        emit SetStrategyParams(tx.origin, msg.sender, params);\n    }\n\n    /// @inheritdoc IGearboxVaultGovernance\n    function createVault(\n        address[] memory vaultTokens_,\n        address owner_,\n        address helper_\n    ) external returns (IGearboxVault vault, uint256 nft) {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        IGearboxVault gearboxVault = IGearboxVault(vaddr);\n\n        gearboxVault.initialize(nft, vaultTokens_, helper_);\n        vault = IGearboxVault(vaddr);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"GearboxVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new DelayedProtocolPerVaultParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolPerVaultParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedProtocolPerVaultParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedProtocolPerVaultParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param nft VaultRegistry NFT of the vault\n    /// @param params New params that are committed\n    event CommitDelayedProtocolPerVaultParams(\n        address indexed origin,\n        address indexed sender,\n        uint256 indexed nft,\n        DelayedProtocolPerVaultParams params\n    );\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new StrategyParams are set.\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are set\n    event SetStrategyParams(address indexed origin, address indexed sender, StrategyParams params);\n\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/interfaces/external/gearbox/IUniversalAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Gearbox Protocol. Generalized leverage for DeFi protocols\n// (c) Gearbox Holdings, 2021\npragma solidity ^0.8.9;\n\nimport { IAdapter } from \"./helpers/IAdapter.sol\";\n\nstruct RevocationPair {\n    address spender;\n    address token;\n}\n\ninterface IUniversalAdapterExceptions {\n    /// @dev Thrown when the Credit Account of msg.sender does not match the provided expected account\n    error UnexpectedCreditAccountException(address expected, address actual);\n}\n\ninterface IUniversalAdapter is IAdapter, IUniversalAdapterExceptions {\n    /// @dev Sets allowances to zero for provided spender/token pairs, for msg.sender's CA\n    /// @param revocations Pairs of spenders/tokens to revoke allowances for\n    function revokeAdapterAllowances(RevocationPair[] calldata revocations)\n        external;\n\n    /// @dev Sets allowances to zero for the provided spender/token pairs\n    /// Checks that the msg.sender CA matches the expected account, since\n    /// provided revocations are specific to a particular CA\n    /// @param revocations Pairs of spenders/tokens to revoke allowances for\n    /// @param expectedCreditAccount Credit account that msg.sender is expected to have\n    function revokeAdapterAllowances(\n        RevocationPair[] calldata revocations,\n        address expectedCreditAccount\n    ) external;\n\n    function withdraw(address token, uint256 amount) external;\n\n}"
    },
    "contracts/oracles/UniV2Oracle.sol": {
      "content": "// SPDX-License-Identifier: BSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"../interfaces/external/univ2/IUniswapV2Pair.sol\";\nimport \"../interfaces/external/univ2/IUniswapV2Factory.sol\";\nimport \"../interfaces/oracles/IUniV2Oracle.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"../libraries/CommonLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\n\ncontract UniV2Oracle is ContractMeta, IUniV2Oracle, ERC165 {\n    /// @inheritdoc IUniV2Oracle\n    IUniswapV2Factory public immutable factory;\n    /// @inheritdoc IUniV2Oracle\n    uint8 public constant safetyIndex = 1;\n\n    constructor(IUniswapV2Factory factory_) {\n        factory = factory_;\n    }\n\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\n\n    /// @inheritdoc IOracle\n    function priceX96(\n        address token0,\n        address token1,\n        uint256 safetyIndicesSet\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices) {\n        bool isSwapped = false;\n        if (token0 > token1) {\n            (token0, token1) = (token1, token0);\n            isSwapped = true;\n        }\n        if (((safetyIndicesSet >> safetyIndex) & 1) != 1) {\n            return (pricesX96, safetyIndices);\n        }\n        IUniswapV2Pair pool = IUniswapV2Pair(factory.getPair(token0, token1));\n        if (address(pool) == address(0)) {\n            return (pricesX96, safetyIndices);\n        }\n        (uint112 reserve0, uint112 reserve1, ) = pool.getReserves();\n        pricesX96 = new uint256[](1);\n        safetyIndices = new uint256[](1);\n        if (isSwapped) {\n            pricesX96[0] = FullMath.mulDiv(reserve0, CommonLibrary.Q96, reserve1);\n        } else {\n            pricesX96[0] = FullMath.mulDiv(reserve1, CommonLibrary.Q96, reserve0);\n        }\n        safetyIndices[0] = safetyIndex;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return super.supportsInterface(interfaceId) || type(IUniV2Oracle).interfaceId == interfaceId;\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"UniV2Oracle\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n}\n"
    },
    "contracts/interfaces/external/univ2/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IUniswapV2Pair {\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/utils/DefaultProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract DefaultProxy is TransparentUpgradeableProxy {\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/utils/DefaultProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\ncontract DefaultProxyAdmin is ProxyAdmin {}\n"
    },
    "contracts/test/libraries/SemverLibraryTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../../libraries/SemverLibrary.sol\";\n\ncontract SemverLibraryTest {\n    function stringifySemver(uint256 input) external pure returns (string memory) {\n        return SemverLibrary.stringifySemver(input);\n    }\n\n    function numberifySemver(string memory input) external pure returns (uint256) {\n        return SemverLibrary.numberifySemver(input);\n    }\n}\n"
    },
    "contracts/test/MockERC165.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\ncontract MockERC165 is ERC165 {\n    mapping(bytes4 => bool) private _allowedInterfaceIdsMap;\n\n    function allowInterfaceId(bytes4 interfaceId) public {\n        _allowedInterfaceIdsMap[interfaceId] = true;\n    }\n\n    function denyInterfaceId(bytes4 interfaceId) public {\n        delete _allowedInterfaceIdsMap[interfaceId];\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _allowedInterfaceIdsMap[interfaceId];\n    }\n}\n"
    },
    "contracts/validators/CowswapValidator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\n// @notice Validator allowing setPreSignature call with any params for cowswap\ncontract CowswapValidator is ContractMeta, Validator {\n    bytes4 public constant PRE_SIGNATURE_SELECTOR = 0xec6cb13f;\n\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inheritdoc IValidator\n    function validate(\n        address,\n        address,\n        uint256,\n        bytes4 selector,\n        bytes calldata\n    ) external pure {\n        // we don't validate TRUSTED_STRATEGY here because it's validated at allowance level\n        if (selector == PRE_SIGNATURE_SELECTOR) {\n            return;\n        } else {\n            revert(ExceptionsLibrary.INVALID_SELECTOR);\n        }\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"CowswapValidator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n}\n"
    },
    "contracts/validators/AllowAllValidator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.9;\n\nimport \"../interfaces/IProtocolGovernance.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./Validator.sol\";\n\ncontract AllowAllValidator is ContractMeta, Validator {\n    constructor(IProtocolGovernance protocolGovernance_) BaseValidator(protocolGovernance_) {}\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    // @inheritdoc IValidator\n    function validate(\n        address,\n        address,\n        uint256,\n        bytes4,\n        bytes calldata\n    ) external view {}\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"AllowAllValidator\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n}\n"
    },
    "contracts/interfaces/external/univ2/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/test/MockSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport \"../interfaces/external/univ3/ISwapRouter.sol\";\n\ncontract MockSwapRouter is ISwapRouter {\n    struct ExactInputSingleArgs {\n        uint256 amountOut;\n    }\n\n    ExactInputSingleArgs private exactInputSingleArgs;\n\n    function setExactInputSingleArgs(uint256 amountOut_) external {\n        exactInputSingleArgs.amountOut = amountOut_;\n    }\n\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut) {\n        amountOut = 0;\n        emit ExactInputSingle(params.amountIn);\n    }\n\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut) {}\n\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn) {}\n\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn) {}\n\n    event ExactInputSingle(uint256 amountIn);\n}\n"
    },
    "contracts/test/MockCowswap.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MockCowswap {\n    struct Data {\n        IERC20 sellToken;\n        IERC20 buyToken;\n        address receiver;\n        uint256 sellAmount;\n        uint256 buyAmount;\n        uint32 validTo;\n        bytes32 appData;\n        uint256 feeAmount;\n        bytes32 kind;\n        bool partiallyFillable;\n        bytes32 sellTokenBalance;\n        bytes32 buyTokenBalance;\n    }\n\n    bytes32 internal constant TYPE_HASH = hex\"d5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489\";\n    bytes32 public immutable domainSeparator;\n\n    bytes32 private constant DOMAIN_TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    bytes32 private constant DOMAIN_NAME = keccak256(\"Gnosis Protocol\");\n    bytes32 private constant DOMAIN_VERSION = keccak256(\"v2\");\n\n    mapping(bytes => bool) public preSignature;\n\n    function setPreSignature(bytes calldata orderUid, bool signed) external {\n        preSignature[orderUid] = signed;\n    }\n\n    constructor() {\n        uint256 chainId;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n        domainSeparator = keccak256(abi.encode(DOMAIN_TYPE_HASH, DOMAIN_NAME, DOMAIN_VERSION, chainId, address(this)));\n    }\n\n    uint256 internal constant UID_LENGTH = 56;\n\n    function extractOrderUidParams(bytes calldata orderUid)\n        internal\n        pure\n        returns (\n            bytes32 orderDigest,\n            address owner,\n            uint32 validTo\n        )\n    {\n        require(orderUid.length == UID_LENGTH, \"GPv2: invalid uid\");\n\n        // Use assembly to efficiently decode packed calldata.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            orderDigest := calldataload(orderUid.offset)\n            owner := shr(96, calldataload(add(orderUid.offset, 32)))\n            validTo := shr(224, calldataload(add(orderUid.offset, 52)))\n        }\n    }\n\n    /// @dev Return the EIP-712 signing hash for the specified order.\n    ///\n    /// @param order The order to compute the EIP-712 signing hash for.\n    /// @param domainSeparatorInternal The EIP-712 domain separator to use.\n    /// @return orderDigest The 32 byte EIP-712 struct hash.\n    function hash(Data memory order, bytes32 domainSeparatorInternal) public pure returns (bytes32 orderDigest) {\n        bytes32 structHash;\n\n        // NOTE: Compute the EIP-712 order struct hash in place. As suggested\n        // in the EIP proposal, noting that the order struct has 10 fields, and\n        // including the type hash `(12 + 1) * 32 = 416` bytes to hash.\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-encodedata>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let dataStart := sub(order, 32)\n            let temp := mload(dataStart)\n            mstore(dataStart, TYPE_HASH)\n            structHash := keccak256(dataStart, 416)\n            mstore(dataStart, temp)\n        }\n\n        // NOTE: Now that we have the struct hash, compute the EIP-712 signing\n        // hash using scratch memory past the free memory pointer. The signing\n        // hash is computed from `\"\\x19\\x01\" || domainSeparator || structHash`.\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory>\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            mstore(freeMemoryPointer, \"\\x19\\x01\")\n            mstore(add(freeMemoryPointer, 2), domainSeparatorInternal)\n            mstore(add(freeMemoryPointer, 34), structHash)\n            orderDigest := keccak256(freeMemoryPointer, 66)\n        }\n    }\n}\n"
    },
    "contracts/test/MockERC20Token.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity =0.8.9;\n\nimport \"../utils/ERC20Token.sol\";\n\ncontract MockERC20Token is ERC20Token {\n    function initERC20(string memory _name, string memory _symbol) external {\n        _initERC20(_name, _symbol);\n    }\n\n    function mint(address to, uint256 amount) external virtual {\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint256 amount) external virtual {\n        _burn(from, amount);\n    }\n}\n"
    },
    "contracts/test/MockLpCallback.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/utils/ILpCallback.sol\";\n\ncontract MockLpCallback is ILpCallback {\n    enum WithdrawCallbackMode {\n        NO_ERROR,\n        EMPTY_ERROR,\n        NON_EMPTY_ERROR\n    }\n\n    WithdrawCallbackMode private _mode;\n\n    constructor(WithdrawCallbackMode mode_) {\n        _mode = mode_;\n    }\n\n    /// @notice Callback function\n    function depositCallback() external {\n        emit DepositCallbackCalled();\n    }\n\n    /// @notice Callback function\n    function withdrawCallback() external {\n        if (_mode == WithdrawCallbackMode.NO_ERROR) {\n            emit WithdrawCallbackCalled();\n        } else if (_mode == WithdrawCallbackMode.EMPTY_ERROR) {\n            require(false);\n        } else {\n            require(_mode == WithdrawCallbackMode.NON_EMPTY_ERROR);\n            require(false, \"Error description\");\n        }\n    }\n\n    /// @notice Emitted when callback in depositCallback called\n    event DepositCallbackCalled();\n\n    /// @notice Emitted when callback in withdrawCallback called\n    event WithdrawCallbackCalled();\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/SqrtPriceMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.9;\n\nimport \"./SafeCastUni.sol\";\nimport \"./UnsafeMath.sol\";\nimport \"./FixedPoint96.sol\";\nimport \"contracts/libraries/external/FullMath.sol\";\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using SafeCastUni for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n        if (amount == 0) return sqrtPX96;\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n        if (add) {\n            uint256 product;\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                uint256 denominator = numerator1 + product;\n                if (denominator >= numerator1)\n                    // always fits in 160 bits\n                    return\n                        uint160(\n                            FullMath.mulDivRoundingUp(\n                                numerator1,\n                                sqrtPX96,\n                                denominator\n                            )\n                        );\n            }\n\n            return\n                uint160(\n                    UnsafeMath.divRoundingUp(\n                        numerator1,\n                        (numerator1 / sqrtPX96) + amount\n                    )\n                );\n        } else {\n            uint256 product;\n            // if the product overflows, we know the denominator underflows\n            // in addition, we must check that the denominator does not underflow\n            require(\n                (product = amount * sqrtPX96) / amount == sqrtPX96 &&\n                    numerator1 > product,\n                \"denom uflow\"\n            );\n            uint256 denominator = numerator1 - product;\n            return\n                FullMath\n                    .mulDivRoundingUp(numerator1, sqrtPX96, denominator)\n                    .toUint160();\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n        // in both cases, avoid a mulDiv for most inputs\n        if (add) {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n            );\n\n            return sqrtPX96 + quotient.toUint160();\n        } else {\n            uint256 quotient = (\n                amount <= type(uint160).max\n                    ? UnsafeMath.divRoundingUp(\n                        amount << FixedPoint96.RESOLUTION,\n                        liquidity\n                    )\n                    : FullMath.mulDivRoundingUp(\n                        amount,\n                        FixedPoint96.Q96,\n                        liquidity\n                    )\n            );\n\n            require(sqrtPX96 > quotient, \"sqrtPX96 !> quotient\");\n            // always fits 160 bits\n            return uint160(sqrtPX96 - quotient);\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountIn,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0, \"sqrtPX96 !> 0\");\n        require(liquidity > 0, \"liq !> 0\");\n\n        // round to make sure that we don't pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount0RoundingUp(\n                    sqrtPX96,\n                    liquidity,\n                    amountIn,\n                    true\n                )\n                : getNextSqrtPriceFromAmount1RoundingDown(\n                    sqrtPX96,\n                    liquidity,\n                    amountIn,\n                    true\n                );\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountOut,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        require(sqrtPX96 > 0, \"sqrtPX96 !> 0\");\n        require(liquidity > 0, \"liq !> 0\");\n\n        // round to make sure that we pass the target price\n        return\n            zeroForOne\n                ? getNextSqrtPriceFromAmount1RoundingDown(\n                    sqrtPX96,\n                    liquidity,\n                    amountOut,\n                    false\n                )\n                : getNextSqrtPriceFromAmount0RoundingUp(\n                    sqrtPX96,\n                    liquidity,\n                    amountOut,\n                    false\n                );\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n        require(sqrtRatioAX96 > 0, \"sqrtRatioAX96 !> 0\");\n\n        // test the effect of he unchecked blocks\n        unchecked {\n            return\n                roundUp\n                    ? UnsafeMath.divRoundingUp(\n                        FullMath.mulDivRoundingUp(\n                            numerator1,\n                            numerator2,\n                            sqrtRatioBX96\n                        ),\n                        sqrtRatioAX96\n                    )\n                    : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) /\n                        sqrtRatioAX96;\n        }\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        unchecked {\n            return\n                roundUp\n                    ? FullMath.mulDivRoundingUp(\n                        liquidity,\n                        sqrtRatioBX96 - sqrtRatioAX96,\n                        FixedPoint96.Q96\n                    )\n                    : FullMath.mulDiv(\n                        liquidity,\n                        sqrtRatioBX96 - sqrtRatioAX96,\n                        FixedPoint96.Q96\n                    );\n        }\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount0) {\n        return\n            liquidity < 0\n                ? -getAmount0Delta(\n                    sqrtRatioAX96,\n                    sqrtRatioBX96,\n                    uint128(-liquidity),\n                    false\n                ).toInt256()\n                : getAmount0Delta(\n                    sqrtRatioAX96,\n                    sqrtRatioBX96,\n                    uint128(liquidity),\n                    true\n                ).toInt256();\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount1) {\n        return\n            liquidity < 0\n                ? -getAmount1Delta(\n                    sqrtRatioAX96,\n                    sqrtRatioBX96,\n                    uint128(-liquidity),\n                    false\n                ).toInt256()\n                : getAmount1Delta(\n                    sqrtRatioAX96,\n                    sqrtRatioBX96,\n                    uint128(liquidity),\n                    true\n                ).toInt256();\n    }\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\n// solhint-disable no-inline-assembly\n\npragma solidity =0.8.9;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256 z)\n    {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
    },
    "contracts/interfaces/external/voltz/utils/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity =0.8.9;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/interfaces/external/voltz/aave/IAToken.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity =0.8.9;\n\nimport \"../IERC20Minimal.sol\";\n\n/**\n * @title Minimal interface used by Voltz to represent an Aave AToken\n *\n * @author Voltz\n */\ninterface IAToken {\n\n  /**\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n   * @param user The owner of the aTokens, getting them burned\n   * @param receiverOfUnderlying The address that will receive the underlying\n   * @param amount The amount being burned\n   * @param index The new liquidity index of the reserve\n   **/\n  function burn(\n    address user,\n    address receiverOfUnderlying,\n    uint256 amount,\n    uint256 index\n  ) external;\n}"
    },
    "contracts/interfaces/external/voltz/aave/IAaveV2LendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/*\n * MIT License\n * ===========\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n */\npragma solidity =0.8.9;\nimport \"../IERC20Minimal.sol\";\n\n// Adapted from https://github.com/pendle-finance/pendle-core/blob/master/contracts/interfaces/IAaveV2LendingPool.sol\ninterface IAaveV2LendingPool {\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: Reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60-63: reserved\n        //bit 64-79: reserve factor\n        uint256 data;\n    }\n\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        uint40 lastUpdateTimestamp;\n        //tokens addresses\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint8 id;\n    }\n\n    // function deposit(\n    //     address asset,\n    //     uint256 amount,\n    //     address onBehalfOf,\n    //     uint16 referralCode\n    // ) external;\n\n    function getReserveData(IERC20Minimal asset) external view returns (ReserveData memory);\n\n    function getReserveNormalizedIncome(IERC20Minimal underlyingAsset) external view returns (uint256);\n\n    /**\n    * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n    * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n    * @param asset The address of the underlying asset to withdraw\n    * @param amount The underlying amount to be withdrawn\n    *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n    * @param to Address that will receive the underlying, same as msg.sender if the user\n    *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n    *   different wallet\n    * @return The final amount withdrawn\n    **/\n    function withdraw(\n        IERC20Minimal asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    // /**\n    //  * @dev Returns the user account data across all the reserves\n    //  * @param user The address of the user\n    //  * @return totalCollateralETH the total collateral in ETH of the user\n    //  * @return totalDebtETH the total debt in ETH of the user\n    //  * @return availableBorrowsETH the borrowing power left of the user\n    //  * @return currentLiquidationThreshold the liquidation threshold of the user\n    //  * @return ltv the loan to value of the user\n    //  * @return healthFactor the current health factor of the user\n    //  **/\n    // function getUserAccountData(address user)\n    //     external\n    //     view\n    //     returns (\n    //         uint256 totalCollateralETH,\n    //         uint256 totalDebtETH,\n    //         uint256 availableBorrowsETH,\n    //         uint256 currentLiquidationThreshold,\n    //         uint256 ltv,\n    //         uint256 healthFactor\n    //     );\n}"
    },
    "contracts/vaults/AaveVault.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\nimport \"../interfaces/external/aave/ILendingPool.sol\";\nimport \"../interfaces/vaults/IAaveVaultGovernance.sol\";\nimport \"../interfaces/vaults/IAaveVault.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../libraries/external/FullMath.sol\";\nimport \"./IntegrationVault.sol\";\n\n/// @notice Vault that interfaces Aave protocol in the integration layer.\n/// @dev Notes:\n/// **TVL**\n///\n/// The TVL of the vault is cached and updated after each deposit withdraw.\n/// So essentially `tvl` call doesn't take into account accrued interest / donations to Aave since the\n/// last `deposit` / `withdraw`\n///\n/// **aTokens**\n/// aTokens are fixed at the token creation and addresses are taken from Aave Lending Pool.\n/// So essentially each aToken is fixed for life of the AaveVault. If the aToken is missing for some vaultToken,\n/// the AaveVault cannot be created.\n///\n/// **Push / Pull**\n/// It is assumed that any amounts of tokens can be deposited / withdrawn from Aave.\n/// The contract's vaultTokens are fully allowed to Aave Lending Pool.\ncontract AaveVault is IAaveVault, IntegrationVault {\n    using SafeERC20 for IERC20;\n    address[] internal _aTokens;\n    uint256[] internal _tvls;\n    uint256 private _lastTvlUpdateTimestamp;\n    ILendingPool private _lendingPool;\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IVault\n    function tvl() public view override returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts) {\n        minTokenAmounts = _tvls;\n        maxTokenAmounts = new uint256[](minTokenAmounts.length);\n        uint256 timeElapsed = block.timestamp - _lastTvlUpdateTimestamp;\n        uint256 factor = CommonLibrary.DENOMINATOR;\n        if (timeElapsed > 0) {\n            uint256 apy = IAaveVaultGovernance(address(_vaultGovernance)).delayedProtocolParams().estimatedAaveAPY;\n            factor = CommonLibrary.DENOMINATOR + FullMath.mulDiv(apy, timeElapsed, CommonLibrary.YEAR);\n        }\n        for (uint256 i = 0; i < minTokenAmounts.length; i++) {\n            maxTokenAmounts[i] = FullMath.mulDiv(factor, minTokenAmounts[i], CommonLibrary.DENOMINATOR);\n        }\n    }\n\n    /// @inheritdoc IAaveVault\n    function lendingPool() external view returns (ILendingPool) {\n        return _lendingPool;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, IntegrationVault) returns (bool) {\n        return IntegrationVault.supportsInterface(interfaceId) || interfaceId == type(IAaveVault).interfaceId;\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @notice Update all tvls to current aToken balances.\n    /// @inheritdoc IAaveVault\n    function updateTvls() external {\n        _updateTvls();\n    }\n\n    /// @inheritdoc IAaveVault\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external {\n        _initialize(vaultTokens_, nft_);\n        _lendingPool = IAaveVaultGovernance(address(_vaultGovernance)).delayedProtocolParams().lendingPool;\n        _aTokens = new address[](vaultTokens_.length);\n        for (uint256 i = 0; i < vaultTokens_.length; ++i) {\n            address aToken = _getAToken(vaultTokens_[i]);\n            require(aToken != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n            _aTokens[i] = aToken;\n            _tvls.push(0);\n        }\n        _lastTvlUpdateTimestamp = block.timestamp;\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _getAToken(address token) internal view returns (address) {\n        DataTypes.ReserveData memory data = _lendingPool.getReserveData(token);\n        return data.aTokenAddress;\n    }\n\n    function _isReclaimForbidden(address token) internal view override returns (bool) {\n        uint256 len = _aTokens.length;\n        for (uint256 i = 0; i < len; ++i) {\n            if (_aTokens[i] == token) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // -------------------  INTERNAL, MUTATING  -------------------\n\n    function _updateTvls() private {\n        uint256 tvlsLength = _tvls.length;\n        for (uint256 i = 0; i < tvlsLength; ++i) {\n            _tvls[i] = IERC20(_aTokens[i]).balanceOf(address(this));\n        }\n        _lastTvlUpdateTimestamp = block.timestamp;\n    }\n\n    function _push(uint256[] memory tokenAmounts, bytes memory options)\n        internal\n        override\n        returns (uint256[] memory actualTokenAmounts)\n    {\n        address[] memory tokens = _vaultTokens;\n        uint256 referralCode = 0;\n        if (options.length > 0) {\n            referralCode = abi.decode(options, (uint256));\n        }\n\n        for (uint256 i = 0; i < _aTokens.length; ++i) {\n            if (tokenAmounts[i] == 0) {\n                continue;\n            }\n            address token = tokens[i];\n            IERC20(token).safeIncreaseAllowance(address(_lendingPool), tokenAmounts[i]);\n            _lendingPool.deposit(tokens[i], tokenAmounts[i], address(this), uint16(referralCode));\n            IERC20(token).safeApprove(address(_lendingPool), 0);\n        }\n        _updateTvls();\n        actualTokenAmounts = tokenAmounts;\n    }\n\n    function _pull(\n        address to,\n        uint256[] memory tokenAmounts,\n        bytes memory\n    ) internal override returns (uint256[] memory actualTokenAmounts) {\n        address[] memory tokens = _vaultTokens;\n        actualTokenAmounts = new uint256[](tokenAmounts.length);\n        for (uint256 i = 0; i < _aTokens.length; ++i) {\n            if ((_tvls[i] == 0) || (tokenAmounts[i] == 0)) {\n                continue;\n            }\n            uint256 balance = IERC20(_aTokens[i]).balanceOf(address(this));\n            uint256 amount = tokenAmounts[i] < balance ? tokenAmounts[i] : balance;\n            actualTokenAmounts[i] = _lendingPool.withdraw(tokens[i], amount, to);\n        }\n        _updateTvls();\n    }\n}\n"
    },
    "contracts/interfaces/vaults/IAaveVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\nimport \"../external/aave/ILendingPool.sol\";\nimport \"./IAaveVault.sol\";\nimport \"./IVaultGovernance.sol\";\n\ninterface IAaveVaultGovernance is IVaultGovernance {\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @param lendingPool Reference to Aave LendingPool\n    /// @param estimatedAaveAPY APY estimation for calulating tvl range. Measured in CommonLibrary.DENOMINATOR\n    struct DelayedProtocolParams {\n        ILendingPool lendingPool;\n        uint256 estimatedAaveAPY;\n    }\n\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Delayed Protocol Params staged for commit after delay.\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\n\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    /// @dev Can only be called after delayedProtocolParamsTimestamp.\n    /// @param params New params\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\n\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\n    function commitDelayedProtocolParams() external;\n\n    /// @notice Deploys a new vault.\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\n    /// @param owner_ Owner of the vault NFT\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IAaveVault vault, uint256 nft);\n}\n"
    },
    "contracts/vaults/AaveVaultGovernance.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.9;\n\nimport \"../interfaces/vaults/IAaveVaultGovernance.sol\";\nimport \"../libraries/ExceptionsLibrary.sol\";\nimport \"../utils/ContractMeta.sol\";\nimport \"./VaultGovernance.sol\";\n\n/// @notice Governance that manages all Aave Vaults params and can deploy a new Aave Vault.\ncontract AaveVaultGovernance is ContractMeta, IAaveVaultGovernance, VaultGovernance {\n    uint256 public constant MAX_ESTIMATED_AAVE_APY = 100 * 10**7; // 100%\n\n    /// @notice Creates a new contract.\n    /// @param internalParams_ Initial Internal Params\n    /// @param delayedProtocolParams_ Initial Protocol Params\n    constructor(InternalParams memory internalParams_, DelayedProtocolParams memory delayedProtocolParams_)\n        VaultGovernance(internalParams_)\n    {\n        require(address(delayedProtocolParams_.lendingPool) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(delayedProtocolParams_.estimatedAaveAPY != 0, ExceptionsLibrary.VALUE_ZERO);\n        require(delayedProtocolParams_.estimatedAaveAPY <= MAX_ESTIMATED_AAVE_APY, ExceptionsLibrary.LIMIT_OVERFLOW);\n\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\n    }\n\n    // -------------------  EXTERNAL, VIEW  -------------------\n\n    /// @inheritdoc IAaveVaultGovernance\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\n        // params are initialized in constructor, so cannot be 0\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || interfaceId == type(IAaveVaultGovernance).interfaceId;\n    }\n\n    /// @inheritdoc IAaveVaultGovernance\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\n        if (_stagedDelayedProtocolParams.length == 0) {\n            return DelayedProtocolParams({lendingPool: ILendingPool(address(0)), estimatedAaveAPY: 0});\n        }\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\n    }\n\n    // -------------------  EXTERNAL, MUTATING  -------------------\n\n    /// @inheritdoc IAaveVaultGovernance\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\n        require(address(params.lendingPool) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\n        require(params.estimatedAaveAPY != 0, ExceptionsLibrary.VALUE_ZERO);\n        require(params.estimatedAaveAPY <= MAX_ESTIMATED_AAVE_APY, ExceptionsLibrary.LIMIT_OVERFLOW);\n        _stageDelayedProtocolParams(abi.encode(params));\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\n    }\n\n    /// @inheritdoc IAaveVaultGovernance\n    function commitDelayedProtocolParams() external {\n        _commitDelayedProtocolParams();\n        emit CommitDelayedProtocolParams(\n            tx.origin,\n            msg.sender,\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\n        );\n    }\n\n    /// @inheritdoc IAaveVaultGovernance\n    function createVault(address[] memory vaultTokens_, address owner_)\n        external\n        returns (IAaveVault vault, uint256 nft)\n    {\n        address vaddr;\n        (vaddr, nft) = _createVault(owner_);\n        vault = IAaveVault(vaddr);\n        vault.initialize(nft, vaultTokens_);\n        emit DeployedVault(tx.origin, msg.sender, vaultTokens_, \"\", owner_, vaddr, nft);\n    }\n\n    // -------------------  INTERNAL, VIEW  -------------------\n\n    function _contractName() internal pure override returns (bytes32) {\n        return bytes32(\"AaveVaultGovernance\");\n    }\n\n    function _contractVersion() internal pure override returns (bytes32) {\n        return bytes32(\"1.0.0\");\n    }\n\n    // --------------------------  EVENTS  --------------------------\n\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that were staged for commit\n    /// @param when When the params could be committed\n    event StageDelayedProtocolParams(\n        address indexed origin,\n        address indexed sender,\n        DelayedProtocolParams params,\n        uint256 when\n    );\n\n    /// @notice Emitted when new DelayedProtocolParams are committed\n    /// @param origin Origin of the transaction (tx.origin)\n    /// @param sender Sender of the call (msg.sender)\n    /// @param params New params that are committed\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\n}\n"
    },
    "contracts/test/libraries/TickMathTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.9;\n\nimport \"../../libraries/external/TickMath.sol\";\n\ncontract TickMathTest {\n    function getSqrtRatioAtTick(int24 tick) external pure returns (uint160 sqrtPriceX96) {\n        return TickMath.getSqrtRatioAtTick(tick);\n    }\n\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) external pure returns (int24 tick) {\n        return TickMath.getTickAtSqrtRatio(sqrtPriceX96);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}