{
  "address": "0x973495e81180Cd6Ead654328A0bEbE01c8ad53EA",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            },
            {
              "internalType": "contract IVaultRegistry",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "contract IVault",
              "name": "singleton",
              "type": "address"
            }
          ],
          "internalType": "struct IVaultGovernance.InternalParams",
          "name": "internalParams_",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managementFeeChargeDelay",
              "type": "uint256"
            },
            {
              "internalType": "contract IOracle",
              "name": "oracle",
              "type": "address"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
          "name": "delayedProtocolParams_",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20RootVaultHelper",
          "name": "helper_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managementFeeChargeDelay",
              "type": "uint256"
            },
            {
              "internalType": "contract IOracle",
              "name": "oracle",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "CommitDelayedProtocolParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "CommitDelayedProtocolPerVaultParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategyTreasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strategyPerformanceTreasury",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "privateVault",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositCallbackAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawCallbackAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "CommitDelayedStrategyParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            },
            {
              "internalType": "contract IVaultRegistry",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "contract IVault",
              "name": "singleton",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IVaultGovernance.InternalParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "CommitedInternalParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "vaultTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultNft",
          "type": "uint256"
        }
      ],
      "name": "DeployedVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "disableDeposit",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IERC20RootVaultGovernance.OperatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "SetOperatorParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenLimitPerAddress",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenLimit",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IERC20RootVaultGovernance.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "SetStrategyParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managementFeeChargeDelay",
              "type": "uint256"
            },
            {
              "internalType": "contract IOracle",
              "name": "oracle",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "StageDelayedProtocolParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "StageDelayedProtocolPerVaultParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategyTreasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strategyPerformanceTreasury",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "privateVault",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositCallbackAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawCallbackAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "StageDelayedStrategyParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            },
            {
              "internalType": "contract IVaultRegistry",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "contract IVault",
              "name": "singleton",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IVaultGovernance.InternalParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "StagedInternalParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_MANAGEMENT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERFORMANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PROTOCOL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitDelayedProtocolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "commitDelayedProtocolPerVaultParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "commitDelayedStrategyParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitInternalParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractNameBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersionBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vaultTokens_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "strategy_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "subvaultNfts_",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "contract IERC20RootVault",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayedProtocolParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managementFeeChargeDelay",
              "type": "uint256"
            },
            {
              "internalType": "contract IOracle",
              "name": "oracle",
              "type": "address"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayedProtocolParamsTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "delayedProtocolPerVaultParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "delayedProtocolPerVaultParamsTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "delayedStrategyParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategyTreasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strategyPerformanceTreasury",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "privateVault",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositCallbackAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawCallbackAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "delayedStrategyParamsTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "helper",
      "outputs": [
        {
          "internalType": "contract IERC20RootVaultHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "internalParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            },
            {
              "internalType": "contract IVaultRegistry",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "contract IVault",
              "name": "singleton",
              "type": "address"
            }
          ],
          "internalType": "struct IVaultGovernance.InternalParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "internalParamsTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "disableDeposit",
              "type": "bool"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.OperatorParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "disableDeposit",
              "type": "bool"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.OperatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setOperatorParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenLimitPerAddress",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.StrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setStrategyParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managementFeeChargeDelay",
              "type": "uint256"
            },
            {
              "internalType": "contract IOracle",
              "name": "oracle",
              "type": "address"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "stageDelayedProtocolParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "stageDelayedProtocolPerVaultParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategyTreasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strategyPerformanceTreasury",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "privateVault",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositCallbackAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawCallbackAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "stageDelayedStrategyParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            },
            {
              "internalType": "contract IVaultRegistry",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "contract IVault",
              "name": "singleton",
              "type": "address"
            }
          ],
          "internalType": "struct IVaultGovernance.InternalParams",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "stageInternalParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedDelayedProtocolParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managementFeeChargeDelay",
              "type": "uint256"
            },
            {
              "internalType": "contract IOracle",
              "name": "oracle",
              "type": "address"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "stagedDelayedProtocolPerVaultParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "stagedDelayedStrategyParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategyTreasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "strategyPerformanceTreasury",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "privateVault",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositCallbackAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "withdrawCallbackAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.DelayedStrategyParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedInternalParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IProtocolGovernance",
              "name": "protocolGovernance",
              "type": "address"
            },
            {
              "internalType": "contract IVaultRegistry",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "contract IVault",
              "name": "singleton",
              "type": "address"
            }
          ],
          "internalType": "struct IVaultGovernance.InternalParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        }
      ],
      "name": "strategyParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenLimitPerAddress",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20RootVaultGovernance.StrategyParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd51838b2fe79701a804c2a4e0f395df3f438d69094a16a513228c63673533da3",
  "receipt": {
    "to": null,
    "from": "0xF13c450e913001Ac0647710D44d8eE9760009b4D",
    "contractAddress": "0x973495e81180Cd6Ead654328A0bEbE01c8ad53EA",
    "transactionIndex": 19,
    "gasUsed": "3038077",
    "logsBloom": "0x
    "blockHash": "0x94d997465f7c2bfd4812f89a2b5def96e8732154becc7c7751040c3030f1264a",
    "transactionHash": "0xd51838b2fe79701a804c2a4e0f395df3f438d69094a16a513228c63673533da3",
    "logs": [],
    "blockNumber": 15237766,
    "cumulativeGasUsed": "4911965",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "protocolGovernance": "0xDc9C17662133fB865E7bA3198B67c53a617B2153",
      "registry": "0xFD23F971696576331fCF96f80a20B4D3b31ca5b2",
      "singleton": "0xa1eeEb677a121327Ea2643Fb47a23fec304Edd00"
    },
    {
      "managementFeeChargeDelay": 86400,
      "oracle": "0x9d992650B30C6FB7a83E7e7a430b4e015433b838"
    },
    "0xACEE4A703f27eA1EbCd550511aAE58ad012624CC"
  ],
  "solcInputHash": "1d49726b754ac7f6cccc3c78633d62a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"},{\"internalType\":\"contract IVaultRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"singleton\",\"type\":\"address\"}],\"internalType\":\"struct IVaultGovernance.InternalParams\",\"name\":\"internalParams_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managementFeeChargeDelay\",\"type\":\"uint256\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolParams\",\"name\":\"delayedProtocolParams_\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20RootVaultHelper\",\"name\":\"helper_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managementFeeChargeDelay\",\"type\":\"uint256\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"CommitDelayedProtocolParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"CommitDelayedProtocolPerVaultParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"strategyTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyPerformanceTreasury\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositCallbackAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawCallbackAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IERC20RootVaultGovernance.DelayedStrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"CommitDelayedStrategyParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"},{\"internalType\":\"contract IVaultRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"singleton\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IVaultGovernance.InternalParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"CommitedInternalParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"vaultTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultNft\",\"type\":\"uint256\"}],\"name\":\"DeployedVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableDeposit\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IERC20RootVaultGovernance.OperatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"SetOperatorParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenLimitPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IERC20RootVaultGovernance.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"SetStrategyParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managementFeeChargeDelay\",\"type\":\"uint256\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"StageDelayedProtocolParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"StageDelayedProtocolPerVaultParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"strategyTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyPerformanceTreasury\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositCallbackAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawCallbackAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IERC20RootVaultGovernance.DelayedStrategyParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"StageDelayedStrategyParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"},{\"internalType\":\"contract IVaultRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"singleton\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IVaultGovernance.InternalParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"StagedInternalParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MANAGEMENT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitDelayedProtocolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"commitDelayedProtocolPerVaultParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"commitDelayedStrategyParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitInternalParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractNameBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersionBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaultTokens_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"strategy_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"subvaultNfts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"contract IERC20RootVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayedProtocolParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managementFeeChargeDelay\",\"type\":\"uint256\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayedProtocolParamsTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"delayedProtocolPerVaultParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"delayedProtocolPerVaultParamsTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"delayedStrategyParams\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategyTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyPerformanceTreasury\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositCallbackAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawCallbackAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedStrategyParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"delayedStrategyParamsTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helper\",\"outputs\":[{\"internalType\":\"contract IERC20RootVaultHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalParams\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"},{\"internalType\":\"contract IVaultRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"singleton\",\"type\":\"address\"}],\"internalType\":\"struct IVaultGovernance.InternalParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalParamsTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorParams\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableDeposit\",\"type\":\"bool\"}],\"internalType\":\"struct IERC20RootVaultGovernance.OperatorParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableDeposit\",\"type\":\"bool\"}],\"internalType\":\"struct IERC20RootVaultGovernance.OperatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setOperatorParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenLimitPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20RootVaultGovernance.StrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setStrategyParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managementFeeChargeDelay\",\"type\":\"uint256\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"stageDelayedProtocolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"stageDelayedProtocolPerVaultParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"strategyTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyPerformanceTreasury\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositCallbackAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawCallbackAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedStrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"stageDelayedStrategyParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"},{\"internalType\":\"contract IVaultRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"singleton\",\"type\":\"address\"}],\"internalType\":\"struct IVaultGovernance.InternalParams\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"stageInternalParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedDelayedProtocolParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managementFeeChargeDelay\",\"type\":\"uint256\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"stagedDelayedProtocolPerVaultParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedProtocolPerVaultParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"stagedDelayedStrategyParams\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"strategyTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategyPerformanceTreasury\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"privateVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositCallbackAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawCallbackAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC20RootVaultGovernance.DelayedStrategyParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedInternalParams\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IProtocolGovernance\",\"name\":\"protocolGovernance\",\"type\":\"address\"},{\"internalType\":\"contract IVaultRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"singleton\",\"type\":\"address\"}],\"internalType\":\"struct IVaultGovernance.InternalParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"}],\"name\":\"strategyParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenLimitPerAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20RootVaultGovernance.StrategyParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CommitDelayedProtocolParams(address,address,(uint256,address))\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"New params that are committed\",\"sender\":\"Sender of the call (msg.sender)\"}},\"CommitDelayedProtocolPerVaultParams(address,address,uint256,(uint256))\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\",\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"New params that are committed\",\"sender\":\"Sender of the call (msg.sender)\"}},\"CommitDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address))\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\",\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"New params that are committed\",\"sender\":\"Sender of the call (msg.sender)\"}},\"SetOperatorParams(address,address,(bool))\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"New params that are set\",\"sender\":\"Sender of the call (msg.sender)\"}},\"SetStrategyParams(address,address,uint256,(uint256,uint256))\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\",\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"New params that are set\",\"sender\":\"Sender of the call (msg.sender)\"}},\"StageDelayedProtocolParams(address,address,(uint256,address),uint256)\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"New params that were staged for commit\",\"sender\":\"Sender of the call (msg.sender)\",\"when\":\"When the params could be committed\"}},\"StageDelayedProtocolPerVaultParams(address,address,uint256,(uint256),uint256)\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\",\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"New params that were staged for commit\",\"sender\":\"Sender of the call (msg.sender)\",\"when\":\"When the params could be committed\"}},\"StageDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address),uint256)\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\",\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"New params that were staged for commit\",\"sender\":\"Sender of the call (msg.sender)\",\"when\":\"When the params could be committed\"}}},\"kind\":\"dev\",\"methods\":{\"commitDelayedProtocolPerVaultParams(uint256)\":{\"details\":\"Can only be called after delayedProtocolPerVaultParamsTimestamp\",\"params\":{\"nft\":\"VaultRegistry NFT of the vault\"}},\"commitDelayedStrategyParams(uint256)\":{\"details\":\"Can only be called after delayedStrategyParamsTimestamp\",\"params\":{\"nft\":\"VaultRegistry NFT of the vault\"}},\"constructor\":{\"params\":{\"delayedProtocolParams_\":\"Initial Protocol Params\",\"internalParams_\":\"Initial Internal Params\"}},\"createVault(address[],address,uint256[],address)\":{\"params\":{\"owner_\":\"Owner of the vault NFT\",\"strategy_\":\"The address that will have approvals for subvaultNfts\",\"subvaultNfts_\":\"The NFTs of the subvaults that will be aggregated by this ERC20RootVault\",\"vaultTokens_\":\"ERC20 tokens that will be managed by this Vault\"}},\"delayedProtocolPerVaultParams(uint256)\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\"}},\"delayedProtocolPerVaultParamsTimestamp(uint256)\":{\"params\":{\"nft\":\"Nft of the vault\"}},\"delayedStrategyParams(uint256)\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\"}},\"delayedStrategyParamsTimestamp(uint256)\":{\"params\":{\"nft\":\"Nft of the vault\"}},\"setOperatorParams((bool))\":{\"params\":{\"params\":\"New params\"}},\"setStrategyParams(uint256,(uint256,uint256))\":{\"params\":{\"nft\":\"Nft of the vault\",\"params\":\"New params\"}},\"stageDelayedProtocolParams((uint256,address))\":{\"details\":\"Can only be called after delayedProtocolParamsTimestamp.\",\"params\":{\"params\":\"New params\"}},\"stageDelayedProtocolPerVaultParams(uint256,(uint256))\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\",\"params\":\"New params\"}},\"stageDelayedStrategyParams(uint256,(address,address,bool,uint256,uint256,address,address))\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\",\"params\":\"New params\"}},\"stageInternalParams((address,address,address))\":{\"params\":{\"newParams\":\"New Internal Params\"}},\"stagedDelayedProtocolPerVaultParams(uint256)\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\"}},\"stagedDelayedStrategyParams(uint256)\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\"}},\"stagedInternalParams()\":{\"details\":\"The Internal Params could be committed after internalParamsTimestamp\"},\"strategyParams(uint256)\":{\"params\":{\"nft\":\"VaultRegistry NFT of the vault\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CommitDelayedProtocolParams(address,address,(uint256,address))\":{\"notice\":\"Emitted when new DelayedProtocolParams are committed\"},\"CommitDelayedProtocolPerVaultParams(address,address,uint256,(uint256))\":{\"notice\":\"Emitted when new DelayedProtocolPerVaultParams are committed\"},\"CommitDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address))\":{\"notice\":\"Emitted when new DelayedStrategyParams are committed\"},\"CommitedInternalParams(address,address,(address,address,address))\":{\"notice\":\"Emitted when InternalParams are staged for commit\"},\"DeployedVault(address,address,address[],bytes,address,address,uint256)\":{\"notice\":\"Emitted when New Vault is deployed\"},\"SetOperatorParams(address,address,(bool))\":{\"notice\":\"Emitted when new OperatorParams are set.\"},\"SetStrategyParams(address,address,uint256,(uint256,uint256))\":{\"notice\":\"Emitted when new StrategyParams are set.\"},\"StageDelayedProtocolParams(address,address,(uint256,address),uint256)\":{\"notice\":\"Emitted when new DelayedProtocolParams are staged for commit\"},\"StageDelayedProtocolPerVaultParams(address,address,uint256,(uint256),uint256)\":{\"notice\":\"Emitted when new DelayedProtocolPerVaultParams are staged for commit\"},\"StageDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address),uint256)\":{\"notice\":\"Emitted when new DelayedStrategyParams are staged for commit\"},\"StagedInternalParams(address,address,(address,address,address),uint256)\":{\"notice\":\"Emitted when InternalParams are staged for commit\"}},\"kind\":\"user\",\"methods\":{\"MAX_MANAGEMENT_FEE()\":{\"notice\":\"Number of maximum management fee\"},\"MAX_PERFORMANCE_FEE()\":{\"notice\":\"Number of maximum performance fee\"},\"MAX_PROTOCOL_FEE()\":{\"notice\":\"Number of maximum protocol fee\"},\"commitDelayedProtocolParams()\":{\"notice\":\"Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\"},\"commitDelayedProtocolPerVaultParams(uint256)\":{\"notice\":\"Commit Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\"},\"commitDelayedStrategyParams(uint256)\":{\"notice\":\"Commit Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\"},\"commitInternalParams()\":{\"notice\":\"Commit staged Internal Params.\"},\"constructor\":{\"notice\":\"Creates a new contract.\"},\"createVault(address[],address,uint256[],address)\":{\"notice\":\"Deploys a new vault.\"},\"delayedProtocolParams()\":{\"notice\":\"Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\"},\"delayedProtocolParamsTimestamp()\":{\"notice\":\"Timestamp in unix time seconds after which staged Delayed Protocol Params could be committed.\"},\"delayedProtocolPerVaultParams(uint256)\":{\"notice\":\"Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\"},\"delayedProtocolPerVaultParamsTimestamp(uint256)\":{\"notice\":\"Timestamp in unix time seconds after which staged Delayed Protocol Params Per Vault could be committed.\"},\"delayedStrategyParams(uint256)\":{\"notice\":\"Delayed Strategy Params\"},\"delayedStrategyParamsTimestamp(uint256)\":{\"notice\":\"Timestamp in unix time seconds after which staged Delayed Strategy Params could be committed.\"},\"internalParams()\":{\"notice\":\"Internal Params of the contract.\"},\"internalParamsTimestamp()\":{\"notice\":\"Timestamp in unix time seconds after which staged Internal Params could be committed.\"},\"operatorParams()\":{\"notice\":\"Operator Params.\"},\"setOperatorParams((bool))\":{\"notice\":\"Set Operator params, i.e. Params that could be changed by Operator or Protocol Governance immediately.\"},\"setStrategyParams(uint256,(uint256,uint256))\":{\"notice\":\"Set Strategy params, i.e. Params that could be changed by Strategy or Protocol Governance immediately.\"},\"stageDelayedProtocolParams((uint256,address))\":{\"notice\":\"Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\"},\"stageDelayedProtocolPerVaultParams(uint256,(uint256))\":{\"notice\":\"Stage Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\"},\"stageDelayedStrategyParams(uint256,(address,address,bool,uint256,uint256,address,address))\":{\"notice\":\"Stage Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\"},\"stageInternalParams((address,address,address))\":{\"notice\":\"Stage new Internal Params.\"},\"stagedDelayedProtocolParams()\":{\"notice\":\"Delayed Protocol Params staged for commit after delay.\"},\"stagedDelayedProtocolPerVaultParams(uint256)\":{\"notice\":\"Delayed Protocol Per Vault Params staged for commit after delay.\"},\"stagedDelayedStrategyParams(uint256)\":{\"notice\":\"Delayed Strategy Params staged for commit after delay.\"},\"stagedInternalParams()\":{\"notice\":\"Staged new Internal Params.\"},\"strategyParams(uint256)\":{\"notice\":\"Strategy Params.\"}},\"notice\":\"Governance that manages all Lp Issuers params and can deploy a new LpIssuer Vault.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/ERC20RootVaultGovernance.sol\":\"ERC20RootVaultGovernance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c3ef4fb25def71f5f18af554ca938950eb9cf218fda073ed2c69b9203c03455\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xb0ff3f5c37c94cfa0da555a4c7d9034c46d70d0479917bed63612a9fc7092672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\nimport \\\"./IUnitPricesGovernance.sol\\\";\\n\\ninterface IProtocolGovernance is IDefaultAccessControl, IUnitPricesGovernance {\\n    /// @notice CommonLibrary protocol params.\\n    /// @param maxTokensPerVault Max different token addresses that could be managed by the vault\\n    /// @param governanceDelay The delay (in secs) that must pass before setting new pending params to commiting them\\n    /// @param protocolTreasury The address that collects protocolFees, if protocolFee is not zero\\n    /// @param forceAllowMask If a permission bit is set in this mask it forces all addresses to have this permission as true\\n    /// @param withdrawLimit Withdraw limit (in unit prices, i.e. usd)\\n    struct Params {\\n        uint256 maxTokensPerVault;\\n        uint256 governanceDelay;\\n        address protocolTreasury;\\n        uint256 forceAllowMask;\\n        uint256 withdrawLimit;\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\n    /// @param target The given address\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\n    function stagedPermissionGrantsTimestamps(address target) external view returns (uint256);\\n\\n    /// @notice Staged granted permission bitmask for the given address.\\n    /// @param target The given address\\n    /// @return Bitmask\\n    function stagedPermissionGrantsMasks(address target) external view returns (uint256);\\n\\n    /// @notice Permission bitmask for the given address.\\n    /// @param target The given address\\n    /// @return Bitmask\\n    function permissionMasks(address target) external view returns (uint256);\\n\\n    /// @notice Timestamp after which staged pending protocol parameters can be committed\\n    /// @return Zero if there are no staged parameters, timestamp otherwise.\\n    function stagedParamsTimestamp() external view returns (uint256);\\n\\n    /// @notice Staged pending protocol parameters.\\n    function stagedParams() external view returns (Params memory);\\n\\n    /// @notice Current protocol parameters.\\n    function params() external view returns (Params memory);\\n\\n    /// @notice Addresses for which non-zero permissions are set.\\n    function permissionAddresses() external view returns (address[] memory);\\n\\n    /// @notice Permission addresses staged for commit.\\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory);\\n\\n    /// @notice Return all addresses where rawPermissionMask bit for permissionId is set to 1.\\n    /// @param permissionId Id of the permission to check.\\n    /// @return A list of dirty addresses.\\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory);\\n\\n    /// @notice Checks if address has permission or given permission is force allowed for any address.\\n    /// @param addr Address to check\\n    /// @param permissionId Permission to check\\n    function hasPermission(address addr, uint8 permissionId) external view returns (bool);\\n\\n    /// @notice Checks if address has all permissions.\\n    /// @param target Address to check\\n    /// @param permissionIds A list of permissions to check\\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool);\\n\\n    /// @notice Max different ERC20 token addresses that could be managed by the protocol.\\n    function maxTokensPerVault() external view returns (uint256);\\n\\n    /// @notice The delay for committing any governance params.\\n    function governanceDelay() external view returns (uint256);\\n\\n    /// @notice The address of the protocol treasury.\\n    function protocolTreasury() external view returns (address);\\n\\n    /// @notice Permissions mask which defines if ordinary permission should be reverted.\\n    /// This bitmask is xored with ordinary mask.\\n    function forceAllowMask() external view returns (uint256);\\n\\n    /// @notice Withdraw limit per token per block.\\n    /// @param token Address of the token\\n    /// @return Withdraw limit per token per block\\n    function withdrawLimit(address token) external view returns (uint256);\\n\\n    /// @notice Addresses that has staged validators.\\n    function stagedValidatorsAddresses() external view returns (address[] memory);\\n\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\n    /// @param target The given address\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\n    function stagedValidatorsTimestamps(address target) external view returns (uint256);\\n\\n    /// @notice Staged validator for the given address.\\n    /// @param target The given address\\n    /// @return Validator\\n    function stagedValidators(address target) external view returns (address);\\n\\n    /// @notice Addresses that has validators.\\n    function validatorsAddresses() external view returns (address[] memory);\\n\\n    /// @notice Address that has validators.\\n    /// @param i The number of address\\n    /// @return Validator address\\n    function validatorsAddress(uint256 i) external view returns (address);\\n\\n    /// @notice Validator for the given address.\\n    /// @param target The given address\\n    /// @return Validator\\n    function validators(address target) external view returns (address);\\n\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, IMMEDIATE  -------------------\\n\\n    /// @notice Rollback all staged validators.\\n    function rollbackStagedValidators() external;\\n\\n    /// @notice Revoke validator instantly from the given address.\\n    /// @param target The given address\\n    function revokeValidator(address target) external;\\n\\n    /// @notice Stages a new validator for the given address\\n    /// @param target The given address\\n    /// @param validator The validator for the given address\\n    function stageValidator(address target, address validator) external;\\n\\n    /// @notice Commits validator for the given address.\\n    /// @dev Reverts if governance delay has not passed yet.\\n    /// @param target The given address.\\n    function commitValidator(address target) external;\\n\\n    /// @notice Commites all staged validators for which governance delay passed\\n    /// @return Addresses for which validators were committed\\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory);\\n\\n    /// @notice Rollback all staged granted permission grant.\\n    function rollbackStagedPermissionGrants() external;\\n\\n    /// @notice Commits permission grants for the given address.\\n    /// @dev Reverts if governance delay has not passed yet.\\n    /// @param target The given address.\\n    function commitPermissionGrants(address target) external;\\n\\n    /// @notice Commites all staged permission grants for which governance delay passed.\\n    /// @return An array of addresses for which permission grants were committed.\\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory);\\n\\n    /// @notice Revoke permission instantly from the given address.\\n    /// @param target The given address.\\n    /// @param permissionIds A list of permission ids to revoke.\\n    function revokePermissions(address target, uint8[] memory permissionIds) external;\\n\\n    /// @notice Commits staged protocol params.\\n    /// Reverts if governance delay has not passed yet.\\n    function commitParams() external;\\n\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, DELAY  -------------------\\n\\n    /// @notice Sets new pending params that could have been committed after governance delay expires.\\n    /// @param newParams New protocol parameters to set.\\n    function stageParams(Params memory newParams) external;\\n\\n    /// @notice Stage granted permissions that could have been committed after governance delay expires.\\n    /// Resets commit delay and permissions if there are already staged permissions for this address.\\n    /// @param target Target address\\n    /// @param permissionIds A list of permission ids to grant\\n    function stagePermissionGrants(address target, uint8[] memory permissionIds) external;\\n}\\n\",\"keccak256\":\"0x04ea2514f49503cc66574a08382b57f266d23dee04046b479e0cf64c9a0db270\",\"license\":\"MIT\"},\"contracts/interfaces/IUnitPricesGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\n\\ninterface IUnitPricesGovernance is IDefaultAccessControl, IERC165 {\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @notice Estimated amount of token worth 1 USD staged for commit.\\n    /// @param token Address of the token\\n    /// @return The amount of token\\n    function stagedUnitPrices(address token) external view returns (uint256);\\n\\n    /// @notice Timestamp after which staged unit prices for the given token can be committed.\\n    /// @param token Address of the token\\n    /// @return Timestamp\\n    function stagedUnitPricesTimestamps(address token) external view returns (uint256);\\n\\n    /// @notice Estimated amount of token worth 1 USD.\\n    /// @param token Address of the token\\n    /// @return The amount of token\\n    function unitPrices(address token) external view returns (uint256);\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @notice Stage estimated amount of token worth 1 USD staged for commit.\\n    /// @param token Address of the token\\n    /// @param value The amount of token\\n    function stageUnitPrice(address token, uint256 value) external;\\n\\n    /// @notice Reset staged value\\n    /// @param token Address of the token\\n    function rollbackUnitPrice(address token) external;\\n\\n    /// @notice Commit staged unit price\\n    /// @param token Address of the token\\n    function commitUnitPrice(address token) external;\\n}\\n\",\"keccak256\":\"0x861ae02ad4ba132b8e03ceb19faf915dc800fed8a6f877c344ea2ebd83feb29c\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./IProtocolGovernance.sol\\\";\\n\\ninterface IVaultRegistry is IERC721 {\\n    /// @notice Get Vault for the giver NFT ID.\\n    /// @param nftId NFT ID\\n    /// @return vault Address of the Vault contract\\n    function vaultForNft(uint256 nftId) external view returns (address vault);\\n\\n    /// @notice Get NFT ID for given Vault contract address.\\n    /// @param vault Address of the Vault contract\\n    /// @return nftId NFT ID\\n    function nftForVault(address vault) external view returns (uint256 nftId);\\n\\n    /// @notice Checks if the nft is locked for all transfers\\n    /// @param nft NFT to check for lock\\n    /// @return `true` if locked, false otherwise\\n    function isLocked(uint256 nft) external view returns (bool);\\n\\n    /// @notice Register new Vault and mint NFT.\\n    /// @param vault address of the vault\\n    /// @param owner owner of the NFT\\n    /// @return nft Nft minted for the given Vault\\n    function registerVault(address vault, address owner) external returns (uint256 nft);\\n\\n    /// @notice Number of Vaults registered.\\n    function vaultsCount() external view returns (uint256);\\n\\n    /// @notice All Vaults registered.\\n    function vaults() external view returns (address[] memory);\\n\\n    /// @notice Address of the ProtocolGovernance.\\n    function protocolGovernance() external view returns (IProtocolGovernance);\\n\\n    /// @notice Address of the staged ProtocolGovernance.\\n    function stagedProtocolGovernance() external view returns (IProtocolGovernance);\\n\\n    /// @notice Minimal timestamp when staged ProtocolGovernance can be applied.\\n    function stagedProtocolGovernanceTimestamp() external view returns (uint256);\\n\\n    /// @notice Stage new ProtocolGovernance.\\n    /// @param newProtocolGovernance new ProtocolGovernance\\n    function stageProtocolGovernance(IProtocolGovernance newProtocolGovernance) external;\\n\\n    /// @notice Commit new ProtocolGovernance.\\n    function commitStagedProtocolGovernance() external;\\n\\n    /// @notice Lock NFT for transfers\\n    /// @dev Use this method when vault structure is set up and should become immutable. Can be called by owner.\\n    /// @param nft - NFT to lock\\n    function lockNft(uint256 nft) external;\\n}\\n\",\"keccak256\":\"0x6c30a6796998d981b6614e57c857c74b38565df25606756635a29388257de21c\",\"license\":\"MIT\"},\"contracts/interfaces/external/aave/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\",\"keccak256\":\"0x7258563a622ea11a9ca362a862b6dcfa3988bb7c183b7df345f1d532480947ee\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/external/aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7eb31147746a6af5f82273b4fcca337c0454b07f5f124ea11d871d3bc0e1d89\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/external/aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.9;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0x1d924ff5ced2f76a816ce70fb2ceb34eb7a4278009cb0fedd1bcebc7ca3e31fc\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/external/erc/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IERC1271 {\\n    /// @notice Verifies offchain signature.\\n    /// @dev Should return whether the signature provided is valid for the provided hash\\n    ///\\n    /// MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n    ///\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n    ///\\n    /// MUST allow external calls\\n    /// @param _hash Hash of the data to be signed\\n    /// @param _signature Signature byte array associated with _hash\\n    /// @return magicValue 0x1626ba7e if valid, 0xffffffff otherwise\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xfce1c38d1bd95ffde243b787ef51e91a4dcc3eecb025bd2d33b1c2ed17938f77\",\"license\":\"MIT\"},\"contracts/interfaces/oracles/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    /// @notice Oracle price for tokens as a Q64.96 value.\\n    /// @notice Returns pricing information based on the indexes of non-zero bits in safetyIndicesSet.\\n    /// @notice It is possible that not all indices will have their respective prices returned.\\n    /// @dev The price is token1 / token0 i.e. how many weis of token1 required for 1 wei of token0.\\n    /// The safety indexes are:\\n    ///\\n    /// 1 - unsafe, this is typically a spot price that can be easily manipulated,\\n    ///\\n    /// 2 - 4 - more or less safe, this is typically a uniV3 oracle, where the safety is defined by the timespan of the average price\\n    ///\\n    /// 5 - safe - this is typically a chailink oracle\\n    /// @param token0 Reference to token0\\n    /// @param token1 Reference to token1\\n    /// @param safetyIndicesSet Bitmask of safety indices that are allowed for the return prices. For set of safety indexes = { 1 }, safetyIndicesSet = 0x2\\n    /// @return pricesX96 Prices that satisfy safetyIndex and tokens\\n    /// @return safetyIndices Safety indices for those prices\\n    function priceX96(\\n        address token0,\\n        address token1,\\n        uint256 safetyIndicesSet\\n    ) external view returns (uint256[] memory pricesX96, uint256[] memory safetyIndices);\\n}\\n\",\"keccak256\":\"0x64a04c20495bc7e46040acb0df28c866cfd2d4fd8eced03bc3595d817619dc19\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IContractMeta.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface IContractMeta {\\n    function contractName() external view returns (string memory);\\n    function contractNameBytes() external view returns (bytes32);\\n\\n    function contractVersion() external view returns (string memory);\\n    function contractVersionBytes() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab6c1427012bddbeae91599f859668df829c133b73b77572cf60c2bbc369f6da\",\"license\":\"BSL-1.1\"},\"contracts/interfaces/utils/IDefaultAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ninterface IDefaultAccessControl is IAccessControlEnumerable {\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @return `true` if who is admin, `false` otherwise\\n    function isAdmin(address who) external view returns (bool);\\n\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @return `true` if who is operator, `false` otherwise\\n    function isOperator(address who) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf4198613cc054350ce3ad3399fee584b363c27082f2a86645c58a2aab543862d\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IERC20RootVaultHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../oracles/IOracle.sol\\\";\\n\\ninterface IERC20RootVaultHelper {\\n    function getTvlToken0(\\n        uint256[] calldata tvls,\\n        address[] calldata tokens,\\n        IOracle oracle\\n    ) external view returns (uint256 tvl0);\\n}\\n\",\"keccak256\":\"0x83d7bc6139b7654637cb4c131756e04c1821196b02881b2889e69b77f0c2d607\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IAggregateVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IVaultRoot.sol\\\";\\n\\ninterface IAggregateVault is IVault, IVaultRoot {}\\n\",\"keccak256\":\"0xc9809c6efcca7b5d622cacbf713a1aed349f29813d60e4ac8a739c7a28b1e4e1\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IERC20RootVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAggregateVault.sol\\\";\\nimport \\\"../utils/IERC20RootVaultHelper.sol\\\";\\n\\ninterface IERC20RootVault is IAggregateVault, IERC20 {\\n    /// @notice Initialized a new contract.\\n    /// @dev Can only be initialized by vault governance\\n    /// @param nft_ NFT of the vault in the VaultRegistry\\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\\n    /// @param strategy_ The address that will have approvals for subvaultNfts\\n    /// @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault\\n    function initialize(\\n        uint256 nft_,\\n        address[] memory vaultTokens_,\\n        address strategy_,\\n        uint256[] memory subvaultNfts_,\\n        IERC20RootVaultHelper helper_\\n    ) external;\\n\\n    /// @notice The timestamp of last charging of fees\\n    function lastFeeCharge() external view returns (uint64);\\n\\n    /// @notice The timestamp of last updating totalWithdrawnAmounts array\\n    function totalWithdrawnAmountsTimestamp() external view returns (uint64);\\n\\n    /// @notice Returns value from totalWithdrawnAmounts array by _index\\n    /// @param _index The index at which the value will be returned\\n    function totalWithdrawnAmounts(uint256 _index) external view returns (uint256);\\n\\n    /// @notice LP parameter that controls the charge in performance fees\\n    function lpPriceHighWaterMarkD18() external view returns (uint256);\\n\\n    /// @notice List of addresses of depositors from which interaction with private vaults is allowed\\n    function depositorsAllowlist() external view returns (address[] memory);\\n\\n    /// @notice Add new depositors in the depositorsAllowlist\\n    /// @param depositors Array of new depositors\\n    /// @dev The action can be done only by user with admins, owners or by approved rights\\n    function addDepositorsToAllowlist(address[] calldata depositors) external;\\n\\n    /// @notice Remove depositors from the depositorsAllowlist\\n    /// @param depositors Array of depositors for remove\\n    /// @dev The action can be done only by user with admins, owners or by approved rights\\n    function removeDepositorsFromAllowlist(address[] calldata depositors) external;\\n\\n    /// @notice The function of depositing the amount of tokens in exchange\\n    /// @param tokenAmounts Array of amounts of tokens for deposit\\n    /// @param minLpTokens Minimal value of LP tokens\\n    /// @param vaultOptions Options of vaults\\n    /// @return actualTokenAmounts Arrays of actual token amounts after deposit\\n    function deposit(\\n        uint256[] memory tokenAmounts,\\n        uint256 minLpTokens,\\n        bytes memory vaultOptions\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice The function of withdrawing the amount of tokens in exchange\\n    /// @param to Address to which the withdrawal will be sent\\n    /// @param lpTokenAmount LP token amount, that requested for withdraw\\n    /// @param minTokenAmounts Array of minmal remining wtoken amounts after withdrawal\\n    /// @param vaultsOptions Options of vaults\\n    /// @return actualTokenAmounts Arrays of actual token amounts after withdrawal\\n    function withdraw(\\n        address to,\\n        uint256 lpTokenAmount,\\n        uint256[] memory minTokenAmounts,\\n        bytes[] memory vaultsOptions\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n}\\n\",\"keccak256\":\"0xcea0f93bd5b938f36718344f46094eef76a0486b4ad2202766e96bf9ed482405\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IERC20RootVaultGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../oracles/IOracle.sol\\\";\\nimport \\\"./IERC20RootVault.sol\\\";\\nimport \\\"./IVaultGovernance.sol\\\";\\nimport \\\"../utils/IERC20RootVaultHelper.sol\\\";\\n\\ninterface IERC20RootVaultGovernance is IVaultGovernance {\\n    /// @notice Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\\n    /// @param strategyTreasury Reference to address that will collect strategy management fees\\n    /// @param strategyPerformanceTreasury Reference to address that will collect strategy performance fees\\n    /// @param privateVault If true, only whitlisted depositors can deposit into the vault\\n    /// @param managementFee Management fee for Strategist denominated in 10 ** 9\\n    /// @param performanceFee Performance fee for Strategist denominated in 10 ** 9\\n    /// @param depositCallbackAddress Address of callback function after deposit\\n    /// @param withdrawCallbackAddress Address of callback function after withdraw\\n    struct DelayedStrategyParams {\\n        address strategyTreasury;\\n        address strategyPerformanceTreasury;\\n        bool privateVault;\\n        uint256 managementFee;\\n        uint256 performanceFee;\\n        address depositCallbackAddress;\\n        address withdrawCallbackAddress;\\n    }\\n\\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @param managementFeeChargeDelay The minimal interval between management fee charges\\n    /// @param oracle Oracle for getting token prices\\n    struct DelayedProtocolParams {\\n        uint256 managementFeeChargeDelay;\\n        IOracle oracle;\\n    }\\n\\n    /// @notice Params that could be changed by Strategy or Protocol Governance.\\n    /// @param tokenLimitPerAddress Max LP token limit per address\\n    /// @param tokenLimit Max LP token for the vault\\n    struct StrategyParams {\\n        uint256 tokenLimitPerAddress;\\n        uint256 tokenLimit;\\n    }\\n\\n    /// @notice Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @param protocolFee Management fee for Protocol denominated in 10 ** 9\\n    struct DelayedProtocolPerVaultParams {\\n        uint256 protocolFee;\\n    }\\n\\n    /// @notice Params that could be changed by Operator role of Protocol Governance.\\n    /// @param disableDeposit Disable deposit for all ERC20 vaults\\n    struct OperatorParams {\\n        bool disableDeposit;\\n    }\\n\\n    /// @notice Number of maximum protocol fee\\n    function MAX_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /// @notice Number of maximum management fee\\n    function MAX_MANAGEMENT_FEE() external view returns (uint256);\\n\\n    /// @notice Number of maximum performance fee\\n    function MAX_PERFORMANCE_FEE() external view returns (uint256);\\n\\n    /// @notice Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    function delayedProtocolParams() external view returns (DelayedProtocolParams memory);\\n\\n    /// @notice Delayed Protocol Params staged for commit after delay.\\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory);\\n\\n    /// @notice Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    function delayedProtocolPerVaultParams(uint256 nft) external view returns (DelayedProtocolPerVaultParams memory);\\n\\n    /// @notice Delayed Protocol Per Vault Params staged for commit after delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    function stagedDelayedProtocolPerVaultParams(uint256 nft)\\n        external\\n        view\\n        returns (DelayedProtocolPerVaultParams memory);\\n\\n    /// @notice Strategy Params.\\n    /// @param nft VaultRegistry NFT of the vault\\n    function strategyParams(uint256 nft) external view returns (StrategyParams memory);\\n\\n    /// @notice Operator Params.\\n    function operatorParams() external view returns (OperatorParams memory);\\n\\n    /// @notice Delayed Strategy Params\\n    /// @param nft VaultRegistry NFT of the vault\\n    function delayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory);\\n\\n    /// @notice Delayed Strategy Params staged for commit after delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    function stagedDelayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory);\\n\\n    /// @notice Set Strategy params, i.e. Params that could be changed by Strategy or Protocol Governance immediately.\\n    /// @param nft Nft of the vault\\n    /// @param params New params\\n    function setStrategyParams(uint256 nft, StrategyParams calldata params) external;\\n\\n    /// @notice Set Operator params, i.e. Params that could be changed by Operator or Protocol Governance immediately.\\n    /// @param params New params\\n    function setOperatorParams(OperatorParams calldata params) external;\\n\\n    /// @notice Stage Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    /// @param params New params\\n    function stageDelayedProtocolPerVaultParams(uint256 nft, DelayedProtocolPerVaultParams calldata params) external;\\n\\n    /// @notice Commit Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @dev Can only be called after delayedProtocolPerVaultParamsTimestamp\\n    /// @param nft VaultRegistry NFT of the vault\\n    function commitDelayedProtocolPerVaultParams(uint256 nft) external;\\n\\n    /// @notice Stage Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\\n    /// @param nft VaultRegistry NFT of the vault\\n    /// @param params New params\\n    function stageDelayedStrategyParams(uint256 nft, DelayedStrategyParams calldata params) external;\\n\\n    /// @notice Commit Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay.\\n    /// @dev Can only be called after delayedStrategyParamsTimestamp\\n    /// @param nft VaultRegistry NFT of the vault\\n    function commitDelayedStrategyParams(uint256 nft) external;\\n\\n    /// @notice Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    /// @dev Can only be called after delayedProtocolParamsTimestamp.\\n    /// @param params New params\\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external;\\n\\n    /// @notice Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay.\\n    function commitDelayedProtocolParams() external;\\n\\n    /// @notice Deploys a new vault.\\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\\n    /// @param strategy_ The address that will have approvals for subvaultNfts\\n    /// @param subvaultNfts_ The NFTs of the subvaults that will be aggregated by this ERC20RootVault\\n    /// @param owner_ Owner of the vault NFT\\n    function createVault(\\n        address[] memory vaultTokens_,\\n        address strategy_,\\n        uint256[] memory subvaultNfts_,\\n        address owner_\\n    ) external returns (IERC20RootVault vault, uint256 nft);\\n}\\n\",\"keccak256\":\"0xfe8264aac355d6aa1fdc5fb2e9ebad4a3958f893d4cd6a92828aef8375aaa0f3\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IERC20Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../external/aave/ILendingPool.sol\\\";\\nimport \\\"./IIntegrationVault.sol\\\";\\n\\ninterface IERC20Vault is IIntegrationVault {\\n    /// @notice Initialized a new contract.\\n    /// @dev Can only be initialized by vault governance\\n    /// @param nft_ NFT of the vault in the VaultRegistry\\n    /// @param vaultTokens_ ERC20 tokens that will be managed by this Vault\\n    function initialize(uint256 nft_, address[] memory vaultTokens_) external;\\n}\\n\",\"keccak256\":\"0x20f4e06eb15f8b1a19b93ef497ae8231f438ea877d90aea01082a39fb21bd82b\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IIntegrationVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../external/erc/IERC1271.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IIntegrationVault is IVault, IERC1271 {\\n    /// @notice Pushes tokens on the vault balance to the underlying protocol. For example, for Yearn this operation will take USDC from\\n    /// the contract balance and convert it to yUSDC.\\n    /// @dev Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\\n    ///\\n    /// Also notice that this operation doesn't guarantee that tokenAmounts will be invested in full.\\n    /// @param tokens Tokens to push\\n    /// @param tokenAmounts Amounts of tokens to push\\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\\n    function push(\\n        address[] memory tokens,\\n        uint256[] memory tokenAmounts,\\n        bytes memory options\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice The same as `push` method above but transfers tokens to vault balance prior to calling push.\\n    /// After the `push` it returns all the leftover tokens back (`push` method doesn't guarantee that tokenAmounts will be invested in full).\\n    /// @param tokens Tokens to push\\n    /// @param tokenAmounts Amounts of tokens to push\\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\\n    /// @return actualTokenAmounts The amounts actually invested. It could be less than tokenAmounts (but not higher)\\n    function transferAndPush(\\n        address from,\\n        address[] memory tokens,\\n        uint256[] memory tokenAmounts,\\n        bytes memory options\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice Pulls tokens from the underlying protocol to the `to` address.\\n    /// @dev Can only be called but Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\\n    /// Strategy is approved address for the vault NFT.\\n    /// When called by vault owner this method just pulls the tokens from the protocol to the `to` address\\n    /// When called by strategy on vault other than zero vault it pulls the tokens to zero vault (required `to` == zero vault)\\n    /// When called by strategy on zero vault it pulls the tokens to zero vault, pushes tokens on the `to` vault, and reclaims everything that's left.\\n    /// Thus any vault other than zero vault cannot have any tokens on it\\n    ///\\n    /// Tokens **must** be a subset of Vault Tokens. However, the convention is that if tokenAmount == 0 it is the same as token is missing.\\n    ///\\n    /// Pull is fulfilled on the best effort basis, i.e. if the tokenAmounts overflows available funds it withdraws all the funds.\\n    /// @param to Address to receive the tokens\\n    /// @param tokens Tokens to pull\\n    /// @param tokenAmounts Amounts of tokens to pull\\n    /// @param options Additional options that could be needed for some vaults. E.g. for Uniswap this could be `deadline` param. For the exact bytes structure see concrete vault descriptions\\n    /// @return actualTokenAmounts The amounts actually withdrawn. It could be less than tokenAmounts (but not higher)\\n    function pull(\\n        address to,\\n        address[] memory tokens,\\n        uint256[] memory tokenAmounts,\\n        bytes memory options\\n    ) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice Claim ERC20 tokens from vault balance to zero vault.\\n    /// @dev Cannot be called from zero vault.\\n    /// @param tokens Tokens to claim\\n    /// @return actualTokenAmounts Amounts reclaimed\\n    function reclaimTokens(address[] memory tokens) external returns (uint256[] memory actualTokenAmounts);\\n\\n    /// @notice Execute one of whitelisted calls.\\n    /// @dev Can only be called by Vault Owner or Strategy. Vault owner is the owner of NFT for this vault in VaultManager.\\n    /// Strategy is approved address for the vault NFT.\\n    ///\\n    /// Since this method allows sending arbitrary transactions, the destinations of the calls\\n    /// are whitelisted by Protocol Governance.\\n    /// @param to Address of the reward pool\\n    /// @param selector Selector of the call\\n    /// @param data Abi encoded parameters to `to::selector`\\n    /// @return result Result of execution of the call\\n    function externalCall(\\n        address to,\\n        bytes4 selector,\\n        bytes memory data\\n    ) external payable returns (bytes memory result);\\n}\\n\",\"keccak256\":\"0x7964a84ed7750acfad39e7388a030ce82a31349ef57b20c4d40d386fd8100c02\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IVaultGovernance.sol\\\";\\n\\ninterface IVault is IERC165 {\\n    /// @notice Checks if the vault is initialized\\n\\n    function initialized() external view returns (bool);\\n\\n    /// @notice VaultRegistry NFT for this vault\\n    function nft() external view returns (uint256);\\n\\n    /// @notice Address of the Vault Governance for this contract.\\n    function vaultGovernance() external view returns (IVaultGovernance);\\n\\n    /// @notice ERC20 tokens under Vault management.\\n    function vaultTokens() external view returns (address[] memory);\\n\\n    /// @notice Checks if a token is vault token\\n    /// @param token Address of the token to check\\n    /// @return `true` if this token is managed by Vault\\n    function isVaultToken(address token) external view returns (bool);\\n\\n    /// @notice Total value locked for this contract.\\n    /// @dev Generally it is the underlying token value of this contract in some\\n    /// other DeFi protocol. For example, for USDC Yearn Vault this would be total USDC balance that could be withdrawn for Yearn to this contract.\\n    /// The tvl itself is estimated in some range. Sometimes the range is exact, sometimes it's not\\n    /// @return minTokenAmounts Lower bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\\n    /// @return maxTokenAmounts Upper bound for total available balances estimation (nth tokenAmount corresponds to nth token in vaultTokens)\\n    function tvl() external view returns (uint256[] memory minTokenAmounts, uint256[] memory maxTokenAmounts);\\n\\n    /// @notice Existential amounts for each token\\n    function pullExistentials() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x60d0972c0324d048aac990cef2830b8e4f4f76dc78f2490f1b3f448be325ec1e\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IVaultGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../IProtocolGovernance.sol\\\";\\nimport \\\"../IVaultRegistry.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IVaultGovernance {\\n    /// @notice Internal references of the contract.\\n    /// @param protocolGovernance Reference to Protocol Governance\\n    /// @param registry Reference to Vault Registry\\n    struct InternalParams {\\n        IProtocolGovernance protocolGovernance;\\n        IVaultRegistry registry;\\n        IVault singleton;\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Strategy Params could be committed.\\n    /// @param nft Nft of the vault\\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256);\\n\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params could be committed.\\n    function delayedProtocolParamsTimestamp() external view returns (uint256);\\n\\n    /// @notice Timestamp in unix time seconds after which staged Delayed Protocol Params Per Vault could be committed.\\n    /// @param nft Nft of the vault\\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256);\\n\\n    /// @notice Timestamp in unix time seconds after which staged Internal Params could be committed.\\n    function internalParamsTimestamp() external view returns (uint256);\\n\\n    /// @notice Internal Params of the contract.\\n    function internalParams() external view returns (InternalParams memory);\\n\\n    /// @notice Staged new Internal Params.\\n    /// @dev The Internal Params could be committed after internalParamsTimestamp\\n    function stagedInternalParams() external view returns (InternalParams memory);\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @notice Stage new Internal Params.\\n    /// @param newParams New Internal Params\\n    function stageInternalParams(InternalParams memory newParams) external;\\n\\n    /// @notice Commit staged Internal Params.\\n    function commitInternalParams() external;\\n}\\n\",\"keccak256\":\"0x316819e93c849dc1abe39baec0451c414e5998f51ec256c59c3fdc1ef5c22113\",\"license\":\"MIT\"},\"contracts/interfaces/vaults/IVaultRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IVaultRoot {\\n    /// @notice Checks if subvault is present\\n    /// @param nft_ index of subvault for check\\n    /// @return `true` if subvault present, `false` otherwise\\n    function hasSubvault(uint256 nft_) external view returns (bool);\\n\\n    /// @notice Get subvault by index\\n    /// @param index Index of subvault\\n    /// @return address Address of the contract\\n    function subvaultAt(uint256 index) external view returns (address);\\n\\n    /// @notice Get index of subvault by nft\\n    /// @param nft_ Nft for getting subvault\\n    /// @return index Index of subvault\\n    function subvaultOneBasedIndex(uint256 nft_) external view returns (uint256);\\n\\n    /// @notice Get all subvalutNfts in the current Vault\\n    /// @return subvaultNfts Subvaults of NTFs\\n    function subvaultNfts() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x6f98973ef2b3281d35cd8f2e7c990a08b5fbedb94f68747afe47a65a69247c5f\",\"license\":\"MIT\"},\"contracts/libraries/CommonLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/FullMath.sol\\\";\\nimport \\\"./ExceptionsLibrary.sol\\\";\\n\\n/// @notice CommonLibrary shared utilities\\nlibrary CommonLibrary {\\n    uint256 constant DENOMINATOR = 10**9;\\n    uint256 constant D18 = 10**18;\\n    uint256 constant YEAR = 365 * 24 * 3600;\\n    uint256 constant Q128 = 2**128;\\n    uint256 constant Q96 = 2**96;\\n    uint256 constant Q48 = 2**48;\\n    uint256 constant Q160 = 2**160;\\n    uint256 constant UNI_FEE_DENOMINATOR = 10**6;\\n\\n    /// @notice Sort uint256 using bubble sort. The sorting is done in-place.\\n    /// @param arr Array of uint256\\n    function sortUint(uint256[] memory arr) internal pure {\\n        uint256 l = arr.length;\\n        for (uint256 i = 0; i < l; ++i) {\\n            for (uint256 j = i + 1; j < l; ++j) {\\n                if (arr[i] > arr[j]) {\\n                    uint256 temp = arr[i];\\n                    arr[i] = arr[j];\\n                    arr[j] = temp;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if array of addresses is sorted and all adresses are unique\\n    /// @param tokens A set of addresses to check\\n    /// @return `true` if all addresses are sorted and unique, `false` otherwise\\n    function isSortedAndUnique(address[] memory tokens) internal pure returns (bool) {\\n        if (tokens.length < 2) {\\n            return true;\\n        }\\n        for (uint256 i = 0; i < tokens.length - 1; ++i) {\\n            if (tokens[i] >= tokens[i + 1]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Projects tokenAmounts onto subset or superset of tokens\\n    /// @dev\\n    /// Requires both sets of tokens to be sorted. When tokens are not sorted, it's undefined behavior.\\n    /// If there is a token in tokensToProject that is not part of tokens and corresponding tokenAmountsToProject > 0, reverts.\\n    /// Zero token amount is eqiuvalent to missing token\\n    function projectTokenAmounts(\\n        address[] memory tokens,\\n        address[] memory tokensToProject,\\n        uint256[] memory tokenAmountsToProject\\n    ) internal pure returns (uint256[] memory) {\\n        uint256[] memory res = new uint256[](tokens.length);\\n        uint256 t = 0;\\n        uint256 tp = 0;\\n        while ((t < tokens.length) && (tp < tokensToProject.length)) {\\n            if (tokens[t] < tokensToProject[tp]) {\\n                res[t] = 0;\\n                t++;\\n            } else if (tokens[t] > tokensToProject[tp]) {\\n                if (tokenAmountsToProject[tp] == 0) {\\n                    tp++;\\n                } else {\\n                    revert(\\\"TPS\\\");\\n                }\\n            } else {\\n                res[t] = tokenAmountsToProject[tp];\\n                t++;\\n                tp++;\\n            }\\n        }\\n        while (t < tokens.length) {\\n            res[t] = 0;\\n            t++;\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Calculated sqrt of uint in X96 format\\n    /// @param xX96 input number in X96 format\\n    /// @return sqrt of xX96 in X96 format\\n    function sqrtX96(uint256 xX96) internal pure returns (uint256) {\\n        uint256 sqX96 = sqrt(xX96);\\n        return sqX96 << 48;\\n    }\\n\\n    /// @notice Calculated sqrt of uint\\n    /// @param x input number\\n    /// @return sqrt of x\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n\\n    /// @notice Recovers signer address from signed message hash\\n    /// @param _ethSignedMessageHash signed message\\n    /// @param _signature contatenated ECDSA r, s, v (65 bytes)\\n    /// @return Recovered address if the signature is valid, address(0) otherwise\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    /// @notice Get ECDSA r, s, v from signature\\n    /// @param sig signature (65 bytes)\\n    /// @return r ECDSA r\\n    /// @return s ECDSA s\\n    /// @return v ECDSA v\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, ExceptionsLibrary.INVALID_LENGTH);\\n\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xef6a88b594b83a9be518e705b0b1fc513657fe940cec0d68749fc55e64d7eb97\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @notice Exceptions stores project`s smart-contracts exceptions\\nlibrary ExceptionsLibrary {\\n    string constant ADDRESS_ZERO = \\\"AZ\\\";\\n    string constant VALUE_ZERO = \\\"VZ\\\";\\n    string constant EMPTY_LIST = \\\"EMPL\\\";\\n    string constant NOT_FOUND = \\\"NF\\\";\\n    string constant INIT = \\\"INIT\\\";\\n    string constant DUPLICATE = \\\"DUP\\\";\\n    string constant NULL = \\\"NULL\\\";\\n    string constant TIMESTAMP = \\\"TS\\\";\\n    string constant FORBIDDEN = \\\"FRB\\\";\\n    string constant ALLOWLIST = \\\"ALL\\\";\\n    string constant LIMIT_OVERFLOW = \\\"LIMO\\\";\\n    string constant LIMIT_UNDERFLOW = \\\"LIMU\\\";\\n    string constant INVALID_VALUE = \\\"INV\\\";\\n    string constant INVARIANT = \\\"INVA\\\";\\n    string constant INVALID_TARGET = \\\"INVTR\\\";\\n    string constant INVALID_TOKEN = \\\"INVTO\\\";\\n    string constant INVALID_INTERFACE = \\\"INVI\\\";\\n    string constant INVALID_SELECTOR = \\\"INVS\\\";\\n    string constant INVALID_STATE = \\\"INVST\\\";\\n    string constant INVALID_LENGTH = \\\"INVL\\\";\\n    string constant LOCK = \\\"LCKD\\\";\\n    string constant DISABLED = \\\"DIS\\\";\\n}\\n\",\"keccak256\":\"0xf17911249ff44eab954080bf27b20232f4d87d30e609aabc70046d644e35fbb5\",\"license\":\"MIT\"},\"contracts/libraries/PermissionIdsLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @notice Stores permission ids for addresses\\nlibrary PermissionIdsLibrary {\\n    // The msg.sender is allowed to register vault\\n    uint8 constant REGISTER_VAULT = 0;\\n    // The msg.sender is allowed to create vaults\\n    uint8 constant CREATE_VAULT = 1;\\n    // The token is allowed to be transfered by vault\\n    uint8 constant ERC20_TRANSFER = 2;\\n    // The token is allowed to be added to vault\\n    uint8 constant ERC20_VAULT_TOKEN = 3;\\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by any strategy\\n    uint8 constant ERC20_APPROVE = 4;\\n    // Trusted protocols that are allowed to be approved of vault ERC20 tokens by trusted strategy\\n    uint8 constant ERC20_APPROVE_RESTRICTED = 5;\\n    // Strategy allowed using restricted API\\n    uint8 constant TRUSTED_STRATEGY = 6;\\n}\\n\",\"keccak256\":\"0xee229ac2a7af104167439ac51bd1cefc6d143c2c42b55bc1ea28dfe4b5450949\",\"license\":\"MIT\"},\"contracts/libraries/external/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // diff: original lib works under 0.7.6 with overflows enabled\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // diff: original uint256 twos = -denominator & denominator;\\n            uint256 twos = uint256(-int256(denominator)) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // diff: original lib works under 0.7.6 with overflows enabled\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4eba21427a2a12cd7174047367a625fe9e64946ecc2dd60682d14b97c10fb169\",\"license\":\"MIT\"},\"contracts/utils/ContractMeta.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/utils/IContractMeta.sol\\\";\\n\\nabstract contract ContractMeta is IContractMeta {\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    function contractName() external pure returns (string memory) {\\n        return _bytes32ToString(_contractName());\\n    }\\n\\n    function contractNameBytes() external pure returns (bytes32) {\\n        return _contractName();\\n    }\\n\\n    function contractVersion() external pure returns (string memory) {\\n        return _bytes32ToString(_contractVersion());\\n    }\\n\\n    function contractVersionBytes() external pure returns (bytes32) {\\n        return _contractVersion();\\n    }\\n\\n    // -------------------  INTERNAL, VIEW  -------------------\\n\\n    function _contractName() internal pure virtual returns (bytes32);\\n\\n    function _contractVersion() internal pure virtual returns (bytes32);\\n\\n    function _bytes32ToString(bytes32 b) internal pure returns (string memory s) {\\n        s = new string(32);\\n        uint256 len = 32;\\n        for (uint256 i = 0; i < 32; ++i) {\\n            if (uint8(b[i]) == 0) {\\n                len = i;\\n                break;\\n            }\\n        }\\n        assembly {\\n            mstore(s, len)\\n            mstore(add(s, 0x20), b)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaed32a95ba32842eb484fcd8febba8bdc7b4a736605c208ec093efcfe1800c93\",\"license\":\"BSL-1.1\"},\"contracts/vaults/ERC20RootVaultGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/vaults/IERC20RootVaultGovernance.sol\\\";\\nimport \\\"../interfaces/vaults/IERC20Vault.sol\\\";\\nimport \\\"../interfaces/vaults/IIntegrationVault.sol\\\";\\nimport \\\"../libraries/CommonLibrary.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"../utils/ContractMeta.sol\\\";\\nimport \\\"./VaultGovernance.sol\\\";\\nimport \\\"../interfaces/utils/IERC20RootVaultHelper.sol\\\";\\n\\n/// @notice Governance that manages all Lp Issuers params and can deploy a new LpIssuer Vault.\\ncontract ERC20RootVaultGovernance is ContractMeta, IERC20RootVaultGovernance, VaultGovernance {\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    uint256 public constant MAX_PROTOCOL_FEE = 5 * 10**7; // 5%\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    uint256 public constant MAX_MANAGEMENT_FEE = 10 * 10**7; // 10%\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    uint256 public constant MAX_PERFORMANCE_FEE = 50 * 10**7; // 50%\\n\\n    IERC20RootVaultHelper public immutable helper;\\n\\n    /// @notice Creates a new contract.\\n    /// @param internalParams_ Initial Internal Params\\n    /// @param delayedProtocolParams_ Initial Protocol Params\\n    constructor(\\n        InternalParams memory internalParams_,\\n        DelayedProtocolParams memory delayedProtocolParams_,\\n        IERC20RootVaultHelper helper_\\n    ) VaultGovernance(internalParams_) {\\n        require(address(delayedProtocolParams_.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(address(helper_) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        helper = helper_;\\n        _delayedProtocolParams = abi.encode(delayedProtocolParams_);\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function delayedProtocolParams() public view returns (DelayedProtocolParams memory) {\\n        // params are initialized in constructor, so cannot be 0\\n        return abi.decode(_delayedProtocolParams, (DelayedProtocolParams));\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function stagedDelayedProtocolParams() external view returns (DelayedProtocolParams memory) {\\n        if (_stagedDelayedProtocolParams.length == 0) {\\n            return DelayedProtocolParams({managementFeeChargeDelay: 0, oracle: IOracle(address(0))});\\n        }\\n        return abi.decode(_stagedDelayedProtocolParams, (DelayedProtocolParams));\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function delayedProtocolPerVaultParams(uint256 nft) external view returns (DelayedProtocolPerVaultParams memory) {\\n        if (_delayedProtocolPerVaultParams[nft].length == 0) {\\n            return DelayedProtocolPerVaultParams({protocolFee: 0});\\n        }\\n        return abi.decode(_delayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams));\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function stagedDelayedProtocolPerVaultParams(uint256 nft)\\n        external\\n        view\\n        returns (DelayedProtocolPerVaultParams memory)\\n    {\\n        if (_stagedDelayedProtocolPerVaultParams[nft].length == 0) {\\n            return DelayedProtocolPerVaultParams({protocolFee: 0});\\n        }\\n        return abi.decode(_stagedDelayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams));\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function stagedDelayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory) {\\n        if (_stagedDelayedStrategyParams[nft].length == 0) {\\n            return\\n                DelayedStrategyParams({\\n                    strategyTreasury: address(0),\\n                    strategyPerformanceTreasury: address(0),\\n                    privateVault: false,\\n                    managementFee: 0,\\n                    performanceFee: 0,\\n                    depositCallbackAddress: address(0),\\n                    withdrawCallbackAddress: address(0)\\n                });\\n        }\\n        return abi.decode(_stagedDelayedStrategyParams[nft], (DelayedStrategyParams));\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function operatorParams() external view returns (OperatorParams memory) {\\n        if (_operatorParams.length == 0) {\\n            return OperatorParams({disableDeposit: false});\\n        }\\n        return abi.decode(_operatorParams, (OperatorParams));\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function delayedStrategyParams(uint256 nft) external view returns (DelayedStrategyParams memory) {\\n        if (_delayedStrategyParams[nft].length == 0) {\\n            return\\n                DelayedStrategyParams({\\n                    strategyTreasury: address(0),\\n                    strategyPerformanceTreasury: address(0),\\n                    privateVault: false,\\n                    managementFee: 0,\\n                    performanceFee: 0,\\n                    depositCallbackAddress: address(0),\\n                    withdrawCallbackAddress: address(0)\\n                });\\n        }\\n        return abi.decode(_delayedStrategyParams[nft], (DelayedStrategyParams));\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function strategyParams(uint256 nft) external view returns (StrategyParams memory) {\\n        if (_strategyParams[nft].length == 0) {\\n            return StrategyParams({tokenLimitPerAddress: 0, tokenLimit: 0});\\n        }\\n        return abi.decode(_strategyParams[nft], (StrategyParams));\\n    }\\n\\n    // @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || type(IERC20RootVaultGovernance).interfaceId == interfaceId;\\n    }\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function stageDelayedStrategyParams(uint256 nft, DelayedStrategyParams calldata params) external {\\n        require(params.managementFee <= MAX_MANAGEMENT_FEE, ExceptionsLibrary.LIMIT_OVERFLOW);\\n        require(params.performanceFee <= MAX_PERFORMANCE_FEE, ExceptionsLibrary.LIMIT_OVERFLOW);\\n        _stageDelayedStrategyParams(nft, abi.encode(params));\\n        emit StageDelayedStrategyParams(tx.origin, msg.sender, nft, params, _delayedStrategyParamsTimestamp[nft]);\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function commitDelayedStrategyParams(uint256 nft) external {\\n        _commitDelayedStrategyParams(nft);\\n        emit CommitDelayedStrategyParams(\\n            tx.origin,\\n            msg.sender,\\n            nft,\\n            abi.decode(_delayedStrategyParams[nft], (DelayedStrategyParams))\\n        );\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function stageDelayedProtocolPerVaultParams(uint256 nft, DelayedProtocolPerVaultParams calldata params) external {\\n        require(params.protocolFee <= MAX_PROTOCOL_FEE, ExceptionsLibrary.LIMIT_OVERFLOW);\\n        _stageDelayedProtocolPerVaultParams(nft, abi.encode(params));\\n        emit StageDelayedProtocolPerVaultParams(\\n            tx.origin,\\n            msg.sender,\\n            nft,\\n            params,\\n            _delayedStrategyParamsTimestamp[nft]\\n        );\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function commitDelayedProtocolPerVaultParams(uint256 nft) external {\\n        _commitDelayedProtocolPerVaultParams(nft);\\n        emit CommitDelayedProtocolPerVaultParams(\\n            tx.origin,\\n            msg.sender,\\n            nft,\\n            abi.decode(_delayedProtocolPerVaultParams[nft], (DelayedProtocolPerVaultParams))\\n        );\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function setStrategyParams(uint256 nft, StrategyParams calldata params) external {\\n        _setStrategyParams(nft, abi.encode(params));\\n        emit SetStrategyParams(tx.origin, msg.sender, nft, params);\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function setOperatorParams(OperatorParams calldata params) external {\\n        _setOperatorParams(abi.encode(params));\\n        emit SetOperatorParams(tx.origin, msg.sender, params);\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function stageDelayedProtocolParams(DelayedProtocolParams calldata params) external {\\n        require(address(params.oracle) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        _stageDelayedProtocolParams(abi.encode(params));\\n        emit StageDelayedProtocolParams(tx.origin, msg.sender, params, _delayedProtocolParamsTimestamp);\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function commitDelayedProtocolParams() external {\\n        _commitDelayedProtocolParams();\\n        emit CommitDelayedProtocolParams(\\n            tx.origin,\\n            msg.sender,\\n            abi.decode(_delayedProtocolParams, (DelayedProtocolParams))\\n        );\\n    }\\n\\n    /// @inheritdoc IERC20RootVaultGovernance\\n    function createVault(\\n        address[] memory vaultTokens_,\\n        address strategy_,\\n        uint256[] memory subvaultNfts_,\\n        address owner_\\n    ) external returns (IERC20RootVault vault, uint256 nft) {\\n        address vaddr;\\n        IVaultRegistry registry = _internalParams.registry;\\n        (vaddr, nft) = _createVault(owner_);\\n        vault = IERC20RootVault(vaddr);\\n        require(subvaultNfts_.length > 0, ExceptionsLibrary.EMPTY_LIST);\\n        for (uint256 i = 0; i < subvaultNfts_.length; i++) {\\n            uint256 subvaultNft = subvaultNfts_[i];\\n            require(subvaultNft > 0, ExceptionsLibrary.VALUE_ZERO);\\n            address subvault = registry.vaultForNft(subvaultNft);\\n            require(subvault != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n            require(\\n                IIntegrationVault(subvault).supportsInterface(type(IIntegrationVault).interfaceId),\\n                ExceptionsLibrary.INVALID_INTERFACE\\n            );\\n            address[] memory subvaultTokens = IIntegrationVault(subvault).vaultTokens();\\n            if (i == 0) {\\n                // The zero-vault must have the same tokens as ERC20RootVault\\n                require(vaultTokens_.length == subvaultTokens.length, ExceptionsLibrary.INVALID_LENGTH);\\n                require(\\n                    IERC165(subvault).supportsInterface(type(IERC20Vault).interfaceId),\\n                    ExceptionsLibrary.INVALID_INTERFACE\\n                );\\n            }\\n            uint256 subvaultTokenId = 0;\\n            for (\\n                uint256 tokenId = 0;\\n                tokenId < vaultTokens_.length && subvaultTokenId < subvaultTokens.length;\\n                ++tokenId\\n            ) {\\n                if (subvaultTokens[subvaultTokenId] == vaultTokens_[tokenId]) {\\n                    subvaultTokenId++;\\n                }\\n            }\\n            require(subvaultTokenId == subvaultTokens.length, ExceptionsLibrary.INVALID_TOKEN);\\n\\n            // RootVault is not yet initialized so we cannot use safeTransferFrom here\\n            registry.transferFrom(msg.sender, vaddr, subvaultNfts_[i]);\\n        }\\n        vault.initialize(nft, vaultTokens_, strategy_, subvaultNfts_, helper);\\n    }\\n\\n    // -------------------  INTERNAL, VIEW  -------------------\\n\\n    function _contractName() internal pure override returns (bytes32) {\\n        return bytes32(\\\"ERC20RootVaultGovernance\\\");\\n    }\\n\\n    function _contractVersion() internal pure override returns (bytes32) {\\n        return bytes32(\\\"1.0.0\\\");\\n    }\\n\\n    // --------------------------  EVENTS  --------------------------\\n\\n    /// @notice Emitted when new DelayedProtocolPerVaultParams are staged for commit\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param nft VaultRegistry NFT of the vault\\n    /// @param params New params that were staged for commit\\n    /// @param when When the params could be committed\\n    event StageDelayedProtocolPerVaultParams(\\n        address indexed origin,\\n        address indexed sender,\\n        uint256 indexed nft,\\n        DelayedProtocolPerVaultParams params,\\n        uint256 when\\n    );\\n\\n    /// @notice Emitted when new DelayedProtocolPerVaultParams are committed\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param nft VaultRegistry NFT of the vault\\n    /// @param params New params that are committed\\n    event CommitDelayedProtocolPerVaultParams(\\n        address indexed origin,\\n        address indexed sender,\\n        uint256 indexed nft,\\n        DelayedProtocolPerVaultParams params\\n    );\\n\\n    /// @notice Emitted when new DelayedStrategyParams are staged for commit\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param nft VaultRegistry NFT of the vault\\n    /// @param params New params that were staged for commit\\n    /// @param when When the params could be committed\\n    event StageDelayedStrategyParams(\\n        address indexed origin,\\n        address indexed sender,\\n        uint256 indexed nft,\\n        DelayedStrategyParams params,\\n        uint256 when\\n    );\\n\\n    /// @notice Emitted when new DelayedStrategyParams are committed\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param nft VaultRegistry NFT of the vault\\n    /// @param params New params that are committed\\n    event CommitDelayedStrategyParams(\\n        address indexed origin,\\n        address indexed sender,\\n        uint256 indexed nft,\\n        DelayedStrategyParams params\\n    );\\n\\n    /// @notice Emitted when new StrategyParams are set.\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param nft VaultRegistry NFT of the vault\\n    /// @param params New params that are set\\n    event SetStrategyParams(address indexed origin, address indexed sender, uint256 indexed nft, StrategyParams params);\\n\\n    /// @notice Emitted when new OperatorParams are set.\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param params New params that are set\\n    event SetOperatorParams(address indexed origin, address indexed sender, OperatorParams params);\\n\\n    /// @notice Emitted when new DelayedProtocolParams are staged for commit\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param params New params that were staged for commit\\n    /// @param when When the params could be committed\\n    event StageDelayedProtocolParams(\\n        address indexed origin,\\n        address indexed sender,\\n        DelayedProtocolParams params,\\n        uint256 when\\n    );\\n\\n    /// @notice Emitted when new DelayedProtocolParams are committed\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param params New params that are committed\\n    event CommitDelayedProtocolParams(address indexed origin, address indexed sender, DelayedProtocolParams params);\\n}\\n\",\"keccak256\":\"0x83534d9ca1410762a5ee276a32fb115cc21cd24ee19a6f95694d199ebd75cfc6\",\"license\":\"BSL-1.1\"},\"contracts/vaults/VaultGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../interfaces/IProtocolGovernance.sol\\\";\\nimport \\\"../interfaces/vaults/IVaultGovernance.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"../libraries/PermissionIdsLibrary.sol\\\";\\n\\n/// @notice Internal contract for managing different params.\\n/// @dev The contract should be overriden by the concrete VaultGovernance,\\n/// define different params structs and use abi.decode / abi.encode to serialize\\n/// to bytes in this contract. It also should emit events on params change.\\nabstract contract VaultGovernance is IVaultGovernance, ERC165 {\\n    InternalParams internal _internalParams;\\n    InternalParams private _stagedInternalParams;\\n    uint256 internal _internalParamsTimestamp;\\n\\n    mapping(uint256 => bytes) internal _delayedStrategyParams;\\n    mapping(uint256 => bytes) internal _stagedDelayedStrategyParams;\\n    mapping(uint256 => uint256) internal _delayedStrategyParamsTimestamp;\\n\\n    mapping(uint256 => bytes) internal _delayedProtocolPerVaultParams;\\n    mapping(uint256 => bytes) internal _stagedDelayedProtocolPerVaultParams;\\n    mapping(uint256 => uint256) internal _delayedProtocolPerVaultParamsTimestamp;\\n\\n    bytes internal _delayedProtocolParams;\\n    bytes internal _stagedDelayedProtocolParams;\\n    uint256 internal _delayedProtocolParamsTimestamp;\\n\\n    mapping(uint256 => bytes) internal _strategyParams;\\n    bytes internal _protocolParams;\\n    bytes internal _operatorParams;\\n\\n    /// @notice Creates a new contract.\\n    /// @param internalParams_ Initial Internal Params\\n    constructor(InternalParams memory internalParams_) {\\n        require(address(internalParams_.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(address(internalParams_.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(address(internalParams_.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        _internalParams = internalParams_;\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @inheritdoc IVaultGovernance\\n    function delayedStrategyParamsTimestamp(uint256 nft) external view returns (uint256) {\\n        return _delayedStrategyParamsTimestamp[nft];\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function delayedProtocolPerVaultParamsTimestamp(uint256 nft) external view returns (uint256) {\\n        return _delayedProtocolPerVaultParamsTimestamp[nft];\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function delayedProtocolParamsTimestamp() external view returns (uint256) {\\n        return _delayedProtocolParamsTimestamp;\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function internalParamsTimestamp() external view returns (uint256) {\\n        return _internalParamsTimestamp;\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function internalParams() external view returns (InternalParams memory) {\\n        return _internalParams;\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function stagedInternalParams() external view returns (InternalParams memory) {\\n        return _stagedInternalParams;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual override(ERC165) returns (bool) {\\n        return super.supportsInterface(interfaceID) || interfaceID == type(IVaultGovernance).interfaceId;\\n    }\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @inheritdoc IVaultGovernance\\n    function stageInternalParams(InternalParams memory newParams) external {\\n        _requireProtocolAdmin();\\n        require(address(newParams.protocolGovernance) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(address(newParams.registry) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        require(address(newParams.singleton) != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        _stagedInternalParams = newParams;\\n        _internalParamsTimestamp = block.timestamp + _internalParams.protocolGovernance.governanceDelay();\\n        emit StagedInternalParams(tx.origin, msg.sender, newParams, _internalParamsTimestamp);\\n    }\\n\\n    /// @inheritdoc IVaultGovernance\\n    function commitInternalParams() external {\\n        _requireProtocolAdmin();\\n        require(_internalParamsTimestamp != 0, ExceptionsLibrary.NULL);\\n        require(block.timestamp >= _internalParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\n        _internalParams = _stagedInternalParams;\\n        delete _internalParamsTimestamp;\\n        delete _stagedInternalParams;\\n        emit CommitedInternalParams(tx.origin, msg.sender, _internalParams);\\n    }\\n\\n    // -------------------  INTERNAL, VIEW  -------------------\\n\\n    function _requireAtLeastStrategy(uint256 nft) internal view {\\n        require(\\n            (_internalParams.protocolGovernance.isAdmin(msg.sender) ||\\n                _internalParams.registry.getApproved(nft) == msg.sender ||\\n                (_internalParams.registry.ownerOf(nft) == msg.sender)),\\n            ExceptionsLibrary.FORBIDDEN\\n        );\\n    }\\n\\n    function _requireProtocolAdmin() internal view {\\n        require(_internalParams.protocolGovernance.isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\\n    }\\n\\n    function _requireAtLeastOperator() internal view {\\n        IProtocolGovernance governance = _internalParams.protocolGovernance;\\n        require(governance.isAdmin(msg.sender) || governance.isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\\n    }\\n\\n    // -------------------  INTERNAL, MUTATING  -------------------\\n\\n    function _createVault(address owner) internal returns (address vault, uint256 nft) {\\n        IProtocolGovernance protocolGovernance = IProtocolGovernance(_internalParams.protocolGovernance);\\n        require(\\n            protocolGovernance.hasPermission(msg.sender, PermissionIdsLibrary.CREATE_VAULT),\\n            ExceptionsLibrary.FORBIDDEN\\n        );\\n        IVaultRegistry vaultRegistry = _internalParams.registry;\\n        nft = vaultRegistry.vaultsCount() + 1;\\n        vault = Clones.cloneDeterministic(address(_internalParams.singleton), bytes32(nft));\\n        vaultRegistry.registerVault(address(vault), owner);\\n    }\\n\\n    /// @notice Set Delayed Strategy Params\\n    /// @param nft Nft of the vault\\n    /// @param params New params\\n    function _stageDelayedStrategyParams(uint256 nft, bytes memory params) internal {\\n        _requireAtLeastStrategy(nft);\\n        _stagedDelayedStrategyParams[nft] = params;\\n        uint256 delayFactor = _delayedStrategyParams[nft].length == 0 ? 0 : 1;\\n        _delayedStrategyParamsTimestamp[nft] =\\n            block.timestamp +\\n            _internalParams.protocolGovernance.governanceDelay() *\\n            delayFactor;\\n    }\\n\\n    /// @notice Commit Delayed Strategy Params\\n    function _commitDelayedStrategyParams(uint256 nft) internal {\\n        _requireAtLeastStrategy(nft);\\n        uint256 thisDelayedStrategyParamsTimestamp = _delayedStrategyParamsTimestamp[nft];\\n        require(thisDelayedStrategyParamsTimestamp != 0, ExceptionsLibrary.NULL);\\n        require(block.timestamp >= thisDelayedStrategyParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\n        _delayedStrategyParams[nft] = _stagedDelayedStrategyParams[nft];\\n        delete _stagedDelayedStrategyParams[nft];\\n        delete _delayedStrategyParamsTimestamp[nft];\\n    }\\n\\n    /// @notice Set Delayed Protocol Per Vault Params\\n    /// @param nft Nft of the vault\\n    /// @param params New params\\n    function _stageDelayedProtocolPerVaultParams(uint256 nft, bytes memory params) internal {\\n        _requireProtocolAdmin();\\n        _stagedDelayedProtocolPerVaultParams[nft] = params;\\n        uint256 delayFactor = _delayedProtocolPerVaultParams[nft].length == 0 ? 0 : 1;\\n        _delayedProtocolPerVaultParamsTimestamp[nft] =\\n            block.timestamp +\\n            _internalParams.protocolGovernance.governanceDelay() *\\n            delayFactor;\\n    }\\n\\n    /// @notice Commit Delayed Protocol Per Vault Params\\n    function _commitDelayedProtocolPerVaultParams(uint256 nft) internal {\\n        _requireProtocolAdmin();\\n        uint256 thisDelayedProtocolPerVaultParamsTimestamp = _delayedProtocolPerVaultParamsTimestamp[nft];\\n        require(thisDelayedProtocolPerVaultParamsTimestamp != 0, ExceptionsLibrary.NULL);\\n        require(block.timestamp >= thisDelayedProtocolPerVaultParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\n        _delayedProtocolPerVaultParams[nft] = _stagedDelayedProtocolPerVaultParams[nft];\\n        delete _stagedDelayedProtocolPerVaultParams[nft];\\n        delete _delayedProtocolPerVaultParamsTimestamp[nft];\\n    }\\n\\n    /// @notice Set Delayed Protocol Params\\n    /// @param params New params\\n    function _stageDelayedProtocolParams(bytes memory params) internal {\\n        _requireProtocolAdmin();\\n        uint256 delayFactor = _delayedProtocolParams.length == 0 ? 0 : 1;\\n        _stagedDelayedProtocolParams = params;\\n        _delayedProtocolParamsTimestamp =\\n            block.timestamp +\\n            _internalParams.protocolGovernance.governanceDelay() *\\n            delayFactor;\\n    }\\n\\n    /// @notice Commit Delayed Protocol Params\\n    function _commitDelayedProtocolParams() internal {\\n        _requireProtocolAdmin();\\n        require(_delayedProtocolParamsTimestamp != 0, ExceptionsLibrary.NULL);\\n        require(block.timestamp >= _delayedProtocolParamsTimestamp, ExceptionsLibrary.TIMESTAMP);\\n        _delayedProtocolParams = _stagedDelayedProtocolParams;\\n        delete _stagedDelayedProtocolParams;\\n        delete _delayedProtocolParamsTimestamp;\\n    }\\n\\n    /// @notice Set immediate strategy params\\n    /// @dev Should require nft > 0\\n    /// @param nft Nft of the vault\\n    /// @param params New params\\n    function _setStrategyParams(uint256 nft, bytes memory params) internal {\\n        _requireAtLeastStrategy(nft);\\n        _strategyParams[nft] = params;\\n    }\\n\\n    /// @notice Set immediate operator params\\n    /// @param params New params\\n    function _setOperatorParams(bytes memory params) internal {\\n        _requireAtLeastOperator();\\n        _operatorParams = params;\\n    }\\n\\n    /// @notice Set immediate protocol params\\n    /// @param params New params\\n    function _setProtocolParams(bytes memory params) internal {\\n        _requireProtocolAdmin();\\n        _protocolParams = params;\\n    }\\n\\n    // --------------------------  EVENTS  --------------------------\\n\\n    /// @notice Emitted when InternalParams are staged for commit\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param params New params that were staged for commit\\n    /// @param when When the params could be committed\\n    event StagedInternalParams(address indexed origin, address indexed sender, InternalParams params, uint256 when);\\n\\n    /// @notice Emitted when InternalParams are staged for commit\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param params New params that were staged for commit\\n    event CommitedInternalParams(address indexed origin, address indexed sender, InternalParams params);\\n\\n    /// @notice Emitted when New Vault is deployed\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param vaultTokens Vault tokens for this vault\\n    /// @param options Options for deploy. The details of the options structure are specified in subcontracts\\n    /// @param owner Owner of the VaultRegistry NFT for this vault\\n    /// @param vaultAddress Address of the new Vault\\n    /// @param vaultNft VaultRegistry NFT for the new Vault\\n    event DeployedVault(\\n        address indexed origin,\\n        address indexed sender,\\n        address[] vaultTokens,\\n        bytes options,\\n        address owner,\\n        address vaultAddress,\\n        uint256 vaultNft\\n    );\\n}\\n\",\"keccak256\":\"0xbacab712486bcd6b988fe21b3641f7d21fbb9f900a354b18a60d4413960ec3c6\",\"license\":\"BSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "CommitDelayedProtocolParams(address,address,(uint256,address))": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "params": "New params that are committed",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "CommitDelayedProtocolPerVaultParams(address,address,uint256,(uint256))": {
        "params": {
          "nft": "VaultRegistry NFT of the vault",
          "origin": "Origin of the transaction (tx.origin)",
          "params": "New params that are committed",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "CommitDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address))": {
        "params": {
          "nft": "VaultRegistry NFT of the vault",
          "origin": "Origin of the transaction (tx.origin)",
          "params": "New params that are committed",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "SetOperatorParams(address,address,(bool))": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "params": "New params that are set",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "SetStrategyParams(address,address,uint256,(uint256,uint256))": {
        "params": {
          "nft": "VaultRegistry NFT of the vault",
          "origin": "Origin of the transaction (tx.origin)",
          "params": "New params that are set",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "StageDelayedProtocolParams(address,address,(uint256,address),uint256)": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "params": "New params that were staged for commit",
          "sender": "Sender of the call (msg.sender)",
          "when": "When the params could be committed"
        }
      },
      "StageDelayedProtocolPerVaultParams(address,address,uint256,(uint256),uint256)": {
        "params": {
          "nft": "VaultRegistry NFT of the vault",
          "origin": "Origin of the transaction (tx.origin)",
          "params": "New params that were staged for commit",
          "sender": "Sender of the call (msg.sender)",
          "when": "When the params could be committed"
        }
      },
      "StageDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address),uint256)": {
        "params": {
          "nft": "VaultRegistry NFT of the vault",
          "origin": "Origin of the transaction (tx.origin)",
          "params": "New params that were staged for commit",
          "sender": "Sender of the call (msg.sender)",
          "when": "When the params could be committed"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "commitDelayedProtocolPerVaultParams(uint256)": {
        "details": "Can only be called after delayedProtocolPerVaultParamsTimestamp",
        "params": {
          "nft": "VaultRegistry NFT of the vault"
        }
      },
      "commitDelayedStrategyParams(uint256)": {
        "details": "Can only be called after delayedStrategyParamsTimestamp",
        "params": {
          "nft": "VaultRegistry NFT of the vault"
        }
      },
      "constructor": {
        "params": {
          "delayedProtocolParams_": "Initial Protocol Params",
          "internalParams_": "Initial Internal Params"
        }
      },
      "createVault(address[],address,uint256[],address)": {
        "params": {
          "owner_": "Owner of the vault NFT",
          "strategy_": "The address that will have approvals for subvaultNfts",
          "subvaultNfts_": "The NFTs of the subvaults that will be aggregated by this ERC20RootVault",
          "vaultTokens_": "ERC20 tokens that will be managed by this Vault"
        }
      },
      "delayedProtocolPerVaultParams(uint256)": {
        "params": {
          "nft": "VaultRegistry NFT of the vault"
        }
      },
      "delayedProtocolPerVaultParamsTimestamp(uint256)": {
        "params": {
          "nft": "Nft of the vault"
        }
      },
      "delayedStrategyParams(uint256)": {
        "params": {
          "nft": "VaultRegistry NFT of the vault"
        }
      },
      "delayedStrategyParamsTimestamp(uint256)": {
        "params": {
          "nft": "Nft of the vault"
        }
      },
      "setOperatorParams((bool))": {
        "params": {
          "params": "New params"
        }
      },
      "setStrategyParams(uint256,(uint256,uint256))": {
        "params": {
          "nft": "Nft of the vault",
          "params": "New params"
        }
      },
      "stageDelayedProtocolParams((uint256,address))": {
        "details": "Can only be called after delayedProtocolParamsTimestamp.",
        "params": {
          "params": "New params"
        }
      },
      "stageDelayedProtocolPerVaultParams(uint256,(uint256))": {
        "params": {
          "nft": "VaultRegistry NFT of the vault",
          "params": "New params"
        }
      },
      "stageDelayedStrategyParams(uint256,(address,address,bool,uint256,uint256,address,address))": {
        "params": {
          "nft": "VaultRegistry NFT of the vault",
          "params": "New params"
        }
      },
      "stageInternalParams((address,address,address))": {
        "params": {
          "newParams": "New Internal Params"
        }
      },
      "stagedDelayedProtocolPerVaultParams(uint256)": {
        "params": {
          "nft": "VaultRegistry NFT of the vault"
        }
      },
      "stagedDelayedStrategyParams(uint256)": {
        "params": {
          "nft": "VaultRegistry NFT of the vault"
        }
      },
      "stagedInternalParams()": {
        "details": "The Internal Params could be committed after internalParamsTimestamp"
      },
      "strategyParams(uint256)": {
        "params": {
          "nft": "VaultRegistry NFT of the vault"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CommitDelayedProtocolParams(address,address,(uint256,address))": {
        "notice": "Emitted when new DelayedProtocolParams are committed"
      },
      "CommitDelayedProtocolPerVaultParams(address,address,uint256,(uint256))": {
        "notice": "Emitted when new DelayedProtocolPerVaultParams are committed"
      },
      "CommitDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address))": {
        "notice": "Emitted when new DelayedStrategyParams are committed"
      },
      "CommitedInternalParams(address,address,(address,address,address))": {
        "notice": "Emitted when InternalParams are staged for commit"
      },
      "DeployedVault(address,address,address[],bytes,address,address,uint256)": {
        "notice": "Emitted when New Vault is deployed"
      },
      "SetOperatorParams(address,address,(bool))": {
        "notice": "Emitted when new OperatorParams are set."
      },
      "SetStrategyParams(address,address,uint256,(uint256,uint256))": {
        "notice": "Emitted when new StrategyParams are set."
      },
      "StageDelayedProtocolParams(address,address,(uint256,address),uint256)": {
        "notice": "Emitted when new DelayedProtocolParams are staged for commit"
      },
      "StageDelayedProtocolPerVaultParams(address,address,uint256,(uint256),uint256)": {
        "notice": "Emitted when new DelayedProtocolPerVaultParams are staged for commit"
      },
      "StageDelayedStrategyParams(address,address,uint256,(address,address,bool,uint256,uint256,address,address),uint256)": {
        "notice": "Emitted when new DelayedStrategyParams are staged for commit"
      },
      "StagedInternalParams(address,address,(address,address,address),uint256)": {
        "notice": "Emitted when InternalParams are staged for commit"
      }
    },
    "kind": "user",
    "methods": {
      "MAX_MANAGEMENT_FEE()": {
        "notice": "Number of maximum management fee"
      },
      "MAX_PERFORMANCE_FEE()": {
        "notice": "Number of maximum performance fee"
      },
      "MAX_PROTOCOL_FEE()": {
        "notice": "Number of maximum protocol fee"
      },
      "commitDelayedProtocolParams()": {
        "notice": "Commit Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
      },
      "commitDelayedProtocolPerVaultParams(uint256)": {
        "notice": "Commit Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
      },
      "commitDelayedStrategyParams(uint256)": {
        "notice": "Commit Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay."
      },
      "commitInternalParams()": {
        "notice": "Commit staged Internal Params."
      },
      "constructor": {
        "notice": "Creates a new contract."
      },
      "createVault(address[],address,uint256[],address)": {
        "notice": "Deploys a new vault."
      },
      "delayedProtocolParams()": {
        "notice": "Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
      },
      "delayedProtocolParamsTimestamp()": {
        "notice": "Timestamp in unix time seconds after which staged Delayed Protocol Params could be committed."
      },
      "delayedProtocolPerVaultParams(uint256)": {
        "notice": "Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
      },
      "delayedProtocolPerVaultParamsTimestamp(uint256)": {
        "notice": "Timestamp in unix time seconds after which staged Delayed Protocol Params Per Vault could be committed."
      },
      "delayedStrategyParams(uint256)": {
        "notice": "Delayed Strategy Params"
      },
      "delayedStrategyParamsTimestamp(uint256)": {
        "notice": "Timestamp in unix time seconds after which staged Delayed Strategy Params could be committed."
      },
      "internalParams()": {
        "notice": "Internal Params of the contract."
      },
      "internalParamsTimestamp()": {
        "notice": "Timestamp in unix time seconds after which staged Internal Params could be committed."
      },
      "operatorParams()": {
        "notice": "Operator Params."
      },
      "setOperatorParams((bool))": {
        "notice": "Set Operator params, i.e. Params that could be changed by Operator or Protocol Governance immediately."
      },
      "setStrategyParams(uint256,(uint256,uint256))": {
        "notice": "Set Strategy params, i.e. Params that could be changed by Strategy or Protocol Governance immediately."
      },
      "stageDelayedProtocolParams((uint256,address))": {
        "notice": "Stage Delayed Protocol Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
      },
      "stageDelayedProtocolPerVaultParams(uint256,(uint256))": {
        "notice": "Stage Delayed Protocol Per Vault Params, i.e. Params that could be changed by Protocol Governance with Protocol Governance delay."
      },
      "stageDelayedStrategyParams(uint256,(address,address,bool,uint256,uint256,address,address))": {
        "notice": "Stage Delayed Strategy Params, i.e. Params that could be changed by Strategy or Protocol Governance with Protocol Governance delay."
      },
      "stageInternalParams((address,address,address))": {
        "notice": "Stage new Internal Params."
      },
      "stagedDelayedProtocolParams()": {
        "notice": "Delayed Protocol Params staged for commit after delay."
      },
      "stagedDelayedProtocolPerVaultParams(uint256)": {
        "notice": "Delayed Protocol Per Vault Params staged for commit after delay."
      },
      "stagedDelayedStrategyParams(uint256)": {
        "notice": "Delayed Strategy Params staged for commit after delay."
      },
      "stagedInternalParams()": {
        "notice": "Staged new Internal Params."
      },
      "strategyParams(uint256)": {
        "notice": "Strategy Params."
      }
    },
    "notice": "Governance that manages all Lp Issuers params and can deploy a new LpIssuer Vault.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31661,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_internalParams",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(InternalParams)10125_storage"
      },
      {
        "astId": 31664,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_stagedInternalParams",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(InternalParams)10125_storage"
      },
      {
        "astId": 31666,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_internalParamsTimestamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 31670,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_delayedStrategyParams",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 31674,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_stagedDelayedStrategyParams",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 31678,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_delayedStrategyParamsTimestamp",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 31682,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_delayedProtocolPerVaultParams",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 31686,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_stagedDelayedProtocolPerVaultParams",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 31690,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_delayedProtocolPerVaultParamsTimestamp",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 31692,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_delayedProtocolParams",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes_storage"
      },
      {
        "astId": 31694,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_stagedDelayedProtocolParams",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes_storage"
      },
      {
        "astId": 31696,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_delayedProtocolParamsTimestamp",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 31700,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_strategyParams",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 31702,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_protocolParams",
        "offset": 0,
        "slot": "17",
        "type": "t_bytes_storage"
      },
      {
        "astId": 31704,
        "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
        "label": "_operatorParams",
        "offset": 0,
        "slot": "18",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IProtocolGovernance)7075": {
        "encoding": "inplace",
        "label": "contract IProtocolGovernance",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)10110": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultRegistry)7219": {
        "encoding": "inplace",
        "label": "contract IVaultRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(InternalParams)10125_storage": {
        "encoding": "inplace",
        "label": "struct IVaultGovernance.InternalParams",
        "members": [
          {
            "astId": 10118,
            "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
            "label": "protocolGovernance",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IProtocolGovernance)7075"
          },
          {
            "astId": 10121,
            "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
            "label": "registry",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IVaultRegistry)7219"
          },
          {
            "astId": 10124,
            "contract": "contracts/vaults/ERC20RootVaultGovernance.sol:ERC20RootVaultGovernance",
            "label": "singleton",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IVault)10110"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}