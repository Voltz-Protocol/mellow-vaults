{
  "address": "0xDc9C17662133fB865E7bA3198B67c53a617B2153",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AllStagedPermissionGrantsRolledBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AllStagedValidatorsRolledBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxTokensPerVault",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governanceDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "protocolTreasury",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "forceAllowMask",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawLimit",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IProtocolGovernance.Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "ParamsCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxTokensPerVault",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governanceDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "protocolTreasury",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "forceAllowMask",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawLimit",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IProtocolGovernance.Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "ParamsStaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "PermissionGrantsCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "permissionIds",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "PermissionGrantsStaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "permissionIds",
          "type": "uint8[]"
        }
      ],
      "name": "PermissionsRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "name": "UnitPriceCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UnitPriceRolledBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitPrice",
          "type": "uint256"
        }
      ],
      "name": "UnitPriceStaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "ValidatorCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "ValidatorRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "at",
          "type": "uint256"
        }
      ],
      "name": "ValidatorStaged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_DELEGATE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_GOVERNANCE_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_WITHDRAW_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "permissionId",
          "type": "uint8"
        }
      ],
      "name": "addressesByPermission",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitAllPermissionGrantsSurpassedDelay",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitAllValidatorsSurpassedDelay",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addressesCommitted",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stagedAddress",
          "type": "address"
        }
      ],
      "name": "commitPermissionGrants",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "commitUnitPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stagedAddress",
          "type": "address"
        }
      ],
      "name": "commitValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractNameBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractVersionBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceAllowMask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "permissionIds",
          "type": "uint8[]"
        }
      ],
      "name": "hasAllPermissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "permissionId",
          "type": "uint8"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokensPerVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "params",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxTokensPerVault",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governanceDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "protocolTreasury",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "forceAllowMask",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolGovernance.Params",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permissionAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissionMasks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "permissionIds",
          "type": "uint8[]"
        }
      ],
      "name": "revokePermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "revokeValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollbackStagedPermissionGrants",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollbackStagedValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rollbackUnitPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxTokensPerVault",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governanceDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "protocolTreasury",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "forceAllowMask",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolGovernance.Params",
          "name": "newParams",
          "type": "tuple"
        }
      ],
      "name": "stageParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "permissionIds",
          "type": "uint8[]"
        }
      ],
      "name": "stagePermissionGrants",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "stageUnitPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "stageValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxTokensPerVault",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "governanceDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "protocolTreasury",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "forceAllowMask",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IProtocolGovernance.Params",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedParamsTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedPermissionGrantsAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stagedPermissionGrantsMasks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stagedPermissionGrantsTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stagedUnitPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stagedUnitPricesTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stagedValidators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stagedValidatorsAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stagedValidatorsTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unitPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "validatorsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorsAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa01d5fc91851c26d5c7c15808d65d02be8f2d414a9ae8b457840f9bd2ef5fa2b",
  "receipt": {
    "to": null,
    "from": "0x57672573c783053ec08657c2F94ad3779ab85bBF",
    "contractAddress": "0xc40f96EBE0ad4Be1Bc4462Bd25b3bddBfC36FBDA",
    "transactionIndex": 19,
    "gasUsed": "2807402",
    "logsBloom": "0x
    "blockHash": "0x235c01b79ab67a8664b17d437953e333534dadb95f7bf24631e6290ad278cd96",
    "transactionHash": "0xa01d5fc91851c26d5c7c15808d65d02be8f2d414a9ae8b457840f9bd2ef5fa2b",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 15301662,
        "transactionHash": "0xa01d5fc91851c26d5c7c15808d65d02be8f2d414a9ae8b457840f9bd2ef5fa2b",
        "address": "0xc40f96EBE0ad4Be1Bc4462Bd25b3bddBfC36FBDA",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622",
          "0x00000000000000000000000057672573c783053ec08657c2f94ad3779ab85bbf",
          "0x00000000000000000000000057672573c783053ec08657c2f94ad3779ab85bbf"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x235c01b79ab67a8664b17d437953e333534dadb95f7bf24631e6290ad278cd96"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 15301662,
        "transactionHash": "0xa01d5fc91851c26d5c7c15808d65d02be8f2d414a9ae8b457840f9bd2ef5fa2b",
        "address": "0xc40f96EBE0ad4Be1Bc4462Bd25b3bddBfC36FBDA",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d8",
          "0x00000000000000000000000057672573c783053ec08657c2f94ad3779ab85bbf",
          "0x00000000000000000000000057672573c783053ec08657c2f94ad3779ab85bbf"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0x235c01b79ab67a8664b17d437953e333534dadb95f7bf24631e6290ad278cd96"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 15301662,
        "transactionHash": "0xa01d5fc91851c26d5c7c15808d65d02be8f2d414a9ae8b457840f9bd2ef5fa2b",
        "address": "0xc40f96EBE0ad4Be1Bc4462Bd25b3bddBfC36FBDA",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xf23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d8",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d8"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x235c01b79ab67a8664b17d437953e333534dadb95f7bf24631e6290ad278cd96"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 15301662,
        "transactionHash": "0xa01d5fc91851c26d5c7c15808d65d02be8f2d414a9ae8b457840f9bd2ef5fa2b",
        "address": "0xc40f96EBE0ad4Be1Bc4462Bd25b3bddBfC36FBDA",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xc171260023d22a25a00a2789664c9334017843b831138c8ef03cc8897e5873d7",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xf23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d8"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x235c01b79ab67a8664b17d437953e333534dadb95f7bf24631e6290ad278cd96"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 15301662,
        "transactionHash": "0xa01d5fc91851c26d5c7c15808d65d02be8f2d414a9ae8b457840f9bd2ef5fa2b",
        "address": "0xc40f96EBE0ad4Be1Bc4462Bd25b3bddBfC36FBDA",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xc171260023d22a25a00a2789664c9334017843b831138c8ef03cc8897e5873d7"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x235c01b79ab67a8664b17d437953e333534dadb95f7bf24631e6290ad278cd96"
      }
    ],
    "blockNumber": 15301662,
    "cumulativeGasUsed": "4291042",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57672573c783053ec08657c2F94ad3779ab85bBF"
  ],
  "solcInputHash": "c1e91400a5166b9bcd4a13438127f0f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllStagedPermissionGrantsRolledBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllStagedValidatorsRolledBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTokensPerVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governanceDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"forceAllowMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IProtocolGovernance.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"ParamsCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTokensPerVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governanceDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"forceAllowMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawLimit\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IProtocolGovernance.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"ParamsStaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PermissionGrantsCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"permissionIds\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"PermissionGrantsStaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"permissionIds\",\"type\":\"uint8[]\"}],\"name\":\"PermissionsRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"UnitPriceCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnitPriceRolledBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"}],\"name\":\"UnitPriceStaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ValidatorCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ValidatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"ValidatorStaged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_DELEGATE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GOVERNANCE_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"permissionId\",\"type\":\"uint8\"}],\"name\":\"addressesByPermission\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitAllPermissionGrantsSurpassedDelay\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitAllValidatorsSurpassedDelay\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesCommitted\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stagedAddress\",\"type\":\"address\"}],\"name\":\"commitPermissionGrants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"commitUnitPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stagedAddress\",\"type\":\"address\"}],\"name\":\"commitValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractNameBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersionBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceAllowMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"permissionIds\",\"type\":\"uint8[]\"}],\"name\":\"hasAllPermissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"permissionId\",\"type\":\"uint8\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTokensPerVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governanceDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"forceAllowMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolGovernance.Params\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissionMasks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"permissionIds\",\"type\":\"uint8[]\"}],\"name\":\"revokePermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"revokeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollbackStagedPermissionGrants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollbackStagedValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rollbackUnitPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTokensPerVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governanceDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"forceAllowMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolGovernance.Params\",\"name\":\"newParams\",\"type\":\"tuple\"}],\"name\":\"stageParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"permissionIds\",\"type\":\"uint8[]\"}],\"name\":\"stagePermissionGrants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"stageUnitPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"stageValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTokensPerVault\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"governanceDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"forceAllowMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IProtocolGovernance.Params\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedParamsTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedPermissionGrantsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stagedPermissionGrantsMasks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stagedPermissionGrantsTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stagedUnitPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stagedUnitPricesTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stagedValidators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stagedValidatorsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stagedValidatorsTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unitPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"validatorsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AllStagedPermissionGrantsRolledBack(address,address)\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"sender\":\"Sender of the call (msg.sender)\"}},\"AllStagedValidatorsRolledBack(address,address)\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"sender\":\"Sender of the call (msg.sender)\"}},\"ParamsCommitted(address,address,(uint256,uint256,address,uint256,uint256))\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"Committed parameters\",\"sender\":\"Sender of the call (msg.sender)\"}},\"ParamsStaged(address,address,uint256,(uint256,uint256,address,uint256,uint256))\":{\"params\":{\"at\":\"Timestamp when the pending parameters could be committed\",\"origin\":\"Origin of the transaction (tx.origin)\",\"params\":\"Pending parameters\",\"sender\":\"Sender of the call (msg.sender)\"}},\"PermissionGrantsCommitted(address,address,address)\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"sender\":\"Sender of the call (msg.sender)\",\"target\":\"Target address\"}},\"PermissionGrantsStaged(address,address,address,uint8[],uint256)\":{\"params\":{\"at\":\"Timestamp when the staged permissions could be committed\",\"origin\":\"Origin of the transaction (tx.origin)\",\"permissionIds\":\"Permission IDs to be granted\",\"sender\":\"Sender of the call (msg.sender)\",\"target\":\"Target address\"}},\"PermissionsRevoked(address,address,address,uint8[])\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"permissionIds\":\"Permission IDs to be revoked\",\"sender\":\"Sender of the call (msg.sender)\",\"target\":\"Target address\"}},\"ValidatorCommitted(address,address,address)\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"sender\":\"Sender of the call (msg.sender)\",\"target\":\"Target address\"}},\"ValidatorRevoked(address,address,address)\":{\"params\":{\"origin\":\"Origin of the transaction (tx.origin)\",\"sender\":\"Sender of the call (msg.sender)\",\"target\":\"Target address\"}},\"ValidatorStaged(address,address,address,address,uint256)\":{\"params\":{\"at\":\"Timestamp when the staged permissions could be committed\",\"origin\":\"Origin of the transaction (tx.origin)\",\"sender\":\"Sender of the call (msg.sender)\",\"target\":\"Target address\",\"validator\":\"Staged validator\"}}},\"kind\":\"dev\",\"methods\":{\"addressesByPermission(uint8)\":{\"params\":{\"permissionId\":\"Id of the permission to check.\"},\"returns\":{\"addresses\":\"A list of dirty addresses.\"}},\"commitAllPermissionGrantsSurpassedDelay()\":{\"returns\":{\"addresses\":\"An array of addresses for which permission grants were committed.\"}},\"commitAllValidatorsSurpassedDelay()\":{\"returns\":{\"addressesCommitted\":\"Addresses for which validators were committed\"}},\"commitPermissionGrants(address)\":{\"details\":\"Reverts if governance delay has not passed yet.\",\"params\":{\"target\":\"The given address.\"}},\"commitUnitPrice(address)\":{\"params\":{\"token\":\"Address of the token\"}},\"commitValidator(address)\":{\"details\":\"Reverts if governance delay has not passed yet.\",\"params\":{\"target\":\"The given address.\"}},\"constructor\":{\"params\":{\"admin\":\"Initial admin of the contract\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasAllPermissions(address,uint8[])\":{\"params\":{\"permissionIds\":\"A list of permissions to check\",\"target\":\"Address to check\"}},\"hasPermission(address,uint8)\":{\"params\":{\"addr\":\"Address to check\",\"permissionId\":\"Permission to check\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"params\":{\"sender\":\"Adddress to check\"},\"returns\":{\"_0\":\"`true` if sender is an admin, `false` otherwise\"}},\"isOperator(address)\":{\"params\":{\"sender\":\"Adddress to check\"},\"returns\":{\"_0\":\"`true` if sender is an admin, `false` otherwise\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokePermissions(address,uint8[])\":{\"params\":{\"permissionIds\":\"A list of permission ids to revoke.\",\"target\":\"The given address.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"revokeValidator(address)\":{\"params\":{\"target\":\"The given address\"}},\"rollbackUnitPrice(address)\":{\"params\":{\"token\":\"Address of the token\"}},\"stageParams((uint256,uint256,address,uint256,uint256))\":{\"params\":{\"newParams\":\"New protocol parameters to set.\"}},\"stagePermissionGrants(address,uint8[])\":{\"params\":{\"permissionIds\":\"A list of permission ids to grant\",\"target\":\"Target address\"}},\"stageUnitPrice(address,uint256)\":{\"params\":{\"token\":\"Address of the token\",\"value\":\"The amount of token\"}},\"stageValidator(address,address)\":{\"params\":{\"target\":\"The given address\",\"validator\":\"The validator for the given address\"}},\"validatorsAddress(uint256)\":{\"params\":{\"i\":\"The number of address\"},\"returns\":{\"_0\":\"Validator address\"}},\"withdrawLimit(address)\":{\"params\":{\"token\":\"Address of the token\"},\"returns\":{\"_0\":\"Withdraw limit per token per block\"}}},\"stateVariables\":{\"permissionMasks\":{\"params\":{\"target\":\"The given address\"},\"return\":\"Bitmask\",\"returns\":{\"_0\":\"Bitmask\"}},\"stagedParamsTimestamp\":{\"return\":\"Zero if there are no staged parameters, timestamp otherwise.\",\"returns\":{\"_0\":\"Zero if there are no staged parameters, timestamp otherwise.\"}},\"stagedPermissionGrantsMasks\":{\"params\":{\"target\":\"The given address\"},\"return\":\"Bitmask\",\"returns\":{\"_0\":\"Bitmask\"}},\"stagedPermissionGrantsTimestamps\":{\"params\":{\"target\":\"The given address\"},\"return\":\"Zero if there are no staged permission grants, timestamp otherwise\",\"returns\":{\"_0\":\"Zero if there are no staged permission grants, timestamp otherwise\"}},\"stagedValidators\":{\"params\":{\"target\":\"The given address\"},\"return\":\"Validator\",\"returns\":{\"_0\":\"Validator\"}},\"stagedValidatorsTimestamps\":{\"params\":{\"target\":\"The given address\"},\"return\":\"Zero if there are no staged permission grants, timestamp otherwise\",\"returns\":{\"_0\":\"Zero if there are no staged permission grants, timestamp otherwise\"}},\"validators\":{\"params\":{\"target\":\"The given address\"},\"return\":\"Validator\",\"returns\":{\"_0\":\"Validator\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AllStagedPermissionGrantsRolledBack(address,address)\":{\"notice\":\"Emitted when staged permissions are rolled back\"},\"AllStagedValidatorsRolledBack(address,address)\":{\"notice\":\"Emitted when staged validators are rolled back\"},\"ParamsCommitted(address,address,(uint256,uint256,address,uint256,uint256))\":{\"notice\":\"Emitted when pending parameters are committed\"},\"ParamsStaged(address,address,uint256,(uint256,uint256,address,uint256,uint256))\":{\"notice\":\"Emitted when pending parameters are set\"},\"PermissionGrantsCommitted(address,address,address)\":{\"notice\":\"Emitted when staged permissions are comitted for specific address\"},\"PermissionGrantsStaged(address,address,address,uint8[],uint256)\":{\"notice\":\"Emitted when new permissions are staged to be granted for specific address.\"},\"PermissionsRevoked(address,address,address,uint8[])\":{\"notice\":\"Emitted when permissions are revoked\"},\"UnitPriceCommitted(address,address,address,uint256)\":{\"notice\":\"UnitPrice committed\"},\"UnitPriceRolledBack(address,address,address)\":{\"notice\":\"UnitPrice rolled back\"},\"UnitPriceStaged(address,address,address,uint256)\":{\"notice\":\"UnitPrice staged for commit\"},\"ValidatorCommitted(address,address,address)\":{\"notice\":\"Emitted when staged validators are comitted for specific address\"},\"ValidatorRevoked(address,address,address)\":{\"notice\":\"Validator revoked\"},\"ValidatorStaged(address,address,address,address,uint256)\":{\"notice\":\"Emitted when validators are staged to be granted for specific address.\"}},\"kind\":\"user\",\"methods\":{\"addressesByPermission(uint8)\":{\"notice\":\"Return all addresses where rawPermissionMask bit for permissionId is set to 1.\"},\"commitAllPermissionGrantsSurpassedDelay()\":{\"notice\":\"Commites all staged permission grants for which governance delay passed.\"},\"commitAllValidatorsSurpassedDelay()\":{\"notice\":\"Commites all staged validators for which governance delay passed\"},\"commitParams()\":{\"notice\":\"Commits staged protocol params. Reverts if governance delay has not passed yet.\"},\"commitPermissionGrants(address)\":{\"notice\":\"Commits permission grants for the given address.\"},\"commitUnitPrice(address)\":{\"notice\":\"Commit staged unit price\"},\"commitValidator(address)\":{\"notice\":\"Commits validator for the given address.\"},\"constructor\":{\"notice\":\"Creates a new contract\"},\"forceAllowMask()\":{\"notice\":\"Permissions mask which defines if ordinary permission should be reverted. This bitmask is xored with ordinary mask.\"},\"governanceDelay()\":{\"notice\":\"The delay for committing any governance params.\"},\"hasAllPermissions(address,uint8[])\":{\"notice\":\"Checks if address has all permissions.\"},\"hasPermission(address,uint8)\":{\"notice\":\"Checks if address has permission or given permission is force allowed for any address.\"},\"isAdmin(address)\":{\"notice\":\"Checks if the address is ADMIN or ADMIN_DELEGATE.\"},\"isOperator(address)\":{\"notice\":\"Checks if the address is OPERATOR.\"},\"maxTokensPerVault()\":{\"notice\":\"Max different ERC20 token addresses that could be managed by the protocol.\"},\"params()\":{\"notice\":\"Current protocol parameters.\"},\"permissionAddresses()\":{\"notice\":\"Addresses for which non-zero permissions are set.\"},\"permissionMasks(address)\":{\"notice\":\"Permission bitmask for the given address.\"},\"protocolTreasury()\":{\"notice\":\"The address of the protocol treasury.\"},\"revokePermissions(address,uint8[])\":{\"notice\":\"Revoke permission instantly from the given address.\"},\"revokeValidator(address)\":{\"notice\":\"Revoke validator instantly from the given address.\"},\"rollbackStagedPermissionGrants()\":{\"notice\":\"Rollback all staged granted permission grant.\"},\"rollbackStagedValidators()\":{\"notice\":\"Rollback all staged validators.\"},\"rollbackUnitPrice(address)\":{\"notice\":\"Reset staged value\"},\"stageParams((uint256,uint256,address,uint256,uint256))\":{\"notice\":\"Sets new pending params that could have been committed after governance delay expires.\"},\"stagePermissionGrants(address,uint8[])\":{\"notice\":\"Stage granted permissions that could have been committed after governance delay expires. Resets commit delay and permissions if there are already staged permissions for this address.\"},\"stageUnitPrice(address,uint256)\":{\"notice\":\"Stage estimated amount of token worth 1 USD staged for commit.\"},\"stageValidator(address,address)\":{\"notice\":\"Stages a new validator for the given address\"},\"stagedParams()\":{\"notice\":\"Staged pending protocol parameters.\"},\"stagedParamsTimestamp()\":{\"notice\":\"Timestamp after which staged pending protocol parameters can be committed\"},\"stagedPermissionGrantsAddresses()\":{\"notice\":\"Permission addresses staged for commit.\"},\"stagedPermissionGrantsMasks(address)\":{\"notice\":\"Staged granted permission bitmask for the given address.\"},\"stagedPermissionGrantsTimestamps(address)\":{\"notice\":\"Timestamp after which staged granted permissions for the given address can be committed.\"},\"stagedUnitPrices(address)\":{\"notice\":\"Estimated amount of token worth 1 USD staged for commit.\"},\"stagedUnitPricesTimestamps(address)\":{\"notice\":\"Timestamp after which staged unit prices for the given token can be committed.\"},\"stagedValidators(address)\":{\"notice\":\"Staged validator for the given address.\"},\"stagedValidatorsAddresses()\":{\"notice\":\"Addresses that has staged validators.\"},\"stagedValidatorsTimestamps(address)\":{\"notice\":\"Timestamp after which staged granted permissions for the given address can be committed.\"},\"unitPrices(address)\":{\"notice\":\"Estimated amount of token worth 1 USD.\"},\"validators(address)\":{\"notice\":\"Validator for the given address.\"},\"validatorsAddress(uint256)\":{\"notice\":\"Address that has validators.\"},\"validatorsAddresses()\":{\"notice\":\"Addresses that has validators.\"},\"withdrawLimit(address)\":{\"notice\":\"Withdraw limit per token per block.\"}},\"notice\":\"Governance that manages all params common for Mellow Permissionless Vaults protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolGovernance.sol\":\"ProtocolGovernance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe5f33b553368181a44ff0c77942ed831152bfa731bc4d1c12a363ef6918366b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0xa710f7baaa6888ad46a0bd872b7a55fef65fa2caabd0a568961c71aed054cc12\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x693d1a6333975d5bd166fcc844874f96affecbf45dc5c34fa7d172248d74c06b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3c3ef4fb25def71f5f18af554ca938950eb9cf218fda073ed2c69b9203c03455\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0x6bc274ccbd0d69625fbad71d3e512b05d754d6c85b8ea8505913f0fdf45872f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xfac19be5f0d198ac556731a5589a4ae1c0c1622437d0b6b53b2cf3f317071acd\",\"license\":\"MIT\"},\"contracts/ProtocolGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\nimport \\\"./interfaces/IProtocolGovernance.sol\\\";\\nimport \\\"./libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"./UnitPricesGovernance.sol\\\";\\nimport \\\"./utils/ContractMeta.sol\\\";\\n\\n/// @notice Governance that manages all params common for Mellow Permissionless Vaults protocol.\\ncontract ProtocolGovernance is ContractMeta, IProtocolGovernance, ERC165, UnitPricesGovernance, Multicall {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 public constant MAX_GOVERNANCE_DELAY = 7 days;\\n    uint256 public constant MIN_WITHDRAW_LIMIT = 200_000;\\n\\n    /// @inheritdoc IProtocolGovernance\\n    mapping(address => uint256) public stagedPermissionGrantsTimestamps;\\n    /// @inheritdoc IProtocolGovernance\\n    mapping(address => uint256) public stagedPermissionGrantsMasks;\\n    /// @inheritdoc IProtocolGovernance\\n    mapping(address => uint256) public permissionMasks;\\n\\n    /// @inheritdoc IProtocolGovernance\\n    mapping(address => uint256) public stagedValidatorsTimestamps;\\n    /// @inheritdoc IProtocolGovernance\\n    mapping(address => address) public stagedValidators;\\n    /// @inheritdoc IProtocolGovernance\\n    mapping(address => address) public validators;\\n\\n    /// @inheritdoc IProtocolGovernance\\n    uint256 public stagedParamsTimestamp;\\n\\n    EnumerableSet.AddressSet private _stagedPermissionGrantsAddresses;\\n    EnumerableSet.AddressSet private _permissionAddresses;\\n    EnumerableSet.AddressSet private _validatorsAddresses;\\n    EnumerableSet.AddressSet private _stagedValidatorsAddresses;\\n\\n    Params private _stagedParams;\\n    Params private _params;\\n\\n    /// @notice Creates a new contract\\n    /// @param admin Initial admin of the contract\\n    constructor(address admin) UnitPricesGovernance(admin) {}\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function stagedParams() public view returns (Params memory) {\\n        return _stagedParams;\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function params() public view returns (Params memory) {\\n        return _params;\\n    }\\n\\n    function stagedValidatorsAddresses() external view returns (address[] memory) {\\n        return _stagedValidatorsAddresses.values();\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function validatorsAddresses() external view returns (address[] memory) {\\n        return _validatorsAddresses.values();\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function validatorsAddress(uint256 i) external view returns (address) {\\n        return _validatorsAddresses.at(i);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function permissionAddresses() external view returns (address[] memory) {\\n        return _permissionAddresses.values();\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory) {\\n        return _stagedPermissionGrantsAddresses.values();\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory addresses) {\\n        uint256 length = _permissionAddresses.length();\\n        addresses = new address[](length);\\n        uint256 addressesLength = 0;\\n        uint256 mask = 1 << permissionId;\\n        for (uint256 i = 0; i < length; i++) {\\n            address addr = _permissionAddresses.at(i);\\n            if (permissionMasks[addr] & mask != 0) {\\n                addresses[addressesLength] = addr;\\n                addressesLength++;\\n            }\\n        }\\n        // shrink to fit\\n        assembly {\\n            mstore(addresses, addressesLength)\\n        }\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function hasPermission(address target, uint8 permissionId) external view returns (bool) {\\n        return ((permissionMasks[target] | _params.forceAllowMask) & (1 << (permissionId))) != 0;\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool) {\\n        uint256 submask = _permissionIdsToMask(permissionIds);\\n        uint256 mask = permissionMasks[target] | _params.forceAllowMask;\\n        return mask & submask == submask;\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function maxTokensPerVault() external view returns (uint256) {\\n        return _params.maxTokensPerVault;\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function governanceDelay() external view returns (uint256) {\\n        return _params.governanceDelay;\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function protocolTreasury() external view returns (address) {\\n        return _params.protocolTreasury;\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function forceAllowMask() external view returns (uint256) {\\n        return _params.forceAllowMask;\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function withdrawLimit(address token) external view returns (uint256) {\\n        return _params.withdrawLimit * unitPrices[token];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(UnitPricesGovernance, IERC165, ERC165)\\n        returns (bool)\\n    {\\n        return (interfaceId == type(IProtocolGovernance).interfaceId) || super.supportsInterface(interfaceId);\\n    }\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function stageValidator(address target, address validator) external {\\n        _requireAdmin();\\n        require(\\n            target != address(0) &&\\n            validator != address(0), \\n            ExceptionsLibrary.ADDRESS_ZERO\\n        );\\n        _stagedValidatorsAddresses.add(target);\\n        stagedValidators[target] = validator;\\n        uint256 at = block.timestamp + _params.governanceDelay;\\n        stagedValidatorsTimestamps[target] = at;\\n        emit ValidatorStaged(tx.origin, msg.sender, target, validator, at);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function rollbackStagedValidators() external {\\n        _requireAdmin();\\n        uint256 length = _stagedValidatorsAddresses.length();\\n        for (uint256 i; i != length; ++i) {\\n            address target = _stagedValidatorsAddresses.at(0);\\n            delete stagedValidators[target];\\n            delete stagedValidatorsTimestamps[target];\\n            _stagedValidatorsAddresses.remove(target);\\n        }\\n        emit AllStagedValidatorsRolledBack(tx.origin, msg.sender);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function commitValidator(address stagedAddress) external {\\n        _requireAdmin();\\n        uint256 stagedToCommitAt = stagedValidatorsTimestamps[stagedAddress];\\n        require(block.timestamp >= stagedToCommitAt, ExceptionsLibrary.TIMESTAMP);\\n        require(stagedToCommitAt != 0, ExceptionsLibrary.NULL);\\n        validators[stagedAddress] = stagedValidators[stagedAddress];\\n        _validatorsAddresses.add(stagedAddress);\\n        delete stagedValidators[stagedAddress];\\n        delete stagedValidatorsTimestamps[stagedAddress];\\n        _stagedValidatorsAddresses.remove(stagedAddress);\\n        emit ValidatorCommitted(tx.origin, msg.sender, stagedAddress);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory addressesCommitted) {\\n        _requireAdmin();\\n        uint256 length = _stagedValidatorsAddresses.length();\\n        addressesCommitted = new address[](length);\\n        uint256 addressesCommittedLength;\\n        for (uint256 i; i != length;) {\\n            address stagedAddress = _stagedValidatorsAddresses.at(i);\\n            if (block.timestamp >= stagedValidatorsTimestamps[stagedAddress]) {\\n                validators[stagedAddress] = stagedValidators[stagedAddress];\\n                _validatorsAddresses.add(stagedAddress);\\n                delete stagedValidators[stagedAddress];\\n                delete stagedValidatorsTimestamps[stagedAddress];\\n                _stagedValidatorsAddresses.remove(stagedAddress);\\n                addressesCommitted[addressesCommittedLength] = stagedAddress;\\n                ++addressesCommittedLength;\\n                --length;\\n                emit ValidatorCommitted(tx.origin, msg.sender, stagedAddress);\\n            } else {\\n                ++i;\\n            }\\n        }\\n        assembly {\\n            mstore(addressesCommitted, addressesCommittedLength)\\n        }\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function revokeValidator(address target) external {\\n        _requireAdmin();\\n        require(target != address(0), ExceptionsLibrary.NULL);\\n        delete validators[target];\\n        _validatorsAddresses.remove(target);\\n        emit ValidatorRevoked(tx.origin, msg.sender, target);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function rollbackStagedPermissionGrants() external {\\n        _requireAdmin();\\n        uint256 length = _stagedPermissionGrantsAddresses.length();\\n        for (uint256 i; i != length; ++i) {\\n            address target = _stagedPermissionGrantsAddresses.at(0);\\n            delete stagedPermissionGrantsMasks[target];\\n            delete stagedPermissionGrantsTimestamps[target];\\n            _stagedPermissionGrantsAddresses.remove(target);\\n        }\\n        emit AllStagedPermissionGrantsRolledBack(tx.origin, msg.sender);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function commitPermissionGrants(address stagedAddress) external {\\n        _requireAdmin();\\n        uint256 stagedToCommitAt = stagedPermissionGrantsTimestamps[stagedAddress];\\n        require(block.timestamp >= stagedToCommitAt, ExceptionsLibrary.TIMESTAMP);\\n        require(stagedToCommitAt != 0, ExceptionsLibrary.NULL);\\n        permissionMasks[stagedAddress] |= stagedPermissionGrantsMasks[stagedAddress];\\n        _permissionAddresses.add(stagedAddress);\\n        delete stagedPermissionGrantsMasks[stagedAddress];\\n        delete stagedPermissionGrantsTimestamps[stagedAddress];\\n        _stagedPermissionGrantsAddresses.remove(stagedAddress);\\n        emit PermissionGrantsCommitted(tx.origin, msg.sender, stagedAddress);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory addresses) {\\n        _requireAdmin();\\n        uint256 length = _stagedPermissionGrantsAddresses.length();\\n        uint256 addressesLeft = length;\\n        addresses = new address[](length);\\n        for (uint256 i; i != addressesLeft;) {\\n            address stagedAddress = _stagedPermissionGrantsAddresses.at(i);\\n            if (block.timestamp >= stagedPermissionGrantsTimestamps[stagedAddress]) {\\n                permissionMasks[stagedAddress] |= stagedPermissionGrantsMasks[stagedAddress];\\n                _permissionAddresses.add(stagedAddress);\\n                delete stagedPermissionGrantsMasks[stagedAddress];\\n                delete stagedPermissionGrantsTimestamps[stagedAddress];\\n                _stagedPermissionGrantsAddresses.remove(stagedAddress);\\n                addresses[length - addressesLeft] = stagedAddress;\\n                --addressesLeft;\\n                emit PermissionGrantsCommitted(tx.origin, msg.sender, stagedAddress);\\n            } else {\\n                ++i;\\n            }\\n        }\\n        length -= addressesLeft;\\n        assembly {\\n            mstore(addresses, length)\\n        }\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function revokePermissions(address target, uint8[] calldata permissionIds) external {\\n        _requireAdmin();\\n        require(target != address(0), ExceptionsLibrary.NULL);\\n        uint256 diff = _permissionIdsToMask(permissionIds);\\n        uint256 currentMask = permissionMasks[target];\\n        uint256 newMask = currentMask & (~diff);\\n        permissionMasks[target] = newMask;\\n        if (newMask == 0) {\\n            _permissionAddresses.remove(target);\\n        }\\n        emit PermissionsRevoked(tx.origin, msg.sender, target, permissionIds);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function commitParams() external {\\n        _requireAdmin();\\n        require(stagedParamsTimestamp != 0, ExceptionsLibrary.NULL);\\n        require(\\n            block.timestamp >= stagedParamsTimestamp,\\n            ExceptionsLibrary.TIMESTAMP\\n        );\\n        _params = _stagedParams;\\n        delete _stagedParams;\\n        delete stagedParamsTimestamp;\\n        emit ParamsCommitted(tx.origin, msg.sender, _params);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function stagePermissionGrants(address target, uint8[] calldata permissionIds) external {\\n        _requireAdmin();\\n        require(target != address(0), ExceptionsLibrary.NULL);\\n        _stagedPermissionGrantsAddresses.add(target);\\n        stagedPermissionGrantsMasks[target] = _permissionIdsToMask(permissionIds);\\n        uint256 stagedToCommitAt = block.timestamp + _params.governanceDelay;\\n        stagedPermissionGrantsTimestamps[target] = stagedToCommitAt;\\n        emit PermissionGrantsStaged(tx.origin, msg.sender, target, permissionIds, stagedToCommitAt);\\n    }\\n\\n    /// @inheritdoc IProtocolGovernance\\n    function stageParams(IProtocolGovernance.Params calldata newParams) external {\\n        _requireAdmin();\\n        _validateGovernanceParams(newParams);\\n        _stagedParams = newParams;\\n        stagedParamsTimestamp = block.timestamp + _params.governanceDelay;\\n        emit ParamsStaged(tx.origin, msg.sender, stagedParamsTimestamp, _stagedParams);\\n    }\\n\\n    // -------------------------  INTERNAL, VIEW  ------------------------------\\n\\n    function _contractName() internal pure override returns (bytes32) {\\n        return bytes32(\\\"ProtocolGovernance\\\");\\n    }\\n\\n    function _contractVersion() internal pure override returns (bytes32) {\\n        return bytes32(\\\"1.0.0\\\");\\n    }\\n\\n    function _validateGovernanceParams(IProtocolGovernance.Params calldata newParams) private pure {\\n        require(newParams.maxTokensPerVault != 0 && newParams.governanceDelay != 0, ExceptionsLibrary.NULL);\\n        require(newParams.governanceDelay <= MAX_GOVERNANCE_DELAY, ExceptionsLibrary.LIMIT_OVERFLOW);\\n        require(newParams.withdrawLimit >= MIN_WITHDRAW_LIMIT, ExceptionsLibrary.LIMIT_OVERFLOW);\\n    }\\n\\n    function _permissionIdsToMask(uint8[] calldata permissionIds) private pure returns (uint256 mask) {\\n        for (uint256 i = 0; i < permissionIds.length; ++i) {\\n            mask |= 1 << permissionIds[i];\\n        }\\n    }\\n\\n    // --------------------------  EVENTS  --------------------------\\n\\n    /// @notice Emitted when validators are staged to be granted for specific address.\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param target Target address\\n    /// @param validator Staged validator\\n    /// @param at Timestamp when the staged permissions could be committed\\n    event ValidatorStaged(\\n        address indexed origin,\\n        address indexed sender,\\n        address indexed target,\\n        address validator,\\n        uint256 at\\n    );\\n\\n    /// @notice Validator revoked\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param target Target address\\n    event ValidatorRevoked(address indexed origin, address indexed sender, address indexed target);\\n\\n    /// @notice Emitted when staged validators are rolled back\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    event AllStagedValidatorsRolledBack(address indexed origin, address indexed sender);\\n\\n    /// @notice Emitted when staged validators are comitted for specific address\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param target Target address\\n    event ValidatorCommitted(address indexed origin, address indexed sender, address indexed target);\\n\\n    /// @notice Emitted when new permissions are staged to be granted for specific address.\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param target Target address\\n    /// @param permissionIds Permission IDs to be granted\\n    /// @param at Timestamp when the staged permissions could be committed\\n    event PermissionGrantsStaged(\\n        address indexed origin,\\n        address indexed sender,\\n        address indexed target,\\n        uint8[] permissionIds,\\n        uint256 at\\n    );\\n\\n    /// @notice Emitted when permissions are revoked\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param target Target address\\n    /// @param permissionIds Permission IDs to be revoked\\n    event PermissionsRevoked(\\n        address indexed origin,\\n        address indexed sender,\\n        address indexed target,\\n        uint8[] permissionIds\\n    );\\n\\n    /// @notice Emitted when staged permissions are rolled back\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    event AllStagedPermissionGrantsRolledBack(address indexed origin, address indexed sender);\\n\\n    /// @notice Emitted when staged permissions are comitted for specific address\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param target Target address\\n    event PermissionGrantsCommitted(address indexed origin, address indexed sender, address indexed target);\\n\\n    /// @notice Emitted when pending parameters are set\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param at Timestamp when the pending parameters could be committed\\n    /// @param params Pending parameters\\n    event ParamsStaged(address indexed origin, address indexed sender, uint256 at, Params params);\\n\\n    /// @notice Emitted when pending parameters are committed\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param params Committed parameters\\n    event ParamsCommitted(address indexed origin, address indexed sender, Params params);\\n}\\n\",\"keccak256\":\"0x786f46065cdbdbe2cb3d5f4b537db819521777c8b1ed374f5b2a9780c277d8e7\",\"license\":\"BSL-1.1\"},\"contracts/UnitPricesGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"./interfaces/IUnitPricesGovernance.sol\\\";\\nimport \\\"./libraries/ExceptionsLibrary.sol\\\";\\nimport \\\"./utils/DefaultAccessControl.sol\\\";\\n\\ncontract UnitPricesGovernance is IUnitPricesGovernance, DefaultAccessControl {\\n    uint256 public constant DELAY = 14 days;\\n    /// @inheritdoc IUnitPricesGovernance\\n    mapping(address => uint256) public unitPrices;\\n    /// @inheritdoc IUnitPricesGovernance\\n    mapping(address => uint256) public stagedUnitPrices;\\n    /// @inheritdoc IUnitPricesGovernance\\n    mapping(address => uint256) public stagedUnitPricesTimestamps;\\n\\n    constructor(address admin) DefaultAccessControl(admin) {}\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, AccessControlEnumerable)\\n        returns (bool)\\n    {\\n        return (interfaceId == type(IUnitPricesGovernance).interfaceId) || super.supportsInterface(interfaceId);\\n    }\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @inheritdoc IUnitPricesGovernance\\n    function stageUnitPrice(address token, uint256 value) external {\\n        require(token != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n        _requireAdmin();\\n        stagedUnitPrices[token] = value;\\n        stagedUnitPricesTimestamps[token] = unitPrices[token] == 0 ? block.timestamp : block.timestamp + DELAY;\\n        emit UnitPriceStaged(tx.origin, msg.sender, token, value);\\n    }\\n\\n    /// @inheritdoc IUnitPricesGovernance\\n    function rollbackUnitPrice(address token) external {\\n        _requireAdmin();\\n        delete stagedUnitPrices[token];\\n        delete stagedUnitPricesTimestamps[token];\\n        emit UnitPriceRolledBack(tx.origin, msg.sender, token);\\n    }\\n\\n    /// @inheritdoc IUnitPricesGovernance\\n    function commitUnitPrice(address token) external {\\n        _requireAdmin();\\n        uint256 timestamp = stagedUnitPricesTimestamps[token];\\n        require(timestamp != 0, ExceptionsLibrary.INVALID_STATE);\\n        require(timestamp <= block.timestamp, ExceptionsLibrary.TIMESTAMP);\\n\\n        uint256 price = stagedUnitPrices[token];\\n        unitPrices[token] = price;\\n        delete stagedUnitPrices[token];\\n        delete stagedUnitPricesTimestamps[token];\\n        emit UnitPriceCommitted(tx.origin, msg.sender, token, price);\\n    }\\n\\n    // --------------------------  EVENTS  --------------------------\\n\\n    /// @notice UnitPrice staged for commit\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param token Token address\\n    /// @param unitPrice Unit price\\n    event UnitPriceStaged(address indexed origin, address indexed sender, address token, uint256 unitPrice);\\n\\n    /// @notice UnitPrice rolled back\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param token Token address\\n    event UnitPriceRolledBack(address indexed origin, address indexed sender, address token);\\n\\n    /// @notice UnitPrice committed\\n    /// @param origin Origin of the transaction (tx.origin)\\n    /// @param sender Sender of the call (msg.sender)\\n    /// @param token Token address\\n    /// @param unitPrice Unit price\\n    event UnitPriceCommitted(address indexed origin, address indexed sender, address token, uint256 unitPrice);\\n}\\n\",\"keccak256\":\"0x4fdc5fc21edf4125406d0bb404e45fe574f73c9f7bee53953b4dde200ed881f7\",\"license\":\"BSL-1.1\"},\"contracts/interfaces/IProtocolGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\nimport \\\"./IUnitPricesGovernance.sol\\\";\\n\\ninterface IProtocolGovernance is IDefaultAccessControl, IUnitPricesGovernance {\\n    /// @notice CommonLibrary protocol params.\\n    /// @param maxTokensPerVault Max different token addresses that could be managed by the vault\\n    /// @param governanceDelay The delay (in secs) that must pass before setting new pending params to commiting them\\n    /// @param protocolTreasury The address that collects protocolFees, if protocolFee is not zero\\n    /// @param forceAllowMask If a permission bit is set in this mask it forces all addresses to have this permission as true\\n    /// @param withdrawLimit Withdraw limit (in unit prices, i.e. usd)\\n    struct Params {\\n        uint256 maxTokensPerVault;\\n        uint256 governanceDelay;\\n        address protocolTreasury;\\n        uint256 forceAllowMask;\\n        uint256 withdrawLimit;\\n    }\\n\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\n    /// @param target The given address\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\n    function stagedPermissionGrantsTimestamps(address target) external view returns (uint256);\\n\\n    /// @notice Staged granted permission bitmask for the given address.\\n    /// @param target The given address\\n    /// @return Bitmask\\n    function stagedPermissionGrantsMasks(address target) external view returns (uint256);\\n\\n    /// @notice Permission bitmask for the given address.\\n    /// @param target The given address\\n    /// @return Bitmask\\n    function permissionMasks(address target) external view returns (uint256);\\n\\n    /// @notice Timestamp after which staged pending protocol parameters can be committed\\n    /// @return Zero if there are no staged parameters, timestamp otherwise.\\n    function stagedParamsTimestamp() external view returns (uint256);\\n\\n    /// @notice Staged pending protocol parameters.\\n    function stagedParams() external view returns (Params memory);\\n\\n    /// @notice Current protocol parameters.\\n    function params() external view returns (Params memory);\\n\\n    /// @notice Addresses for which non-zero permissions are set.\\n    function permissionAddresses() external view returns (address[] memory);\\n\\n    /// @notice Permission addresses staged for commit.\\n    function stagedPermissionGrantsAddresses() external view returns (address[] memory);\\n\\n    /// @notice Return all addresses where rawPermissionMask bit for permissionId is set to 1.\\n    /// @param permissionId Id of the permission to check.\\n    /// @return A list of dirty addresses.\\n    function addressesByPermission(uint8 permissionId) external view returns (address[] memory);\\n\\n    /// @notice Checks if address has permission or given permission is force allowed for any address.\\n    /// @param addr Address to check\\n    /// @param permissionId Permission to check\\n    function hasPermission(address addr, uint8 permissionId) external view returns (bool);\\n\\n    /// @notice Checks if address has all permissions.\\n    /// @param target Address to check\\n    /// @param permissionIds A list of permissions to check\\n    function hasAllPermissions(address target, uint8[] calldata permissionIds) external view returns (bool);\\n\\n    /// @notice Max different ERC20 token addresses that could be managed by the protocol.\\n    function maxTokensPerVault() external view returns (uint256);\\n\\n    /// @notice The delay for committing any governance params.\\n    function governanceDelay() external view returns (uint256);\\n\\n    /// @notice The address of the protocol treasury.\\n    function protocolTreasury() external view returns (address);\\n\\n    /// @notice Permissions mask which defines if ordinary permission should be reverted.\\n    /// This bitmask is xored with ordinary mask.\\n    function forceAllowMask() external view returns (uint256);\\n\\n    /// @notice Withdraw limit per token per block.\\n    /// @param token Address of the token\\n    /// @return Withdraw limit per token per block\\n    function withdrawLimit(address token) external view returns (uint256);\\n\\n    /// @notice Addresses that has staged validators.\\n    function stagedValidatorsAddresses() external view returns (address[] memory);\\n\\n    /// @notice Timestamp after which staged granted permissions for the given address can be committed.\\n    /// @param target The given address\\n    /// @return Zero if there are no staged permission grants, timestamp otherwise\\n    function stagedValidatorsTimestamps(address target) external view returns (uint256);\\n\\n    /// @notice Staged validator for the given address.\\n    /// @param target The given address\\n    /// @return Validator\\n    function stagedValidators(address target) external view returns (address);\\n\\n    /// @notice Addresses that has validators.\\n    function validatorsAddresses() external view returns (address[] memory);\\n\\n    /// @notice Address that has validators.\\n    /// @param i The number of address\\n    /// @return Validator address\\n    function validatorsAddress(uint256 i) external view returns (address);\\n\\n    /// @notice Validator for the given address.\\n    /// @param target The given address\\n    /// @return Validator\\n    function validators(address target) external view returns (address);\\n\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, IMMEDIATE  -------------------\\n\\n    /// @notice Rollback all staged validators.\\n    function rollbackStagedValidators() external;\\n\\n    /// @notice Revoke validator instantly from the given address.\\n    /// @param target The given address\\n    function revokeValidator(address target) external;\\n\\n    /// @notice Stages a new validator for the given address\\n    /// @param target The given address\\n    /// @param validator The validator for the given address\\n    function stageValidator(address target, address validator) external;\\n\\n    /// @notice Commits validator for the given address.\\n    /// @dev Reverts if governance delay has not passed yet.\\n    /// @param target The given address.\\n    function commitValidator(address target) external;\\n\\n    /// @notice Commites all staged validators for which governance delay passed\\n    /// @return Addresses for which validators were committed\\n    function commitAllValidatorsSurpassedDelay() external returns (address[] memory);\\n\\n    /// @notice Rollback all staged granted permission grant.\\n    function rollbackStagedPermissionGrants() external;\\n\\n    /// @notice Commits permission grants for the given address.\\n    /// @dev Reverts if governance delay has not passed yet.\\n    /// @param target The given address.\\n    function commitPermissionGrants(address target) external;\\n\\n    /// @notice Commites all staged permission grants for which governance delay passed.\\n    /// @return An array of addresses for which permission grants were committed.\\n    function commitAllPermissionGrantsSurpassedDelay() external returns (address[] memory);\\n\\n    /// @notice Revoke permission instantly from the given address.\\n    /// @param target The given address.\\n    /// @param permissionIds A list of permission ids to revoke.\\n    function revokePermissions(address target, uint8[] memory permissionIds) external;\\n\\n    /// @notice Commits staged protocol params.\\n    /// Reverts if governance delay has not passed yet.\\n    function commitParams() external;\\n\\n    // -------------------  EXTERNAL, MUTATING, GOVERNANCE, DELAY  -------------------\\n\\n    /// @notice Sets new pending params that could have been committed after governance delay expires.\\n    /// @param newParams New protocol parameters to set.\\n    function stageParams(Params memory newParams) external;\\n\\n    /// @notice Stage granted permissions that could have been committed after governance delay expires.\\n    /// Resets commit delay and permissions if there are already staged permissions for this address.\\n    /// @param target Target address\\n    /// @param permissionIds A list of permission ids to grant\\n    function stagePermissionGrants(address target, uint8[] memory permissionIds) external;\\n}\\n\",\"keccak256\":\"0x04ea2514f49503cc66574a08382b57f266d23dee04046b479e0cf64c9a0db270\",\"license\":\"MIT\"},\"contracts/interfaces/IUnitPricesGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./utils/IDefaultAccessControl.sol\\\";\\n\\ninterface IUnitPricesGovernance is IDefaultAccessControl, IERC165 {\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    /// @notice Estimated amount of token worth 1 USD staged for commit.\\n    /// @param token Address of the token\\n    /// @return The amount of token\\n    function stagedUnitPrices(address token) external view returns (uint256);\\n\\n    /// @notice Timestamp after which staged unit prices for the given token can be committed.\\n    /// @param token Address of the token\\n    /// @return Timestamp\\n    function stagedUnitPricesTimestamps(address token) external view returns (uint256);\\n\\n    /// @notice Estimated amount of token worth 1 USD.\\n    /// @param token Address of the token\\n    /// @return The amount of token\\n    function unitPrices(address token) external view returns (uint256);\\n\\n    // -------------------  EXTERNAL, MUTATING  -------------------\\n\\n    /// @notice Stage estimated amount of token worth 1 USD staged for commit.\\n    /// @param token Address of the token\\n    /// @param value The amount of token\\n    function stageUnitPrice(address token, uint256 value) external;\\n\\n    /// @notice Reset staged value\\n    /// @param token Address of the token\\n    function rollbackUnitPrice(address token) external;\\n\\n    /// @notice Commit staged unit price\\n    /// @param token Address of the token\\n    function commitUnitPrice(address token) external;\\n}\\n\",\"keccak256\":\"0x861ae02ad4ba132b8e03ceb19faf915dc800fed8a6f877c344ea2ebd83feb29c\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IContractMeta.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.9;\\n\\ninterface IContractMeta {\\n    function contractName() external view returns (string memory);\\n    function contractNameBytes() external view returns (bytes32);\\n\\n    function contractVersion() external view returns (string memory);\\n    function contractVersionBytes() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab6c1427012bddbeae91599f859668df829c133b73b77572cf60c2bbc369f6da\",\"license\":\"BSL-1.1\"},\"contracts/interfaces/utils/IDefaultAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ninterface IDefaultAccessControl is IAccessControlEnumerable {\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @return `true` if who is admin, `false` otherwise\\n    function isAdmin(address who) external view returns (bool);\\n\\n    /// @notice Checks that the address is contract admin.\\n    /// @param who Address to check\\n    /// @return `true` if who is operator, `false` otherwise\\n    function isOperator(address who) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf4198613cc054350ce3ad3399fee584b363c27082f2a86645c58a2aab543862d\",\"license\":\"MIT\"},\"contracts/libraries/ExceptionsLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @notice Exceptions stores project`s smart-contracts exceptions\\nlibrary ExceptionsLibrary {\\n    string constant ADDRESS_ZERO = \\\"AZ\\\";\\n    string constant VALUE_ZERO = \\\"VZ\\\";\\n    string constant EMPTY_LIST = \\\"EMPL\\\";\\n    string constant NOT_FOUND = \\\"NF\\\";\\n    string constant INIT = \\\"INIT\\\";\\n    string constant DUPLICATE = \\\"DUP\\\";\\n    string constant NULL = \\\"NULL\\\";\\n    string constant TIMESTAMP = \\\"TS\\\";\\n    string constant FORBIDDEN = \\\"FRB\\\";\\n    string constant ALLOWLIST = \\\"ALL\\\";\\n    string constant LIMIT_OVERFLOW = \\\"LIMO\\\";\\n    string constant LIMIT_UNDERFLOW = \\\"LIMU\\\";\\n    string constant INVALID_VALUE = \\\"INV\\\";\\n    string constant INVARIANT = \\\"INVA\\\";\\n    string constant INVALID_TARGET = \\\"INVTR\\\";\\n    string constant INVALID_TOKEN = \\\"INVTO\\\";\\n    string constant INVALID_INTERFACE = \\\"INVI\\\";\\n    string constant INVALID_SELECTOR = \\\"INVS\\\";\\n    string constant INVALID_STATE = \\\"INVST\\\";\\n    string constant INVALID_LENGTH = \\\"INVL\\\";\\n    string constant LOCK = \\\"LCKD\\\";\\n    string constant DISABLED = \\\"DIS\\\";\\n}\\n\",\"keccak256\":\"0xf17911249ff44eab954080bf27b20232f4d87d30e609aabc70046d644e35fbb5\",\"license\":\"MIT\"},\"contracts/utils/ContractMeta.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/utils/IContractMeta.sol\\\";\\n\\nabstract contract ContractMeta is IContractMeta {\\n    // -------------------  EXTERNAL, VIEW  -------------------\\n\\n    function contractName() external pure returns (string memory) {\\n        return _bytes32ToString(_contractName());\\n    }\\n\\n    function contractNameBytes() external pure returns (bytes32) {\\n        return _contractName();\\n    }\\n\\n    function contractVersion() external pure returns (string memory) {\\n        return _bytes32ToString(_contractVersion());\\n    }\\n\\n    function contractVersionBytes() external pure returns (bytes32) {\\n        return _contractVersion();\\n    }\\n\\n    // -------------------  INTERNAL, VIEW  -------------------\\n\\n    function _contractName() internal pure virtual returns (bytes32);\\n\\n    function _contractVersion() internal pure virtual returns (bytes32);\\n\\n    function _bytes32ToString(bytes32 b) internal pure returns (string memory s) {\\n        s = new string(32);\\n        uint256 len = 32;\\n        for (uint256 i = 0; i < 32; ++i) {\\n            if (uint8(b[i]) == 0) {\\n                len = i;\\n                break;\\n            }\\n        }\\n        assembly {\\n            mstore(s, len)\\n            mstore(add(s, 0x20), b)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaed32a95ba32842eb484fcd8febba8bdc7b4a736605c208ec093efcfe1800c93\",\"license\":\"BSL-1.1\"},\"contracts/utils/DefaultAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"../interfaces/utils/IDefaultAccessControl.sol\\\";\\nimport \\\"../libraries/ExceptionsLibrary.sol\\\";\\n\\n/// @notice This is a default access control with 3 roles:\\n///\\n/// - ADMIN: allowed to do anything\\n/// - ADMIN_DELEGATE: allowed to do anything except assigning ADMIN and ADMIN_DELEGATE roles\\n/// - OPERATOR: low-privileged role, generally keeper or some other bot\\ncontract DefaultAccessControl is IDefaultAccessControl, AccessControlEnumerable {\\n    bytes32 public constant OPERATOR = keccak256(\\\"operator\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"admin\\\");\\n    bytes32 public constant ADMIN_DELEGATE_ROLE = keccak256(\\\"admin_delegate\\\");\\n\\n    /// @notice Creates a new contract.\\n    /// @param admin Admin of the contract\\n    constructor(address admin) {\\n        require(admin != address(0), ExceptionsLibrary.ADDRESS_ZERO);\\n\\n        _setupRole(OPERATOR, admin);\\n        _setupRole(ADMIN_ROLE, admin);\\n\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(ADMIN_DELEGATE_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(OPERATOR, ADMIN_DELEGATE_ROLE);\\n    }\\n\\n    // -------------------------  EXTERNAL, VIEW  ------------------------------\\n\\n    /// @notice Checks if the address is ADMIN or ADMIN_DELEGATE.\\n    /// @param sender Adddress to check\\n    /// @return `true` if sender is an admin, `false` otherwise\\n    function isAdmin(address sender) public view returns (bool) {\\n        return hasRole(ADMIN_ROLE, sender) || hasRole(ADMIN_DELEGATE_ROLE, sender);\\n    }\\n\\n    /// @notice Checks if the address is OPERATOR.\\n    /// @param sender Adddress to check\\n    /// @return `true` if sender is an admin, `false` otherwise\\n    function isOperator(address sender) public view returns (bool) {\\n        return hasRole(OPERATOR, sender);\\n    }\\n\\n    // -------------------------  INTERNAL, VIEW  ------------------------------\\n\\n    function _requireAdmin() internal view {\\n        require(isAdmin(msg.sender), ExceptionsLibrary.FORBIDDEN);\\n    }\\n\\n    function _requireAtLeastOperator() internal view {\\n        require(isAdmin(msg.sender) || isOperator(msg.sender), ExceptionsLibrary.FORBIDDEN);\\n    }\\n}\\n\",\"keccak256\":\"0x4478c9a7ad262d9c012096ffee949e92c2752846c36634169dcf4ac14a9fe200\",\"license\":\"BSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620030c9380380620030c9833981016040819052620000349162000305565b60408051808201909152600281526120ad60f11b6020820152819081906001600160a01b038216620000845760405162461bcd60e51b81526004016200007b919062000337565b60405180910390fd5b50620000a0600080516020620030a98339815191528262000155565b620000bb600080516020620030898339815191528262000155565b620000d6600080516020620030898339815191528062000165565b620001117fc171260023d22a25a00a2789664c9334017843b831138c8ef03cc8897e5873d76000805160206200308983398151915262000165565b6200014c600080516020620030a98339815191527fc171260023d22a25a00a2789664c9334017843b831138c8ef03cc8897e5873d762000165565b5050506200038f565b620001618282620001b0565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620001c78282620001f360201b62001d0b1760201c565b6000828152600160209081526040909120620001ee91839062001d8f62000293821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000161576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200024f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620002aa836001600160a01b038416620002b3565b90505b92915050565b6000818152600183016020526040812054620002fc57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620002ad565b506000620002ad565b6000602082840312156200031857600080fd5b81516001600160a01b03811681146200033057600080fd5b9392505050565b600060208083528351808285015260005b81811015620003665785810183015185820160400152820162000348565b8181111562000379576000604083870101525b50601f01601f1916929092016040019392505050565b612cea806200039f6000396000f3fe608060405234801561001057600080fd5b50600436106103ba5760003560e01c806378546fa2116101f4578063b3ff103c1161011a578063cff0ab96116100ad578063e970164c1161007c578063e970164c146108aa578063f7fcd303146108b2578063fa52c7d8146108db578063fce33f011461090457600080fd5b8063cff0ab9614610867578063d1bf2a6b1461086f578063d547741f14610877578063d65c5e6b1461088a57600080fd5b8063bd674f3a116100e9578063bd674f3a14610831578063bd7692f714610839578063c7e6ab0514610841578063ca15c8731461085457600080fd5b8063b3ff103c146107fa578063b521bf2d1461080d578063bba3293914610820578063bd66b16e1461082857600080fd5b80639348e4ec11610192578063a0a8e46011610161578063a0a8e460146107aa578063a217fddf146107b2578063ac9650d8146107ba578063ae24e14a146107da57600080fd5b80639348e4ec1461076057806395e3a12d14610773578063983d27371461077b57806399fb4234146107a257600080fd5b8063887b812d116101ce578063887b812d146107075780638e35b0281461071a5780639010d07c1461073a57806391d148541461074d57600080fd5b806378546fa2146106d2578063803db96d146106da578063806bc2f1146106ff57600080fd5b806336568abe116102e457806369b411701161027757806373680db41161024657806373680db41461066357806375b238fc1461067657806375d0c0dc1461069d578063768a1bfc146106b257600080fd5b806369b41170146105e55780636d70f7ae146105ef578063717af5ed14610602578063731c01a91461061557600080fd5b80635c1e4448116102b35780635c1e44481461056d57806363d21c751461058057806363e85d2d1461058a57806364cd39af146105c557600080fd5b806336568abe1461052c5780633837a1a31461053f57806356f46d7214610552578063577848ea1461056557600080fd5b806312c2d8741161035c578063248a9ca31161032b578063248a9ca3146104c357806324d7806c146104e65780632a4ebb41146104f95780632f2ff15d1461051957600080fd5b806312c2d874146104735780631c3a2341146104935780631c5afc46146104a65780631dd02197146104bb57600080fd5b806306a462391161039857806306a462391461040f5780630952ff54146104275780630e3e80ac1461044e5780630ea556361461046957600080fd5b80630161c241146103bf57806301ffc9a7146103d4578063047564b7146103fc575b600080fd5b6103d26103cd366004612625565b610917565b005b6103e76103e2366004612642565b610a78565b60405190151581526020015b60405180910390f35b6103d261040a366004612625565b610aa3565b640312e302e360dc1b5b6040519081526020016103f3565b6104197fc171260023d22a25a00a2789664c9334017843b831138c8ef03cc8897e5873d781565b7150726f746f636f6c476f7665726e616e636560701b610419565b61041962093a8081565b610419610481366004612625565b60046020526000908152604090205481565b6103d26104a13660046126b8565b610b60565b6104ae610c4f565b6040516103f3919061270d565b6103d2610c5b565b6104196104d136600461275a565b60009081526020819052604090206001015490565b6103e76104f4366004612625565b610d0a565b610419610507366004612625565b60066020526000908152604090205481565b6103d2610527366004612773565b610d66565b6103d261053a366004612773565b610d91565b6103d261054d366004612625565b610e0f565b6103d26105603660046127a3565b610f22565b6104ae611008565b6103d261057b3660046127cf565b6111b8565b61041962030d4081565b6103e76105983660046127fd565b601c546001600160a01b03831660009081526007602052604090205417600160ff83161b16151592915050565b6104196105d3366004612625565b60076020526000908152604090205481565b6104196212750081565b6103e76105fd366004612625565b61122a565b6104ae610610366004612832565b611256565b61061d611344565b6040516103f3919081518152602080830151908201526040808301516001600160a01b031690820152606080830151908201526080918201519181019190915260a00190565b6103d2610671366004612625565b61138a565b6104197ff23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d881565b6106a56113ec565b6040516103f391906128a9565b6104196106c0366004612625565b60026020526000908152604090205481565b601954610419565b601b546001600160a01b03165b6040516001600160a01b0390911681526020016103f3565b6104ae61140c565b6103d2610715366004612625565b611418565b610419610728366004612625565b60056020526000908152604090205481565b6106e76107483660046128bc565b611558565b6103e761075b366004612773565b611577565b6103e761076e3660046126b8565b6115a0565b6104ae6115d7565b6104197f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62281565b601c54610419565b6106a56115e3565b610419600081565b6107cd6107c83660046128de565b6115f6565b6040516103f39190612920565b6104196107e8366004612625565b60036020526000908152604090205481565b6106e761080836600461275a565b6116eb565b6103d261081b366004612982565b6116f8565b601a54610419565b610419600b5481565b6103d2611806565b6103d26118aa565b6103d261084f3660046126b8565b6119c6565b61041961086236600461275a565b611ab3565b61061d611aca565b6104ae611b10565b6103d2610885366004612773565b611b1c565b610419610898366004612625565b60086020526000908152604090205481565b6104ae611b42565b6106e76108c0366004612625565b6009602052600090815260409020546001600160a01b031681565b6106e76108e9366004612625565b600a602052600090815260409020546001600160a01b031681565b610419610912366004612625565b611ce5565b61091f611da4565b6001600160a01b0381166000908152600860209081526040918290205482518084019093526002835261545360f01b9183019190915290428211156109805760405162461bcd60e51b815260040161097791906128a9565b60405180910390fd5b506040805180820190915260048152631395531360e21b6020820152816109ba5760405162461bcd60e51b815260040161097791906128a9565b506001600160a01b03808316600090815260096020908152604080832054600a90925290912080546001600160a01b031916919092161790556109fe601083611d8f565b506001600160a01b038216600090815260096020908152604080832080546001600160a01b03191690556008909152812055610a3b601283611dea565b506040516001600160a01b03831690339032907fbed845dc13e95e4cf248e05941119a9e8c8c7e79700599c07a2c86c527d9f78d90600090a45050565b60006001600160e01b0319821663ca11fe0360e01b1480610a9d5750610a9d82611dff565b92915050565b610aab611da4565b6040805180820190915260048152631395531360e21b60208201526001600160a01b038216610aed5760405162461bcd60e51b815260040161097791906128a9565b506001600160a01b0381166000908152600a6020526040902080546001600160a01b0319169055610b1f601082611dea565b506040516001600160a01b03821690339032907f847e483f8de6bf96572128142c4ca8ea6846ac59ee9b73e06a4485157d64924490600090a450565b905090565b610b68611da4565b6040805180820190915260048152631395531360e21b60208201526001600160a01b038416610baa5760405162461bcd60e51b815260040161097791906128a9565b50610bb6600c84611d8f565b50610bc18282611e24565b6001600160a01b038416600090815260066020526040812091909155601a54610bea90426129c6565b6001600160a01b038516600081815260056020526040908190208390555191925090339032907f3e6606f969b1354b7fbac9654238e69d3844c5fc3d90fa6ae9b9d474236908fe90610c4190889088908890612a1f565b60405180910390a450505050565b6060610b5b6012611e73565b610c63611da4565b6000610c6f6012611e80565b905060005b818114610cd9576000610c88601282611e8a565b6001600160a01b038116600090815260096020908152604080832080546001600160a01b031916905560089091528120559050610cc6601282611dea565b505080610cd290612a43565b9050610c74565b50604051339032907f26723c59f9cf42b0dee652fc4fb4c3fca21ccf8d77b988c733fecf8991bda69390600090a350565b6000610d367ff23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d883611577565b80610a9d5750610a9d7fc171260023d22a25a00a2789664c9334017843b831138c8ef03cc8897e5873d783611577565b600082815260208190526040902060010154610d828133611e96565b610d8c8383611efa565b505050565b6001600160a01b0381163314610e015760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610977565b610e0b8282611f1c565b5050565b610e17611da4565b6001600160a01b038116600090815260046020908152604091829020548251808401909352600583526412539594d560da1b918301919091529081610e6f5760405162461bcd60e51b815260040161097791906128a9565b50604080518082019091526002815261545360f01b602082015242821115610eaa5760405162461bcd60e51b815260040161097791906128a9565b506001600160a01b038216600081815260036020908152604080832080546002845282852081905590849055600483528184209390935580519384529083018290529091339132917f99745c5bf4e5d496dd70013ac2b6bae4262c471986c2b157141d8c4d570bc039910160405180910390a3505050565b60408051808201909152600281526120ad60f11b60208201526001600160a01b038316610f625760405162461bcd60e51b815260040161097791906128a9565b50610f6b611da4565b6001600160a01b0382166000908152600360209081526040808320849055600290915290205415610fa857610fa362127500426129c6565b610faa565b425b6001600160a01b038316600081815260046020908152604091829020939093558051918252918101839052339132917fc8a6c4dcd4038ea437d00baa434c23066bf4cc6cd661a55bcb754f58d670b6e5910160405180910390a35050565b6060611012611da4565b600061101e6012611e80565b90508067ffffffffffffffff81111561103957611039612a5e565b604051908082528060200260200182016040528015611062578160200160208202803683370190505b5091506000805b8281146111b157600061107d601283611e8a565b6001600160a01b038116600090815260086020526040902054909150421061119f576001600160a01b03808216600090815260096020908152604080832054600a90925290912080546001600160a01b031916919092161790556110e2601082611d8f565b506001600160a01b038116600090815260096020908152604080832080546001600160a01b0319169055600890915281205561111f601282611dea565b508085848151811061113357611133612a74565b6001600160a01b039092166020928302919091019091015261115483612a43565b925061115f84612a8a565b6040519094506001600160a01b03821690339032907fbed845dc13e95e4cf248e05941119a9e8c8c7e79700599c07a2c86c527d9f78d90600090a46111ab565b6111a882612a43565b91505b50611069565b5082525090565b6111c0611da4565b6111c981611f3e565b8060146111d68282612aa1565b5050601a546111e590426129c6565b600b819055604051339132917f57d7abf76a9762486b1c294e2ab4c95a80cc2f6b9516cab2e39b060b3d5928b29161121f91601490612b2b565b60405180910390a350565b6000610a9d7f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62283611577565b60606000611264600e611e80565b90508067ffffffffffffffff81111561127f5761127f612a5e565b6040519080825280602002602001820160405280156112a8578160200160208202803683370190505b5091506000600160ff85161b815b8381101561133a5760006112cb600e83611e8a565b6001600160a01b038116600090815260076020526040902054909150831615611327578086858151811061130157611301612a74565b6001600160a01b03909216602092830291909101909101528361132381612a43565b9450505b508061133281612a43565b9150506112b6565b5050825250919050565b61134c6125d8565b506040805160a081018252601454815260155460208201526016546001600160a01b0316918101919091526017546060820152601854608082015290565b611392611da4565b6001600160a01b038116600081815260036020908152604080832083905560048252808320929092559051918252339132917fe157c01d7fdfb7981107455af06f96f3d8a289a8925529bb12d8a3706f2f9238910161121f565b6060610b5b7150726f746f636f6c476f7665726e616e636560701b612017565b6060610b5b600e611e73565b611420611da4565b6001600160a01b0381166000908152600560209081526040918290205482518084019093526002835261545360f01b9183019190915290428211156114785760405162461bcd60e51b815260040161097791906128a9565b506040805180820190915260048152631395531360e21b6020820152816114b25760405162461bcd60e51b815260040161097791906128a9565b506001600160a01b0382166000908152600660209081526040808320546007909252909120805490911790556114e9600e83611d8f565b506001600160a01b0382166000908152600660209081526040808320839055600590915281205561151b600c83611dea565b506040516001600160a01b03831690339032907f50df548bb5b3a2ff8dd01f8aacf26b88153fba5b749e050b9874e021a6b4a7d190600090a45050565b60008281526001602052604081206115709083611e8a565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806115ad8484611e24565b601c546001600160a01b038716600090815260076020526040902054178116149150509392505050565b6060610b5b600c611e73565b6060610b5b640312e302e360dc1b612017565b60608167ffffffffffffffff81111561161157611611612a5e565b60405190808252806020026020018201604052801561164457816020015b606081526020019060019003908161162f5790505b50905060005b828110156116e4576116b43085858481811061166857611668612a74565b905060200281019061167a9190612b3f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061208392505050565b8282815181106116c6576116c6612a74565b602002602001018190525080806116dc90612a43565b91505061164a565b5092915050565b6000610a9d601083611e8a565b611700611da4565b6001600160a01b0382161580159061172057506001600160a01b03811615155b6040518060400160405280600281526020016120ad60f11b815250906117595760405162461bcd60e51b815260040161097791906128a9565b50611765601283611d8f565b506001600160a01b03828116600090815260096020526040812080546001600160a01b03191692841692909217909155601a546117a290426129c6565b6001600160a01b0384811660008181526008602090815260409182902085905581519387168452830184905292935091339132917fbd765521cce68f9c3fc8945fb25cb99a6b8a6d0c03f086c1e9a7ea9a24b35d97910160405180910390a4505050565b61180e611da4565b600061181a600c611e80565b905060005b818114611879576000611833600c82611e8a565b6001600160a01b038116600090815260066020908152604080832083905560059091528120559050611866600c82611dea565b50508061187290612a43565b905061181f565b50604051339032907fe65fa0190ef93820f93988cc16cbbdd3a9615c87920a2ad4de5f6610d6e2710290600090a350565b6118b2611da4565b600b546040805180820190915260048152631395531360e21b6020820152906118ee5760405162461bcd60e51b815260040161097791906128a9565b50600b5442101560405180604001604052806002815260200161545360f01b8152509061192e5760405162461bcd60e51b815260040161097791906128a9565b5060148054601990815560158054601a5560168054601b80546001600160a01b03199081166001600160a01b0384161790915560178054601c5560188054601d55600097889055948790559116909155839055829055600b91909155604051339132917f9450ccd09ec91c0d60e02db0ad62489853f47c9d2312b4db049030912e45c82f916119bc91612b86565b60405180910390a3565b6119ce611da4565b6040805180820190915260048152631395531360e21b60208201526001600160a01b038416611a105760405162461bcd60e51b815260040161097791906128a9565b506000611a1d8383611e24565b6001600160a01b03851660009081526007602052604090208054821981169182905591925080611a5457611a52600e87611dea565b505b856001600160a01b0316336001600160a01b0316326001600160a01b03167ff9133af9d3bddecefe06913c77827dcd75c3aba24b56e67afa215ef087598c9a8888604051611aa3929190612b94565b60405180910390a4505050505050565b6000818152600160205260408120610a9d90611e80565b611ad26125d8565b506040805160a0810182526019548152601a546020820152601b546001600160a01b031691810191909152601c546060820152601d54608082015290565b6060610b5b6010611e73565b600082815260208190526040902060010154611b388133611e96565b610d8c8383611f1c565b6060611b4c611da4565b6000611b58600c611e80565b9050808067ffffffffffffffff811115611b7457611b74612a5e565b604051908082528060200260200182016040528015611b9d578160200160208202803683370190505b50925060005b818114611cd1576000611bb7600c83611e8a565b6001600160a01b0381166000908152600560205260409020549091504210611cbf576001600160a01b038116600090815260066020908152604080832054600790925290912080549091179055611c0f600e82611d8f565b506001600160a01b03811660009081526006602090815260408083208390556005909152812055611c41600c82611dea565b508085611c4e8587612bb0565b81518110611c5e57611c5e612a74565b6001600160a01b0390921660209283029190910190910152611c7f83612a8a565b6040519093506001600160a01b03821690339032907f50df548bb5b3a2ff8dd01f8aacf26b88153fba5b749e050b9874e021a6b4a7d190600090a4611ccb565b611cc882612a43565b91505b50611ba3565b50611cdc8183612bb0565b83525090919050565b6001600160a01b038116600090815260026020526040812054601d54610a9d9190612bc7565b611d158282611577565b610e0b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611d4b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611570836001600160a01b0384166120a8565b611dad33610d0a565b6040518060400160405280600381526020016223292160e91b81525090611de75760405162461bcd60e51b815260040161097791906128a9565b50565b6000611570836001600160a01b0384166120f7565b60006001600160e01b0319821663d7c7e3a760e01b1480610a9d5750610a9d826121ea565b6000805b828110156116e457838382818110611e4257611e42612a74565b9050602002016020810190611e579190612832565b60ff166001901b8217915080611e6c90612a43565b9050611e28565b606060006115708361220f565b6000610a9d825490565b6000611570838361226b565b611ea08282611577565b610e0b57611eb8816001600160a01b03166014612295565b611ec3836020612295565b604051602001611ed4929190612be6565b60408051601f198184030181529082905262461bcd60e51b8252610977916004016128a9565b611f048282611d0b565b6000828152600160205260409020610d8c9082611d8f565b611f268282612431565b6000828152600160205260409020610d8c9082611dea565b803515801590611f515750602081013515155b604051806040016040528060048152602001631395531360e21b81525090611f8c5760405162461bcd60e51b815260040161097791906128a9565b5062093a8081602001351115604051806040016040528060048152602001634c494d4f60e01b81525090611fd35760405162461bcd60e51b815260040161097791906128a9565b506040805180820190915260048152634c494d4f60e01b602082015262030d4060808301351015610e0b5760405162461bcd60e51b815260040161097791906128a9565b604080516020808252818301909252606091602082018180368337019050509050602060005b60208110156120755783816020811061205857612058612a74565b1a61206557809150612075565b61206e81612a43565b905061203d565b508152602081019190915290565b60606115708383604051806060016040528060278152602001612c8e60279139612496565b60008181526001830160205260408120546120ef57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a9d565b506000610a9d565b600081815260018301602052604081205480156121e057600061211b600183612bb0565b855490915060009061212f90600190612bb0565b905081811461219457600086600001828154811061214f5761214f612a74565b906000526020600020015490508087600001848154811061217257612172612a74565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806121a5576121a5612c5b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a9d565b6000915050610a9d565b60006001600160e01b03198216635a05180f60e01b1480610a9d5750610a9d8261256a565b60608160000180548060200260200160405190810160405280929190818152602001828054801561225f57602002820191906000526020600020905b81548152602001906001019080831161224b575b50505050509050919050565b600082600001828154811061228257612282612a74565b9060005260206000200154905092915050565b606060006122a4836002612bc7565b6122af9060026129c6565b67ffffffffffffffff8111156122c7576122c7612a5e565b6040519080825280601f01601f1916602001820160405280156122f1576020820181803683370190505b509050600360fc1b8160008151811061230c5761230c612a74565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061233b5761233b612a74565b60200101906001600160f81b031916908160001a905350600061235f846002612bc7565b61236a9060016129c6565b90505b60018111156123e2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061239e5761239e612a74565b1a60f81b8282815181106123b4576123b4612a74565b60200101906001600160f81b031916908160001a90535060049490941c936123db81612a8a565b905061236d565b5083156115705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610977565b61243b8282611577565b15610e0b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060833b6124f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610977565b600080856001600160a01b0316856040516125109190612c71565b600060405180830381855af49150503d806000811461254b576040519150601f19603f3d011682016040523d82523d6000602084013e612550565b606091505b509150915061256082828661259f565b9695505050505050565b60006001600160e01b03198216637965db0b60e01b1480610a9d57506301ffc9a760e01b6001600160e01b0319831614610a9d565b606083156125ae575081611570565b8251156125be5782518084602001fd5b8160405162461bcd60e51b815260040161097791906128a9565b6040518060a00160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b6001600160a01b0381168114611de757600080fd5b60006020828403121561263757600080fd5b813561157081612610565b60006020828403121561265457600080fd5b81356001600160e01b03198116811461157057600080fd5b60008083601f84011261267e57600080fd5b50813567ffffffffffffffff81111561269657600080fd5b6020830191508360208260051b85010111156126b157600080fd5b9250929050565b6000806000604084860312156126cd57600080fd5b83356126d881612610565b9250602084013567ffffffffffffffff8111156126f457600080fd5b6127008682870161266c565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b8181101561274e5783516001600160a01b031683529284019291840191600101612729565b50909695505050505050565b60006020828403121561276c57600080fd5b5035919050565b6000806040838503121561278657600080fd5b82359150602083013561279881612610565b809150509250929050565b600080604083850312156127b657600080fd5b82356127c181612610565b946020939093013593505050565b600060a082840312156127e157600080fd5b50919050565b803560ff811681146127f857600080fd5b919050565b6000806040838503121561281057600080fd5b823561281b81612610565b9150612829602084016127e7565b90509250929050565b60006020828403121561284457600080fd5b611570826127e7565b60005b83811015612868578181015183820152602001612850565b83811115612877576000848401525b50505050565b6000815180845261289581602086016020860161284d565b601f01601f19169290920160200192915050565b602081526000611570602083018461287d565b600080604083850312156128cf57600080fd5b50508035926020909101359150565b600080602083850312156128f157600080fd5b823567ffffffffffffffff81111561290857600080fd5b6129148582860161266c565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561297557603f1988860301845261296385835161287d565b94509285019290850190600101612947565b5092979650505050505050565b6000806040838503121561299557600080fd5b82356129a081612610565b9150602083013561279881612610565b634e487b7160e01b600052601160045260246000fd5b600082198211156129d9576129d96129b0565b500190565b8183526000602080850194508260005b85811015612a145760ff612a01836127e7565b16875295820195908201906001016129ee565b509495945050505050565b604081526000612a336040830185876129de565b9050826020830152949350505050565b6000600019821415612a5757612a576129b0565b5060010190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081612a9957612a996129b0565b506000190190565b8135815560208201356001820155600281016040830135612ac181612610565b81546001600160a01b0319166001600160a01b039190911617905560608201356003820155608090910135600490910155565b805482526001810154602083015260028101546001600160a01b031660408301526003810154606083015260040154608090910152565b82815260c081016115706020830184612af4565b6000808335601e19843603018112612b5657600080fd5b83018035915067ffffffffffffffff821115612b7157600080fd5b6020019150368190038213156126b157600080fd5b60a08101610a9d8284612af4565b602081526000612ba86020830184866129de565b949350505050565b600082821015612bc257612bc26129b0565b500390565b6000816000190483118215151615612be157612be16129b0565b500290565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c1e81601785016020880161284d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c4f81602884016020880161284d565b01602801949350505050565b634e487b7160e01b600052603160045260246000fd5b60008251612c8381846020870161284d565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122041a9bdf311cb8812b3b8422eae2ba116e095eb6a62860f0a0f13ff01f3b10ccc64736f6c63430008090033f23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d846a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103ba5760003560e01c806378546fa2116101f4578063b3ff103c1161011a578063cff0ab96116100ad578063e970164c1161007c578063e970164c146108aa578063f7fcd303146108b2578063fa52c7d8146108db578063fce33f011461090457600080fd5b8063cff0ab9614610867578063d1bf2a6b1461086f578063d547741f14610877578063d65c5e6b1461088a57600080fd5b8063bd674f3a116100e9578063bd674f3a14610831578063bd7692f714610839578063c7e6ab0514610841578063ca15c8731461085457600080fd5b8063b3ff103c146107fa578063b521bf2d1461080d578063bba3293914610820578063bd66b16e1461082857600080fd5b80639348e4ec11610192578063a0a8e46011610161578063a0a8e460146107aa578063a217fddf146107b2578063ac9650d8146107ba578063ae24e14a146107da57600080fd5b80639348e4ec1461076057806395e3a12d14610773578063983d27371461077b57806399fb4234146107a257600080fd5b8063887b812d116101ce578063887b812d146107075780638e35b0281461071a5780639010d07c1461073a57806391d148541461074d57600080fd5b806378546fa2146106d2578063803db96d146106da578063806bc2f1146106ff57600080fd5b806336568abe116102e457806369b411701161027757806373680db41161024657806373680db41461066357806375b238fc1461067657806375d0c0dc1461069d578063768a1bfc146106b257600080fd5b806369b41170146105e55780636d70f7ae146105ef578063717af5ed14610602578063731c01a91461061557600080fd5b80635c1e4448116102b35780635c1e44481461056d57806363d21c751461058057806363e85d2d1461058a57806364cd39af146105c557600080fd5b806336568abe1461052c5780633837a1a31461053f57806356f46d7214610552578063577848ea1461056557600080fd5b806312c2d8741161035c578063248a9ca31161032b578063248a9ca3146104c357806324d7806c146104e65780632a4ebb41146104f95780632f2ff15d1461051957600080fd5b806312c2d874146104735780631c3a2341146104935780631c5afc46146104a65780631dd02197146104bb57600080fd5b806306a462391161039857806306a462391461040f5780630952ff54146104275780630e3e80ac1461044e5780630ea556361461046957600080fd5b80630161c241146103bf57806301ffc9a7146103d4578063047564b7146103fc575b600080fd5b6103d26103cd366004612625565b610917565b005b6103e76103e2366004612642565b610a78565b60405190151581526020015b60405180910390f35b6103d261040a366004612625565b610aa3565b640312e302e360dc1b5b6040519081526020016103f3565b6104197fc171260023d22a25a00a2789664c9334017843b831138c8ef03cc8897e5873d781565b7150726f746f636f6c476f7665726e616e636560701b610419565b61041962093a8081565b610419610481366004612625565b60046020526000908152604090205481565b6103d26104a13660046126b8565b610b60565b6104ae610c4f565b6040516103f3919061270d565b6103d2610c5b565b6104196104d136600461275a565b60009081526020819052604090206001015490565b6103e76104f4366004612625565b610d0a565b610419610507366004612625565b60066020526000908152604090205481565b6103d2610527366004612773565b610d66565b6103d261053a366004612773565b610d91565b6103d261054d366004612625565b610e0f565b6103d26105603660046127a3565b610f22565b6104ae611008565b6103d261057b3660046127cf565b6111b8565b61041962030d4081565b6103e76105983660046127fd565b601c546001600160a01b03831660009081526007602052604090205417600160ff83161b16151592915050565b6104196105d3366004612625565b60076020526000908152604090205481565b6104196212750081565b6103e76105fd366004612625565b61122a565b6104ae610610366004612832565b611256565b61061d611344565b6040516103f3919081518152602080830151908201526040808301516001600160a01b031690820152606080830151908201526080918201519181019190915260a00190565b6103d2610671366004612625565b61138a565b6104197ff23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d881565b6106a56113ec565b6040516103f391906128a9565b6104196106c0366004612625565b60026020526000908152604090205481565b601954610419565b601b546001600160a01b03165b6040516001600160a01b0390911681526020016103f3565b6104ae61140c565b6103d2610715366004612625565b611418565b610419610728366004612625565b60056020526000908152604090205481565b6106e76107483660046128bc565b611558565b6103e761075b366004612773565b611577565b6103e761076e3660046126b8565b6115a0565b6104ae6115d7565b6104197f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62281565b601c54610419565b6106a56115e3565b610419600081565b6107cd6107c83660046128de565b6115f6565b6040516103f39190612920565b6104196107e8366004612625565b60036020526000908152604090205481565b6106e761080836600461275a565b6116eb565b6103d261081b366004612982565b6116f8565b601a54610419565b610419600b5481565b6103d2611806565b6103d26118aa565b6103d261084f3660046126b8565b6119c6565b61041961086236600461275a565b611ab3565b61061d611aca565b6104ae611b10565b6103d2610885366004612773565b611b1c565b610419610898366004612625565b60086020526000908152604090205481565b6104ae611b42565b6106e76108c0366004612625565b6009602052600090815260409020546001600160a01b031681565b6106e76108e9366004612625565b600a602052600090815260409020546001600160a01b031681565b610419610912366004612625565b611ce5565b61091f611da4565b6001600160a01b0381166000908152600860209081526040918290205482518084019093526002835261545360f01b9183019190915290428211156109805760405162461bcd60e51b815260040161097791906128a9565b60405180910390fd5b506040805180820190915260048152631395531360e21b6020820152816109ba5760405162461bcd60e51b815260040161097791906128a9565b506001600160a01b03808316600090815260096020908152604080832054600a90925290912080546001600160a01b031916919092161790556109fe601083611d8f565b506001600160a01b038216600090815260096020908152604080832080546001600160a01b03191690556008909152812055610a3b601283611dea565b506040516001600160a01b03831690339032907fbed845dc13e95e4cf248e05941119a9e8c8c7e79700599c07a2c86c527d9f78d90600090a45050565b60006001600160e01b0319821663ca11fe0360e01b1480610a9d5750610a9d82611dff565b92915050565b610aab611da4565b6040805180820190915260048152631395531360e21b60208201526001600160a01b038216610aed5760405162461bcd60e51b815260040161097791906128a9565b506001600160a01b0381166000908152600a6020526040902080546001600160a01b0319169055610b1f601082611dea565b506040516001600160a01b03821690339032907f847e483f8de6bf96572128142c4ca8ea6846ac59ee9b73e06a4485157d64924490600090a450565b905090565b610b68611da4565b6040805180820190915260048152631395531360e21b60208201526001600160a01b038416610baa5760405162461bcd60e51b815260040161097791906128a9565b50610bb6600c84611d8f565b50610bc18282611e24565b6001600160a01b038416600090815260066020526040812091909155601a54610bea90426129c6565b6001600160a01b038516600081815260056020526040908190208390555191925090339032907f3e6606f969b1354b7fbac9654238e69d3844c5fc3d90fa6ae9b9d474236908fe90610c4190889088908890612a1f565b60405180910390a450505050565b6060610b5b6012611e73565b610c63611da4565b6000610c6f6012611e80565b905060005b818114610cd9576000610c88601282611e8a565b6001600160a01b038116600090815260096020908152604080832080546001600160a01b031916905560089091528120559050610cc6601282611dea565b505080610cd290612a43565b9050610c74565b50604051339032907f26723c59f9cf42b0dee652fc4fb4c3fca21ccf8d77b988c733fecf8991bda69390600090a350565b6000610d367ff23ec0bb4210edd5cba85afd05127efcd2fc6a781bfed49188da1081670b22d883611577565b80610a9d5750610a9d7fc171260023d22a25a00a2789664c9334017843b831138c8ef03cc8897e5873d783611577565b600082815260208190526040902060010154610d828133611e96565b610d8c8383611efa565b505050565b6001600160a01b0381163314610e015760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610977565b610e0b8282611f1c565b5050565b610e17611da4565b6001600160a01b038116600090815260046020908152604091829020548251808401909352600583526412539594d560da1b918301919091529081610e6f5760405162461bcd60e51b815260040161097791906128a9565b50604080518082019091526002815261545360f01b602082015242821115610eaa5760405162461bcd60e51b815260040161097791906128a9565b506001600160a01b038216600081815260036020908152604080832080546002845282852081905590849055600483528184209390935580519384529083018290529091339132917f99745c5bf4e5d496dd70013ac2b6bae4262c471986c2b157141d8c4d570bc039910160405180910390a3505050565b60408051808201909152600281526120ad60f11b60208201526001600160a01b038316610f625760405162461bcd60e51b815260040161097791906128a9565b50610f6b611da4565b6001600160a01b0382166000908152600360209081526040808320849055600290915290205415610fa857610fa362127500426129c6565b610faa565b425b6001600160a01b038316600081815260046020908152604091829020939093558051918252918101839052339132917fc8a6c4dcd4038ea437d00baa434c23066bf4cc6cd661a55bcb754f58d670b6e5910160405180910390a35050565b6060611012611da4565b600061101e6012611e80565b90508067ffffffffffffffff81111561103957611039612a5e565b604051908082528060200260200182016040528015611062578160200160208202803683370190505b5091506000805b8281146111b157600061107d601283611e8a565b6001600160a01b038116600090815260086020526040902054909150421061119f576001600160a01b03808216600090815260096020908152604080832054600a90925290912080546001600160a01b031916919092161790556110e2601082611d8f565b506001600160a01b038116600090815260096020908152604080832080546001600160a01b0319169055600890915281205561111f601282611dea565b508085848151811061113357611133612a74565b6001600160a01b039092166020928302919091019091015261115483612a43565b925061115f84612a8a565b6040519094506001600160a01b03821690339032907fbed845dc13e95e4cf248e05941119a9e8c8c7e79700599c07a2c86c527d9f78d90600090a46111ab565b6111a882612a43565b91505b50611069565b5082525090565b6111c0611da4565b6111c981611f3e565b8060146111d68282612aa1565b5050601a546111e590426129c6565b600b819055604051339132917f57d7abf76a9762486b1c294e2ab4c95a80cc2f6b9516cab2e39b060b3d5928b29161121f91601490612b2b565b60405180910390a350565b6000610a9d7f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62283611577565b60606000611264600e611e80565b90508067ffffffffffffffff81111561127f5761127f612a5e565b6040519080825280602002602001820160405280156112a8578160200160208202803683370190505b5091506000600160ff85161b815b8381101561133a5760006112cb600e83611e8a565b6001600160a01b038116600090815260076020526040902054909150831615611327578086858151811061130157611301612a74565b6001600160a01b03909216602092830291909101909101528361132381612a43565b9450505b508061133281612a43565b9150506112b6565b5050825250919050565b61134c6125d8565b506040805160a081018252601454815260155460208201526016546001600160a01b0316918101919091526017546060820152601854608082015290565b611392611da4565b6001600160a01b038116600081815260036020908152604080832083905560048252808320929092559051918252339132917fe157c01d7fdfb7981107455af06f96f3d8a289a8925529bb12d8a3706f2f9238910161121f565b6060610b5b7150726f746f636f6c476f7665726e616e636560701b612017565b6060610b5b600e611e73565b611420611da4565b6001600160a01b0381166000908152600560209081526040918290205482518084019093526002835261545360f01b9183019190915290428211156114785760405162461bcd60e51b815260040161097791906128a9565b506040805180820190915260048152631395531360e21b6020820152816114b25760405162461bcd60e51b815260040161097791906128a9565b506001600160a01b0382166000908152600660209081526040808320546007909252909120805490911790556114e9600e83611d8f565b506001600160a01b0382166000908152600660209081526040808320839055600590915281205561151b600c83611dea565b506040516001600160a01b03831690339032907f50df548bb5b3a2ff8dd01f8aacf26b88153fba5b749e050b9874e021a6b4a7d190600090a45050565b60008281526001602052604081206115709083611e8a565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000806115ad8484611e24565b601c546001600160a01b038716600090815260076020526040902054178116149150509392505050565b6060610b5b600c611e73565b6060610b5b640312e302e360dc1b612017565b60608167ffffffffffffffff81111561161157611611612a5e565b60405190808252806020026020018201604052801561164457816020015b606081526020019060019003908161162f5790505b50905060005b828110156116e4576116b43085858481811061166857611668612a74565b905060200281019061167a9190612b3f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061208392505050565b8282815181106116c6576116c6612a74565b602002602001018190525080806116dc90612a43565b91505061164a565b5092915050565b6000610a9d601083611e8a565b611700611da4565b6001600160a01b0382161580159061172057506001600160a01b03811615155b6040518060400160405280600281526020016120ad60f11b815250906117595760405162461bcd60e51b815260040161097791906128a9565b50611765601283611d8f565b506001600160a01b03828116600090815260096020526040812080546001600160a01b03191692841692909217909155601a546117a290426129c6565b6001600160a01b0384811660008181526008602090815260409182902085905581519387168452830184905292935091339132917fbd765521cce68f9c3fc8945fb25cb99a6b8a6d0c03f086c1e9a7ea9a24b35d97910160405180910390a4505050565b61180e611da4565b600061181a600c611e80565b905060005b818114611879576000611833600c82611e8a565b6001600160a01b038116600090815260066020908152604080832083905560059091528120559050611866600c82611dea565b50508061187290612a43565b905061181f565b50604051339032907fe65fa0190ef93820f93988cc16cbbdd3a9615c87920a2ad4de5f6610d6e2710290600090a350565b6118b2611da4565b600b546040805180820190915260048152631395531360e21b6020820152906118ee5760405162461bcd60e51b815260040161097791906128a9565b50600b5442101560405180604001604052806002815260200161545360f01b8152509061192e5760405162461bcd60e51b815260040161097791906128a9565b5060148054601990815560158054601a5560168054601b80546001600160a01b03199081166001600160a01b0384161790915560178054601c5560188054601d55600097889055948790559116909155839055829055600b91909155604051339132917f9450ccd09ec91c0d60e02db0ad62489853f47c9d2312b4db049030912e45c82f916119bc91612b86565b60405180910390a3565b6119ce611da4565b6040805180820190915260048152631395531360e21b60208201526001600160a01b038416611a105760405162461bcd60e51b815260040161097791906128a9565b506000611a1d8383611e24565b6001600160a01b03851660009081526007602052604090208054821981169182905591925080611a5457611a52600e87611dea565b505b856001600160a01b0316336001600160a01b0316326001600160a01b03167ff9133af9d3bddecefe06913c77827dcd75c3aba24b56e67afa215ef087598c9a8888604051611aa3929190612b94565b60405180910390a4505050505050565b6000818152600160205260408120610a9d90611e80565b611ad26125d8565b506040805160a0810182526019548152601a546020820152601b546001600160a01b031691810191909152601c546060820152601d54608082015290565b6060610b5b6010611e73565b600082815260208190526040902060010154611b388133611e96565b610d8c8383611f1c565b6060611b4c611da4565b6000611b58600c611e80565b9050808067ffffffffffffffff811115611b7457611b74612a5e565b604051908082528060200260200182016040528015611b9d578160200160208202803683370190505b50925060005b818114611cd1576000611bb7600c83611e8a565b6001600160a01b0381166000908152600560205260409020549091504210611cbf576001600160a01b038116600090815260066020908152604080832054600790925290912080549091179055611c0f600e82611d8f565b506001600160a01b03811660009081526006602090815260408083208390556005909152812055611c41600c82611dea565b508085611c4e8587612bb0565b81518110611c5e57611c5e612a74565b6001600160a01b0390921660209283029190910190910152611c7f83612a8a565b6040519093506001600160a01b03821690339032907f50df548bb5b3a2ff8dd01f8aacf26b88153fba5b749e050b9874e021a6b4a7d190600090a4611ccb565b611cc882612a43565b91505b50611ba3565b50611cdc8183612bb0565b83525090919050565b6001600160a01b038116600090815260026020526040812054601d54610a9d9190612bc7565b611d158282611577565b610e0b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611d4b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611570836001600160a01b0384166120a8565b611dad33610d0a565b6040518060400160405280600381526020016223292160e91b81525090611de75760405162461bcd60e51b815260040161097791906128a9565b50565b6000611570836001600160a01b0384166120f7565b60006001600160e01b0319821663d7c7e3a760e01b1480610a9d5750610a9d826121ea565b6000805b828110156116e457838382818110611e4257611e42612a74565b9050602002016020810190611e579190612832565b60ff166001901b8217915080611e6c90612a43565b9050611e28565b606060006115708361220f565b6000610a9d825490565b6000611570838361226b565b611ea08282611577565b610e0b57611eb8816001600160a01b03166014612295565b611ec3836020612295565b604051602001611ed4929190612be6565b60408051601f198184030181529082905262461bcd60e51b8252610977916004016128a9565b611f048282611d0b565b6000828152600160205260409020610d8c9082611d8f565b611f268282612431565b6000828152600160205260409020610d8c9082611dea565b803515801590611f515750602081013515155b604051806040016040528060048152602001631395531360e21b81525090611f8c5760405162461bcd60e51b815260040161097791906128a9565b5062093a8081602001351115604051806040016040528060048152602001634c494d4f60e01b81525090611fd35760405162461bcd60e51b815260040161097791906128a9565b506040805180820190915260048152634c494d4f60e01b602082015262030d4060808301351015610e0b5760405162461bcd60e51b815260040161097791906128a9565b604080516020808252818301909252606091602082018180368337019050509050602060005b60208110156120755783816020811061205857612058612a74565b1a61206557809150612075565b61206e81612a43565b905061203d565b508152602081019190915290565b60606115708383604051806060016040528060278152602001612c8e60279139612496565b60008181526001830160205260408120546120ef57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610a9d565b506000610a9d565b600081815260018301602052604081205480156121e057600061211b600183612bb0565b855490915060009061212f90600190612bb0565b905081811461219457600086600001828154811061214f5761214f612a74565b906000526020600020015490508087600001848154811061217257612172612a74565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806121a5576121a5612c5b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610a9d565b6000915050610a9d565b60006001600160e01b03198216635a05180f60e01b1480610a9d5750610a9d8261256a565b60608160000180548060200260200160405190810160405280929190818152602001828054801561225f57602002820191906000526020600020905b81548152602001906001019080831161224b575b50505050509050919050565b600082600001828154811061228257612282612a74565b9060005260206000200154905092915050565b606060006122a4836002612bc7565b6122af9060026129c6565b67ffffffffffffffff8111156122c7576122c7612a5e565b6040519080825280601f01601f1916602001820160405280156122f1576020820181803683370190505b509050600360fc1b8160008151811061230c5761230c612a74565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061233b5761233b612a74565b60200101906001600160f81b031916908160001a905350600061235f846002612bc7565b61236a9060016129c6565b90505b60018111156123e2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061239e5761239e612a74565b1a60f81b8282815181106123b4576123b4612a74565b60200101906001600160f81b031916908160001a90535060049490941c936123db81612a8a565b905061236d565b5083156115705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610977565b61243b8282611577565b15610e0b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060833b6124f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610977565b600080856001600160a01b0316856040516125109190612c71565b600060405180830381855af49150503d806000811461254b576040519150601f19603f3d011682016040523d82523d6000602084013e612550565b606091505b509150915061256082828661259f565b9695505050505050565b60006001600160e01b03198216637965db0b60e01b1480610a9d57506301ffc9a760e01b6001600160e01b0319831614610a9d565b606083156125ae575081611570565b8251156125be5782518084602001fd5b8160405162461bcd60e51b815260040161097791906128a9565b6040518060a00160405280600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b6001600160a01b0381168114611de757600080fd5b60006020828403121561263757600080fd5b813561157081612610565b60006020828403121561265457600080fd5b81356001600160e01b03198116811461157057600080fd5b60008083601f84011261267e57600080fd5b50813567ffffffffffffffff81111561269657600080fd5b6020830191508360208260051b85010111156126b157600080fd5b9250929050565b6000806000604084860312156126cd57600080fd5b83356126d881612610565b9250602084013567ffffffffffffffff8111156126f457600080fd5b6127008682870161266c565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b8181101561274e5783516001600160a01b031683529284019291840191600101612729565b50909695505050505050565b60006020828403121561276c57600080fd5b5035919050565b6000806040838503121561278657600080fd5b82359150602083013561279881612610565b809150509250929050565b600080604083850312156127b657600080fd5b82356127c181612610565b946020939093013593505050565b600060a082840312156127e157600080fd5b50919050565b803560ff811681146127f857600080fd5b919050565b6000806040838503121561281057600080fd5b823561281b81612610565b9150612829602084016127e7565b90509250929050565b60006020828403121561284457600080fd5b611570826127e7565b60005b83811015612868578181015183820152602001612850565b83811115612877576000848401525b50505050565b6000815180845261289581602086016020860161284d565b601f01601f19169290920160200192915050565b602081526000611570602083018461287d565b600080604083850312156128cf57600080fd5b50508035926020909101359150565b600080602083850312156128f157600080fd5b823567ffffffffffffffff81111561290857600080fd5b6129148582860161266c565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561297557603f1988860301845261296385835161287d565b94509285019290850190600101612947565b5092979650505050505050565b6000806040838503121561299557600080fd5b82356129a081612610565b9150602083013561279881612610565b634e487b7160e01b600052601160045260246000fd5b600082198211156129d9576129d96129b0565b500190565b8183526000602080850194508260005b85811015612a145760ff612a01836127e7565b16875295820195908201906001016129ee565b509495945050505050565b604081526000612a336040830185876129de565b9050826020830152949350505050565b6000600019821415612a5757612a576129b0565b5060010190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081612a9957612a996129b0565b506000190190565b8135815560208201356001820155600281016040830135612ac181612610565b81546001600160a01b0319166001600160a01b039190911617905560608201356003820155608090910135600490910155565b805482526001810154602083015260028101546001600160a01b031660408301526003810154606083015260040154608090910152565b82815260c081016115706020830184612af4565b6000808335601e19843603018112612b5657600080fd5b83018035915067ffffffffffffffff821115612b7157600080fd5b6020019150368190038213156126b157600080fd5b60a08101610a9d8284612af4565b602081526000612ba86020830184866129de565b949350505050565b600082821015612bc257612bc26129b0565b500390565b6000816000190483118215151615612be157612be16129b0565b500290565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c1e81601785016020880161284d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c4f81602884016020880161284d565b01602801949350505050565b634e487b7160e01b600052603160045260246000fd5b60008251612c8381846020870161284d565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122041a9bdf311cb8812b3b8422eae2ba116e095eb6a62860f0a0f13ff01f3b10ccc64736f6c63430008090033",
  "devdoc": {
    "events": {
      "AllStagedPermissionGrantsRolledBack(address,address)": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "AllStagedValidatorsRolledBack(address,address)": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "ParamsCommitted(address,address,(uint256,uint256,address,uint256,uint256))": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "params": "Committed parameters",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "ParamsStaged(address,address,uint256,(uint256,uint256,address,uint256,uint256))": {
        "params": {
          "at": "Timestamp when the pending parameters could be committed",
          "origin": "Origin of the transaction (tx.origin)",
          "params": "Pending parameters",
          "sender": "Sender of the call (msg.sender)"
        }
      },
      "PermissionGrantsCommitted(address,address,address)": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "sender": "Sender of the call (msg.sender)",
          "target": "Target address"
        }
      },
      "PermissionGrantsStaged(address,address,address,uint8[],uint256)": {
        "params": {
          "at": "Timestamp when the staged permissions could be committed",
          "origin": "Origin of the transaction (tx.origin)",
          "permissionIds": "Permission IDs to be granted",
          "sender": "Sender of the call (msg.sender)",
          "target": "Target address"
        }
      },
      "PermissionsRevoked(address,address,address,uint8[])": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "permissionIds": "Permission IDs to be revoked",
          "sender": "Sender of the call (msg.sender)",
          "target": "Target address"
        }
      },
      "ValidatorCommitted(address,address,address)": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "sender": "Sender of the call (msg.sender)",
          "target": "Target address"
        }
      },
      "ValidatorRevoked(address,address,address)": {
        "params": {
          "origin": "Origin of the transaction (tx.origin)",
          "sender": "Sender of the call (msg.sender)",
          "target": "Target address"
        }
      },
      "ValidatorStaged(address,address,address,address,uint256)": {
        "params": {
          "at": "Timestamp when the staged permissions could be committed",
          "origin": "Origin of the transaction (tx.origin)",
          "sender": "Sender of the call (msg.sender)",
          "target": "Target address",
          "validator": "Staged validator"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addressesByPermission(uint8)": {
        "params": {
          "permissionId": "Id of the permission to check."
        },
        "returns": {
          "addresses": "A list of dirty addresses."
        }
      },
      "commitAllPermissionGrantsSurpassedDelay()": {
        "returns": {
          "addresses": "An array of addresses for which permission grants were committed."
        }
      },
      "commitAllValidatorsSurpassedDelay()": {
        "returns": {
          "addressesCommitted": "Addresses for which validators were committed"
        }
      },
      "commitPermissionGrants(address)": {
        "details": "Reverts if governance delay has not passed yet.",
        "params": {
          "target": "The given address."
        }
      },
      "commitUnitPrice(address)": {
        "params": {
          "token": "Address of the token"
        }
      },
      "commitValidator(address)": {
        "details": "Reverts if governance delay has not passed yet.",
        "params": {
          "target": "The given address."
        }
      },
      "constructor": {
        "params": {
          "admin": "Initial admin of the contract"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasAllPermissions(address,uint8[])": {
        "params": {
          "permissionIds": "A list of permissions to check",
          "target": "Address to check"
        }
      },
      "hasPermission(address,uint8)": {
        "params": {
          "addr": "Address to check",
          "permissionId": "Permission to check"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "params": {
          "sender": "Adddress to check"
        },
        "returns": {
          "_0": "`true` if sender is an admin, `false` otherwise"
        }
      },
      "isOperator(address)": {
        "params": {
          "sender": "Adddress to check"
        },
        "returns": {
          "_0": "`true` if sender is an admin, `false` otherwise"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokePermissions(address,uint8[])": {
        "params": {
          "permissionIds": "A list of permission ids to revoke.",
          "target": "The given address."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "revokeValidator(address)": {
        "params": {
          "target": "The given address"
        }
      },
      "rollbackUnitPrice(address)": {
        "params": {
          "token": "Address of the token"
        }
      },
      "stageParams((uint256,uint256,address,uint256,uint256))": {
        "params": {
          "newParams": "New protocol parameters to set."
        }
      },
      "stagePermissionGrants(address,uint8[])": {
        "params": {
          "permissionIds": "A list of permission ids to grant",
          "target": "Target address"
        }
      },
      "stageUnitPrice(address,uint256)": {
        "params": {
          "token": "Address of the token",
          "value": "The amount of token"
        }
      },
      "stageValidator(address,address)": {
        "params": {
          "target": "The given address",
          "validator": "The validator for the given address"
        }
      },
      "validatorsAddress(uint256)": {
        "params": {
          "i": "The number of address"
        },
        "returns": {
          "_0": "Validator address"
        }
      },
      "withdrawLimit(address)": {
        "params": {
          "token": "Address of the token"
        },
        "returns": {
          "_0": "Withdraw limit per token per block"
        }
      }
    },
    "stateVariables": {
      "permissionMasks": {
        "params": {
          "target": "The given address"
        },
        "return": "Bitmask",
        "returns": {
          "_0": "Bitmask"
        }
      },
      "stagedParamsTimestamp": {
        "return": "Zero if there are no staged parameters, timestamp otherwise.",
        "returns": {
          "_0": "Zero if there are no staged parameters, timestamp otherwise."
        }
      },
      "stagedPermissionGrantsMasks": {
        "params": {
          "target": "The given address"
        },
        "return": "Bitmask",
        "returns": {
          "_0": "Bitmask"
        }
      },
      "stagedPermissionGrantsTimestamps": {
        "params": {
          "target": "The given address"
        },
        "return": "Zero if there are no staged permission grants, timestamp otherwise",
        "returns": {
          "_0": "Zero if there are no staged permission grants, timestamp otherwise"
        }
      },
      "stagedValidators": {
        "params": {
          "target": "The given address"
        },
        "return": "Validator",
        "returns": {
          "_0": "Validator"
        }
      },
      "stagedValidatorsTimestamps": {
        "params": {
          "target": "The given address"
        },
        "return": "Zero if there are no staged permission grants, timestamp otherwise",
        "returns": {
          "_0": "Zero if there are no staged permission grants, timestamp otherwise"
        }
      },
      "validators": {
        "params": {
          "target": "The given address"
        },
        "return": "Validator",
        "returns": {
          "_0": "Validator"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AllStagedPermissionGrantsRolledBack(address,address)": {
        "notice": "Emitted when staged permissions are rolled back"
      },
      "AllStagedValidatorsRolledBack(address,address)": {
        "notice": "Emitted when staged validators are rolled back"
      },
      "ParamsCommitted(address,address,(uint256,uint256,address,uint256,uint256))": {
        "notice": "Emitted when pending parameters are committed"
      },
      "ParamsStaged(address,address,uint256,(uint256,uint256,address,uint256,uint256))": {
        "notice": "Emitted when pending parameters are set"
      },
      "PermissionGrantsCommitted(address,address,address)": {
        "notice": "Emitted when staged permissions are comitted for specific address"
      },
      "PermissionGrantsStaged(address,address,address,uint8[],uint256)": {
        "notice": "Emitted when new permissions are staged to be granted for specific address."
      },
      "PermissionsRevoked(address,address,address,uint8[])": {
        "notice": "Emitted when permissions are revoked"
      },
      "UnitPriceCommitted(address,address,address,uint256)": {
        "notice": "UnitPrice committed"
      },
      "UnitPriceRolledBack(address,address,address)": {
        "notice": "UnitPrice rolled back"
      },
      "UnitPriceStaged(address,address,address,uint256)": {
        "notice": "UnitPrice staged for commit"
      },
      "ValidatorCommitted(address,address,address)": {
        "notice": "Emitted when staged validators are comitted for specific address"
      },
      "ValidatorRevoked(address,address,address)": {
        "notice": "Validator revoked"
      },
      "ValidatorStaged(address,address,address,address,uint256)": {
        "notice": "Emitted when validators are staged to be granted for specific address."
      }
    },
    "kind": "user",
    "methods": {
      "addressesByPermission(uint8)": {
        "notice": "Return all addresses where rawPermissionMask bit for permissionId is set to 1."
      },
      "commitAllPermissionGrantsSurpassedDelay()": {
        "notice": "Commites all staged permission grants for which governance delay passed."
      },
      "commitAllValidatorsSurpassedDelay()": {
        "notice": "Commites all staged validators for which governance delay passed"
      },
      "commitParams()": {
        "notice": "Commits staged protocol params. Reverts if governance delay has not passed yet."
      },
      "commitPermissionGrants(address)": {
        "notice": "Commits permission grants for the given address."
      },
      "commitUnitPrice(address)": {
        "notice": "Commit staged unit price"
      },
      "commitValidator(address)": {
        "notice": "Commits validator for the given address."
      },
      "constructor": {
        "notice": "Creates a new contract"
      },
      "forceAllowMask()": {
        "notice": "Permissions mask which defines if ordinary permission should be reverted. This bitmask is xored with ordinary mask."
      },
      "governanceDelay()": {
        "notice": "The delay for committing any governance params."
      },
      "hasAllPermissions(address,uint8[])": {
        "notice": "Checks if address has all permissions."
      },
      "hasPermission(address,uint8)": {
        "notice": "Checks if address has permission or given permission is force allowed for any address."
      },
      "isAdmin(address)": {
        "notice": "Checks if the address is ADMIN or ADMIN_DELEGATE."
      },
      "isOperator(address)": {
        "notice": "Checks if the address is OPERATOR."
      },
      "maxTokensPerVault()": {
        "notice": "Max different ERC20 token addresses that could be managed by the protocol."
      },
      "params()": {
        "notice": "Current protocol parameters."
      },
      "permissionAddresses()": {
        "notice": "Addresses for which non-zero permissions are set."
      },
      "permissionMasks(address)": {
        "notice": "Permission bitmask for the given address."
      },
      "protocolTreasury()": {
        "notice": "The address of the protocol treasury."
      },
      "revokePermissions(address,uint8[])": {
        "notice": "Revoke permission instantly from the given address."
      },
      "revokeValidator(address)": {
        "notice": "Revoke validator instantly from the given address."
      },
      "rollbackStagedPermissionGrants()": {
        "notice": "Rollback all staged granted permission grant."
      },
      "rollbackStagedValidators()": {
        "notice": "Rollback all staged validators."
      },
      "rollbackUnitPrice(address)": {
        "notice": "Reset staged value"
      },
      "stageParams((uint256,uint256,address,uint256,uint256))": {
        "notice": "Sets new pending params that could have been committed after governance delay expires."
      },
      "stagePermissionGrants(address,uint8[])": {
        "notice": "Stage granted permissions that could have been committed after governance delay expires. Resets commit delay and permissions if there are already staged permissions for this address."
      },
      "stageUnitPrice(address,uint256)": {
        "notice": "Stage estimated amount of token worth 1 USD staged for commit."
      },
      "stageValidator(address,address)": {
        "notice": "Stages a new validator for the given address"
      },
      "stagedParams()": {
        "notice": "Staged pending protocol parameters."
      },
      "stagedParamsTimestamp()": {
        "notice": "Timestamp after which staged pending protocol parameters can be committed"
      },
      "stagedPermissionGrantsAddresses()": {
        "notice": "Permission addresses staged for commit."
      },
      "stagedPermissionGrantsMasks(address)": {
        "notice": "Staged granted permission bitmask for the given address."
      },
      "stagedPermissionGrantsTimestamps(address)": {
        "notice": "Timestamp after which staged granted permissions for the given address can be committed."
      },
      "stagedUnitPrices(address)": {
        "notice": "Estimated amount of token worth 1 USD staged for commit."
      },
      "stagedUnitPricesTimestamps(address)": {
        "notice": "Timestamp after which staged unit prices for the given token can be committed."
      },
      "stagedValidators(address)": {
        "notice": "Staged validator for the given address."
      },
      "stagedValidatorsAddresses()": {
        "notice": "Addresses that has staged validators."
      },
      "stagedValidatorsTimestamps(address)": {
        "notice": "Timestamp after which staged granted permissions for the given address can be committed."
      },
      "unitPrices(address)": {
        "notice": "Estimated amount of token worth 1 USD."
      },
      "validators(address)": {
        "notice": "Validator for the given address."
      },
      "validatorsAddress(uint256)": {
        "notice": "Address that has validators."
      },
      "validatorsAddresses()": {
        "notice": "Addresses that has validators."
      },
      "withdrawLimit(address)": {
        "notice": "Withdraw limit per token per block."
      }
    },
    "notice": "Governance that manages all params common for Mellow Permissionless Vaults protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3824_storage)"
      },
      {
        "astId": 6026,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "unitPrices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6031,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "stagedUnitPrices",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6036,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "stagedUnitPricesTimestamps",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4677,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "stagedPermissionGrantsTimestamps",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4682,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "stagedPermissionGrantsMasks",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4687,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "permissionMasks",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4692,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "stagedValidatorsTimestamps",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4697,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "stagedValidators",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4702,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "validators",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4705,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "stagedParamsTimestamp",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4708,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "_stagedPermissionGrantsAddresses",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(AddressSet)3824_storage"
      },
      {
        "astId": 4711,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "_permissionAddresses",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(AddressSet)3824_storage"
      },
      {
        "astId": 4714,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "_validatorsAddresses",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(AddressSet)3824_storage"
      },
      {
        "astId": 4717,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "_stagedValidatorsAddresses",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(AddressSet)3824_storage"
      },
      {
        "astId": 4720,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "_stagedParams",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(Params)6831_storage"
      },
      {
        "astId": 4723,
        "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
        "label": "_params",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(Params)6831_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3824_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3824_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3824_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3823,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3523_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Params)6831_storage": {
        "encoding": "inplace",
        "label": "struct IProtocolGovernance.Params",
        "members": [
          {
            "astId": 6822,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "maxTokensPerVault",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6824,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "governanceDelay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6826,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "protocolTreasury",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6828,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "forceAllowMask",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6830,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "withdrawLimit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3523_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3518,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3522,
            "contract": "contracts/ProtocolGovernance.sol:ProtocolGovernance",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}