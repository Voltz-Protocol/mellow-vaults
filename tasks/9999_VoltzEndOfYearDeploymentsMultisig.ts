
import mustache from "mustache";
import "hardhat-deploy";
import { task } from "hardhat/config";
import { constants } from "ethers";
import path from "path";

// deployment and parametrisation done via a gnosis safe multisig 
// by submitting a json file generated by this script to the transaction builder

interface voltzEndOfYearTemplateData {
    voltzVaults: {
        marginEngine: string;
        initializeParams: VaultInitialParam;
    }[],
    tokens: {
        last: boolean;
        address: string;
    }[];
    owner: string;
    voltzVaultHelperSingleton: string;
    voltzVaultGovernance: string;
    erc20VaultGovernance: string;
    masterStrategy: string;
    erc20VaultAddress: string;
    erc20RootVaultGovernance: string;
    vaultRegistry: string;
    strategy: string;
    voltzVaultAddresses: {
        last: boolean;
        address: string;
    }[];
    vaultStrategyParams: {
        last: boolean;
        params: VaultStrategyParam;
    }[];
    vaultNFTs: {
        last: boolean;
        tokenId: number;
    }[];
}


type VaultInitialParam = {
    tickLower: number,
    tickUpper: number,
    leverageWad: string,
    marginMultiplierPostUnwindWad: string,
};

type VaultStrategyParam = {
    sigmaWad: string;
    maxPossibleLowerBoundWad: string;
    proximityWad: string;
    weight: string;
};

type VaultSetup = {
    marginEngine: string;
    vaultInitialParam: VaultInitialParam;
    vaultStrategyParam: VaultStrategyParam;
}

type NetworkSetup = { [key: string]: VaultSetup };

const ZERO_ADDRESS = "0x0000000000000000000000000000000000000000";

const setup: { [key: string]: NetworkSetup } = {
    mainnet: {
        'aUSDC_v4': { // 31 Jan 23
            marginEngine: '0x8361bcb0109eA36eE8aE18Bf513F0625F4Ac183b',
            vaultInitialParam: {
                tickLower: -2640,
                tickUpper: 3540,
                leverageWad: "50000000000000000000",
                marginMultiplierPostUnwindWad: "2000000000000000000",
            },
            vaultStrategyParam: {
                sigmaWad: "300012536197026000",
                maxPossibleLowerBoundWad: "10000000000000000000",
                proximityWad: "75426743600639900",
                weight: "100",
            }
        },

        'cDAI_v4': { // 31 Mar 23
            marginEngine: '0x720BE99ee947292Be5d0e8Ef8D8687a7bC542f73',
            vaultInitialParam: {
                tickLower: -4080,
                tickUpper: 6900,
                leverageWad: "50000000000000000000",
                marginMultiplierPostUnwindWad: "2000000000000000000",
            },
            vaultStrategyParam: {
                sigmaWad: "499999762330392000",
                maxPossibleLowerBoundWad: "10000000000000000000",
                proximityWad: "95785677123315700",
                weight: "85",
            }
        },

        'aDAI_v4': { // 31 Mar 23
            marginEngine: '0xBb3583EFc060eD1CFFFFC06A28f6B5381031B601',
            vaultInitialParam: {
                tickLower: -2640,
                tickUpper: 3540,
                leverageWad: "50000000000000000000",
                marginMultiplierPostUnwindWad: "2000000000000000000",
            },
            vaultStrategyParam: {
                sigmaWad: "300009072791141000",
                maxPossibleLowerBoundWad: "10000000000000000000",
                proximityWad: "67940410361345600",
                weight: "15",
            }
        },

        'aUSDC_v5': { // 31 Mar 23
            marginEngine: '0x295891Cc72A230bcB2C2bEa3276Ac4D470495894',
            vaultInitialParam: {
                tickLower: -2640,
                tickUpper: 3540,
                leverageWad: "50000000000000000000",
                marginMultiplierPostUnwindWad: "2000000000000000000",
            },
            vaultStrategyParam: {
                sigmaWad: "300012536197026000",
                maxPossibleLowerBoundWad: "10000000000000000000",
                proximityWad: "75426743600639900",
                weight: "100",
            }
        },

        'rETH_v2': { // 31 Mar 23
            marginEngine: '0x5E885417968b65fFAC944a2fB975C101566B4aCa',
            vaultInitialParam: {
                tickLower: -2640,
                tickUpper: 3540,
                leverageWad: "50000000000000000000",
                marginMultiplierPostUnwindWad: "2000000000000000000",
            },
            vaultStrategyParam: {
                sigmaWad: "300001378599781000",
                maxPossibleLowerBoundWad: "10000000000000000000",
                proximityWad: "89131943783069800",
                weight: "15",
            }
        },

        'stETH_v2': { // 31 Mar 23
            marginEngine: '0x626Cf6B2fBF578653f7Fa5424962972161A79de7',
            vaultInitialParam: {
                tickLower: -2640,
                tickUpper: 3540,
                leverageWad: "50000000000000000000",
                marginMultiplierPostUnwindWad: "2000000000000000000",
            },
            vaultStrategyParam: {
                sigmaWad: "300002061763262000",
                maxPossibleLowerBoundWad: "10000000000000000000",
                proximityWad: "65059023285524400",
                weight: "85",
            }
        },

        'borrow_aUSDT_v1': { // 31 Mar 23
            marginEngine: '0xB8A339Cd4eD2e69725d95931a18482269E006FF1',
            vaultInitialParam: {
                tickLower: -2640,
                tickUpper: 3540,
                leverageWad: "50000000000000000000",
                marginMultiplierPostUnwindWad: "2000000000000000000",
            },
            vaultStrategyParam: {
                sigmaWad: "300001329882793000",
                maxPossibleLowerBoundWad: "10000000000000000000",
                proximityWad: "87322878356170500",
                weight: "100",
            }
        },
    }
}

async function buildVoltzEndOfYeaMultisigDeployments(
    data: voltzEndOfYearTemplateData
) {
    // Get external template with fetch
    const fs = require("fs");
    const template = fs.readFileSync(
        path.join(__dirname, "json_templates/9999_VoltzEndOfYear.json.mustache"),
        "utf8"
    );
    const output = mustache.render(template, data);

    const file = `./tasks/jsons/9999_VoltzEndOfYear.json`;
    fs.writeFileSync(file, output);
}


task("voltz-end-of-year-deployments", "Voltz End of Year Deployments")
    .setAction(
        async (_, hre) => {
            const network = hre.network.name;
            if (!(network === 'mainnet')) {
                throw new Error("This multisig setup is specific to mainnet");
            }
            const networkSetup = setup['mainnet'];

            const { deployments, getNamedAccounts } = hre;
            const { read } = deployments;
    
            const { voltzMultisig, usdc, dai, usdt, weth, mStrategyTreasury } =
                await getNamedAccounts();

            const getTokenPadding = (token: string): string => {
                switch (token) {
                    case usdc: {
                        return "000000";
                    }
                    case usdt: {
                        return "000000";
                    }
                    case weth: {
                        return "000000000000000000";
                    }
                    case dai: {
                        return "000000000000000000";
                    }
                    default: {
                        throw new Error("Invalid token");
                    }
                }
            }

            // Set the deployment parameters

            // todo: bring the rest of the vaults once this one works

            // Mainnet 5
            const INSTANCE_NAME = `LPOptimiserStrategy-USDT_31Mar23_v2`; // save the proxy in the deployments folder using this name
            const voltzPools = ['borrow_aUSDT_v1'];
            const VAULT_CAP = 250000 * voltzPools.length; // 250,000 USDT
            const token = usdt;

            // Build the deployment parameters

            const tokens = [token].map((t) => t.toLowerCase()).sort();
            const vaultCap = (VAULT_CAP.toString()).concat(getTokenPadding(token));

            console.log("tokens", tokens);
            console.log("vaultCap", vaultCap);

            // Build the options
            const options = {
                limits: tokens.map((_: any) => constants.MaxUint256),
                strategyPerformanceTreasuryAddress: mStrategyTreasury,
                tokenLimitPerAddress: hre.ethers.constants.MaxUint256,
                tokenLimit: vaultCap,
                managementFee: "0",
                performanceFee: "0",
            };

            console.log("Options:", options);

            // Get the next available NFT of the vaultRegistry
            const startNft =
                (await read("VaultRegistry", "vaultsCount")).toNumber() + 1;

            // Get the next N NFTs for Voltz vaults (each vault is represented as an nft)
            // within the vault registry, keep track of all the vaults deployed in mellow
            let voltzVaultNfts: number[] = [];
            for (let i = 0; i < voltzPools.length; i++) {
                voltzVaultNfts.push(startNft + i);
            }

            // Get the next NFT for ERC20 vault
            let erc20VaultNft = startNft + voltzPools.length;

            console.log("Voltz vault NFTs:", voltzVaultNfts);
            console.log("ERC20 vault NFT:", erc20VaultNft);

            // Setup the Voltz vaults

            const voltzVaultHelper = (await hre.ethers.getContract("VoltzVaultHelper")).address;
            const voltzVaultGovernance = (await hre.ethers.getContract("VoltzVaultGovernance")).address;
            const erc20VaultGovernance = (await hre.ethers.getContract("ERC20VaultGovernance")).address;
            const erc20RootVaultGovernance = (await hre.ethers.getContract("ERC20RootVaultGovernance")).address;
            const masterStrategy = (await hre.ethers.getContract("LPOptimiserStrategy")).address;
            const vaultRegistry = (await hre.ethers.getContract("VaultRegistry")).address;

            const erc20VaultAddress: string = ZERO_ADDRESS; // need to be set during deployment
            const voltzVaultAddresses: string[] = new Array(voltzPools.length).fill(ZERO_ADDRESS); // need to be set during deployment
            const strategy: string = ZERO_ADDRESS; // need to be set during deployment

            const vaultNFTs = [0, 0]; // need to be set during deployment

            const data: voltzEndOfYearTemplateData = {
                voltzVaults: voltzPools.map(
                    (voltzVault: string) => {
                        return {
                            marginEngine: networkSetup[voltzVault].marginEngine,
                            initializeParams: networkSetup[voltzVault].vaultInitialParam
                        }

                    }
                ),
                voltzVaultGovernance,
                erc20VaultGovernance,
                erc20RootVaultGovernance,
                tokens: tokens.map((item, index) => {
                    return {
                        address: item,
                        last: (index + 1 === tokens.length),
                    }
                }),
                owner: voltzMultisig,
                voltzVaultHelperSingleton: voltzVaultHelper,
                masterStrategy,
                strategy,
                erc20VaultAddress,
                voltzVaultAddresses: voltzVaultAddresses.map((item, index) => {
                    return {
                        address: item,
                        last: (index + 1 === voltzVaultAddresses.length),
                    }
                }),
                vaultStrategyParams: voltzPools.map(
                    (item, index) => {
                        return {
                            params: networkSetup[item].vaultStrategyParam,
                            last: (index + 1 === voltzPools.length), 
                        };
                    }
                ),
                vaultRegistry,
                vaultNFTs: vaultNFTs.map(
                    (item, index) => {
                        return {
                            tokenId: item,
                            last: (index + 1 === vaultNFTs.length), 
                        };
                    }
                )
            };

            await buildVoltzEndOfYeaMultisigDeployments(data);
        }
    )

